
Assignment 2 Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009128  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  080092b8  080092b8  000192b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d0  080099d0  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  080099d0  080099d0  000199d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d8  080099d8  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099dc  080099dc  000199dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  080099e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000228  08009c08  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08009c08  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1c3  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002366  00000000  00000000  0002e41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00030788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  00031480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288b0  00000000  00000000  00032040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6a2  00000000  00000000  0005a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f54fb  00000000  00000000  00069f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f48d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ce4  00000000  00000000  0015f4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001641c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  001641e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092a0 	.word	0x080092a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	080092a0 	.word	0x080092a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <main>:

static void LSM6DSL_AccGyroInit(void);
static void HTS221_HumTempInit(void);

int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af02      	add	r7, sp, #8
    HAL_Init();
 8000f52:	f002 f98b 	bl	800326c <HAL_Init>
    UART1_Init();
 8000f56:	f000 fbe3 	bl	8001720 <UART1_Init>

    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f001 fb7b 	bl	8002658 <BSP_PB_Init>
    BSP_LED_Init(LED2);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f001 fb1c 	bl	80025a0 <BSP_LED_Init>

    // must init this for I2C to configure the sensors
    SENSOR_IO_Init();
 8000f68:	f001 fcbc 	bl	80028e4 <SENSOR_IO_Init>

    LSM6DSL_AccGyroInit();
 8000f6c:	f001 f82c 	bl	8001fc8 <LSM6DSL_AccGyroInit>
    HTS221_HumTempInit();
 8000f70:	f001 f8d2 	bl	8002118 <HTS221_HumTempInit>
    BSP_MAGNETO_Init();
 8000f74:	f001 fd16 	bl	80029a4 <BSP_MAGNETO_Init>
    BSP_PSENSOR_Init();
 8000f78:	f001 fd40 	bl	80029fc <BSP_PSENSOR_Init>

    // print Entering STANDBY MODE when going to STANDBY_MODE
    sprintf(uart_buffer, "Entering STANDBY MODE\r\n");
 8000f7c:	4921      	ldr	r1, [pc, #132]	; (8001004 <main+0xb8>)
 8000f7e:	4822      	ldr	r0, [pc, #136]	; (8001008 <main+0xbc>)
 8000f80:	f005 f96e 	bl	8006260 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8000f84:	4820      	ldr	r0, [pc, #128]	; (8001008 <main+0xbc>)
 8000f86:	f7ff f923 	bl	80001d0 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f92:	491d      	ldr	r1, [pc, #116]	; (8001008 <main+0xbc>)
 8000f94:	481d      	ldr	r0, [pc, #116]	; (800100c <main+0xc0>)
 8000f96:	f003 fc39 	bl	800480c <HAL_UART_Transmit>

    while (1) {
        button_press();
 8000f9a:	f000 fc45 	bl	8001828 <button_press>

        // read data if DRDY triggered
        read_ready_acc_gyro_d6d(accel_data, gyro_data, &d6d_data, &acc_thres_flag, &gyro_thres_flag);
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <main+0xc4>)
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <main+0xc8>)
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <main+0xcc>)
 8000fa6:	491d      	ldr	r1, [pc, #116]	; (800101c <main+0xd0>)
 8000fa8:	481d      	ldr	r0, [pc, #116]	; (8001020 <main+0xd4>)
 8000faa:	f000 fcad 	bl	8001908 <read_ready_acc_gyro_d6d>
        read_ready_hum_temp(&humidity_data, &temp_data, &humidity_thres_flag, &temp_thres_flag);
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <main+0xd8>)
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <main+0xdc>)
 8000fb2:	491e      	ldr	r1, [pc, #120]	; (800102c <main+0xe0>)
 8000fb4:	481e      	ldr	r0, [pc, #120]	; (8001030 <main+0xe4>)
 8000fb6:	f000 fddd 	bl	8001b74 <read_ready_hum_temp>

        switch (state) {
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <main+0xe8>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d81a      	bhi.n	8000ff8 <main+0xac>
 8000fc2:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <main+0x7c>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08000fd9 	.word	0x08000fd9
 8000fcc:	08000fe1 	.word	0x08000fe1
 8000fd0:	08000fe9 	.word	0x08000fe9
 8000fd4:	08000ff1 	.word	0x08000ff1
        case STANDBY_MODE:
            standby_mode(&state);
 8000fd8:	4816      	ldr	r0, [pc, #88]	; (8001034 <main+0xe8>)
 8000fda:	f000 f82d 	bl	8001038 <standby_mode>
            break;
 8000fde:	e00f      	b.n	8001000 <main+0xb4>
        case BATTLE_NO_LAST_OF_EE2028_MODE:
            battle_no_last_of_ee2028_mode(&state);
 8000fe0:	4814      	ldr	r0, [pc, #80]	; (8001034 <main+0xe8>)
 8000fe2:	f000 f92d 	bl	8001240 <battle_no_last_of_ee2028_mode>
            break;
 8000fe6:	e00b      	b.n	8001000 <main+0xb4>
        case BATTLE_LAST_OF_EE2028_MODE:
            battle_last_of_ee2028_mode(&state);
 8000fe8:	4812      	ldr	r0, [pc, #72]	; (8001034 <main+0xe8>)
 8000fea:	f000 faf7 	bl	80015dc <battle_last_of_ee2028_mode>
            break;
 8000fee:	e007      	b.n	8001000 <main+0xb4>
        case DEAD_MODE:
            dead_mode(&state);
 8000ff0:	4810      	ldr	r0, [pc, #64]	; (8001034 <main+0xe8>)
 8000ff2:	f000 fb77 	bl	80016e4 <dead_mode>
            break;
 8000ff6:	e003      	b.n	8001000 <main+0xb4>
        default:
            // for debugging incase state somehow get here
            led_blink(LED_10HZ);
 8000ff8:	2064      	movs	r0, #100	; 0x64
 8000ffa:	f000 fc5f 	bl	80018bc <led_blink>
            break;
 8000ffe:	bf00      	nop
        button_press();
 8001000:	e7cb      	b.n	8000f9a <main+0x4e>
 8001002:	bf00      	nop
 8001004:	080092b8 	.word	0x080092b8
 8001008:	20000254 	.word	0x20000254
 800100c:	200002d4 	.word	0x200002d4
 8001010:	20000376 	.word	0x20000376
 8001014:	20000375 	.word	0x20000375
 8001018:	20000374 	.word	0x20000374
 800101c:	20000368 	.word	0x20000368
 8001020:	2000035c 	.word	0x2000035c
 8001024:	20000391 	.word	0x20000391
 8001028:	20000390 	.word	0x20000390
 800102c:	2000038c 	.word	0x2000038c
 8001030:	20000388 	.word	0x20000388
 8001034:	20000244 	.word	0x20000244

08001038 <standby_mode>:
        }
    }
}

static void standby_mode(uint8_t* p_state)
{
 8001038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800103c:	b088      	sub	sp, #32
 800103e:	af04      	add	r7, sp, #16
 8001040:	6078      	str	r0, [r7, #4]
    // in STANDBY_MODE, LED always on
    led_blink(LED_ALWAYS_ON);
 8001042:	2000      	movs	r0, #0
 8001044:	f000 fc3a 	bl	80018bc <led_blink>

    // in STANDBY_MODE, double press to enter BATTLE_NO_LAST_OF_EE2028_MODE
    if (double_press) {
 8001048:	4b6b      	ldr	r3, [pc, #428]	; (80011f8 <standby_mode+0x1c0>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d02c      	beq.n	80010aa <standby_mode+0x72>
        // if upside down, go to BATTLE_LAST_OF_EE2028_MODE else BATTLE_NO_LAST_OF_EE2028_MODE
        uint8_t d6d_src = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_D6D_SRC);
 8001050:	211d      	movs	r1, #29
 8001052:	20d4      	movs	r0, #212	; 0xd4
 8001054:	f001 fc6a 	bl	800292c <SENSOR_IO_Read>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]

        if (d6d_src & D6D_SRC_UPSIDEDOWN) {
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	2b00      	cmp	r3, #0
 8001064:	d008      	beq.n	8001078 <standby_mode+0x40>
            *p_state = BATTLE_LAST_OF_EE2028_MODE;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2202      	movs	r2, #2
 800106a:	701a      	strb	r2, [r3, #0]
            last_of_ee2028_tick = HAL_GetTick();
 800106c:	f002 f962 	bl	8003334 <HAL_GetTick>
 8001070:	4603      	mov	r3, r0
 8001072:	4a62      	ldr	r2, [pc, #392]	; (80011fc <standby_mode+0x1c4>)
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e002      	b.n	800107e <standby_mode+0x46>
        } else {
            *p_state = BATTLE_NO_LAST_OF_EE2028_MODE;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
        }

        // print Entering BATTLE MODE when going to BATTLE_NO_LAST_OF_EE2028_MODE/BATTLE_LAST_OF_EE2028_MODE as thats how it is logically
        sprintf(uart_buffer, "Entering BATTLE MODE\r\n");
 800107e:	4960      	ldr	r1, [pc, #384]	; (8001200 <standby_mode+0x1c8>)
 8001080:	4860      	ldr	r0, [pc, #384]	; (8001204 <standby_mode+0x1cc>)
 8001082:	f005 f8ed 	bl	8006260 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001086:	485f      	ldr	r0, [pc, #380]	; (8001204 <standby_mode+0x1cc>)
 8001088:	f7ff f8a2 	bl	80001d0 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001094:	495b      	ldr	r1, [pc, #364]	; (8001204 <standby_mode+0x1cc>)
 8001096:	485c      	ldr	r0, [pc, #368]	; (8001208 <standby_mode+0x1d0>)
 8001098:	f003 fbb8 	bl	800480c <HAL_UART_Transmit>

        last_telem_tick = 0;
 800109c:	4b5b      	ldr	r3, [pc, #364]	; (800120c <standby_mode+0x1d4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]

        // clear flag
        double_press = BOOL_CLR;
 80010a2:	4b55      	ldr	r3, [pc, #340]	; (80011f8 <standby_mode+0x1c0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
        return;
 80010a8:	e0a1      	b.n	80011ee <standby_mode+0x1b6>
    }

    // in STANDBY_MODE, single press does nothing
    if (single_press) {
 80010aa:	4b59      	ldr	r3, [pc, #356]	; (8001210 <standby_mode+0x1d8>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <standby_mode+0x80>
        // does nothing, but still need to reset the flag
        single_press = BOOL_CLR;
 80010b2:	4b57      	ldr	r3, [pc, #348]	; (8001210 <standby_mode+0x1d8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
    }

    // read GMPH telem and send UART @ 1 Hz
    if (HAL_GetTick() - last_telem_tick >= 1000) {
 80010b8:	f002 f93c 	bl	8003334 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	4b53      	ldr	r3, [pc, #332]	; (800120c <standby_mode+0x1d4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010c8:	f0c0 8091 	bcc.w	80011ee <standby_mode+0x1b6>
        read_mag(mag_data);
 80010cc:	4851      	ldr	r0, [pc, #324]	; (8001214 <standby_mode+0x1dc>)
 80010ce:	f000 fd37 	bl	8001b40 <read_mag>
        pressure_data = read_pressure();
 80010d2:	f000 fd40 	bl	8001b56 <read_pressure>
 80010d6:	eef0 7a40 	vmov.f32	s15, s0
 80010da:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <standby_mode+0x1e0>)
 80010dc:	edc3 7a00 	vstr	s15, [r3]

        print_threshold_gyro();
 80010e0:	f000 fe02 	bl	8001ce8 <print_threshold_gyro>
        print_threshold_mag();
 80010e4:	f000 fe74 	bl	8001dd0 <print_threshold_mag>
        print_threshold_press();
 80010e8:	f000 ff14 	bl	8001f14 <print_threshold_press>
        print_threshold_hum();
 80010ec:	f000 fee6 	bl	8001ebc <print_threshold_hum>

        if ((gyro_thres_flag | mag_thres_flag | pressure_thres_flag | humidity_thres_flag) == BOOL_CLR) {
 80010f0:	4b4a      	ldr	r3, [pc, #296]	; (800121c <standby_mode+0x1e4>)
 80010f2:	781a      	ldrb	r2, [r3, #0]
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <standby_mode+0x1e8>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b49      	ldr	r3, [pc, #292]	; (8001224 <standby_mode+0x1ec>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4313      	orrs	r3, r2
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b48      	ldr	r3, [pc, #288]	; (8001228 <standby_mode+0x1f0>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4313      	orrs	r3, r2
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f083 0301 	eor.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d066      	beq.n	80011e4 <standby_mode+0x1ac>
            // no threshold violation, print normal telem
            // split to multiple messages to fit in buffer
            sprintf(uart_buffer, "Gx: %.2f dps, Gy: %.2f dps, Gz: %.2f dps, ", gyro_data[0], gyro_data[1], gyro_data[2]);
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <standby_mode+0x1f4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fa14 	bl	8000548 <__aeabi_f2d>
 8001120:	4680      	mov	r8, r0
 8001122:	4689      	mov	r9, r1
 8001124:	4b41      	ldr	r3, [pc, #260]	; (800122c <standby_mode+0x1f4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fa0d 	bl	8000548 <__aeabi_f2d>
 800112e:	4604      	mov	r4, r0
 8001130:	460d      	mov	r5, r1
 8001132:	4b3e      	ldr	r3, [pc, #248]	; (800122c <standby_mode+0x1f4>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fa06 	bl	8000548 <__aeabi_f2d>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001144:	e9cd 4500 	strd	r4, r5, [sp]
 8001148:	4642      	mov	r2, r8
 800114a:	464b      	mov	r3, r9
 800114c:	4938      	ldr	r1, [pc, #224]	; (8001230 <standby_mode+0x1f8>)
 800114e:	482d      	ldr	r0, [pc, #180]	; (8001204 <standby_mode+0x1cc>)
 8001150:	f005 f886 	bl	8006260 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001154:	482b      	ldr	r0, [pc, #172]	; (8001204 <standby_mode+0x1cc>)
 8001156:	f7ff f83b 	bl	80001d0 <strlen>
 800115a:	4603      	mov	r3, r0
 800115c:	b29a      	uxth	r2, r3
 800115e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001162:	4928      	ldr	r1, [pc, #160]	; (8001204 <standby_mode+0x1cc>)
 8001164:	4828      	ldr	r0, [pc, #160]	; (8001208 <standby_mode+0x1d0>)
 8001166:	f003 fb51 	bl	800480c <HAL_UART_Transmit>

            sprintf(uart_buffer, "Mx: %d mG, My: %d mG, Mz: %d mG, ", mag_data[0], mag_data[1], mag_data[2]);
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <standby_mode+0x1dc>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	461a      	mov	r2, r3
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <standby_mode+0x1dc>)
 8001174:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001178:	4619      	mov	r1, r3
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <standby_mode+0x1dc>)
 800117c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	460b      	mov	r3, r1
 8001184:	492b      	ldr	r1, [pc, #172]	; (8001234 <standby_mode+0x1fc>)
 8001186:	481f      	ldr	r0, [pc, #124]	; (8001204 <standby_mode+0x1cc>)
 8001188:	f005 f86a 	bl	8006260 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 800118c:	481d      	ldr	r0, [pc, #116]	; (8001204 <standby_mode+0x1cc>)
 800118e:	f7ff f81f 	bl	80001d0 <strlen>
 8001192:	4603      	mov	r3, r0
 8001194:	b29a      	uxth	r2, r3
 8001196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119a:	491a      	ldr	r1, [pc, #104]	; (8001204 <standby_mode+0x1cc>)
 800119c:	481a      	ldr	r0, [pc, #104]	; (8001208 <standby_mode+0x1d0>)
 800119e:	f003 fb35 	bl	800480c <HAL_UART_Transmit>

            sprintf(uart_buffer, "P: %.2f kPA, H: %.2f%%\r\n", pressure_data, humidity_data);
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <standby_mode+0x1e0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9ce 	bl	8000548 <__aeabi_f2d>
 80011ac:	4604      	mov	r4, r0
 80011ae:	460d      	mov	r5, r1
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <standby_mode+0x200>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9c7 	bl	8000548 <__aeabi_f2d>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	e9cd 2300 	strd	r2, r3, [sp]
 80011c2:	4622      	mov	r2, r4
 80011c4:	462b      	mov	r3, r5
 80011c6:	491d      	ldr	r1, [pc, #116]	; (800123c <standby_mode+0x204>)
 80011c8:	480e      	ldr	r0, [pc, #56]	; (8001204 <standby_mode+0x1cc>)
 80011ca:	f005 f849 	bl	8006260 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80011ce:	480d      	ldr	r0, [pc, #52]	; (8001204 <standby_mode+0x1cc>)
 80011d0:	f7fe fffe 	bl	80001d0 <strlen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011dc:	4909      	ldr	r1, [pc, #36]	; (8001204 <standby_mode+0x1cc>)
 80011de:	480a      	ldr	r0, [pc, #40]	; (8001208 <standby_mode+0x1d0>)
 80011e0:	f003 fb14 	bl	800480c <HAL_UART_Transmit>
        }

        last_telem_tick = HAL_GetTick();
 80011e4:	f002 f8a6 	bl	8003334 <HAL_GetTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <standby_mode+0x1d4>)
 80011ec:	6013      	str	r3, [r2, #0]
    }
}
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011f6:	bf00      	nop
 80011f8:	20000252 	.word	0x20000252
 80011fc:	20000248 	.word	0x20000248
 8001200:	080092d0 	.word	0x080092d0
 8001204:	20000254 	.word	0x20000254
 8001208:	200002d4 	.word	0x200002d4
 800120c:	20000354 	.word	0x20000354
 8001210:	20000251 	.word	0x20000251
 8001214:	20000378 	.word	0x20000378
 8001218:	20000380 	.word	0x20000380
 800121c:	20000376 	.word	0x20000376
 8001220:	2000037e 	.word	0x2000037e
 8001224:	20000384 	.word	0x20000384
 8001228:	20000390 	.word	0x20000390
 800122c:	20000368 	.word	0x20000368
 8001230:	080092e8 	.word	0x080092e8
 8001234:	08009314 	.word	0x08009314
 8001238:	20000388 	.word	0x20000388
 800123c:	08009338 	.word	0x08009338

08001240 <battle_no_last_of_ee2028_mode>:

static void battle_no_last_of_ee2028_mode(uint8_t* p_state)
{
 8001240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af04      	add	r7, sp, #16
 8001248:	6078      	str	r0, [r7, #4]
    static uint8_t gun_charge = 0;
    if (gun_charge > 10) {
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <battle_no_last_of_ee2028_mode+0xc0>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b0a      	cmp	r3, #10
 8001250:	d902      	bls.n	8001258 <battle_no_last_of_ee2028_mode+0x18>
        // incase somehow charge gets more than 10, cap at 10/10
        gun_charge = 10;
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <battle_no_last_of_ee2028_mode+0xc0>)
 8001254:	220a      	movs	r2, #10
 8001256:	701a      	strb	r2, [r3, #0]
    }

    if (gun_charge >= 5) {
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <battle_no_last_of_ee2028_mode+0xc0>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b04      	cmp	r3, #4
 800125e:	d92e      	bls.n	80012be <battle_no_last_of_ee2028_mode+0x7e>
        // each shot cost 5 units
        gun_charge -= 5;
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <battle_no_last_of_ee2028_mode+0xc0>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	3b05      	subs	r3, #5
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <battle_no_last_of_ee2028_mode+0xc0>)
 800126a:	701a      	strb	r2, [r3, #0]

        sprintf(uart_buffer, "Gun Shot:    %.*s%.*s %d%%\r\n",
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <battle_no_last_of_ee2028_mode+0xc0>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	1899      	adds	r1, r3, r2
            (gun_charge)*3, "[#][#][#][#][#][#][#][#][#][#]",
            (10 - gun_charge) * 3, "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]",
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <battle_no_last_of_ee2028_mode+0xc0>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	f1c3 020a 	rsb	r2, r3, #10
        sprintf(uart_buffer, "Gun Shot:    %.*s%.*s %d%%\r\n",
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	441a      	add	r2, r3
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <battle_no_last_of_ee2028_mode+0xc0>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	4603      	mov	r3, r0
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4403      	add	r3, r0
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <battle_no_last_of_ee2028_mode+0xc4>)
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	9200      	str	r2, [sp, #0]
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <battle_no_last_of_ee2028_mode+0xc8>)
 800129e:	460a      	mov	r2, r1
 80012a0:	491a      	ldr	r1, [pc, #104]	; (800130c <battle_no_last_of_ee2028_mode+0xcc>)
 80012a2:	481b      	ldr	r0, [pc, #108]	; (8001310 <battle_no_last_of_ee2028_mode+0xd0>)
 80012a4:	f004 ffdc 	bl	8006260 <siprintf>
            gun_charge * 10);
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80012a8:	4819      	ldr	r0, [pc, #100]	; (8001310 <battle_no_last_of_ee2028_mode+0xd0>)
 80012aa:	f7fe ff91 	bl	80001d0 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012b6:	4916      	ldr	r1, [pc, #88]	; (8001310 <battle_no_last_of_ee2028_mode+0xd0>)
 80012b8:	4816      	ldr	r0, [pc, #88]	; (8001314 <battle_no_last_of_ee2028_mode+0xd4>)
 80012ba:	f003 faa7 	bl	800480c <HAL_UART_Transmit>
    }

    // in BATTLE_NO_LAST_OF_EE2028_MODE, LED blinks at 1 Hz
    led_blink(LED_1HZ);
 80012be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c2:	f000 fafb 	bl	80018bc <led_blink>

    // in BATTLE_NO_LAST_OF_EE2028_MODE, double press to enter STANDBY_MODE
    if (double_press) {
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <battle_no_last_of_ee2028_mode+0xd8>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d02a      	beq.n	8001324 <battle_no_last_of_ee2028_mode+0xe4>
        // goes to STANDBY_MODE
        *p_state = STANDBY_MODE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]

        // print Entering STANDBY MODE when going to STANDBY_MODE
        sprintf(uart_buffer, "Entering STANDBY MODE\r\n");
 80012d4:	4911      	ldr	r1, [pc, #68]	; (800131c <battle_no_last_of_ee2028_mode+0xdc>)
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <battle_no_last_of_ee2028_mode+0xd0>)
 80012d8:	f004 ffc2 	bl	8006260 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80012dc:	480c      	ldr	r0, [pc, #48]	; (8001310 <battle_no_last_of_ee2028_mode+0xd0>)
 80012de:	f7fe ff77 	bl	80001d0 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ea:	4909      	ldr	r1, [pc, #36]	; (8001310 <battle_no_last_of_ee2028_mode+0xd0>)
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <battle_no_last_of_ee2028_mode+0xd4>)
 80012ee:	f003 fa8d 	bl	800480c <HAL_UART_Transmit>
        last_telem_tick = 0;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <battle_no_last_of_ee2028_mode+0xe0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        // clear flag
        double_press = BOOL_CLR;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <battle_no_last_of_ee2028_mode+0xd8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
        return;
 80012fe:	e134      	b.n	800156a <battle_no_last_of_ee2028_mode+0x32a>
 8001300:	20000392 	.word	0x20000392
 8001304:	08009394 	.word	0x08009394
 8001308:	08009354 	.word	0x08009354
 800130c:	08009374 	.word	0x08009374
 8001310:	20000254 	.word	0x20000254
 8001314:	200002d4 	.word	0x200002d4
 8001318:	20000252 	.word	0x20000252
 800131c:	080092b8 	.word	0x080092b8
 8001320:	20000354 	.word	0x20000354
    }

    // in BATTLE_NO_LAST_OF_EE2028_MODE, single press charge gun by 3
    if (single_press) {
 8001324:	4b93      	ldr	r3, [pc, #588]	; (8001574 <battle_no_last_of_ee2028_mode+0x334>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d031      	beq.n	8001390 <battle_no_last_of_ee2028_mode+0x150>
        gun_charge += 3;
 800132c:	4b92      	ldr	r3, [pc, #584]	; (8001578 <battle_no_last_of_ee2028_mode+0x338>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	3303      	adds	r3, #3
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b90      	ldr	r3, [pc, #576]	; (8001578 <battle_no_last_of_ee2028_mode+0x338>)
 8001336:	701a      	strb	r2, [r3, #0]

        // print gun status
        sprintf(uart_buffer, "Gun Charged: %.*s%.*s %d%%\r\n",
 8001338:	4b8f      	ldr	r3, [pc, #572]	; (8001578 <battle_no_last_of_ee2028_mode+0x338>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	1899      	adds	r1, r3, r2
            (gun_charge)*3, "[#][#][#][#][#][#][#][#][#][#]",
            (10 - gun_charge) * 3, "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]",
 8001344:	4b8c      	ldr	r3, [pc, #560]	; (8001578 <battle_no_last_of_ee2028_mode+0x338>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	f1c3 020a 	rsb	r2, r3, #10
        sprintf(uart_buffer, "Gun Charged: %.*s%.*s %d%%\r\n",
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	441a      	add	r2, r3
 8001352:	4b89      	ldr	r3, [pc, #548]	; (8001578 <battle_no_last_of_ee2028_mode+0x338>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	4603      	mov	r3, r0
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4403      	add	r3, r0
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	4b86      	ldr	r3, [pc, #536]	; (800157c <battle_no_last_of_ee2028_mode+0x33c>)
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	9200      	str	r2, [sp, #0]
 8001368:	4b85      	ldr	r3, [pc, #532]	; (8001580 <battle_no_last_of_ee2028_mode+0x340>)
 800136a:	460a      	mov	r2, r1
 800136c:	4985      	ldr	r1, [pc, #532]	; (8001584 <battle_no_last_of_ee2028_mode+0x344>)
 800136e:	4886      	ldr	r0, [pc, #536]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 8001370:	f004 ff76 	bl	8006260 <siprintf>
            gun_charge * 10);
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001374:	4884      	ldr	r0, [pc, #528]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 8001376:	f7fe ff2b 	bl	80001d0 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001382:	4981      	ldr	r1, [pc, #516]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 8001384:	4881      	ldr	r0, [pc, #516]	; (800158c <battle_no_last_of_ee2028_mode+0x34c>)
 8001386:	f003 fa41 	bl	800480c <HAL_UART_Transmit>

        // clear flag
        single_press = BOOL_CLR;
 800138a:	4b7a      	ldr	r3, [pc, #488]	; (8001574 <battle_no_last_of_ee2028_mode+0x334>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
    }

    // read TPHAGM telem and send UART @ 1 Hz
    if (HAL_GetTick() - last_telem_tick >= 1000) {
 8001390:	f001 ffd0 	bl	8003334 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	4b7e      	ldr	r3, [pc, #504]	; (8001590 <battle_no_last_of_ee2028_mode+0x350>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013a0:	f0c0 80d1 	bcc.w	8001546 <battle_no_last_of_ee2028_mode+0x306>
        pressure_data = read_pressure();
 80013a4:	f000 fbd7 	bl	8001b56 <read_pressure>
 80013a8:	eef0 7a40 	vmov.f32	s15, s0
 80013ac:	4b79      	ldr	r3, [pc, #484]	; (8001594 <battle_no_last_of_ee2028_mode+0x354>)
 80013ae:	edc3 7a00 	vstr	s15, [r3]
        read_mag(mag_data);
 80013b2:	4879      	ldr	r0, [pc, #484]	; (8001598 <battle_no_last_of_ee2028_mode+0x358>)
 80013b4:	f000 fbc4 	bl	8001b40 <read_mag>

        print_threshold_acc();
 80013b8:	f000 fc22 	bl	8001c00 <print_threshold_acc>
        print_threshold_gyro();
 80013bc:	f000 fc94 	bl	8001ce8 <print_threshold_gyro>
        print_threshold_mag();
 80013c0:	f000 fd06 	bl	8001dd0 <print_threshold_mag>
        print_threshold_hum();
 80013c4:	f000 fd7a 	bl	8001ebc <print_threshold_hum>
        print_threshold_press();
 80013c8:	f000 fda4 	bl	8001f14 <print_threshold_press>
        print_threshold_temp();
 80013cc:	f000 fdd0 	bl	8001f70 <print_threshold_temp>

        if ((acc_thres_flag | gyro_thres_flag | mag_thres_flag | pressure_thres_flag | humidity_thres_flag | temp_thres_flag) == BOOL_CLR) {
 80013d0:	4b72      	ldr	r3, [pc, #456]	; (800159c <battle_no_last_of_ee2028_mode+0x35c>)
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	4b72      	ldr	r3, [pc, #456]	; (80015a0 <battle_no_last_of_ee2028_mode+0x360>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4313      	orrs	r3, r2
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b71      	ldr	r3, [pc, #452]	; (80015a4 <battle_no_last_of_ee2028_mode+0x364>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b70      	ldr	r3, [pc, #448]	; (80015a8 <battle_no_last_of_ee2028_mode+0x368>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b6f      	ldr	r3, [pc, #444]	; (80015ac <battle_no_last_of_ee2028_mode+0x36c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b6e      	ldr	r3, [pc, #440]	; (80015b0 <battle_no_last_of_ee2028_mode+0x370>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f083 0301 	eor.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 809a 	beq.w	800153c <battle_no_last_of_ee2028_mode+0x2fc>
            // no threshold violation, print normal telem

            // split to multiple messages to fit in buffer
            sprintf(uart_buffer, "T: %.2f degC, P: %.2f kPA, H: %.2f%%, ", temp_data, pressure_data, humidity_data);
 8001408:	4b6a      	ldr	r3, [pc, #424]	; (80015b4 <battle_no_last_of_ee2028_mode+0x374>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f89b 	bl	8000548 <__aeabi_f2d>
 8001412:	4680      	mov	r8, r0
 8001414:	4689      	mov	r9, r1
 8001416:	4b5f      	ldr	r3, [pc, #380]	; (8001594 <battle_no_last_of_ee2028_mode+0x354>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f894 	bl	8000548 <__aeabi_f2d>
 8001420:	4604      	mov	r4, r0
 8001422:	460d      	mov	r5, r1
 8001424:	4b64      	ldr	r3, [pc, #400]	; (80015b8 <battle_no_last_of_ee2028_mode+0x378>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f88d 	bl	8000548 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001436:	e9cd 4500 	strd	r4, r5, [sp]
 800143a:	4642      	mov	r2, r8
 800143c:	464b      	mov	r3, r9
 800143e:	495f      	ldr	r1, [pc, #380]	; (80015bc <battle_no_last_of_ee2028_mode+0x37c>)
 8001440:	4851      	ldr	r0, [pc, #324]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 8001442:	f004 ff0d 	bl	8006260 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001446:	4850      	ldr	r0, [pc, #320]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 8001448:	f7fe fec2 	bl	80001d0 <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001454:	494c      	ldr	r1, [pc, #304]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 8001456:	484d      	ldr	r0, [pc, #308]	; (800158c <battle_no_last_of_ee2028_mode+0x34c>)
 8001458:	f003 f9d8 	bl	800480c <HAL_UART_Transmit>

            sprintf(uart_buffer, "Ax: %.2f ms-2, Ay: %.2f ms-2, Az: %.2f ms-2, ", accel_data[0], accel_data[1], accel_data[2]);
 800145c:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <battle_no_last_of_ee2028_mode+0x380>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f871 	bl	8000548 <__aeabi_f2d>
 8001466:	4680      	mov	r8, r0
 8001468:	4689      	mov	r9, r1
 800146a:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <battle_no_last_of_ee2028_mode+0x380>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f86a 	bl	8000548 <__aeabi_f2d>
 8001474:	4604      	mov	r4, r0
 8001476:	460d      	mov	r5, r1
 8001478:	4b51      	ldr	r3, [pc, #324]	; (80015c0 <battle_no_last_of_ee2028_mode+0x380>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f863 	bl	8000548 <__aeabi_f2d>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800148a:	e9cd 4500 	strd	r4, r5, [sp]
 800148e:	4642      	mov	r2, r8
 8001490:	464b      	mov	r3, r9
 8001492:	494c      	ldr	r1, [pc, #304]	; (80015c4 <battle_no_last_of_ee2028_mode+0x384>)
 8001494:	483c      	ldr	r0, [pc, #240]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 8001496:	f004 fee3 	bl	8006260 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 800149a:	483b      	ldr	r0, [pc, #236]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 800149c:	f7fe fe98 	bl	80001d0 <strlen>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a8:	4937      	ldr	r1, [pc, #220]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 80014aa:	4838      	ldr	r0, [pc, #224]	; (800158c <battle_no_last_of_ee2028_mode+0x34c>)
 80014ac:	f003 f9ae 	bl	800480c <HAL_UART_Transmit>

            sprintf(uart_buffer, "Gx: %.2f dps, Gy: %.2f dps, Gz: %.2f dps, ", gyro_data[0], gyro_data[1], gyro_data[2]);
 80014b0:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <battle_no_last_of_ee2028_mode+0x388>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f847 	bl	8000548 <__aeabi_f2d>
 80014ba:	4680      	mov	r8, r0
 80014bc:	4689      	mov	r9, r1
 80014be:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <battle_no_last_of_ee2028_mode+0x388>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f840 	bl	8000548 <__aeabi_f2d>
 80014c8:	4604      	mov	r4, r0
 80014ca:	460d      	mov	r5, r1
 80014cc:	4b3e      	ldr	r3, [pc, #248]	; (80015c8 <battle_no_last_of_ee2028_mode+0x388>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f839 	bl	8000548 <__aeabi_f2d>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014de:	e9cd 4500 	strd	r4, r5, [sp]
 80014e2:	4642      	mov	r2, r8
 80014e4:	464b      	mov	r3, r9
 80014e6:	4939      	ldr	r1, [pc, #228]	; (80015cc <battle_no_last_of_ee2028_mode+0x38c>)
 80014e8:	4827      	ldr	r0, [pc, #156]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 80014ea:	f004 feb9 	bl	8006260 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80014ee:	4826      	ldr	r0, [pc, #152]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 80014f0:	f7fe fe6e 	bl	80001d0 <strlen>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014fc:	4922      	ldr	r1, [pc, #136]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 80014fe:	4823      	ldr	r0, [pc, #140]	; (800158c <battle_no_last_of_ee2028_mode+0x34c>)
 8001500:	f003 f984 	bl	800480c <HAL_UART_Transmit>

            sprintf(uart_buffer, "Mx: %d mG, My: %d mG, Mz: %d mG\r\n", mag_data[0], mag_data[1], mag_data[2]);
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <battle_no_last_of_ee2028_mode+0x358>)
 8001506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150a:	461a      	mov	r2, r3
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <battle_no_last_of_ee2028_mode+0x358>)
 800150e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001512:	4619      	mov	r1, r3
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <battle_no_last_of_ee2028_mode+0x358>)
 8001516:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	460b      	mov	r3, r1
 800151e:	492c      	ldr	r1, [pc, #176]	; (80015d0 <battle_no_last_of_ee2028_mode+0x390>)
 8001520:	4819      	ldr	r0, [pc, #100]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 8001522:	f004 fe9d 	bl	8006260 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001526:	4818      	ldr	r0, [pc, #96]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 8001528:	f7fe fe52 	bl	80001d0 <strlen>
 800152c:	4603      	mov	r3, r0
 800152e:	b29a      	uxth	r2, r3
 8001530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001534:	4914      	ldr	r1, [pc, #80]	; (8001588 <battle_no_last_of_ee2028_mode+0x348>)
 8001536:	4815      	ldr	r0, [pc, #84]	; (800158c <battle_no_last_of_ee2028_mode+0x34c>)
 8001538:	f003 f968 	bl	800480c <HAL_UART_Transmit>
        }

        last_telem_tick = HAL_GetTick();
 800153c:	f001 fefa 	bl	8003334 <HAL_GetTick>
 8001540:	4603      	mov	r3, r0
 8001542:	4a13      	ldr	r2, [pc, #76]	; (8001590 <battle_no_last_of_ee2028_mode+0x350>)
 8001544:	6013      	str	r3, [r2, #0]
    }

    // if upside down, go to BATTLE_LAST_OF_EE2028_MODE
    if (d6d_data & D6D_SRC_UPSIDEDOWN) {
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <battle_no_last_of_ee2028_mode+0x394>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00b      	beq.n	800156a <battle_no_last_of_ee2028_mode+0x32a>
        *p_state = BATTLE_LAST_OF_EE2028_MODE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2202      	movs	r2, #2
 8001556:	701a      	strb	r2, [r3, #0]
        last_telem_tick = 0;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <battle_no_last_of_ee2028_mode+0x350>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
        last_of_ee2028_tick = HAL_GetTick();
 800155e:	f001 fee9 	bl	8003334 <HAL_GetTick>
 8001562:	4603      	mov	r3, r0
 8001564:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <battle_no_last_of_ee2028_mode+0x398>)
 8001566:	6013      	str	r3, [r2, #0]
        return;
 8001568:	bf00      	nop
    }
}
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001572:	bf00      	nop
 8001574:	20000251 	.word	0x20000251
 8001578:	20000392 	.word	0x20000392
 800157c:	08009394 	.word	0x08009394
 8001580:	08009354 	.word	0x08009354
 8001584:	080093b4 	.word	0x080093b4
 8001588:	20000254 	.word	0x20000254
 800158c:	200002d4 	.word	0x200002d4
 8001590:	20000354 	.word	0x20000354
 8001594:	20000380 	.word	0x20000380
 8001598:	20000378 	.word	0x20000378
 800159c:	20000375 	.word	0x20000375
 80015a0:	20000376 	.word	0x20000376
 80015a4:	2000037e 	.word	0x2000037e
 80015a8:	20000384 	.word	0x20000384
 80015ac:	20000390 	.word	0x20000390
 80015b0:	20000391 	.word	0x20000391
 80015b4:	2000038c 	.word	0x2000038c
 80015b8:	20000388 	.word	0x20000388
 80015bc:	080093d4 	.word	0x080093d4
 80015c0:	2000035c 	.word	0x2000035c
 80015c4:	080093fc 	.word	0x080093fc
 80015c8:	20000368 	.word	0x20000368
 80015cc:	080092e8 	.word	0x080092e8
 80015d0:	0800942c 	.word	0x0800942c
 80015d4:	20000374 	.word	0x20000374
 80015d8:	20000248 	.word	0x20000248

080015dc <battle_last_of_ee2028_mode>:

static void battle_last_of_ee2028_mode(uint8_t* p_state)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    // in BATTLE_LAST_OF_EE2028_MODE, LED blinks at 2 Hz
    led_blink(LED_2HZ);
 80015e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e8:	f000 f968 	bl	80018bc <led_blink>

    // send help UART @ 1 Hz
    if (HAL_GetTick() - last_telem_tick >= 1000) {
 80015ec:	f001 fea2 	bl	8003334 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <battle_last_of_ee2028_mode+0xe4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015fc:	d313      	bcc.n	8001626 <battle_last_of_ee2028_mode+0x4a>
        sprintf(uart_buffer, "Drone Was Attacked! \r\n");
 80015fe:	4931      	ldr	r1, [pc, #196]	; (80016c4 <battle_last_of_ee2028_mode+0xe8>)
 8001600:	4831      	ldr	r0, [pc, #196]	; (80016c8 <battle_last_of_ee2028_mode+0xec>)
 8001602:	f004 fe2d 	bl	8006260 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001606:	4830      	ldr	r0, [pc, #192]	; (80016c8 <battle_last_of_ee2028_mode+0xec>)
 8001608:	f7fe fde2 	bl	80001d0 <strlen>
 800160c:	4603      	mov	r3, r0
 800160e:	b29a      	uxth	r2, r3
 8001610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001614:	492c      	ldr	r1, [pc, #176]	; (80016c8 <battle_last_of_ee2028_mode+0xec>)
 8001616:	482d      	ldr	r0, [pc, #180]	; (80016cc <battle_last_of_ee2028_mode+0xf0>)
 8001618:	f003 f8f8 	bl	800480c <HAL_UART_Transmit>
        last_telem_tick = HAL_GetTick();
 800161c:	f001 fe8a 	bl	8003334 <HAL_GetTick>
 8001620:	4603      	mov	r3, r0
 8001622:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <battle_last_of_ee2028_mode+0xe4>)
 8001624:	6013      	str	r3, [r2, #0]
    }

    // TODO Disable interupt for telem monitoring

    // in STANDBY_MODE, single press does nothing
    if (single_press) {
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <battle_last_of_ee2028_mode+0xf4>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <battle_last_of_ee2028_mode+0x58>
        // does nothing, but still need to reset the flag
        single_press = BOOL_CLR;
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <battle_last_of_ee2028_mode+0xf4>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
    }

    // in BATTLE_LAST_OF_EE2028_MODE, double press within 10 s to enter BATTLE_NO_LAST_OF_EE2028_MODE else DEAD_MODE
    if (HAL_GetTick() - last_of_ee2028_tick <= 10000) {
 8001634:	f001 fe7e 	bl	8003334 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <battle_last_of_ee2028_mode+0xf8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f242 7210 	movw	r2, #10000	; 0x2710
 8001644:	4293      	cmp	r3, r2
 8001646:	d824      	bhi.n	8001692 <battle_last_of_ee2028_mode+0xb6>
        if (double_press) {
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <battle_last_of_ee2028_mode+0xfc>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d033      	beq.n	80016b8 <battle_last_of_ee2028_mode+0xdc>
            uint8_t d6d_src = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_D6D_SRC);
 8001650:	211d      	movs	r1, #29
 8001652:	20d4      	movs	r0, #212	; 0xd4
 8001654:	f001 f96a 	bl	800292c <SENSOR_IO_Read>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]

            // if not upside down, go to BATTLE_NO_LAST_OF_EE2028_MODE
            if (!(d6d_src & D6D_SRC_UPSIDEDOWN)) {
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	d111      	bne.n	800168a <battle_last_of_ee2028_mode+0xae>
                *p_state = BATTLE_NO_LAST_OF_EE2028_MODE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
                sprintf(uart_buffer, "Rescued :D \r\n");
 800166c:	491b      	ldr	r1, [pc, #108]	; (80016dc <battle_last_of_ee2028_mode+0x100>)
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <battle_last_of_ee2028_mode+0xec>)
 8001670:	f004 fdf6 	bl	8006260 <siprintf>
                HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001674:	4814      	ldr	r0, [pc, #80]	; (80016c8 <battle_last_of_ee2028_mode+0xec>)
 8001676:	f7fe fdab 	bl	80001d0 <strlen>
 800167a:	4603      	mov	r3, r0
 800167c:	b29a      	uxth	r2, r3
 800167e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001682:	4911      	ldr	r1, [pc, #68]	; (80016c8 <battle_last_of_ee2028_mode+0xec>)
 8001684:	4811      	ldr	r0, [pc, #68]	; (80016cc <battle_last_of_ee2028_mode+0xf0>)
 8001686:	f003 f8c1 	bl	800480c <HAL_UART_Transmit>
            }

            double_press = BOOL_CLR;
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <battle_last_of_ee2028_mode+0xfc>)
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
            return;
 8001690:	e012      	b.n	80016b8 <battle_last_of_ee2028_mode+0xdc>
        }
    } else {
        // goes to DEAD_MODE
        *p_state = DEAD_MODE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2203      	movs	r2, #3
 8001696:	701a      	strb	r2, [r3, #0]
        sprintf(uart_buffer, "Dead :( \r\n");
 8001698:	4911      	ldr	r1, [pc, #68]	; (80016e0 <battle_last_of_ee2028_mode+0x104>)
 800169a:	480b      	ldr	r0, [pc, #44]	; (80016c8 <battle_last_of_ee2028_mode+0xec>)
 800169c:	f004 fde0 	bl	8006260 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <battle_last_of_ee2028_mode+0xec>)
 80016a2:	f7fe fd95 	bl	80001d0 <strlen>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ae:	4906      	ldr	r1, [pc, #24]	; (80016c8 <battle_last_of_ee2028_mode+0xec>)
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <battle_last_of_ee2028_mode+0xf0>)
 80016b2:	f003 f8ab 	bl	800480c <HAL_UART_Transmit>
        return;
 80016b6:	bf00      	nop
    }
}
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000354 	.word	0x20000354
 80016c4:	08009450 	.word	0x08009450
 80016c8:	20000254 	.word	0x20000254
 80016cc:	200002d4 	.word	0x200002d4
 80016d0:	20000251 	.word	0x20000251
 80016d4:	20000248 	.word	0x20000248
 80016d8:	20000252 	.word	0x20000252
 80016dc:	08009468 	.word	0x08009468
 80016e0:	08009478 	.word	0x08009478

080016e4 <dead_mode>:

static void dead_mode(uint8_t* p_state)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
    // in DEAD_MODE, LED blinks at 2 Hz
    led_blink(LED_2HZ);
 80016ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016f0:	f000 f8e4 	bl	80018bc <led_blink>

    // in DEAD_MODE, double press does nothing
    if (double_press) {
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <dead_mode+0x34>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <dead_mode+0x1e>
        // does nothing, but still need to reset the flag
        double_press = BOOL_CLR;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <dead_mode+0x34>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
    }

    // in DEAD_MODE, single press does nothing
    if (single_press) {
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <dead_mode+0x38>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <dead_mode+0x2c>
        // does nothing, but still need to reset the flag
        single_press = BOOL_CLR;
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <dead_mode+0x38>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
    }
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000252 	.word	0x20000252
 800171c:	20000251 	.word	0x20000251

08001720 <UART1_Init>:

static void UART1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
    /* Pin configuration for UART. BSP_COM_Init() can do this automatically */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <UART1_Init+0xa0>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <UART1_Init+0xa0>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <UART1_Init+0xa0>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800174c:	2307      	movs	r3, #7
 800174e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 8001750:	23c0      	movs	r3, #192	; 0xc0
 8001752:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4619      	mov	r1, r3
 8001764:	4817      	ldr	r0, [pc, #92]	; (80017c4 <UART1_Init+0xa4>)
 8001766:	f001 ff03 	bl	8003570 <HAL_GPIO_Init>

    /* Configuring UART1 */
    huart1.Instance = USART1;
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <UART1_Init+0xa8>)
 800176c:	4a17      	ldr	r2, [pc, #92]	; (80017cc <UART1_Init+0xac>)
 800176e:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <UART1_Init+0xa8>)
 8001772:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001776:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <UART1_Init+0xa8>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <UART1_Init+0xa8>)
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <UART1_Init+0xa8>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <UART1_Init+0xa8>)
 800178c:	220c      	movs	r2, #12
 800178e:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <UART1_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <UART1_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <UART1_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <UART1_Init+0xa8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 80017a8:	4807      	ldr	r0, [pc, #28]	; (80017c8 <UART1_Init+0xa8>)
 80017aa:	f002 ffe1 	bl	8004770 <HAL_UART_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d000      	beq.n	80017b6 <UART1_Init+0x96>
        while (1) { }
 80017b4:	e7fe      	b.n	80017b4 <UART1_Init+0x94>
    }
}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	48000400 	.word	0x48000400
 80017c8:	200002d4 	.word	0x200002d4
 80017cc:	40013800 	.word	0x40013800

080017d0 <HAL_GPIO_EXTI_Callback>:
 * @brief ISR for GPIO
 * @param uint16_t GPIO_Pin
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	80fb      	strh	r3, [r7, #6]
    // button
    if (GPIO_Pin == USER_BUTTON_PIN) {
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017e0:	d107      	bne.n	80017f2 <HAL_GPIO_EXTI_Callback+0x22>
        button_press_tick = HAL_GetTick();
 80017e2:	f001 fda7 	bl	8003334 <HAL_GetTick>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_GPIO_EXTI_Callback+0x48>)
 80017ea:	6013      	str	r3, [r2, #0]
        button_flag = BOOL_SET;
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_GPIO_EXTI_Callback+0x4c>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
    }

    // EXTI from LSM6DSL, flag to read Accel Data, Gyro Data and LSM6DSL_ACC_GYRO_D6D_SRC
    if (GPIO_Pin == GPIO_PIN_11) {
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017f8:	d102      	bne.n	8001800 <HAL_GPIO_EXTI_Callback+0x30>
        acc_gyro_d6d_ready = BOOL_SET;
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_GPIO_EXTI_Callback+0x50>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
    }

    // EXTI from HTS221, flag to read Humidity and Temperature
    if (GPIO_Pin == GPIO_PIN_15) {
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001806:	d102      	bne.n	800180e <HAL_GPIO_EXTI_Callback+0x3e>
        hum_temp_ready = BOOL_SET;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_GPIO_EXTI_Callback+0x54>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
    }
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000024c 	.word	0x2000024c
 800181c:	20000250 	.word	0x20000250
 8001820:	20000358 	.word	0x20000358
 8001824:	20000000 	.word	0x20000000

08001828 <button_press>:
 * double press changes the single_press and double_press global variable
 * @param None
 * @retval None
 */
static void button_press(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
    static uint32_t button_last_tick = 0;
    static bool button_wait_flag = BOOL_CLR;

    if (button_flag == BOOL_SET) {
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <button_press+0x7c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d01e      	beq.n	8001874 <button_press+0x4c>
        if (button_press_tick - button_last_tick > 500) {
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <button_press+0x80>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <button_press+0x84>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001844:	d907      	bls.n	8001856 <button_press+0x2e>
            // new event: either a single click or the first click of a double click
            button_last_tick = button_press_tick;
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <button_press+0x80>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a18      	ldr	r2, [pc, #96]	; (80018ac <button_press+0x84>)
 800184c:	6013      	str	r3, [r2, #0]
            button_wait_flag = BOOL_SET; // used to check for single press later
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <button_press+0x88>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	e00b      	b.n	800186e <button_press+0x46>
        } else {
            // forces the next click to be a new event
            // prevents triple click within 500ms to be taken as two double clicks
            button_last_tick = 0;
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <button_press+0x84>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

            // the last time pressed is within 500ms ==> double press
            double_press = BOOL_SET;
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <button_press+0x8c>)
 800185e:	2201      	movs	r2, #1
 8001860:	701a      	strb	r2, [r3, #0]
            single_press = BOOL_CLR;
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <button_press+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
            button_wait_flag = BOOL_CLR;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <button_press+0x88>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
        }
        button_flag = BOOL_CLR;
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <button_press+0x7c>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
    }

    if (button_wait_flag == BOOL_SET && (HAL_GetTick() - button_last_tick > 500)) {
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <button_press+0x88>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d011      	beq.n	80018a0 <button_press+0x78>
 800187c:	f001 fd5a 	bl	8003334 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <button_press+0x84>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800188c:	d908      	bls.n	80018a0 <button_press+0x78>
        // wait for 0.5 to decide its single press or not
        double_press = BOOL_CLR;
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <button_press+0x8c>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
        single_press = BOOL_SET;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <button_press+0x90>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
        button_wait_flag = BOOL_CLR;
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <button_press+0x88>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
    }
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000250 	.word	0x20000250
 80018a8:	2000024c 	.word	0x2000024c
 80018ac:	20000394 	.word	0x20000394
 80018b0:	20000398 	.word	0x20000398
 80018b4:	20000252 	.word	0x20000252
 80018b8:	20000251 	.word	0x20000251

080018bc <led_blink>:
 * always on
 * @param uint32_t period
 * @retval None
 */
static void led_blink(uint32_t period)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    static uint32_t last_tick = 0;
    if (period == LED_ALWAYS_ON) {
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d103      	bne.n	80018d2 <led_blink+0x16>
        BSP_LED_On(LED2);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 fe98 	bl	8002600 <BSP_LED_On>
    } else if ((HAL_GetTick() - last_tick) >= (period >> 1)) {
        // toggle every half a period, >> 1  to aproximate half, duty cycle is 50%
        BSP_LED_Toggle(LED2);
        last_tick = HAL_GetTick();
    }
}
 80018d0:	e011      	b.n	80018f6 <led_blink+0x3a>
    } else if ((HAL_GetTick() - last_tick) >= (period >> 1)) {
 80018d2:	f001 fd2f 	bl	8003334 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <led_blink+0x44>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	1ad2      	subs	r2, r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	085b      	lsrs	r3, r3, #1
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d307      	bcc.n	80018f6 <led_blink+0x3a>
        BSP_LED_Toggle(LED2);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 fea0 	bl	800262c <BSP_LED_Toggle>
        last_tick = HAL_GetTick();
 80018ec:	f001 fd22 	bl	8003334 <HAL_GetTick>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a03      	ldr	r2, [pc, #12]	; (8001900 <led_blink+0x44>)
 80018f4:	6013      	str	r3, [r2, #0]
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000039c 	.word	0x2000039c
 8001904:	00000000 	.word	0x00000000

08001908 <read_ready_acc_gyro_d6d>:
 * @param p_acc_thres_flag pointer bool for the threshold monitoring
 * @param p_gyro_thres_flag pointer bool for the threshold monitoring
 * @retval None
 */
static void read_ready_acc_gyro_d6d(float* p_acc, float* p_gyro, uint8_t* p_d6d, bool* p_acc_thres_flag, bool* p_gyro_thres_flag)
{
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
    // only read when data is ready to reduce I2C overhead and unnecessary reads
    if (acc_gyro_d6d_ready == BOOL_SET) {
 8001916:	4b86      	ldr	r3, [pc, #536]	; (8001b30 <read_ready_acc_gyro_d6d+0x228>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80fb 	beq.w	8001b18 <read_ready_acc_gyro_d6d+0x210>
        int16_t accel_data_i16[3] = { 0 }; // array to store the x, y and z readings.
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	809a      	strh	r2, [r3, #4]
        LSM6DSL_AccReadXYZ(accel_data_i16); // read accelerometer
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fb6f 	bl	8003014 <LSM6DSL_AccReadXYZ>
        // the function above returns 16 bit integers which are acceleration in mg (9.8/1000 m/s^2).
        // Converting to float in m/s^2
        for (int i = 0; i < 3; i++) {
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
 800193a:	e021      	b.n	8001980 <read_ready_acc_gyro_d6d+0x78>
            *(p_acc + i) = (float)accel_data_i16[i] * (9.8 / 1000.0f);
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	3328      	adds	r3, #40	; 0x28
 8001942:	443b      	add	r3, r7
 8001944:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001950:	ee17 0a90 	vmov	r0, s15
 8001954:	f7fe fdf8 	bl	8000548 <__aeabi_f2d>
 8001958:	a371      	add	r3, pc, #452	; (adr r3, 8001b20 <read_ready_acc_gyro_d6d+0x218>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe4b 	bl	80005f8 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	18d4      	adds	r4, r2, r3
 8001972:	f7ff f919 	bl	8000ba8 <__aeabi_d2f>
 8001976:	4603      	mov	r3, r0
 8001978:	6023      	str	r3, [r4, #0]
        for (int i = 0; i < 3; i++) {
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	3301      	adds	r3, #1
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	2b02      	cmp	r3, #2
 8001984:	ddda      	ble.n	800193c <read_ready_acc_gyro_d6d+0x34>
        }

        // the function does sensitivity conversion to mdps and returns float in mdps
        LSM6DSL_GyroReadXYZAngRate(p_gyro);
 8001986:	68b8      	ldr	r0, [r7, #8]
 8001988:	f001 fbdc 	bl	8003144 <LSM6DSL_GyroReadXYZAngRate>
        // Converting to float in dps
        for (int i = 0; i < 3; i++) {
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
 8001990:	e012      	b.n	80019b8 <read_ready_acc_gyro_d6d+0xb0>
            *(p_gyro + i) = *(p_gyro + i) / 1000.0f;
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	4413      	add	r3, r2
 800199a:	ed93 7a00 	vldr	s14, [r3]
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	4413      	add	r3, r2
 80019a6:	eddf 6a63 	vldr	s13, [pc, #396]	; 8001b34 <read_ready_acc_gyro_d6d+0x22c>
 80019aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ae:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	3301      	adds	r3, #1
 80019b6:	623b      	str	r3, [r7, #32]
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	dde9      	ble.n	8001992 <read_ready_acc_gyro_d6d+0x8a>
        }

        // flag threshold if the magnitude exceed
        float magnitude = pow(*(p_acc), 2) + pow(*(p_acc + 1), 2) + pow(*(p_acc + 2), 2);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdc0 	bl	8000548 <__aeabi_f2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8001b28 <read_ready_acc_gyro_d6d+0x220>
 80019d0:	ec43 2b10 	vmov	d0, r2, r3
 80019d4:	f006 fd14 	bl	8008400 <pow>
 80019d8:	ec55 4b10 	vmov	r4, r5, d0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3304      	adds	r3, #4
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fdb0 	bl	8000548 <__aeabi_f2d>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8001b28 <read_ready_acc_gyro_d6d+0x220>
 80019f0:	ec43 2b10 	vmov	d0, r2, r3
 80019f4:	f006 fd04 	bl	8008400 <pow>
 80019f8:	ec53 2b10 	vmov	r2, r3, d0
 80019fc:	4620      	mov	r0, r4
 80019fe:	4629      	mov	r1, r5
 8001a00:	f7fe fc44 	bl	800028c <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4614      	mov	r4, r2
 8001a0a:	461d      	mov	r5, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3308      	adds	r3, #8
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd98 	bl	8000548 <__aeabi_f2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8001b28 <read_ready_acc_gyro_d6d+0x220>
 8001a20:	ec43 2b10 	vmov	d0, r2, r3
 8001a24:	f006 fcec 	bl	8008400 <pow>
 8001a28:	ec53 2b10 	vmov	r2, r3, d0
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	4629      	mov	r1, r5
 8001a30:	f7fe fc2c 	bl	800028c <__adddf3>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f8b4 	bl	8000ba8 <__aeabi_d2f>
 8001a40:	4603      	mov	r3, r0
 8001a42:	61fb      	str	r3, [r7, #28]
        *p_acc_thres_flag = (magnitude > ACCEL_SQR_UPPER_THRES) ? BOOL_SET : BOOL_CLR;
 8001a44:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a48:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001b38 <read_ready_acc_gyro_d6d+0x230>
 8001a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a54:	bfcc      	ite	gt
 8001a56:	2301      	movgt	r3, #1
 8001a58:	2300      	movle	r3, #0
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	701a      	strb	r2, [r3, #0]

        magnitude = pow(*(p_gyro), 2) + pow(*(p_gyro + 1), 2) + pow(*(p_gyro + 2), 2);
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd6f 	bl	8000548 <__aeabi_f2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8001b28 <read_ready_acc_gyro_d6d+0x220>
 8001a72:	ec43 2b10 	vmov	d0, r2, r3
 8001a76:	f006 fcc3 	bl	8008400 <pow>
 8001a7a:	ec55 4b10 	vmov	r4, r5, d0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	3304      	adds	r3, #4
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd5f 	bl	8000548 <__aeabi_f2d>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001b28 <read_ready_acc_gyro_d6d+0x220>
 8001a92:	ec43 2b10 	vmov	d0, r2, r3
 8001a96:	f006 fcb3 	bl	8008400 <pow>
 8001a9a:	ec53 2b10 	vmov	r2, r3, d0
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fbf3 	bl	800028c <__adddf3>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4614      	mov	r4, r2
 8001aac:	461d      	mov	r5, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	3308      	adds	r3, #8
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd47 	bl	8000548 <__aeabi_f2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001b28 <read_ready_acc_gyro_d6d+0x220>
 8001ac2:	ec43 2b10 	vmov	d0, r2, r3
 8001ac6:	f006 fc9b 	bl	8008400 <pow>
 8001aca:	ec53 2b10 	vmov	r2, r3, d0
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe fbdb 	bl	800028c <__adddf3>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff f863 	bl	8000ba8 <__aeabi_d2f>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	61fb      	str	r3, [r7, #28]
        *p_gyro_thres_flag = (magnitude > GYRO_SQR_UPPER_THRES) ? BOOL_SET : BOOL_CLR;
 8001ae6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aea:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001b3c <read_ready_acc_gyro_d6d+0x234>
 8001aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af6:	bfcc      	ite	gt
 8001af8:	2301      	movgt	r3, #1
 8001afa:	2300      	movle	r3, #0
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b00:	701a      	strb	r2, [r3, #0]

        // read the D6D register to give the orientation
        *p_d6d = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_D6D_SRC);
 8001b02:	211d      	movs	r1, #29
 8001b04:	20d4      	movs	r0, #212	; 0xd4
 8001b06:	f000 ff11 	bl	800292c <SENSOR_IO_Read>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	701a      	strb	r2, [r3, #0]

        // clear the DRDY flag
        acc_gyro_d6d_ready = BOOL_CLR;
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <read_ready_acc_gyro_d6d+0x228>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
    }
}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b20:	bc01a36f 	.word	0xbc01a36f
 8001b24:	3f841205 	.word	0x3f841205
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	40000000 	.word	0x40000000
 8001b30:	20000358 	.word	0x20000358
 8001b34:	447a0000 	.word	0x447a0000
 8001b38:	42f20000 	.word	0x42f20000
 8001b3c:	461c4000 	.word	0x461c4000

08001b40 <read_mag>:
 * @brief read mag from LIS3MDL
 * @param int16_t* p_mag pointer to int16_t array of 3 elements
 * @retval None
 */
static void read_mag(int16_t* p_mag)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
    // the function that actually reads the xyz is LIS3MDL_MagReadXYZ in lis3mdl.c
    // the function also does sensitivity conversion to mGauss
    // returns int16_t in mGauss
    LIS3MDL_MagReadXYZ(p_mag);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f001 f91b 	bl	8002d84 <LIS3MDL_MagReadXYZ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <read_pressure>:
 * @brief read pressure from LPS22HB
 * @param None
 * @retval humidity
 */
static float read_pressure(void)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	af00      	add	r7, sp, #0
    // the function that actually reads the value is LPS22HB_P_ReadPressure in lps22hb.c
    // returns as float in hPa, the read does the concatenation of 3 bytes, 2's complement and *100/4096 then /100
    // divide 10 to convert to kPa
    return BSP_PSENSOR_ReadPressure() / 10;
 8001b5a:	f000 ff6f 	bl	8002a3c <BSP_PSENSOR_ReadPressure>
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
 8001b62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b6a:	eef0 7a66 	vmov.f32	s15, s13
}
 8001b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <read_ready_hum_temp>:
 * @param humidity_thres_flag pointer to bool flag
 * @param temp_thres_flag pointer to bool flag
 * @retval None
 */
static void read_ready_hum_temp(float* p_hum, float* p_temp, bool* humidity_thres_flag, bool* temp_thres_flag)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
    if (hum_temp_ready == BOOL_SET) {
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <read_ready_hum_temp+0x84>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d030      	beq.n	8001bee <read_ready_hum_temp+0x7a>
        // returns as float in %
        *p_hum = HTS221_H_ReadHumidity(HTS221_I2C_ADDRESS);
 8001b8c:	20be      	movs	r0, #190	; 0xbe
 8001b8e:	f000 ff63 	bl	8002a58 <HTS221_H_ReadHumidity>
 8001b92:	eef0 7a40 	vmov.f32	s15, s0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	edc3 7a00 	vstr	s15, [r3]

        // returns as float in deg c
        *p_temp = HTS221_T_ReadTemp(HTS221_I2C_ADDRESS);
 8001b9c:	20be      	movs	r0, #190	; 0xbe
 8001b9e:	f000 fff7 	bl	8002b90 <HTS221_T_ReadTemp>
 8001ba2:	eef0 7a40 	vmov.f32	s15, s0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	edc3 7a00 	vstr	s15, [r3]

        // flag threshold if the magnitude exceed
        *humidity_thres_flag = *p_hum < HUM_LOWER_THRES ? BOOL_SET : BOOL_CLR;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001bfc <read_ready_hum_temp+0x88>
 8001bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	bf4c      	ite	mi
 8001bc0:	2301      	movmi	r3, #1
 8001bc2:	2300      	movpl	r3, #0
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	701a      	strb	r2, [r3, #0]
        *temp_thres_flag = *p_temp > TEMP_UPPER_THRES ? BOOL_SET : BOOL_CLR;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	bfcc      	ite	gt
 8001bde:	2301      	movgt	r3, #1
 8001be0:	2300      	movle	r3, #0
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	701a      	strb	r2, [r3, #0]
        
        // clear the DRDY flag
        hum_temp_ready = BOOL_CLR;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <read_ready_hum_temp+0x84>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
    }
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	42a00000 	.word	0x42a00000

08001c00 <print_threshold_acc>:
/**
 * @brief print warning if over threshold for accel
 * @param None
 * @retval None
 */
static void print_threshold_acc(void){
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af02      	add	r7, sp, #8
    if (acc_thres_flag == BOOL_SET) {
 8001c06:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <print_threshold_acc+0xd0>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d057      	beq.n	8001cbe <print_threshold_acc+0xbe>
        // accel exceed print warning
        sprintf(uart_buffer, "|A|: %.2f ms-2 exceed threshold of %d ms-2\r\n", sqrt(pow(accel_data[0], 2) + pow(accel_data[1], 2) + pow(accel_data[2], 2)), ACCEL_UPPER_THRES);
 8001c0e:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <print_threshold_acc+0xd4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fc98 	bl	8000548 <__aeabi_f2d>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001cc8 <print_threshold_acc+0xc8>
 8001c20:	ec43 2b10 	vmov	d0, r2, r3
 8001c24:	f006 fbec 	bl	8008400 <pow>
 8001c28:	ec55 4b10 	vmov	r4, r5, d0
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <print_threshold_acc+0xd4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc89 	bl	8000548 <__aeabi_f2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001cc8 <print_threshold_acc+0xc8>
 8001c3e:	ec43 2b10 	vmov	d0, r2, r3
 8001c42:	f006 fbdd 	bl	8008400 <pow>
 8001c46:	ec53 2b10 	vmov	r2, r3, d0
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7fe fb1d 	bl	800028c <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <print_threshold_acc+0xd4>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc72 	bl	8000548 <__aeabi_f2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001cc8 <print_threshold_acc+0xc8>
 8001c6c:	ec43 2b10 	vmov	d0, r2, r3
 8001c70:	f006 fbc6 	bl	8008400 <pow>
 8001c74:	ec53 2b10 	vmov	r2, r3, d0
 8001c78:	4620      	mov	r0, r4
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	f7fe fb06 	bl	800028c <__adddf3>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	ec43 2b17 	vmov	d7, r2, r3
 8001c88:	eeb0 0a47 	vmov.f32	s0, s14
 8001c8c:	eef0 0a67 	vmov.f32	s1, s15
 8001c90:	f006 fc26 	bl	80084e0 <sqrt>
 8001c94:	ec51 0b10 	vmov	r0, r1, d0
 8001c98:	230b      	movs	r3, #11
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	490d      	ldr	r1, [pc, #52]	; (8001cd8 <print_threshold_acc+0xd8>)
 8001ca2:	480e      	ldr	r0, [pc, #56]	; (8001cdc <print_threshold_acc+0xdc>)
 8001ca4:	f004 fadc 	bl	8006260 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <print_threshold_acc+0xdc>)
 8001caa:	f7fe fa91 	bl	80001d0 <strlen>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cb6:	4909      	ldr	r1, [pc, #36]	; (8001cdc <print_threshold_acc+0xdc>)
 8001cb8:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <print_threshold_acc+0xe0>)
 8001cba:	f002 fda7 	bl	800480c <HAL_UART_Transmit>
    }
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	40000000 	.word	0x40000000
 8001cd0:	20000375 	.word	0x20000375
 8001cd4:	2000035c 	.word	0x2000035c
 8001cd8:	08009484 	.word	0x08009484
 8001cdc:	20000254 	.word	0x20000254
 8001ce0:	200002d4 	.word	0x200002d4
 8001ce4:	00000000 	.word	0x00000000

08001ce8 <print_threshold_gyro>:
/**
 * @brief print warning if over threshold for gyro
 * @param None
 * @retval None
 */
static void print_threshold_gyro(void){
 8001ce8:	b5b0      	push	{r4, r5, r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af02      	add	r7, sp, #8
    if (gyro_thres_flag == BOOL_SET) {
 8001cee:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <print_threshold_gyro+0xd0>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d057      	beq.n	8001da6 <print_threshold_gyro+0xbe>
        // gyro exceed print warning
        sprintf(uart_buffer, "|G|: %.2f dps exceed threshold of %d dps\r\n", sqrt(pow(gyro_data[0], 2) + pow(gyro_data[1], 2) + pow(gyro_data[2], 2)), GYRO_UPPER_THRES);
 8001cf6:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <print_threshold_gyro+0xd4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fc24 	bl	8000548 <__aeabi_f2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001db0 <print_threshold_gyro+0xc8>
 8001d08:	ec43 2b10 	vmov	d0, r2, r3
 8001d0c:	f006 fb78 	bl	8008400 <pow>
 8001d10:	ec55 4b10 	vmov	r4, r5, d0
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <print_threshold_gyro+0xd4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc15 	bl	8000548 <__aeabi_f2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001db0 <print_threshold_gyro+0xc8>
 8001d26:	ec43 2b10 	vmov	d0, r2, r3
 8001d2a:	f006 fb69 	bl	8008400 <pow>
 8001d2e:	ec53 2b10 	vmov	r2, r3, d0
 8001d32:	4620      	mov	r0, r4
 8001d34:	4629      	mov	r1, r5
 8001d36:	f7fe faa9 	bl	800028c <__adddf3>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4614      	mov	r4, r2
 8001d40:	461d      	mov	r5, r3
 8001d42:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <print_threshold_gyro+0xd4>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fbfe 	bl	8000548 <__aeabi_f2d>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001db0 <print_threshold_gyro+0xc8>
 8001d54:	ec43 2b10 	vmov	d0, r2, r3
 8001d58:	f006 fb52 	bl	8008400 <pow>
 8001d5c:	ec53 2b10 	vmov	r2, r3, d0
 8001d60:	4620      	mov	r0, r4
 8001d62:	4629      	mov	r1, r5
 8001d64:	f7fe fa92 	bl	800028c <__adddf3>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	ec43 2b17 	vmov	d7, r2, r3
 8001d70:	eeb0 0a47 	vmov.f32	s0, s14
 8001d74:	eef0 0a67 	vmov.f32	s1, s15
 8001d78:	f006 fbb2 	bl	80084e0 <sqrt>
 8001d7c:	ec51 0b10 	vmov	r0, r1, d0
 8001d80:	2364      	movs	r3, #100	; 0x64
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	490d      	ldr	r1, [pc, #52]	; (8001dc0 <print_threshold_gyro+0xd8>)
 8001d8a:	480e      	ldr	r0, [pc, #56]	; (8001dc4 <print_threshold_gyro+0xdc>)
 8001d8c:	f004 fa68 	bl	8006260 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001d90:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <print_threshold_gyro+0xdc>)
 8001d92:	f7fe fa1d 	bl	80001d0 <strlen>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9e:	4909      	ldr	r1, [pc, #36]	; (8001dc4 <print_threshold_gyro+0xdc>)
 8001da0:	4809      	ldr	r0, [pc, #36]	; (8001dc8 <print_threshold_gyro+0xe0>)
 8001da2:	f002 fd33 	bl	800480c <HAL_UART_Transmit>
    }
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dac:	f3af 8000 	nop.w
 8001db0:	00000000 	.word	0x00000000
 8001db4:	40000000 	.word	0x40000000
 8001db8:	20000376 	.word	0x20000376
 8001dbc:	20000368 	.word	0x20000368
 8001dc0:	080094b4 	.word	0x080094b4
 8001dc4:	20000254 	.word	0x20000254
 8001dc8:	200002d4 	.word	0x200002d4
 8001dcc:	00000000 	.word	0x00000000

08001dd0 <print_threshold_mag>:
/**
 * @brief print warning if over threshold for mag
 * @param None
 * @retval None
 */
static void print_threshold_mag(void){
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af02      	add	r7, sp, #8
    if (mag_thres_flag == BOOL_SET) {
 8001dd6:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <print_threshold_mag+0xd8>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d05b      	beq.n	8001e96 <print_threshold_mag+0xc6>
        // mag exceed print warning
        sprintf(uart_buffer, "|M|: %.2f mG exceed threshold of %d mG\r\n", sqrt(pow(mag_data[0], 2) + pow(mag_data[1], 2) + pow(mag_data[2], 2)), MAG_UPPER_THRES);
 8001dde:	4b33      	ldr	r3, [pc, #204]	; (8001eac <print_threshold_mag+0xdc>)
 8001de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fb9d 	bl	8000524 <__aeabi_i2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8001ea0 <print_threshold_mag+0xd0>
 8001df2:	ec43 2b10 	vmov	d0, r2, r3
 8001df6:	f006 fb03 	bl	8008400 <pow>
 8001dfa:	ec55 4b10 	vmov	r4, r5, d0
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <print_threshold_mag+0xdc>)
 8001e00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb8d 	bl	8000524 <__aeabi_i2d>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8001ea0 <print_threshold_mag+0xd0>
 8001e12:	ec43 2b10 	vmov	d0, r2, r3
 8001e16:	f006 faf3 	bl	8008400 <pow>
 8001e1a:	ec53 2b10 	vmov	r2, r3, d0
 8001e1e:	4620      	mov	r0, r4
 8001e20:	4629      	mov	r1, r5
 8001e22:	f7fe fa33 	bl	800028c <__adddf3>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4614      	mov	r4, r2
 8001e2c:	461d      	mov	r5, r3
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <print_threshold_mag+0xdc>)
 8001e30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fb75 	bl	8000524 <__aeabi_i2d>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8001ea0 <print_threshold_mag+0xd0>
 8001e42:	ec43 2b10 	vmov	d0, r2, r3
 8001e46:	f006 fadb 	bl	8008400 <pow>
 8001e4a:	ec53 2b10 	vmov	r2, r3, d0
 8001e4e:	4620      	mov	r0, r4
 8001e50:	4629      	mov	r1, r5
 8001e52:	f7fe fa1b 	bl	800028c <__adddf3>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	ec43 2b17 	vmov	d7, r2, r3
 8001e5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e62:	eef0 0a67 	vmov.f32	s1, s15
 8001e66:	f006 fb3b 	bl	80084e0 <sqrt>
 8001e6a:	ec51 0b10 	vmov	r0, r1, d0
 8001e6e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	490d      	ldr	r1, [pc, #52]	; (8001eb0 <print_threshold_mag+0xe0>)
 8001e7a:	480e      	ldr	r0, [pc, #56]	; (8001eb4 <print_threshold_mag+0xe4>)
 8001e7c:	f004 f9f0 	bl	8006260 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001e80:	480c      	ldr	r0, [pc, #48]	; (8001eb4 <print_threshold_mag+0xe4>)
 8001e82:	f7fe f9a5 	bl	80001d0 <strlen>
 8001e86:	4603      	mov	r3, r0
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e8e:	4909      	ldr	r1, [pc, #36]	; (8001eb4 <print_threshold_mag+0xe4>)
 8001e90:	4809      	ldr	r0, [pc, #36]	; (8001eb8 <print_threshold_mag+0xe8>)
 8001e92:	f002 fcbb 	bl	800480c <HAL_UART_Transmit>
    }
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	40000000 	.word	0x40000000
 8001ea8:	2000037e 	.word	0x2000037e
 8001eac:	20000378 	.word	0x20000378
 8001eb0:	080094e0 	.word	0x080094e0
 8001eb4:	20000254 	.word	0x20000254
 8001eb8:	200002d4 	.word	0x200002d4

08001ebc <print_threshold_hum>:
/**
 * @brief print warning if over threshold for hum
 * @param None
 * @retval None
 */
static void print_threshold_hum(void){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af02      	add	r7, sp, #8
    if (humidity_thres_flag == BOOL_SET) {
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <print_threshold_hum+0x44>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d017      	beq.n	8001efa <print_threshold_hum+0x3e>
        // hum exceed print warning
        sprintf(uart_buffer, "H: %.2f%% exceed threshold of %d%%\r\n", humidity_data, HUM_LOWER_THRES);
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <print_threshold_hum+0x48>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fb3a 	bl	8000548 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	2150      	movs	r1, #80	; 0x50
 8001eda:	9100      	str	r1, [sp, #0]
 8001edc:	490a      	ldr	r1, [pc, #40]	; (8001f08 <print_threshold_hum+0x4c>)
 8001ede:	480b      	ldr	r0, [pc, #44]	; (8001f0c <print_threshold_hum+0x50>)
 8001ee0:	f004 f9be 	bl	8006260 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001ee4:	4809      	ldr	r0, [pc, #36]	; (8001f0c <print_threshold_hum+0x50>)
 8001ee6:	f7fe f973 	bl	80001d0 <strlen>
 8001eea:	4603      	mov	r3, r0
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef2:	4906      	ldr	r1, [pc, #24]	; (8001f0c <print_threshold_hum+0x50>)
 8001ef4:	4806      	ldr	r0, [pc, #24]	; (8001f10 <print_threshold_hum+0x54>)
 8001ef6:	f002 fc89 	bl	800480c <HAL_UART_Transmit>
    }
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000390 	.word	0x20000390
 8001f04:	20000388 	.word	0x20000388
 8001f08:	0800950c 	.word	0x0800950c
 8001f0c:	20000254 	.word	0x20000254
 8001f10:	200002d4 	.word	0x200002d4

08001f14 <print_threshold_press>:
/**
 * @brief print warning if over threshold for press
 * @param None
 * @retval None
 */
static void print_threshold_press(void){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af02      	add	r7, sp, #8
    if (pressure_thres_flag == BOOL_SET) {
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <print_threshold_press+0x44>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d017      	beq.n	8001f52 <print_threshold_press+0x3e>
        // press exceed print warning
        sprintf(uart_buffer, "P: %.2f kPa exceed threshold of %d kPa\r\n", pressure_data, PRESS_UPPER_THRES);
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <print_threshold_press+0x48>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fb0e 	bl	8000548 <__aeabi_f2d>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	490b      	ldr	r1, [pc, #44]	; (8001f60 <print_threshold_press+0x4c>)
 8001f32:	9100      	str	r1, [sp, #0]
 8001f34:	490b      	ldr	r1, [pc, #44]	; (8001f64 <print_threshold_press+0x50>)
 8001f36:	480c      	ldr	r0, [pc, #48]	; (8001f68 <print_threshold_press+0x54>)
 8001f38:	f004 f992 	bl	8006260 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001f3c:	480a      	ldr	r0, [pc, #40]	; (8001f68 <print_threshold_press+0x54>)
 8001f3e:	f7fe f947 	bl	80001d0 <strlen>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f4a:	4907      	ldr	r1, [pc, #28]	; (8001f68 <print_threshold_press+0x54>)
 8001f4c:	4807      	ldr	r0, [pc, #28]	; (8001f6c <print_threshold_press+0x58>)
 8001f4e:	f002 fc5d 	bl	800480c <HAL_UART_Transmit>
    }
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000384 	.word	0x20000384
 8001f5c:	20000380 	.word	0x20000380
 8001f60:	0001adb0 	.word	0x0001adb0
 8001f64:	08009534 	.word	0x08009534
 8001f68:	20000254 	.word	0x20000254
 8001f6c:	200002d4 	.word	0x200002d4

08001f70 <print_threshold_temp>:
/**
 * @brief print warning if over threshold for temp
 * @param None
 * @retval None
 */
static void print_threshold_temp(void){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af02      	add	r7, sp, #8
    if (temp_thres_flag == BOOL_SET) {
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <print_threshold_temp+0x44>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d017      	beq.n	8001fae <print_threshold_temp+0x3e>
        // press exceed print warning
        sprintf(uart_buffer, "T: %.2f degC exceed threshold of %d degC\r\n", temp_data, TEMP_UPPER_THRES);
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <print_threshold_temp+0x48>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fae0 	bl	8000548 <__aeabi_f2d>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	211e      	movs	r1, #30
 8001f8e:	9100      	str	r1, [sp, #0]
 8001f90:	490a      	ldr	r1, [pc, #40]	; (8001fbc <print_threshold_temp+0x4c>)
 8001f92:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <print_threshold_temp+0x50>)
 8001f94:	f004 f964 	bl	8006260 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001f98:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <print_threshold_temp+0x50>)
 8001f9a:	f7fe f919 	bl	80001d0 <strlen>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa6:	4906      	ldr	r1, [pc, #24]	; (8001fc0 <print_threshold_temp+0x50>)
 8001fa8:	4806      	ldr	r0, [pc, #24]	; (8001fc4 <print_threshold_temp+0x54>)
 8001faa:	f002 fc2f 	bl	800480c <HAL_UART_Transmit>
    }
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000391 	.word	0x20000391
 8001fb8:	2000038c 	.word	0x2000038c
 8001fbc:	08009560 	.word	0x08009560
 8001fc0:	20000254 	.word	0x20000254
 8001fc4:	200002d4 	.word	0x200002d4

08001fc8 <LSM6DSL_AccGyroInit>:
 *        also init GPIO PD11 for the EXTI
 * @param None
 * @retval None
 */
static void LSM6DSL_AccGyroInit(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
    /*
    configuring the GPIO for EXTI from LSM6DSL at PD11
    */
    GPIO_InitTypeDef gpio_init_structure;

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fce:	4b4f      	ldr	r3, [pc, #316]	; (800210c <LSM6DSL_AccGyroInit+0x144>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	4a4e      	ldr	r2, [pc, #312]	; (800210c <LSM6DSL_AccGyroInit+0x144>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fda:	4b4c      	ldr	r3, [pc, #304]	; (800210c <LSM6DSL_AccGyroInit+0x144>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

    // Configure PD11 pin as input with External interrupt
    gpio_init_structure.Pin = GPIO_PIN_11;
 8001fe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fea:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001fec:	2302      	movs	r3, #2
 8001fee:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	617b      	str	r3, [r7, #20]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING; // interupt is active high
 8001ff4:	4b46      	ldr	r3, [pc, #280]	; (8002110 <LSM6DSL_AccGyroInit+0x148>)
 8001ff6:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4845      	ldr	r0, [pc, #276]	; (8002114 <LSM6DSL_AccGyroInit+0x14c>)
 8002000:	f001 fab6 	bl	8003570 <HAL_GPIO_Init>

    // Enable and set EXTI Interrupt priority
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQn_PREEMPT_PRIO, EXTI15_10_IRQn_SUB_PRIO);
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	2028      	movs	r0, #40	; 0x28
 800200a:	f001 fa7a 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800200e:	2028      	movs	r0, #40	; 0x28
 8002010:	f001 fa93 	bl	800353a <HAL_NVIC_EnableIRQ>

    //////////////////////////////////////////////////////////////////////////////////////////
    uint8_t ctrl = 0x00;
 8002014:	2300      	movs	r3, #0
 8002016:	77fb      	strb	r3, [r7, #31]

    /*
    configuring the LSM6DSL for 6D EXTI through INT1
    */
    // write 0x60 to 0x10 CTRL1_XL to set ODR_XL = 416 Hz and turn on device, FS_XL = ±2 g
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, 0x60);
 8002018:	2260      	movs	r2, #96	; 0x60
 800201a:	2110      	movs	r1, #16
 800201c:	20d4      	movs	r0, #212	; 0xd4
 800201e:	f000 fc6b 	bl	80028f8 <SENSOR_IO_Write>

    // Write 0x80 to 0x58 TAP_CFG Enable interrupts; latched mode disabled
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_CFG1, 0x80);
 8002022:	2280      	movs	r2, #128	; 0x80
 8002024:	2158      	movs	r1, #88	; 0x58
 8002026:	20d4      	movs	r0, #212	; 0xd4
 8002028:	f000 fc66 	bl	80028f8 <SENSOR_IO_Write>

    // thershold at 50 deg seems good
    // Write 0x60 to 0x59 TAP_THS_6D Set 6D threshold (SIXD_THS[1:0] = 11b = 50 degrees), D4D disable
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_THS_6D, 0x60);
 800202c:	2260      	movs	r2, #96	; 0x60
 800202e:	2159      	movs	r1, #89	; 0x59
 8002030:	20d4      	movs	r0, #212	; 0xd4
 8002032:	f000 fc61 	bl	80028f8 <SENSOR_IO_Write>
    //	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_THS_6D, 0x00);

    // Write set HPCF_XL[1:0] to 11, INPUT_COMPOSITE = 1, LOW_PASS_ON_6D = 1 in CTRL8_XL to
    // to config LPF2 filter to 6D functionality
    // this LPF has a very low BW, to avoid triggering of 6d when shaking the board
    tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL);
 8002036:	2117      	movs	r1, #23
 8002038:	20d4      	movs	r0, #212	; 0xd4
 800203a:	f000 fc77 	bl	800292c <SENSOR_IO_Read>
 800203e:	4603      	mov	r3, r0
 8002040:	77bb      	strb	r3, [r7, #30]

    ctrl = 0x69;
 8002042:	2369      	movs	r3, #105	; 0x69
 8002044:	77fb      	strb	r3, [r7, #31]
    tmp &= ~(0x6B);
 8002046:	7fbb      	ldrb	r3, [r7, #30]
 8002048:	f023 036b 	bic.w	r3, r3, #107	; 0x6b
 800204c:	77bb      	strb	r3, [r7, #30]
    tmp |= ctrl;
 800204e:	7fba      	ldrb	r2, [r7, #30]
 8002050:	7ffb      	ldrb	r3, [r7, #31]
 8002052:	4313      	orrs	r3, r2
 8002054:	77bb      	strb	r3, [r7, #30]
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL, tmp);
 8002056:	7fbb      	ldrb	r3, [r7, #30]
 8002058:	461a      	mov	r2, r3
 800205a:	2117      	movs	r1, #23
 800205c:	20d4      	movs	r0, #212	; 0xd4
 800205e:	f000 fc4b 	bl	80028f8 <SENSOR_IO_Write>

    // Write 04h to 0x5E MD1_CFG 6D interrupt driven to INT1 pin
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, 0x04);
 8002062:	2204      	movs	r2, #4
 8002064:	215e      	movs	r1, #94	; 0x5e
 8002066:	20d4      	movs	r0, #212	; 0xd4
 8002068:	f000 fc46 	bl	80028f8 <SENSOR_IO_Write>
    // all necessary config are done along with the d6d

    /*
    configuring the LSM6DSL for gyro
    */
    tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800206c:	2111      	movs	r1, #17
 800206e:	20d4      	movs	r0, #212	; 0xd4
 8002070:	f000 fc5c 	bl	800292c <SENSOR_IO_Read>
 8002074:	4603      	mov	r3, r0
 8002076:	77bb      	strb	r3, [r7, #30]

    // Write value to GYRO MEMS CTRL2_G register: FS = 2000 dps and Data Rate 52 Hz
    ctrl = LSM6DSL_GYRO_FS_2000 | LSM6DSL_ODR_52Hz;
 8002078:	233c      	movs	r3, #60	; 0x3c
 800207a:	77fb      	strb	r3, [r7, #31]
    tmp &= ~(0xFC);
 800207c:	7fbb      	ldrb	r3, [r7, #30]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	77bb      	strb	r3, [r7, #30]
    tmp |= ctrl;
 8002084:	7fba      	ldrb	r2, [r7, #30]
 8002086:	7ffb      	ldrb	r3, [r7, #31]
 8002088:	4313      	orrs	r3, r2
 800208a:	77bb      	strb	r3, [r7, #30]
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800208c:	7fbb      	ldrb	r3, [r7, #30]
 800208e:	461a      	mov	r2, r3
 8002090:	2111      	movs	r1, #17
 8002092:	20d4      	movs	r0, #212	; 0xd4
 8002094:	f000 fc30 	bl	80028f8 <SENSOR_IO_Write>
    /*
    Write value to CTRL3_C register: BDU and Auto-increment and active high int
    the same register to configure for both acc nd gyro
    */
    // Read CTRL3_C
    tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002098:	2112      	movs	r1, #18
 800209a:	20d4      	movs	r0, #212	; 0xd4
 800209c:	f000 fc46 	bl	800292c <SENSOR_IO_Read>
 80020a0:	4603      	mov	r3, r0
 80020a2:	77bb      	strb	r3, [r7, #30]

    ctrl = LSM6DSL_BDU_BLOCK_UPDATE | LSM6DSL_ACC_GYRO_IF_INC_ENABLED;
 80020a4:	2344      	movs	r3, #68	; 0x44
 80020a6:	77fb      	strb	r3, [r7, #31]
    tmp &= ~(0x64); // clear BDU, IF_INC and H_LACTIVE (for interrupt to be active high)
 80020a8:	7fbb      	ldrb	r3, [r7, #30]
 80020aa:	f023 0364 	bic.w	r3, r3, #100	; 0x64
 80020ae:	77bb      	strb	r3, [r7, #30]
    tmp |= ctrl;
 80020b0:	7fba      	ldrb	r2, [r7, #30]
 80020b2:	7ffb      	ldrb	r3, [r7, #31]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	77bb      	strb	r3, [r7, #30]
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80020b8:	7fbb      	ldrb	r3, [r7, #30]
 80020ba:	461a      	mov	r2, r3
 80020bc:	2112      	movs	r1, #18
 80020be:	20d4      	movs	r0, #212	; 0xd4
 80020c0:	f000 fc1a 	bl	80028f8 <SENSOR_IO_Write>

    /*
    configuring the LSM6DSL for accel gyro DRDY INT1
    */
    // Write 0x03 to 0x0D INT1_CTRL, DRDY for both accel and gyro interrupt driven to INT1 pin
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, 0x03);
 80020c4:	2203      	movs	r2, #3
 80020c6:	210d      	movs	r1, #13
 80020c8:	20d4      	movs	r0, #212	; 0xd4
 80020ca:	f000 fc15 	bl	80028f8 <SENSOR_IO_Write>

    // Write 0x80 to DRDY_PULSE_CFG_G (0Bh) to make DRDY be a pulse and not latched
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, 0x80);
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	210b      	movs	r1, #11
 80020d2:	20d4      	movs	r0, #212	; 0xd4
 80020d4:	f000 fc10 	bl	80028f8 <SENSOR_IO_Write>

    // set DRDY_MASK to 1 in CTRL4_C (13h) to wait LPF before DRDY
    tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL4_C);
 80020d8:	2113      	movs	r1, #19
 80020da:	20d4      	movs	r0, #212	; 0xd4
 80020dc:	f000 fc26 	bl	800292c <SENSOR_IO_Read>
 80020e0:	4603      	mov	r3, r0
 80020e2:	77bb      	strb	r3, [r7, #30]

    ctrl = 0x08;
 80020e4:	2308      	movs	r3, #8
 80020e6:	77fb      	strb	r3, [r7, #31]
    tmp &= ~(0x09); // clear DRDY_MASK and bit 0 must set to 0
 80020e8:	7fbb      	ldrb	r3, [r7, #30]
 80020ea:	f023 0309 	bic.w	r3, r3, #9
 80020ee:	77bb      	strb	r3, [r7, #30]
    tmp |= ctrl;
 80020f0:	7fba      	ldrb	r2, [r7, #30]
 80020f2:	7ffb      	ldrb	r3, [r7, #31]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	77bb      	strb	r3, [r7, #30]
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL4_C, tmp);
 80020f8:	7fbb      	ldrb	r3, [r7, #30]
 80020fa:	461a      	mov	r2, r3
 80020fc:	2113      	movs	r1, #19
 80020fe:	20d4      	movs	r0, #212	; 0xd4
 8002100:	f000 fbfa 	bl	80028f8 <SENSOR_IO_Write>
}
 8002104:	bf00      	nop
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	10110000 	.word	0x10110000
 8002114:	48000c00 	.word	0x48000c00

08002118 <HTS221_HumTempInit>:
 *        also init GPIO PD15 for the EXTI
 * @param None
 * @retval None
 */
static void HTS221_HumTempInit(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
    /*
    configuring the GPIO for EXTI from LSM6DSL at PD15
    */
    GPIO_InitTypeDef gpio_init_structure;

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800211e:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HTS221_HumTempInit+0xbc>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <HTS221_HumTempInit+0xbc>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HTS221_HumTempInit+0xbc>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]

    // Configure PD15 pin as input with External interrupt
    gpio_init_structure.Pin = GPIO_PIN_15;
 8002136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800213a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 800213c:	2302      	movs	r3, #2
 800213e:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	617b      	str	r3, [r7, #20]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING; // interupt is active high
 8002144:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HTS221_HumTempInit+0xc0>)
 8002146:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	4619      	mov	r1, r3
 800214e:	4823      	ldr	r0, [pc, #140]	; (80021dc <HTS221_HumTempInit+0xc4>)
 8002150:	f001 fa0e 	bl	8003570 <HAL_GPIO_Init>

    // Enable and set EXTI Interrupt priority
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQn_PREEMPT_PRIO, EXTI15_10_IRQn_SUB_PRIO);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2028      	movs	r0, #40	; 0x28
 800215a:	f001 f9d2 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800215e:	2028      	movs	r0, #40	; 0x28
 8002160:	f001 f9eb 	bl	800353a <HAL_NVIC_EnableIRQ>
    // DRDY_H_L 0 active high
    // PP_OD 0 push pull
    // DRDY_EN 1 enabled
    // clear 0xC4
    // set 0x04
    tmp = SENSOR_IO_Read(HTS221_I2C_ADDRESS, HTS221_CTRL_REG3);
 8002164:	2122      	movs	r1, #34	; 0x22
 8002166:	20be      	movs	r0, #190	; 0xbe
 8002168:	f000 fbe0 	bl	800292c <SENSOR_IO_Read>
 800216c:	4603      	mov	r3, r0
 800216e:	77fb      	strb	r3, [r7, #31]

    tmp &= ~0xC4;
 8002170:	7ffb      	ldrb	r3, [r7, #31]
 8002172:	f003 033b 	and.w	r3, r3, #59	; 0x3b
 8002176:	77fb      	strb	r3, [r7, #31]
    tmp |= 0x04;
 8002178:	7ffb      	ldrb	r3, [r7, #31]
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	77fb      	strb	r3, [r7, #31]

    SENSOR_IO_Write(HTS221_I2C_ADDRESS, HTS221_CTRL_REG3, tmp);
 8002180:	7ffb      	ldrb	r3, [r7, #31]
 8002182:	461a      	mov	r2, r3
 8002184:	2122      	movs	r1, #34	; 0x22
 8002186:	20be      	movs	r0, #190	; 0xbe
 8002188:	f000 fbb6 	bl	80028f8 <SENSOR_IO_Write>

    /*
    Init for H and T
    */
    /* Read CTRL_REG1 */
    tmp = SENSOR_IO_Read(HTS221_I2C_ADDRESS, HTS221_CTRL_REG1);
 800218c:	2120      	movs	r1, #32
 800218e:	20be      	movs	r0, #190	; 0xbe
 8002190:	f000 fbcc 	bl	800292c <SENSOR_IO_Read>
 8002194:	4603      	mov	r3, r0
 8002196:	77fb      	strb	r3, [r7, #31]

    /* Enable BDU */
    tmp &= ~HTS221_BDU_MASK;
 8002198:	7ffb      	ldrb	r3, [r7, #31]
 800219a:	f023 0304 	bic.w	r3, r3, #4
 800219e:	77fb      	strb	r3, [r7, #31]
    tmp |= (1 << HTS221_BDU_BIT);
 80021a0:	7ffb      	ldrb	r3, [r7, #31]
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	77fb      	strb	r3, [r7, #31]

    /* Set default ODR */
    tmp &= ~HTS221_ODR_MASK;
 80021a8:	7ffb      	ldrb	r3, [r7, #31]
 80021aa:	f023 0303 	bic.w	r3, r3, #3
 80021ae:	77fb      	strb	r3, [r7, #31]
    tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80021b0:	7ffb      	ldrb	r3, [r7, #31]
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	77fb      	strb	r3, [r7, #31]

    /* Activate the device */
    tmp |= HTS221_PD_MASK;
 80021b8:	7ffb      	ldrb	r3, [r7, #31]
 80021ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021be:	77fb      	strb	r3, [r7, #31]

    /* Apply settings to CTRL_REG1 */
    SENSOR_IO_Write(HTS221_I2C_ADDRESS, HTS221_CTRL_REG1, tmp);    
 80021c0:	7ffb      	ldrb	r3, [r7, #31]
 80021c2:	461a      	mov	r2, r3
 80021c4:	2120      	movs	r1, #32
 80021c6:	20be      	movs	r0, #190	; 0xbe
 80021c8:	f000 fb96 	bl	80028f8 <SENSOR_IO_Write>
}
 80021cc:	bf00      	nop
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	10110000 	.word	0x10110000
 80021dc:	48000c00 	.word	0x48000c00

080021e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_MspInit+0x44>)
 80021e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ea:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <HAL_MspInit+0x44>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6613      	str	r3, [r2, #96]	; 0x60
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_MspInit+0x44>)
 80021f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_MspInit+0x44>)
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_MspInit+0x44>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002208:	6593      	str	r3, [r2, #88]	; 0x58
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_MspInit+0x44>)
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000

08002228 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	; 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <HAL_I2C_MspInit+0x7c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d128      	bne.n	800229c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <HAL_I2C_MspInit+0x80>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <HAL_I2C_MspInit+0x80>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <HAL_I2C_MspInit+0x80>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002262:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002268:	2312      	movs	r3, #18
 800226a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800226c:	2301      	movs	r3, #1
 800226e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002274:	2304      	movs	r3, #4
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	4619      	mov	r1, r3
 800227e:	480b      	ldr	r0, [pc, #44]	; (80022ac <HAL_I2C_MspInit+0x84>)
 8002280:	f001 f976 	bl	8003570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_I2C_MspInit+0x80>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_I2C_MspInit+0x80>)
 800228a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800228e:	6593      	str	r3, [r2, #88]	; 0x58
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_I2C_MspInit+0x80>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800229c:	bf00      	nop
 800229e:	3728      	adds	r7, #40	; 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40005800 	.word	0x40005800
 80022a8:	40021000 	.word	0x40021000
 80022ac:	48000400 	.word	0x48000400

080022b0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <HAL_I2C_MspDeInit+0x30>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10a      	bne.n	80022d8 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_I2C_MspDeInit+0x34>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <HAL_I2C_MspDeInit+0x34>)
 80022c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80022cc:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80022ce:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80022d2:	4805      	ldr	r0, [pc, #20]	; (80022e8 <HAL_I2C_MspDeInit+0x38>)
 80022d4:	f001 faf6 	bl	80038c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40005800 	.word	0x40005800
 80022e4:	40021000 	.word	0x40021000
 80022e8:	48000400 	.word	0x48000400

080022ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	; 0x30
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2e      	ldr	r2, [pc, #184]	; (80023c4 <HAL_UART_MspInit+0xd8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d128      	bne.n	8002360 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800230e:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_UART_MspInit+0xdc>)
 8002310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002312:	4a2d      	ldr	r2, [pc, #180]	; (80023c8 <HAL_UART_MspInit+0xdc>)
 8002314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002318:	6613      	str	r3, [r2, #96]	; 0x60
 800231a:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <HAL_UART_MspInit+0xdc>)
 800231c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002326:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <HAL_UART_MspInit+0xdc>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <HAL_UART_MspInit+0xdc>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002332:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <HAL_UART_MspInit+0xdc>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800233e:	23c0      	movs	r3, #192	; 0xc0
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800234e:	2307      	movs	r3, #7
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	481c      	ldr	r0, [pc, #112]	; (80023cc <HAL_UART_MspInit+0xe0>)
 800235a:	f001 f909 	bl	8003570 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800235e:	e02d      	b.n	80023bc <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1a      	ldr	r2, [pc, #104]	; (80023d0 <HAL_UART_MspInit+0xe4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d128      	bne.n	80023bc <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_UART_MspInit+0xdc>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <HAL_UART_MspInit+0xdc>)
 8002370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002374:	6593      	str	r3, [r2, #88]	; 0x58
 8002376:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <HAL_UART_MspInit+0xdc>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002382:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_UART_MspInit+0xdc>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_UART_MspInit+0xdc>)
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_UART_MspInit+0xdc>)
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800239a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800239e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023ac:	2307      	movs	r3, #7
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	4619      	mov	r1, r3
 80023b6:	4807      	ldr	r0, [pc, #28]	; (80023d4 <HAL_UART_MspInit+0xe8>)
 80023b8:	f001 f8da 	bl	8003570 <HAL_GPIO_Init>
}
 80023bc:	bf00      	nop
 80023be:	3730      	adds	r7, #48	; 0x30
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40013800 	.word	0x40013800
 80023c8:	40021000 	.word	0x40021000
 80023cc:	48000400 	.word	0x48000400
 80023d0:	40004800 	.word	0x40004800
 80023d4:	48000c00 	.word	0x48000c00

080023d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ea:	e7fe      	b.n	80023ea <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <MemManage_Handler+0x4>

080023f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f6:	e7fe      	b.n	80023f6 <BusFault_Handler+0x4>

080023f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <UsageFault_Handler+0x4>

080023fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242c:	f000 ff70 	bl	8003310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002438:	2020      	movs	r0, #32
 800243a:	f001 fb69 	bl	8003b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800243e:	2040      	movs	r0, #64	; 0x40
 8002440:	f001 fb66 	bl	8003b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002444:	2080      	movs	r0, #128	; 0x80
 8002446:	f001 fb63 	bl	8003b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800244a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800244e:	f001 fb5f 	bl	8003b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}

08002456 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800245a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800245e:	f001 fb57 	bl	8003b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002462:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002466:	f001 fb53 	bl	8003b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800246a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800246e:	f001 fb4f 	bl	8003b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002472:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002476:	f001 fb4b 	bl	8003b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800247a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800247e:	f001 fb47 	bl	8003b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <_sbrk+0x50>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <_sbrk+0x16>
		heap_end = &end;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <_sbrk+0x50>)
 800249a:	4a10      	ldr	r2, [pc, #64]	; (80024dc <_sbrk+0x54>)
 800249c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <_sbrk+0x50>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <_sbrk+0x50>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	466a      	mov	r2, sp
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d907      	bls.n	80024c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80024b2:	f003 f88d 	bl	80055d0 <__errno>
 80024b6:	4603      	mov	r3, r0
 80024b8:	220c      	movs	r2, #12
 80024ba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295
 80024c0:	e006      	b.n	80024d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <_sbrk+0x50>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	4a03      	ldr	r2, [pc, #12]	; (80024d8 <_sbrk+0x50>)
 80024cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	200003a0 	.word	0x200003a0
 80024dc:	200004b0 	.word	0x200004b0

080024e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e4:	4b17      	ldr	r3, [pc, #92]	; (8002544 <SystemInit+0x64>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	4a16      	ldr	r2, [pc, #88]	; (8002544 <SystemInit+0x64>)
 80024ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <SystemInit+0x68>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a13      	ldr	r2, [pc, #76]	; (8002548 <SystemInit+0x68>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002500:	4b11      	ldr	r3, [pc, #68]	; (8002548 <SystemInit+0x68>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <SystemInit+0x68>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <SystemInit+0x68>)
 800250c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002510:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002514:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <SystemInit+0x68>)
 8002518:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800251c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <SystemInit+0x68>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <SystemInit+0x68>)
 8002524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002528:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <SystemInit+0x68>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <SystemInit+0x64>)
 8002532:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002536:	609a      	str	r2, [r3, #8]
#endif
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00
 8002548:	40021000 	.word	0x40021000

0800254c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800254c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002584 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002550:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002552:	e003      	b.n	800255c <LoopCopyDataInit>

08002554 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002556:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002558:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800255a:	3104      	adds	r1, #4

0800255c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800255c:	480b      	ldr	r0, [pc, #44]	; (800258c <LoopForever+0xa>)
	ldr	r3, =_edata
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002560:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002562:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002564:	d3f6      	bcc.n	8002554 <CopyDataInit>
	ldr	r2, =_sbss
 8002566:	4a0b      	ldr	r2, [pc, #44]	; (8002594 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002568:	e002      	b.n	8002570 <LoopFillZerobss>

0800256a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800256a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800256c:	f842 3b04 	str.w	r3, [r2], #4

08002570 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <LoopForever+0x16>)
	cmp	r2, r3
 8002572:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002574:	d3f9      	bcc.n	800256a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002576:	f7ff ffb3 	bl	80024e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800257a:	f003 f925 	bl	80057c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800257e:	f7fe fce5 	bl	8000f4c <main>

08002582 <LoopForever>:

LoopForever:
    b LoopForever
 8002582:	e7fe      	b.n	8002582 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002584:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002588:	080099e0 	.word	0x080099e0
	ldr	r0, =_sdata
 800258c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002590:	20000228 	.word	0x20000228
	ldr	r2, =_sbss
 8002594:	20000228 	.word	0x20000228
	ldr	r3, = _ebss
 8002598:	200004ac 	.word	0x200004ac

0800259c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800259c:	e7fe      	b.n	800259c <ADC1_2_IRQHandler>
	...

080025a0 <BSP_LED_Init>:
  * @param  Led: LED to be configured. 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10b      	bne.n	80025c8 <BSP_LED_Init+0x28>
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <BSP_LED_Init+0x58>)
 80025b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b4:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <BSP_LED_Init+0x58>)
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <BSP_LED_Init+0x58>)
 80025be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 80025c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025cc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d6:	2302      	movs	r3, #2
 80025d8:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	4a07      	ldr	r2, [pc, #28]	; (80025fc <BSP_LED_Init+0x5c>)
 80025de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e2:	f107 020c 	add.w	r2, r7, #12
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 ffc1 	bl	8003570 <HAL_GPIO_Init>
}
 80025ee:	bf00      	nop
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	20000008 	.word	0x20000008

08002600 <BSP_LED_On>:
  * @param  Led: LED to be set on 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	4a06      	ldr	r2, [pc, #24]	; (8002628 <BSP_LED_On+0x28>)
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002616:	b291      	uxth	r1, r2
 8002618:	2201      	movs	r2, #1
 800261a:	4618      	mov	r0, r3
 800261c:	f001 fa46 	bl	8003aac <HAL_GPIO_WritePin>
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000008 	.word	0x20000008

0800262c <BSP_LED_Toggle>:
  * @param  Led: LED to be toggled
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	4a06      	ldr	r2, [pc, #24]	; (8002654 <BSP_LED_Toggle+0x28>)
 800263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002642:	b292      	uxth	r2, r2
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f001 fa48 	bl	8003adc <HAL_GPIO_TogglePin>
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000008 	.word	0x20000008

08002658 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	460a      	mov	r2, r1
 8002662:	71fb      	strb	r3, [r7, #7]
 8002664:	4613      	mov	r3, r2
 8002666:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8002668:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <BSP_PB_Init+0xa0>)
 800266a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266c:	4a22      	ldr	r2, [pc, #136]	; (80026f8 <BSP_PB_Init+0xa0>)
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002674:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <BSP_PB_Init+0xa0>)
 8002676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002680:	79bb      	ldrb	r3, [r7, #6]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d112      	bne.n	80026ac <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800268a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8002690:	2301      	movs	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002694:	2302      	movs	r3, #2
 8002696:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	4a18      	ldr	r2, [pc, #96]	; (80026fc <BSP_PB_Init+0xa4>)
 800269c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a0:	f107 020c 	add.w	r2, r7, #12
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 ff62 	bl	8003570 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80026ac:	79bb      	ldrb	r3, [r7, #6]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d11e      	bne.n	80026f0 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80026b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026b6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80026b8:	2301      	movs	r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026bc:	2303      	movs	r3, #3
 80026be:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <BSP_PB_Init+0xa8>)
 80026c2:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <BSP_PB_Init+0xa4>)
 80026c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026cc:	f107 020c 	add.w	r2, r7, #12
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 ff4c 	bl	8003570 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80026d8:	2328      	movs	r3, #40	; 0x28
 80026da:	b25b      	sxtb	r3, r3
 80026dc:	2200      	movs	r2, #0
 80026de:	210f      	movs	r1, #15
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 ff0e 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80026e6:	2328      	movs	r3, #40	; 0x28
 80026e8:	b25b      	sxtb	r3, r3
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 ff25 	bl	800353a <HAL_NVIC_EnableIRQ>
  }
}
 80026f0:	bf00      	nop
 80026f2:	3720      	adds	r7, #32
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	2000000c 	.word	0x2000000c
 8002700:	10110000 	.word	0x10110000

08002704 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <I2Cx_MspInit+0xa8>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	4a26      	ldr	r2, [pc, #152]	; (80027ac <I2Cx_MspInit+0xa8>)
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <I2Cx_MspInit+0xa8>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002724:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002728:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800272a:	2312      	movs	r3, #18
 800272c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800272e:	2301      	movs	r3, #1
 8002730:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002732:	2303      	movs	r3, #3
 8002734:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002736:	2304      	movs	r3, #4
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4619      	mov	r1, r3
 8002740:	481b      	ldr	r0, [pc, #108]	; (80027b0 <I2Cx_MspInit+0xac>)
 8002742:	f000 ff15 	bl	8003570 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	4619      	mov	r1, r3
 800274c:	4818      	ldr	r0, [pc, #96]	; (80027b0 <I2Cx_MspInit+0xac>)
 800274e:	f000 ff0f 	bl	8003570 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002752:	4b16      	ldr	r3, [pc, #88]	; (80027ac <I2Cx_MspInit+0xa8>)
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	4a15      	ldr	r2, [pc, #84]	; (80027ac <I2Cx_MspInit+0xa8>)
 8002758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800275c:	6593      	str	r3, [r2, #88]	; 0x58
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <I2Cx_MspInit+0xa8>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <I2Cx_MspInit+0xa8>)
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	4a0f      	ldr	r2, [pc, #60]	; (80027ac <I2Cx_MspInit+0xa8>)
 8002770:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002774:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <I2Cx_MspInit+0xa8>)
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <I2Cx_MspInit+0xa8>)
 800277c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002780:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	210f      	movs	r1, #15
 8002786:	2021      	movs	r0, #33	; 0x21
 8002788:	f000 febb 	bl	8003502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800278c:	2021      	movs	r0, #33	; 0x21
 800278e:	f000 fed4 	bl	800353a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	210f      	movs	r1, #15
 8002796:	2022      	movs	r0, #34	; 0x22
 8002798:	f000 feb3 	bl	8003502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800279c:	2022      	movs	r0, #34	; 0x22
 800279e:	f000 fecc 	bl	800353a <HAL_NVIC_EnableIRQ>
}
 80027a2:	bf00      	nop
 80027a4:	3728      	adds	r7, #40	; 0x28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
 80027b0:	48000400 	.word	0x48000400

080027b4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a12      	ldr	r2, [pc, #72]	; (8002808 <I2Cx_Init+0x54>)
 80027c0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a11      	ldr	r2, [pc, #68]	; (800280c <I2Cx_Init+0x58>)
 80027c6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff89 	bl	8002704 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f001 f9a4 	bl	8003b40 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80027f8:	2100      	movs	r1, #0
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f001 fea8 	bl	8004550 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40005800 	.word	0x40005800
 800280c:	00702681 	.word	0x00702681

08002810 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af04      	add	r7, sp, #16
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	461a      	mov	r2, r3
 800281e:	4603      	mov	r3, r0
 8002820:	72fb      	strb	r3, [r7, #11]
 8002822:	460b      	mov	r3, r1
 8002824:	813b      	strh	r3, [r7, #8]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800282e:	7afb      	ldrb	r3, [r7, #11]
 8002830:	b299      	uxth	r1, r3
 8002832:	88f8      	ldrh	r0, [r7, #6]
 8002834:	893a      	ldrh	r2, [r7, #8]
 8002836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800283a:	9302      	str	r3, [sp, #8]
 800283c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4603      	mov	r3, r0
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f001 fb4c 	bl	8003ee4 <HAL_I2C_Mem_Read>
 800284c:	4603      	mov	r3, r0
 800284e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8002856:	7afb      	ldrb	r3, [r7, #11]
 8002858:	4619      	mov	r1, r3
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f832 	bl	80028c4 <I2Cx_Error>
  }
  return status;
 8002860:	7dfb      	ldrb	r3, [r7, #23]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b08a      	sub	sp, #40	; 0x28
 800286e:	af04      	add	r7, sp, #16
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	4608      	mov	r0, r1
 8002874:	4611      	mov	r1, r2
 8002876:	461a      	mov	r2, r3
 8002878:	4603      	mov	r3, r0
 800287a:	72fb      	strb	r3, [r7, #11]
 800287c:	460b      	mov	r3, r1
 800287e:	813b      	strh	r3, [r7, #8]
 8002880:	4613      	mov	r3, r2
 8002882:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	b299      	uxth	r1, r3
 800288c:	88f8      	ldrh	r0, [r7, #6]
 800288e:	893a      	ldrh	r2, [r7, #8]
 8002890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002894:	9302      	str	r3, [sp, #8]
 8002896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	4603      	mov	r3, r0
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f001 fa0b 	bl	8003cbc <HAL_I2C_Mem_Write>
 80028a6:	4603      	mov	r3, r0
 80028a8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80028b0:	7afb      	ldrb	r3, [r7, #11]
 80028b2:	4619      	mov	r1, r3
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f805 	bl	80028c4 <I2Cx_Error>
  }
  return status;
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f001 f9c4 	bl	8003c5e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ff6c 	bl	80027b4 <I2Cx_Init>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <SENSOR_IO_Init+0x10>)
 80028ea:	f7ff ff63 	bl	80027b4 <I2Cx_Init>
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200003a4 	.word	0x200003a4

080028f8 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
 8002902:	460b      	mov	r3, r1
 8002904:	71bb      	strb	r3, [r7, #6]
 8002906:	4613      	mov	r3, r2
 8002908:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800290a:	79bb      	ldrb	r3, [r7, #6]
 800290c:	b29a      	uxth	r2, r3
 800290e:	79f9      	ldrb	r1, [r7, #7]
 8002910:	2301      	movs	r3, #1
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	1d7b      	adds	r3, r7, #5
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	2301      	movs	r3, #1
 800291a:	4803      	ldr	r0, [pc, #12]	; (8002928 <SENSOR_IO_Write+0x30>)
 800291c:	f7ff ffa5 	bl	800286a <I2Cx_WriteMultiple>
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	200003a4 	.word	0x200003a4

0800292c <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af02      	add	r7, sp, #8
 8002932:	4603      	mov	r3, r0
 8002934:	460a      	mov	r2, r1
 8002936:	71fb      	strb	r3, [r7, #7]
 8002938:	4613      	mov	r3, r2
 800293a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002940:	79bb      	ldrb	r3, [r7, #6]
 8002942:	b29a      	uxth	r2, r3
 8002944:	79f9      	ldrb	r1, [r7, #7]
 8002946:	2301      	movs	r3, #1
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	f107 030f 	add.w	r3, r7, #15
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	4804      	ldr	r0, [pc, #16]	; (8002964 <SENSOR_IO_Read+0x38>)
 8002954:	f7ff ff5c 	bl	8002810 <I2Cx_ReadMultiple>

  return read_value;
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200003a4 	.word	0x200003a4

08002968 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af02      	add	r7, sp, #8
 800296e:	603a      	str	r2, [r7, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	4603      	mov	r3, r0
 8002974:	71fb      	strb	r3, [r7, #7]
 8002976:	460b      	mov	r3, r1
 8002978:	71bb      	strb	r3, [r7, #6]
 800297a:	4613      	mov	r3, r2
 800297c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800297e:	79bb      	ldrb	r3, [r7, #6]
 8002980:	b29a      	uxth	r2, r3
 8002982:	79f9      	ldrb	r1, [r7, #7]
 8002984:	88bb      	ldrh	r3, [r7, #4]
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2301      	movs	r3, #1
 800298e:	4804      	ldr	r0, [pc, #16]	; (80029a0 <SENSOR_IO_ReadMultiple+0x38>)
 8002990:	f7ff ff3e 	bl	8002810 <I2Cx_ReadMultiple>
 8002994:	4603      	mov	r3, r0
 8002996:	b29b      	uxth	r3, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200003a4 	.word	0x200003a4

080029a4 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <BSP_MAGNETO_Init+0x50>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4798      	blx	r3
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b3d      	cmp	r3, #61	; 0x3d
 80029b8:	d002      	beq.n	80029c0 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	71fb      	strb	r3, [r7, #7]
 80029be:	e013      	b.n	80029e8 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <BSP_MAGNETO_Init+0x54>)
 80029c2:	4a0c      	ldr	r2, [pc, #48]	; (80029f4 <BSP_MAGNETO_Init+0x50>)
 80029c4:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80029c6:	2358      	movs	r3, #88	; 0x58
 80029c8:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80029ca:	2300      	movs	r3, #0
 80029cc:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80029d2:	2308      	movs	r3, #8
 80029d4:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80029d6:	2340      	movs	r3, #64	; 0x40
 80029d8:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <BSP_MAGNETO_Init+0x54>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	463a      	mov	r2, r7
 80029e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029e6:	4798      	blx	r3
  } 

  return ret;  
 80029e8:	79fb      	ldrb	r3, [r7, #7]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000010 	.word	0x20000010
 80029f8:	200003f0 	.word	0x200003f0

080029fc <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <BSP_PSENSOR_Init+0x38>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	20ba      	movs	r0, #186	; 0xba
 8002a08:	4798      	blx	r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2bb1      	cmp	r3, #177	; 0xb1
 8002a0e:	d002      	beq.n	8002a16 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	e009      	b.n	8002a2a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <BSP_PSENSOR_Init+0x3c>)
 8002a18:	4a06      	ldr	r2, [pc, #24]	; (8002a34 <BSP_PSENSOR_Init+0x38>)
 8002a1a:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <BSP_PSENSOR_Init+0x3c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	20ba      	movs	r0, #186	; 0xba
 8002a24:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002a2a:	687b      	ldr	r3, [r7, #4]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000044 	.word	0x20000044
 8002a38:	200003f4 	.word	0x200003f4

08002a3c <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <BSP_PSENSOR_ReadPressure+0x18>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	20ba      	movs	r0, #186	; 0xba
 8002a48:	4798      	blx	r3
 8002a4a:	eef0 7a40 	vmov.f32	s15, s0
}
 8002a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	200003f4 	.word	0x200003f4

08002a58 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	b2d8      	uxtb	r0, r3
 8002a66:	f107 020c 	add.w	r2, r7, #12
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	21b0      	movs	r1, #176	; 0xb0
 8002a6e:	f7ff ff7b 	bl	8002968 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002a72:	7b3b      	ldrb	r3, [r7, #12]
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002a7a:	7b7b      	ldrb	r3, [r7, #13]
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	b2d8      	uxtb	r0, r3
 8002a86:	f107 020c 	add.w	r2, r7, #12
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	21b6      	movs	r1, #182	; 0xb6
 8002a8e:	f7ff ff6b 	bl	8002968 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a92:	7b7b      	ldrb	r3, [r7, #13]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	b21a      	sxth	r2, r3
 8002a98:	7b3b      	ldrb	r3, [r7, #12]
 8002a9a:	b21b      	sxth	r3, r3
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	b2d8      	uxtb	r0, r3
 8002aa4:	f107 020c 	add.w	r2, r7, #12
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	21ba      	movs	r1, #186	; 0xba
 8002aac:	f7ff ff5c 	bl	8002968 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002ab0:	7b7b      	ldrb	r3, [r7, #13]
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	b21a      	sxth	r2, r3
 8002ab6:	7b3b      	ldrb	r3, [r7, #12]
 8002ab8:	b21b      	sxth	r3, r3
 8002aba:	4313      	orrs	r3, r2
 8002abc:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	b2d8      	uxtb	r0, r3
 8002ac2:	f107 020c 	add.w	r2, r7, #12
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	21a8      	movs	r1, #168	; 0xa8
 8002aca:	f7ff ff4d 	bl	8002968 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002ace:	7b7b      	ldrb	r3, [r7, #13]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	b21a      	sxth	r2, r3
 8002ad4:	7b3b      	ldrb	r3, [r7, #12]
 8002ad6:	b21b      	sxth	r3, r3
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002adc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ae0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002af2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	ee07 3a90 	vmov	s15, r3
 8002afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b00:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b04:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002b08:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b1a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002b2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b3a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002b3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b42:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002b88 <HTS221_H_ReadHumidity+0x130>
 8002b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4e:	dd01      	ble.n	8002b54 <HTS221_H_ReadHumidity+0xfc>
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HTS221_H_ReadHumidity+0x134>)
 8002b52:	e00a      	b.n	8002b6a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002b54:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b60:	d502      	bpl.n	8002b68 <HTS221_H_ReadHumidity+0x110>
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e000      	b.n	8002b6a <HTS221_H_ReadHumidity+0x112>
 8002b68:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002b6a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b78:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	447a0000 	.word	0x447a0000
 8002b8c:	447a0000 	.word	0x447a0000

08002b90 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	b2d8      	uxtb	r0, r3
 8002b9e:	f107 0208 	add.w	r2, r7, #8
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	21b2      	movs	r1, #178	; 0xb2
 8002ba6:	f7ff fedf 	bl	8002968 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2135      	movs	r1, #53	; 0x35
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff febb 	bl	800292c <SENSOR_IO_Read>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002bba:	7ffb      	ldrb	r3, [r7, #31]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	b21b      	sxth	r3, r3
 8002bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc4:	b21a      	sxth	r2, r3
 8002bc6:	7a3b      	ldrb	r3, [r7, #8]
 8002bc8:	b21b      	sxth	r3, r3
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002bce:	7ffb      	ldrb	r3, [r7, #31]
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	b21b      	sxth	r3, r3
 8002bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd8:	b21a      	sxth	r2, r3
 8002bda:	7a7b      	ldrb	r3, [r7, #9]
 8002bdc:	b21b      	sxth	r3, r3
 8002bde:	4313      	orrs	r3, r2
 8002be0:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002be2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002be6:	10db      	asrs	r3, r3, #3
 8002be8:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002bea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002bee:	10db      	asrs	r3, r3, #3
 8002bf0:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	b2d8      	uxtb	r0, r3
 8002bf6:	f107 0208 	add.w	r2, r7, #8
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	21bc      	movs	r1, #188	; 0xbc
 8002bfe:	f7ff feb3 	bl	8002968 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c02:	7a7b      	ldrb	r3, [r7, #9]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	b21a      	sxth	r2, r3
 8002c08:	7a3b      	ldrb	r3, [r7, #8]
 8002c0a:	b21b      	sxth	r3, r3
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002c10:	7afb      	ldrb	r3, [r7, #11]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	b21a      	sxth	r2, r3
 8002c16:	7abb      	ldrb	r3, [r7, #10]
 8002c18:	b21b      	sxth	r3, r3
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	b2d8      	uxtb	r0, r3
 8002c22:	f107 0208 	add.w	r2, r7, #8
 8002c26:	2302      	movs	r3, #2
 8002c28:	21aa      	movs	r1, #170	; 0xaa
 8002c2a:	f7ff fe9d 	bl	8002968 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c2e:	7a7b      	ldrb	r3, [r7, #9]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	b21a      	sxth	r2, r3
 8002c34:	7a3b      	ldrb	r3, [r7, #8]
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002c3c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002c52:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c60:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c64:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	ee07 3a90 	vmov	s15, r3
 8002c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c7a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8a:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	ee07 3a90 	vmov	s15, r3
}
 8002c94:	eeb0 0a67 	vmov.f32	s0, s15
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	463b      	mov	r3, r7
 8002ca6:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002caa:	783b      	ldrb	r3, [r7, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	2120      	movs	r1, #32
 8002cb0:	203c      	movs	r0, #60	; 0x3c
 8002cb2:	f7ff fe21 	bl	80028f8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002cb6:	787b      	ldrb	r3, [r7, #1]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2121      	movs	r1, #33	; 0x21
 8002cbc:	203c      	movs	r0, #60	; 0x3c
 8002cbe:	f7ff fe1b 	bl	80028f8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002cc2:	78bb      	ldrb	r3, [r7, #2]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2122      	movs	r1, #34	; 0x22
 8002cc8:	203c      	movs	r0, #60	; 0x3c
 8002cca:	f7ff fe15 	bl	80028f8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2123      	movs	r1, #35	; 0x23
 8002cd4:	203c      	movs	r0, #60	; 0x3c
 8002cd6:	f7ff fe0f 	bl	80028f8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002cda:	793b      	ldrb	r3, [r7, #4]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2124      	movs	r1, #36	; 0x24
 8002ce0:	203c      	movs	r0, #60	; 0x3c
 8002ce2:	f7ff fe09 	bl	80028f8 <SENSOR_IO_Write>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002cf8:	2122      	movs	r1, #34	; 0x22
 8002cfa:	203c      	movs	r0, #60	; 0x3c
 8002cfc:	f7ff fe16 	bl	800292c <SENSOR_IO_Read>
 8002d00:	4603      	mov	r3, r0
 8002d02:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	f023 0303 	bic.w	r3, r3, #3
 8002d0a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	f043 0303 	orr.w	r3, r3, #3
 8002d12:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	461a      	mov	r2, r3
 8002d18:	2122      	movs	r1, #34	; 0x22
 8002d1a:	203c      	movs	r0, #60	; 0x3c
 8002d1c:	f7ff fdec 	bl	80028f8 <SENSOR_IO_Write>
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002d2c:	f7ff fdda 	bl	80028e4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002d30:	210f      	movs	r1, #15
 8002d32:	203c      	movs	r0, #60	; 0x3c
 8002d34:	f7ff fdfa 	bl	800292c <SENSOR_IO_Read>
 8002d38:	4603      	mov	r3, r0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002d4c:	2122      	movs	r1, #34	; 0x22
 8002d4e:	203c      	movs	r0, #60	; 0x3c
 8002d50:	f7ff fdec 	bl	800292c <SENSOR_IO_Read>
 8002d54:	4603      	mov	r3, r0
 8002d56:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	f023 0320 	bic.w	r3, r3, #32
 8002d5e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	f043 0320 	orr.w	r3, r3, #32
 8002d6c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	461a      	mov	r2, r3
 8002d72:	2122      	movs	r1, #34	; 0x22
 8002d74:	203c      	movs	r0, #60	; 0x3c
 8002d76:	f7ff fdbf 	bl	80028f8 <SENSOR_IO_Write>
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002d9a:	2121      	movs	r1, #33	; 0x21
 8002d9c:	203c      	movs	r0, #60	; 0x3c
 8002d9e:	f7ff fdc5 	bl	800292c <SENSOR_IO_Read>
 8002da2:	4603      	mov	r3, r0
 8002da4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002da6:	f107 0208 	add.w	r2, r7, #8
 8002daa:	2306      	movs	r3, #6
 8002dac:	21a8      	movs	r1, #168	; 0xa8
 8002dae:	203c      	movs	r0, #60	; 0x3c
 8002db0:	f7ff fdda 	bl	8002968 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	77fb      	strb	r3, [r7, #31]
 8002db8:	e01c      	b.n	8002df4 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002dba:	7ffb      	ldrb	r3, [r7, #31]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	3320      	adds	r3, #32
 8002dc2:	443b      	add	r3, r7
 8002dc4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	7ffb      	ldrb	r3, [r7, #31]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	3320      	adds	r3, #32
 8002dd4:	443b      	add	r3, r7
 8002dd6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	7ffb      	ldrb	r3, [r7, #31]
 8002de2:	b212      	sxth	r2, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	3320      	adds	r3, #32
 8002de8:	443b      	add	r3, r7
 8002dea:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002dee:	7ffb      	ldrb	r3, [r7, #31]
 8002df0:	3301      	adds	r3, #1
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	7ffb      	ldrb	r3, [r7, #31]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d9df      	bls.n	8002dba <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002e00:	2b60      	cmp	r3, #96	; 0x60
 8002e02:	d013      	beq.n	8002e2c <LIS3MDL_MagReadXYZ+0xa8>
 8002e04:	2b60      	cmp	r3, #96	; 0x60
 8002e06:	dc14      	bgt.n	8002e32 <LIS3MDL_MagReadXYZ+0xae>
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d00c      	beq.n	8002e26 <LIS3MDL_MagReadXYZ+0xa2>
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	dc10      	bgt.n	8002e32 <LIS3MDL_MagReadXYZ+0xae>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <LIS3MDL_MagReadXYZ+0x96>
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d003      	beq.n	8002e20 <LIS3MDL_MagReadXYZ+0x9c>
 8002e18:	e00b      	b.n	8002e32 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002e1a:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <LIS3MDL_MagReadXYZ+0xfc>)
 8002e1c:	61bb      	str	r3, [r7, #24]
    break;
 8002e1e:	e008      	b.n	8002e32 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002e20:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <LIS3MDL_MagReadXYZ+0x100>)
 8002e22:	61bb      	str	r3, [r7, #24]
    break;
 8002e24:	e005      	b.n	8002e32 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002e26:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <LIS3MDL_MagReadXYZ+0x104>)
 8002e28:	61bb      	str	r3, [r7, #24]
    break;
 8002e2a:	e002      	b.n	8002e32 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002e2c:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <LIS3MDL_MagReadXYZ+0x108>)
 8002e2e:	61bb      	str	r3, [r7, #24]
    break;    
 8002e30:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002e32:	2300      	movs	r3, #0
 8002e34:	77fb      	strb	r3, [r7, #31]
 8002e36:	e01a      	b.n	8002e6e <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002e38:	7ffb      	ldrb	r3, [r7, #31]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	3320      	adds	r3, #32
 8002e3e:	443b      	add	r3, r7
 8002e40:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002e44:	ee07 3a90 	vmov	s15, r3
 8002e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e54:	7ffb      	ldrb	r3, [r7, #31]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e60:	ee17 2a90 	vmov	r2, s15
 8002e64:	b212      	sxth	r2, r2
 8002e66:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002e68:	7ffb      	ldrb	r3, [r7, #31]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	77fb      	strb	r3, [r7, #31]
 8002e6e:	7ffb      	ldrb	r3, [r7, #31]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d9e1      	bls.n	8002e38 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	3e0f5c29 	.word	0x3e0f5c29
 8002e84:	3e947ae1 	.word	0x3e947ae1
 8002e88:	3edc28f6 	.word	0x3edc28f6
 8002e8c:	3f147ae1 	.word	0x3f147ae1

08002e90 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 f879 	bl	8002f94 <LPS22HB_Init>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002eb8:	f7ff fd14 	bl	80028e4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	210f      	movs	r1, #15
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fd32 	bl	800292c <SENSOR_IO_Read>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	74fb      	strb	r3, [r7, #19]
 8002eea:	e013      	b.n	8002f14 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	3328      	adds	r3, #40	; 0x28
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	7cfc      	ldrb	r4, [r7, #19]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f7ff fd16 	bl	800292c <SENSOR_IO_Read>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	f104 0318 	add.w	r3, r4, #24
 8002f08:	443b      	add	r3, r7
 8002f0a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	3301      	adds	r3, #1
 8002f12:	74fb      	strb	r3, [r7, #19]
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d9e8      	bls.n	8002eec <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	74fb      	strb	r3, [r7, #19]
 8002f1e:	e00f      	b.n	8002f40 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	3318      	adds	r3, #24
 8002f24:	443b      	add	r3, r7
 8002f26:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002f3a:	7cfb      	ldrb	r3, [r7, #19]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	74fb      	strb	r3, [r7, #19]
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d9ec      	bls.n	8002f20 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f56:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2264      	movs	r2, #100	; 0x64
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da01      	bge.n	8002f6c <LPS22HB_P_ReadPressure+0x94>
 8002f68:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002f6c:	131b      	asrs	r3, r3, #12
 8002f6e:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	ee07 3a90 	vmov	s15, r3
 8002f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f7a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002f90 <LPS22HB_P_ReadPressure+0xb8>
 8002f7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f82:	eef0 7a66 	vmov.f32	s15, s13
}
 8002f86:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8a:	371c      	adds	r7, #28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd90      	pop	{r4, r7, pc}
 8002f90:	42c80000 	.word	0x42c80000

08002f94 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	211a      	movs	r1, #26
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fcc1 	bl	800292c <SENSOR_IO_Read>
 8002faa:	4603      	mov	r3, r0
 8002fac:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	211a      	movs	r1, #26
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fc96 	bl	80028f8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2110      	movs	r1, #16
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fcaa 	bl	800292c <SENSOR_IO_Read>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002fea:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	f023 0302 	bic.w	r3, r3, #2
 8002ff2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	f043 0302 	orr.w	r3, r3, #2
 8002ffa:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	7bfa      	ldrb	r2, [r7, #15]
 8003002:	2110      	movs	r1, #16
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fc77 	bl	80028f8 <SENSOR_IO_Write>
}  
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800301c:	2300      	movs	r3, #0
 800301e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800302a:	2110      	movs	r1, #16
 800302c:	20d4      	movs	r0, #212	; 0xd4
 800302e:	f7ff fc7d 	bl	800292c <SENSOR_IO_Read>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003036:	f107 0208 	add.w	r2, r7, #8
 800303a:	2306      	movs	r3, #6
 800303c:	2128      	movs	r1, #40	; 0x28
 800303e:	20d4      	movs	r0, #212	; 0xd4
 8003040:	f7ff fc92 	bl	8002968 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003044:	2300      	movs	r3, #0
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e01c      	b.n	8003084 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800304a:	7ffb      	ldrb	r3, [r7, #31]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	3301      	adds	r3, #1
 8003050:	3320      	adds	r3, #32
 8003052:	443b      	add	r3, r7
 8003054:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003058:	b29b      	uxth	r3, r3
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	b29a      	uxth	r2, r3
 800305e:	7ffb      	ldrb	r3, [r7, #31]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	3320      	adds	r3, #32
 8003064:	443b      	add	r3, r7
 8003066:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800306a:	b29b      	uxth	r3, r3
 800306c:	4413      	add	r3, r2
 800306e:	b29a      	uxth	r2, r3
 8003070:	7ffb      	ldrb	r3, [r7, #31]
 8003072:	b212      	sxth	r2, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	3320      	adds	r3, #32
 8003078:	443b      	add	r3, r7
 800307a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800307e:	7ffb      	ldrb	r3, [r7, #31]
 8003080:	3301      	adds	r3, #1
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	7ffb      	ldrb	r3, [r7, #31]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d9df      	bls.n	800304a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b0c      	cmp	r3, #12
 8003092:	d829      	bhi.n	80030e8 <LSM6DSL_AccReadXYZ+0xd4>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <LSM6DSL_AccReadXYZ+0x88>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030d1 	.word	0x080030d1
 80030a0:	080030e9 	.word	0x080030e9
 80030a4:	080030e9 	.word	0x080030e9
 80030a8:	080030e9 	.word	0x080030e9
 80030ac:	080030e3 	.word	0x080030e3
 80030b0:	080030e9 	.word	0x080030e9
 80030b4:	080030e9 	.word	0x080030e9
 80030b8:	080030e9 	.word	0x080030e9
 80030bc:	080030d7 	.word	0x080030d7
 80030c0:	080030e9 	.word	0x080030e9
 80030c4:	080030e9 	.word	0x080030e9
 80030c8:	080030e9 	.word	0x080030e9
 80030cc:	080030dd 	.word	0x080030dd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80030d0:	4b18      	ldr	r3, [pc, #96]	; (8003134 <LSM6DSL_AccReadXYZ+0x120>)
 80030d2:	61bb      	str	r3, [r7, #24]
    break;
 80030d4:	e008      	b.n	80030e8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80030d6:	4b18      	ldr	r3, [pc, #96]	; (8003138 <LSM6DSL_AccReadXYZ+0x124>)
 80030d8:	61bb      	str	r3, [r7, #24]
    break;
 80030da:	e005      	b.n	80030e8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80030dc:	4b17      	ldr	r3, [pc, #92]	; (800313c <LSM6DSL_AccReadXYZ+0x128>)
 80030de:	61bb      	str	r3, [r7, #24]
    break;
 80030e0:	e002      	b.n	80030e8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <LSM6DSL_AccReadXYZ+0x12c>)
 80030e4:	61bb      	str	r3, [r7, #24]
    break;    
 80030e6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e01a      	b.n	8003124 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80030ee:	7ffb      	ldrb	r3, [r7, #31]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	3320      	adds	r3, #32
 80030f4:	443b      	add	r3, r7
 80030f6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003102:	edd7 7a06 	vldr	s15, [r7, #24]
 8003106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310a:	7ffb      	ldrb	r3, [r7, #31]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003116:	ee17 2a90 	vmov	r2, s15
 800311a:	b212      	sxth	r2, r2
 800311c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800311e:	7ffb      	ldrb	r3, [r7, #31]
 8003120:	3301      	adds	r3, #1
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	7ffb      	ldrb	r3, [r7, #31]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d9e1      	bls.n	80030ee <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800312a:	bf00      	nop
 800312c:	bf00      	nop
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	3d79db23 	.word	0x3d79db23
 8003138:	3df9db23 	.word	0x3df9db23
 800313c:	3e79db23 	.word	0x3e79db23
 8003140:	3ef9db23 	.word	0x3ef9db23

08003144 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800314c:	2300      	movs	r3, #0
 800314e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800315a:	2111      	movs	r1, #17
 800315c:	20d4      	movs	r0, #212	; 0xd4
 800315e:	f7ff fbe5 	bl	800292c <SENSOR_IO_Read>
 8003162:	4603      	mov	r3, r0
 8003164:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8003166:	f107 0208 	add.w	r2, r7, #8
 800316a:	2306      	movs	r3, #6
 800316c:	2122      	movs	r1, #34	; 0x22
 800316e:	20d4      	movs	r0, #212	; 0xd4
 8003170:	f7ff fbfa 	bl	8002968 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003174:	2300      	movs	r3, #0
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e01c      	b.n	80031b4 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800317a:	7ffb      	ldrb	r3, [r7, #31]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	3301      	adds	r3, #1
 8003180:	3320      	adds	r3, #32
 8003182:	443b      	add	r3, r7
 8003184:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003188:	b29b      	uxth	r3, r3
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	b29a      	uxth	r2, r3
 800318e:	7ffb      	ldrb	r3, [r7, #31]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	3320      	adds	r3, #32
 8003194:	443b      	add	r3, r7
 8003196:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800319a:	b29b      	uxth	r3, r3
 800319c:	4413      	add	r3, r2
 800319e:	b29a      	uxth	r2, r3
 80031a0:	7ffb      	ldrb	r3, [r7, #31]
 80031a2:	b212      	sxth	r2, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	3320      	adds	r3, #32
 80031a8:	443b      	add	r3, r7
 80031aa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80031ae:	7ffb      	ldrb	r3, [r7, #31]
 80031b0:	3301      	adds	r3, #1
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	7ffb      	ldrb	r3, [r7, #31]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d9df      	bls.n	800317a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	d829      	bhi.n	8003218 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 80031c4:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <LSM6DSL_GyroReadXYZAngRate+0x88>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003219 	.word	0x08003219
 80031d4:	08003219 	.word	0x08003219
 80031d8:	08003219 	.word	0x08003219
 80031dc:	08003207 	.word	0x08003207
 80031e0:	08003219 	.word	0x08003219
 80031e4:	08003219 	.word	0x08003219
 80031e8:	08003219 	.word	0x08003219
 80031ec:	0800320d 	.word	0x0800320d
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003219 	.word	0x08003219
 80031f8:	08003219 	.word	0x08003219
 80031fc:	08003213 	.word	0x08003213
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003200:	4b16      	ldr	r3, [pc, #88]	; (800325c <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8003202:	61bb      	str	r3, [r7, #24]
    break;
 8003204:	e008      	b.n	8003218 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8003208:	61bb      	str	r3, [r7, #24]
    break;
 800320a:	e005      	b.n	8003218 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 800320c:	4b15      	ldr	r3, [pc, #84]	; (8003264 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800320e:	61bb      	str	r3, [r7, #24]
    break;
 8003210:	e002      	b.n	8003218 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8003214:	61bb      	str	r3, [r7, #24]
    break;    
 8003216:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003218:	2300      	movs	r3, #0
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e016      	b.n	800324c <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800321e:	7ffb      	ldrb	r3, [r7, #31]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	3320      	adds	r3, #32
 8003224:	443b      	add	r3, r7
 8003226:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003232:	7ffb      	ldrb	r3, [r7, #31]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	edd7 7a06 	vldr	s15, [r7, #24]
 800323e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003242:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8003246:	7ffb      	ldrb	r3, [r7, #31]
 8003248:	3301      	adds	r3, #1
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	7ffb      	ldrb	r3, [r7, #31]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d9e5      	bls.n	800321e <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8003252:	bf00      	nop
 8003254:	bf00      	nop
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	410c0000 	.word	0x410c0000
 8003260:	418c0000 	.word	0x418c0000
 8003264:	420c0000 	.word	0x420c0000
 8003268:	428c0000 	.word	0x428c0000

0800326c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003276:	2003      	movs	r0, #3
 8003278:	f000 f938 	bl	80034ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800327c:	2000      	movs	r0, #0
 800327e:	f000 f80d 	bl	800329c <HAL_InitTick>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	71fb      	strb	r3, [r7, #7]
 800328c:	e001      	b.n	8003292 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800328e:	f7fe ffa7 	bl	80021e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003292:	79fb      	ldrb	r3, [r7, #7]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <HAL_InitTick+0x68>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d022      	beq.n	80032f6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80032b0:	4b15      	ldr	r3, [pc, #84]	; (8003308 <HAL_InitTick+0x6c>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b13      	ldr	r3, [pc, #76]	; (8003304 <HAL_InitTick+0x68>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80032bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f946 	bl	8003556 <HAL_SYSTICK_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10f      	bne.n	80032f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b0f      	cmp	r3, #15
 80032d4:	d809      	bhi.n	80032ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d6:	2200      	movs	r2, #0
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	f04f 30ff 	mov.w	r0, #4294967295
 80032de:	f000 f910 	bl	8003502 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <HAL_InitTick+0x70>)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	e007      	b.n	80032fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	73fb      	strb	r3, [r7, #15]
 80032ee:	e004      	b.n	80032fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
 80032f4:	e001      	b.n	80032fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000054 	.word	0x20000054
 8003308:	20000004 	.word	0x20000004
 800330c:	20000050 	.word	0x20000050

08003310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_IncTick+0x1c>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_IncTick+0x20>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4413      	add	r3, r2
 800331e:	4a03      	ldr	r2, [pc, #12]	; (800332c <HAL_IncTick+0x1c>)
 8003320:	6013      	str	r3, [r2, #0]
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	200003f8 	.word	0x200003f8
 8003330:	20000054 	.word	0x20000054

08003334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return uwTick;
 8003338:	4b03      	ldr	r3, [pc, #12]	; (8003348 <HAL_GetTick+0x14>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	200003f8 	.word	0x200003f8

0800334c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <__NVIC_SetPriorityGrouping+0x44>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003368:	4013      	ands	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337e:	4a04      	ldr	r2, [pc, #16]	; (8003390 <__NVIC_SetPriorityGrouping+0x44>)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	60d3      	str	r3, [r2, #12]
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <__NVIC_GetPriorityGrouping+0x18>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	0a1b      	lsrs	r3, r3, #8
 800339e:	f003 0307 	and.w	r3, r3, #7
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	db0b      	blt.n	80033da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	f003 021f 	and.w	r2, r3, #31
 80033c8:	4907      	ldr	r1, [pc, #28]	; (80033e8 <__NVIC_EnableIRQ+0x38>)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	2001      	movs	r0, #1
 80033d2:	fa00 f202 	lsl.w	r2, r0, r2
 80033d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000e100 	.word	0xe000e100

080033ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	db0a      	blt.n	8003416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	b2da      	uxtb	r2, r3
 8003404:	490c      	ldr	r1, [pc, #48]	; (8003438 <__NVIC_SetPriority+0x4c>)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	0112      	lsls	r2, r2, #4
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	440b      	add	r3, r1
 8003410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003414:	e00a      	b.n	800342c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4908      	ldr	r1, [pc, #32]	; (800343c <__NVIC_SetPriority+0x50>)
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	3b04      	subs	r3, #4
 8003424:	0112      	lsls	r2, r2, #4
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	440b      	add	r3, r1
 800342a:	761a      	strb	r2, [r3, #24]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000e100 	.word	0xe000e100
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003440:	b480      	push	{r7}
 8003442:	b089      	sub	sp, #36	; 0x24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f1c3 0307 	rsb	r3, r3, #7
 800345a:	2b04      	cmp	r3, #4
 800345c:	bf28      	it	cs
 800345e:	2304      	movcs	r3, #4
 8003460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3304      	adds	r3, #4
 8003466:	2b06      	cmp	r3, #6
 8003468:	d902      	bls.n	8003470 <NVIC_EncodePriority+0x30>
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3b03      	subs	r3, #3
 800346e:	e000      	b.n	8003472 <NVIC_EncodePriority+0x32>
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003474:	f04f 32ff 	mov.w	r2, #4294967295
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	401a      	ands	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003488:	f04f 31ff 	mov.w	r1, #4294967295
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	43d9      	mvns	r1, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003498:	4313      	orrs	r3, r2
         );
}
 800349a:	4618      	mov	r0, r3
 800349c:	3724      	adds	r7, #36	; 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b8:	d301      	bcc.n	80034be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ba:	2301      	movs	r3, #1
 80034bc:	e00f      	b.n	80034de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034be:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <SysTick_Config+0x40>)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034c6:	210f      	movs	r1, #15
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	f7ff ff8e 	bl	80033ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <SysTick_Config+0x40>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034d6:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <SysTick_Config+0x40>)
 80034d8:	2207      	movs	r2, #7
 80034da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	e000e010 	.word	0xe000e010

080034ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff ff29 	bl	800334c <__NVIC_SetPriorityGrouping>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003514:	f7ff ff3e 	bl	8003394 <__NVIC_GetPriorityGrouping>
 8003518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	6978      	ldr	r0, [r7, #20]
 8003520:	f7ff ff8e 	bl	8003440 <NVIC_EncodePriority>
 8003524:	4602      	mov	r2, r0
 8003526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff5d 	bl	80033ec <__NVIC_SetPriority>
}
 8003532:	bf00      	nop
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff31 	bl	80033b0 <__NVIC_EnableIRQ>
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ffa2 	bl	80034a8 <SysTick_Config>
 8003564:	4603      	mov	r3, r0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357e:	e17f      	b.n	8003880 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2101      	movs	r1, #1
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	4013      	ands	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8171 	beq.w	800387a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d00b      	beq.n	80035b8 <HAL_GPIO_Init+0x48>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d007      	beq.n	80035b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035ac:	2b11      	cmp	r3, #17
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b12      	cmp	r3, #18
 80035b6:	d130      	bne.n	800361a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ee:	2201      	movs	r2, #1
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	f003 0201 	and.w	r2, r3, #1
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b03      	cmp	r3, #3
 8003624:	d118      	bne.n	8003658 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800362c:	2201      	movs	r2, #1
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	08db      	lsrs	r3, r3, #3
 8003642:	f003 0201 	and.w	r2, r3, #1
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x128>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b12      	cmp	r3, #18
 8003696:	d123      	bne.n	80036e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	08da      	lsrs	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3208      	adds	r2, #8
 80036a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	220f      	movs	r2, #15
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	08da      	lsrs	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3208      	adds	r2, #8
 80036da:	6939      	ldr	r1, [r7, #16]
 80036dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4013      	ands	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0203 	and.w	r2, r3, #3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80ac 	beq.w	800387a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003722:	4b5f      	ldr	r3, [pc, #380]	; (80038a0 <HAL_GPIO_Init+0x330>)
 8003724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003726:	4a5e      	ldr	r2, [pc, #376]	; (80038a0 <HAL_GPIO_Init+0x330>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6613      	str	r3, [r2, #96]	; 0x60
 800372e:	4b5c      	ldr	r3, [pc, #368]	; (80038a0 <HAL_GPIO_Init+0x330>)
 8003730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800373a:	4a5a      	ldr	r2, [pc, #360]	; (80038a4 <HAL_GPIO_Init+0x334>)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	3302      	adds	r3, #2
 8003742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003746:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	220f      	movs	r2, #15
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003764:	d025      	beq.n	80037b2 <HAL_GPIO_Init+0x242>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a4f      	ldr	r2, [pc, #316]	; (80038a8 <HAL_GPIO_Init+0x338>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01f      	beq.n	80037ae <HAL_GPIO_Init+0x23e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a4e      	ldr	r2, [pc, #312]	; (80038ac <HAL_GPIO_Init+0x33c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d019      	beq.n	80037aa <HAL_GPIO_Init+0x23a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a4d      	ldr	r2, [pc, #308]	; (80038b0 <HAL_GPIO_Init+0x340>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <HAL_GPIO_Init+0x236>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4c      	ldr	r2, [pc, #304]	; (80038b4 <HAL_GPIO_Init+0x344>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00d      	beq.n	80037a2 <HAL_GPIO_Init+0x232>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4b      	ldr	r2, [pc, #300]	; (80038b8 <HAL_GPIO_Init+0x348>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <HAL_GPIO_Init+0x22e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4a      	ldr	r2, [pc, #296]	; (80038bc <HAL_GPIO_Init+0x34c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d101      	bne.n	800379a <HAL_GPIO_Init+0x22a>
 8003796:	2306      	movs	r3, #6
 8003798:	e00c      	b.n	80037b4 <HAL_GPIO_Init+0x244>
 800379a:	2307      	movs	r3, #7
 800379c:	e00a      	b.n	80037b4 <HAL_GPIO_Init+0x244>
 800379e:	2305      	movs	r3, #5
 80037a0:	e008      	b.n	80037b4 <HAL_GPIO_Init+0x244>
 80037a2:	2304      	movs	r3, #4
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x244>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e004      	b.n	80037b4 <HAL_GPIO_Init+0x244>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e002      	b.n	80037b4 <HAL_GPIO_Init+0x244>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_GPIO_Init+0x244>
 80037b2:	2300      	movs	r3, #0
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	f002 0203 	and.w	r2, r2, #3
 80037ba:	0092      	lsls	r2, r2, #2
 80037bc:	4093      	lsls	r3, r2
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037c4:	4937      	ldr	r1, [pc, #220]	; (80038a4 <HAL_GPIO_Init+0x334>)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037d2:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_GPIO_Init+0x350>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037f6:	4a32      	ldr	r2, [pc, #200]	; (80038c0 <HAL_GPIO_Init+0x350>)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80037fc:	4b30      	ldr	r3, [pc, #192]	; (80038c0 <HAL_GPIO_Init+0x350>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	43db      	mvns	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003820:	4a27      	ldr	r2, [pc, #156]	; (80038c0 <HAL_GPIO_Init+0x350>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003826:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <HAL_GPIO_Init+0x350>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	43db      	mvns	r3, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800384a:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <HAL_GPIO_Init+0x350>)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_GPIO_Init+0x350>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	43db      	mvns	r3, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003874:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <HAL_GPIO_Init+0x350>)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	3301      	adds	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	f47f ae78 	bne.w	8003580 <HAL_GPIO_Init+0x10>
  }
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40010000 	.word	0x40010000
 80038a8:	48000400 	.word	0x48000400
 80038ac:	48000800 	.word	0x48000800
 80038b0:	48000c00 	.word	0x48000c00
 80038b4:	48001000 	.word	0x48001000
 80038b8:	48001400 	.word	0x48001400
 80038bc:	48001800 	.word	0x48001800
 80038c0:	40010400 	.word	0x40010400

080038c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80038d2:	e0cd      	b.n	8003a70 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80038d4:	2201      	movs	r2, #1
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80c0 	beq.w	8003a6a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80038ea:	4a68      	ldr	r2, [pc, #416]	; (8003a8c <HAL_GPIO_DeInit+0x1c8>)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	089b      	lsrs	r3, r3, #2
 80038f0:	3302      	adds	r3, #2
 80038f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	220f      	movs	r2, #15
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4013      	ands	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003912:	d025      	beq.n	8003960 <HAL_GPIO_DeInit+0x9c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a5e      	ldr	r2, [pc, #376]	; (8003a90 <HAL_GPIO_DeInit+0x1cc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d01f      	beq.n	800395c <HAL_GPIO_DeInit+0x98>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a5d      	ldr	r2, [pc, #372]	; (8003a94 <HAL_GPIO_DeInit+0x1d0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d019      	beq.n	8003958 <HAL_GPIO_DeInit+0x94>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a5c      	ldr	r2, [pc, #368]	; (8003a98 <HAL_GPIO_DeInit+0x1d4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d013      	beq.n	8003954 <HAL_GPIO_DeInit+0x90>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a5b      	ldr	r2, [pc, #364]	; (8003a9c <HAL_GPIO_DeInit+0x1d8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00d      	beq.n	8003950 <HAL_GPIO_DeInit+0x8c>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a5a      	ldr	r2, [pc, #360]	; (8003aa0 <HAL_GPIO_DeInit+0x1dc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d007      	beq.n	800394c <HAL_GPIO_DeInit+0x88>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a59      	ldr	r2, [pc, #356]	; (8003aa4 <HAL_GPIO_DeInit+0x1e0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d101      	bne.n	8003948 <HAL_GPIO_DeInit+0x84>
 8003944:	2306      	movs	r3, #6
 8003946:	e00c      	b.n	8003962 <HAL_GPIO_DeInit+0x9e>
 8003948:	2307      	movs	r3, #7
 800394a:	e00a      	b.n	8003962 <HAL_GPIO_DeInit+0x9e>
 800394c:	2305      	movs	r3, #5
 800394e:	e008      	b.n	8003962 <HAL_GPIO_DeInit+0x9e>
 8003950:	2304      	movs	r3, #4
 8003952:	e006      	b.n	8003962 <HAL_GPIO_DeInit+0x9e>
 8003954:	2303      	movs	r3, #3
 8003956:	e004      	b.n	8003962 <HAL_GPIO_DeInit+0x9e>
 8003958:	2302      	movs	r3, #2
 800395a:	e002      	b.n	8003962 <HAL_GPIO_DeInit+0x9e>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <HAL_GPIO_DeInit+0x9e>
 8003960:	2300      	movs	r3, #0
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	f002 0203 	and.w	r2, r2, #3
 8003968:	0092      	lsls	r2, r2, #2
 800396a:	4093      	lsls	r3, r2
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	429a      	cmp	r2, r3
 8003970:	d132      	bne.n	80039d8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003972:	4b4d      	ldr	r3, [pc, #308]	; (8003aa8 <HAL_GPIO_DeInit+0x1e4>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	43db      	mvns	r3, r3
 800397a:	494b      	ldr	r1, [pc, #300]	; (8003aa8 <HAL_GPIO_DeInit+0x1e4>)
 800397c:	4013      	ands	r3, r2
 800397e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003980:	4b49      	ldr	r3, [pc, #292]	; (8003aa8 <HAL_GPIO_DeInit+0x1e4>)
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	43db      	mvns	r3, r3
 8003988:	4947      	ldr	r1, [pc, #284]	; (8003aa8 <HAL_GPIO_DeInit+0x1e4>)
 800398a:	4013      	ands	r3, r2
 800398c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800398e:	4b46      	ldr	r3, [pc, #280]	; (8003aa8 <HAL_GPIO_DeInit+0x1e4>)
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	43db      	mvns	r3, r3
 8003996:	4944      	ldr	r1, [pc, #272]	; (8003aa8 <HAL_GPIO_DeInit+0x1e4>)
 8003998:	4013      	ands	r3, r2
 800399a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800399c:	4b42      	ldr	r3, [pc, #264]	; (8003aa8 <HAL_GPIO_DeInit+0x1e4>)
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	4940      	ldr	r1, [pc, #256]	; (8003aa8 <HAL_GPIO_DeInit+0x1e4>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	220f      	movs	r2, #15
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80039ba:	4a34      	ldr	r2, [pc, #208]	; (8003a8c <HAL_GPIO_DeInit+0x1c8>)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	3302      	adds	r3, #2
 80039c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	43da      	mvns	r2, r3
 80039ca:	4830      	ldr	r0, [pc, #192]	; (8003a8c <HAL_GPIO_DeInit+0x1c8>)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	400a      	ands	r2, r1
 80039d2:	3302      	adds	r3, #2
 80039d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	2103      	movs	r1, #3
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	08da      	lsrs	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3208      	adds	r2, #8
 80039f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	220f      	movs	r2, #15
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	08d2      	lsrs	r2, r2, #3
 8003a0c:	4019      	ands	r1, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3208      	adds	r2, #8
 8003a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	2103      	movs	r1, #3
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	401a      	ands	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	2101      	movs	r1, #1
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	2103      	movs	r1, #3
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	401a      	ands	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	401a      	ands	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f47f af2b 	bne.w	80038d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8003a7e:	bf00      	nop
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	48000400 	.word	0x48000400
 8003a94:	48000800 	.word	0x48000800
 8003a98:	48000c00 	.word	0x48000c00
 8003a9c:	48001000 	.word	0x48001000
 8003aa0:	48001400 	.word	0x48001400
 8003aa4:	48001800 	.word	0x48001800
 8003aa8:	40010400 	.word	0x40010400

08003aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003abc:	787b      	ldrb	r3, [r7, #1]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ac8:	e002      	b.n	8003ad0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695a      	ldr	r2, [r3, #20]
 8003aec:	887b      	ldrh	r3, [r7, #2]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003af4:	887a      	ldrh	r2, [r7, #2]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003afa:	e002      	b.n	8003b02 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003afc:	887a      	ldrh	r2, [r7, #2]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	619a      	str	r2, [r3, #24]
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b1a:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d006      	beq.n	8003b34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b26:	4a05      	ldr	r2, [pc, #20]	; (8003b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fe4e 	bl	80017d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40010400 	.word	0x40010400

08003b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e081      	b.n	8003c56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fe fb5e 	bl	8002228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ba0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	e006      	b.n	8003bc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003bc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d104      	bne.n	8003bda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	ea42 0103 	orr.w	r1, r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	021a      	lsls	r2, r3, #8
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69d9      	ldr	r1, [r3, #28]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e021      	b.n	8003cb4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2224      	movs	r2, #36	; 0x24
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7fe fb11 	bl	80022b0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4603      	mov	r3, r0
 8003ccc:	817b      	strh	r3, [r7, #10]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	813b      	strh	r3, [r7, #8]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	f040 80f9 	bne.w	8003ed6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_I2C_Mem_Write+0x34>
 8003cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d105      	bne.n	8003cfc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0ed      	b.n	8003ed8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_I2C_Mem_Write+0x4e>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e0e6      	b.n	8003ed8 <HAL_I2C_Mem_Write+0x21c>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d12:	f7ff fb0f 	bl	8003334 <HAL_GetTick>
 8003d16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	2319      	movs	r3, #25
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fac3 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0d1      	b.n	8003ed8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2221      	movs	r2, #33	; 0x21
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2240      	movs	r2, #64	; 0x40
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a3a      	ldr	r2, [r7, #32]
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d5c:	88f8      	ldrh	r0, [r7, #6]
 8003d5e:	893a      	ldrh	r2, [r7, #8]
 8003d60:	8979      	ldrh	r1, [r7, #10]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	9301      	str	r3, [sp, #4]
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f9d3 	bl	8004118 <I2C_RequestMemoryWrite>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0a9      	b.n	8003ed8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2bff      	cmp	r3, #255	; 0xff
 8003d8c:	d90e      	bls.n	8003dac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	22ff      	movs	r2, #255	; 0xff
 8003d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	8979      	ldrh	r1, [r7, #10]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 fba5 	bl	80044f4 <I2C_TransferConfig>
 8003daa:	e00f      	b.n	8003dcc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	8979      	ldrh	r1, [r7, #10]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fb94 	bl	80044f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 faad 	bl	8004330 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e07b      	b.n	8003ed8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d034      	beq.n	8003e84 <HAL_I2C_Mem_Write+0x1c8>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d130      	bne.n	8003e84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2180      	movs	r1, #128	; 0x80
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fa3f 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e04d      	b.n	8003ed8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2bff      	cmp	r3, #255	; 0xff
 8003e44:	d90e      	bls.n	8003e64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	22ff      	movs	r2, #255	; 0xff
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	8979      	ldrh	r1, [r7, #10]
 8003e54:	2300      	movs	r3, #0
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fb49 	bl	80044f4 <I2C_TransferConfig>
 8003e62:	e00f      	b.n	8003e84 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	8979      	ldrh	r1, [r7, #10]
 8003e76:	2300      	movs	r3, #0
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fb38 	bl	80044f4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d19e      	bne.n	8003dcc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fa8c 	bl	80043b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e01a      	b.n	8003ed8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_I2C_Mem_Write+0x224>)
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	fe00e800 	.word	0xfe00e800

08003ee4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	813b      	strh	r3, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	f040 80fd 	bne.w	8004106 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_I2C_Mem_Read+0x34>
 8003f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0f1      	b.n	8004108 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_I2C_Mem_Read+0x4e>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e0ea      	b.n	8004108 <HAL_I2C_Mem_Read+0x224>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f3a:	f7ff f9fb 	bl	8003334 <HAL_GetTick>
 8003f3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2319      	movs	r3, #25
 8003f46:	2201      	movs	r2, #1
 8003f48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f9af 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0d5      	b.n	8004108 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2222      	movs	r2, #34	; 0x22
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2240      	movs	r2, #64	; 0x40
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a3a      	ldr	r2, [r7, #32]
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f84:	88f8      	ldrh	r0, [r7, #6]
 8003f86:	893a      	ldrh	r2, [r7, #8]
 8003f88:	8979      	ldrh	r1, [r7, #10]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	4603      	mov	r3, r0
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f913 	bl	80041c0 <I2C_RequestMemoryRead>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0ad      	b.n	8004108 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2bff      	cmp	r3, #255	; 0xff
 8003fb4:	d90e      	bls.n	8003fd4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	22ff      	movs	r2, #255	; 0xff
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	8979      	ldrh	r1, [r7, #10]
 8003fc4:	4b52      	ldr	r3, [pc, #328]	; (8004110 <HAL_I2C_Mem_Read+0x22c>)
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fa91 	bl	80044f4 <I2C_TransferConfig>
 8003fd2:	e00f      	b.n	8003ff4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	8979      	ldrh	r1, [r7, #10]
 8003fe6:	4b4a      	ldr	r3, [pc, #296]	; (8004110 <HAL_I2C_Mem_Read+0x22c>)
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fa80 	bl	80044f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2104      	movs	r1, #4
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f956 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e07c      	b.n	8004108 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d034      	beq.n	80040b4 <HAL_I2C_Mem_Read+0x1d0>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404e:	2b00      	cmp	r3, #0
 8004050:	d130      	bne.n	80040b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	2200      	movs	r2, #0
 800405a:	2180      	movs	r1, #128	; 0x80
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f927 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e04d      	b.n	8004108 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	2bff      	cmp	r3, #255	; 0xff
 8004074:	d90e      	bls.n	8004094 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	22ff      	movs	r2, #255	; 0xff
 800407a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004080:	b2da      	uxtb	r2, r3
 8004082:	8979      	ldrh	r1, [r7, #10]
 8004084:	2300      	movs	r3, #0
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 fa31 	bl	80044f4 <I2C_TransferConfig>
 8004092:	e00f      	b.n	80040b4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	8979      	ldrh	r1, [r7, #10]
 80040a6:	2300      	movs	r3, #0
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fa20 	bl	80044f4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d19a      	bne.n	8003ff4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f974 	bl	80043b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e01a      	b.n	8004108 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2220      	movs	r2, #32
 80040d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_I2C_Mem_Read+0x230>)
 80040e6:	400b      	ands	r3, r1
 80040e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
  }
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	80002400 	.word	0x80002400
 8004114:	fe00e800 	.word	0xfe00e800

08004118 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	4608      	mov	r0, r1
 8004122:	4611      	mov	r1, r2
 8004124:	461a      	mov	r2, r3
 8004126:	4603      	mov	r3, r0
 8004128:	817b      	strh	r3, [r7, #10]
 800412a:	460b      	mov	r3, r1
 800412c:	813b      	strh	r3, [r7, #8]
 800412e:	4613      	mov	r3, r2
 8004130:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	b2da      	uxtb	r2, r3
 8004136:	8979      	ldrh	r1, [r7, #10]
 8004138:	4b20      	ldr	r3, [pc, #128]	; (80041bc <I2C_RequestMemoryWrite+0xa4>)
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f9d7 	bl	80044f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	69b9      	ldr	r1, [r7, #24]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f8f0 	bl	8004330 <I2C_WaitOnTXISFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e02c      	b.n	80041b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d105      	bne.n	800416c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004160:	893b      	ldrh	r3, [r7, #8]
 8004162:	b2da      	uxtb	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	629a      	str	r2, [r3, #40]	; 0x28
 800416a:	e015      	b.n	8004198 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800416c:	893b      	ldrh	r3, [r7, #8]
 800416e:	0a1b      	lsrs	r3, r3, #8
 8004170:	b29b      	uxth	r3, r3
 8004172:	b2da      	uxtb	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	69b9      	ldr	r1, [r7, #24]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f8d6 	bl	8004330 <I2C_WaitOnTXISFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e012      	b.n	80041b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800418e:	893b      	ldrh	r3, [r7, #8]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2200      	movs	r2, #0
 80041a0:	2180      	movs	r1, #128	; 0x80
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f884 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	80002000 	.word	0x80002000

080041c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	4608      	mov	r0, r1
 80041ca:	4611      	mov	r1, r2
 80041cc:	461a      	mov	r2, r3
 80041ce:	4603      	mov	r3, r0
 80041d0:	817b      	strh	r3, [r7, #10]
 80041d2:	460b      	mov	r3, r1
 80041d4:	813b      	strh	r3, [r7, #8]
 80041d6:	4613      	mov	r3, r2
 80041d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	8979      	ldrh	r1, [r7, #10]
 80041e0:	4b20      	ldr	r3, [pc, #128]	; (8004264 <I2C_RequestMemoryRead+0xa4>)
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	2300      	movs	r3, #0
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f984 	bl	80044f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	69b9      	ldr	r1, [r7, #24]
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f89d 	bl	8004330 <I2C_WaitOnTXISFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e02c      	b.n	800425a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d105      	bne.n	8004212 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004206:	893b      	ldrh	r3, [r7, #8]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	629a      	str	r2, [r3, #40]	; 0x28
 8004210:	e015      	b.n	800423e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004212:	893b      	ldrh	r3, [r7, #8]
 8004214:	0a1b      	lsrs	r3, r3, #8
 8004216:	b29b      	uxth	r3, r3
 8004218:	b2da      	uxtb	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	69b9      	ldr	r1, [r7, #24]
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f883 	bl	8004330 <I2C_WaitOnTXISFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e012      	b.n	800425a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004234:	893b      	ldrh	r3, [r7, #8]
 8004236:	b2da      	uxtb	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2200      	movs	r2, #0
 8004246:	2140      	movs	r1, #64	; 0x40
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f831 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	80002000 	.word	0x80002000

08004268 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d103      	bne.n	8004286 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d007      	beq.n	80042a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	619a      	str	r2, [r3, #24]
  }
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	4613      	mov	r3, r2
 80042be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c0:	e022      	b.n	8004308 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c8:	d01e      	beq.n	8004308 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ca:	f7ff f833 	bl	8003334 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d302      	bcc.n	80042e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d113      	bne.n	8004308 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e4:	f043 0220 	orr.w	r2, r3, #32
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e00f      	b.n	8004328 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4013      	ands	r3, r2
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	429a      	cmp	r2, r3
 8004324:	d0cd      	beq.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800433c:	e02c      	b.n	8004398 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f870 	bl	8004428 <I2C_IsAcknowledgeFailed>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e02a      	b.n	80043a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d01e      	beq.n	8004398 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fe ffeb 	bl	8003334 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d113      	bne.n	8004398 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004374:	f043 0220 	orr.w	r2, r3, #32
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e007      	b.n	80043a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d1cb      	bne.n	800433e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043bc:	e028      	b.n	8004410 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f830 	bl	8004428 <I2C_IsAcknowledgeFailed>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e026      	b.n	8004420 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fe ffaf 	bl	8003334 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d113      	bne.n	8004410 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	f043 0220 	orr.w	r2, r3, #32
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e007      	b.n	8004420 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b20      	cmp	r3, #32
 800441c:	d1cf      	bne.n	80043be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b10      	cmp	r3, #16
 8004440:	d151      	bne.n	80044e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004442:	e022      	b.n	800448a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d01e      	beq.n	800448a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444c:	f7fe ff72 	bl	8003334 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	429a      	cmp	r2, r3
 800445a:	d302      	bcc.n	8004462 <I2C_IsAcknowledgeFailed+0x3a>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d113      	bne.n	800448a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e02e      	b.n	80044e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b20      	cmp	r3, #32
 8004496:	d1d5      	bne.n	8004444 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2210      	movs	r2, #16
 800449e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2220      	movs	r2, #32
 80044a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f7ff fedd 	bl	8004268 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6859      	ldr	r1, [r3, #4]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80044ba:	400b      	ands	r3, r1
 80044bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	f043 0204 	orr.w	r2, r3, #4
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	fe00e800 	.word	0xfe00e800

080044f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	817b      	strh	r3, [r7, #10]
 8004502:	4613      	mov	r3, r2
 8004504:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	0d5b      	lsrs	r3, r3, #21
 8004510:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004514:	4b0d      	ldr	r3, [pc, #52]	; (800454c <I2C_TransferConfig+0x58>)
 8004516:	430b      	orrs	r3, r1
 8004518:	43db      	mvns	r3, r3
 800451a:	ea02 0103 	and.w	r1, r2, r3
 800451e:	897b      	ldrh	r3, [r7, #10]
 8004520:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004524:	7a7b      	ldrb	r3, [r7, #9]
 8004526:	041b      	lsls	r3, r3, #16
 8004528:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	431a      	orrs	r2, r3
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	431a      	orrs	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	03ff63ff 	.word	0x03ff63ff

08004550 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b20      	cmp	r3, #32
 8004564:	d138      	bne.n	80045d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004570:	2302      	movs	r3, #2
 8004572:	e032      	b.n	80045da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2224      	movs	r2, #36	; 0x24
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6819      	ldr	r1, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	; 0x24
 80045ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045f6:	4b3e      	ldr	r3, [pc, #248]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004600:	4b3b      	ldr	r3, [pc, #236]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0x34>
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2b0c      	cmp	r3, #12
 8004614:	d121      	bne.n	800465a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d11e      	bne.n	800465a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800461c:	4b34      	ldr	r3, [pc, #208]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d107      	bne.n	8004638 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004628:	4b31      	ldr	r3, [pc, #196]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800462a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462e:	0a1b      	lsrs	r3, r3, #8
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	e005      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004638:	4b2d      	ldr	r3, [pc, #180]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004644:	4a2b      	ldr	r2, [pc, #172]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10d      	bne.n	8004670 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004658:	e00a      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b04      	cmp	r3, #4
 800465e:	d102      	bne.n	8004666 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	e004      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d101      	bne.n	8004670 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800466c:	4b23      	ldr	r3, [pc, #140]	; (80046fc <HAL_RCC_GetSysClockFreq+0x114>)
 800466e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b0c      	cmp	r3, #12
 8004674:	d134      	bne.n	80046e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004676:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d003      	beq.n	800468e <HAL_RCC_GetSysClockFreq+0xa6>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d003      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0xac>
 800468c:	e005      	b.n	800469a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800468e:	4b1a      	ldr	r3, [pc, #104]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004690:	617b      	str	r3, [r7, #20]
      break;
 8004692:	e005      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004694:	4b19      	ldr	r3, [pc, #100]	; (80046fc <HAL_RCC_GetSysClockFreq+0x114>)
 8004696:	617b      	str	r3, [r7, #20]
      break;
 8004698:	e002      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	617b      	str	r3, [r7, #20]
      break;
 800469e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046a0:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	091b      	lsrs	r3, r3, #4
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	3301      	adds	r3, #1
 80046ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046ae:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	0a1b      	lsrs	r3, r3, #8
 80046b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	fb03 f202 	mul.w	r2, r3, r2
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	0e5b      	lsrs	r3, r3, #25
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	3301      	adds	r3, #1
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	fbb2 f3f3 	udiv	r3, r2, r3
 80046de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046e0:	69bb      	ldr	r3, [r7, #24]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3724      	adds	r7, #36	; 0x24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000
 80046f4:	08009594 	.word	0x08009594
 80046f8:	00f42400 	.word	0x00f42400
 80046fc:	007a1200 	.word	0x007a1200

08004700 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004704:	4b03      	ldr	r3, [pc, #12]	; (8004714 <HAL_RCC_GetHCLKFreq+0x14>)
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000004 	.word	0x20000004

08004718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800471c:	f7ff fff0 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004720:	4602      	mov	r2, r0
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	0a1b      	lsrs	r3, r3, #8
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	4904      	ldr	r1, [pc, #16]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800472e:	5ccb      	ldrb	r3, [r1, r3]
 8004730:	f003 031f 	and.w	r3, r3, #31
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000
 8004740:	0800958c 	.word	0x0800958c

08004744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004748:	f7ff ffda 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 800474c:	4602      	mov	r2, r0
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	0adb      	lsrs	r3, r3, #11
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4904      	ldr	r1, [pc, #16]	; (800476c <HAL_RCC_GetPCLK2Freq+0x28>)
 800475a:	5ccb      	ldrb	r3, [r1, r3]
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004764:	4618      	mov	r0, r3
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40021000 	.word	0x40021000
 800476c:	0800958c 	.word	0x0800958c

08004770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e040      	b.n	8004804 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fd fdaa 	bl	80022ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2224      	movs	r2, #36	; 0x24
 800479c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8c0 	bl	8004934 <UART_SetConfig>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e022      	b.n	8004804 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fc54 	bl	8005074 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fcdb 	bl	80051b8 <UART_CheckIdleState>
 8004802:	4603      	mov	r3, r0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	; 0x28
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004820:	2b20      	cmp	r3, #32
 8004822:	f040 8081 	bne.w	8004928 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_UART_Transmit+0x26>
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e079      	b.n	800492a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_UART_Transmit+0x38>
 8004840:	2302      	movs	r3, #2
 8004842:	e072      	b.n	800492a <HAL_UART_Transmit+0x11e>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2221      	movs	r2, #33	; 0x21
 8004856:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004858:	f7fe fd6c 	bl	8003334 <HAL_GetTick>
 800485c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	88fa      	ldrh	r2, [r7, #6]
 8004862:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004876:	d108      	bne.n	800488a <HAL_UART_Transmit+0x7e>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d104      	bne.n	800488a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004880:	2300      	movs	r3, #0
 8004882:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	e003      	b.n	8004892 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800489a:	e02d      	b.n	80048f8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2200      	movs	r2, #0
 80048a4:	2180      	movs	r1, #128	; 0x80
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 fccb 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e039      	b.n	800492a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	881a      	ldrh	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c8:	b292      	uxth	r2, r2
 80048ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	3302      	adds	r3, #2
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	e008      	b.n	80048e6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	b292      	uxth	r2, r2
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	3301      	adds	r3, #1
 80048e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1cb      	bne.n	800489c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2200      	movs	r2, #0
 800490c:	2140      	movs	r1, #64	; 0x40
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 fc97 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e005      	b.n	800492a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	e000      	b.n	800492a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004928:	2302      	movs	r3, #2
  }
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004938:	b0a0      	sub	sp, #128	; 0x80
 800493a:	af00      	add	r7, sp, #0
 800493c:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800493e:	2300      	movs	r3, #0
 8004940:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004948:	2300      	movs	r3, #0
 800494a:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800494c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	431a      	orrs	r2, r3
 8004956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	431a      	orrs	r2, r3
 800495c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	4313      	orrs	r3, r2
 8004962:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	49a4      	ldr	r1, [pc, #656]	; (8004bfc <UART_SetConfig+0x2c8>)
 800496c:	4019      	ands	r1, r3
 800496e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004974:	430b      	orrs	r3, r1
 8004976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004984:	68d9      	ldr	r1, [r3, #12]
 8004986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	ea40 0301 	orr.w	r3, r0, r1
 800498e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b99      	ldr	r3, [pc, #612]	; (8004c00 <UART_SetConfig+0x2cc>)
 800499c:	429a      	cmp	r2, r3
 800499e:	d004      	beq.n	80049aa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a2:	6a1a      	ldr	r2, [r3, #32]
 80049a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049a6:	4313      	orrs	r3, r2
 80049a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049ba:	430b      	orrs	r3, r1
 80049bc:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	4b90      	ldr	r3, [pc, #576]	; (8004c04 <UART_SetConfig+0x2d0>)
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d125      	bne.n	8004a14 <UART_SetConfig+0xe0>
 80049c8:	4b8f      	ldr	r3, [pc, #572]	; (8004c08 <UART_SetConfig+0x2d4>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d81a      	bhi.n	8004a0c <UART_SetConfig+0xd8>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <UART_SetConfig+0xa8>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	080049fd 	.word	0x080049fd
 80049e4:	080049f5 	.word	0x080049f5
 80049e8:	08004a05 	.word	0x08004a05
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80049f2:	e116      	b.n	8004c22 <UART_SetConfig+0x2ee>
 80049f4:	2302      	movs	r3, #2
 80049f6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80049fa:	e112      	b.n	8004c22 <UART_SetConfig+0x2ee>
 80049fc:	2304      	movs	r3, #4
 80049fe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a02:	e10e      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004a04:	2308      	movs	r3, #8
 8004a06:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a0a:	e10a      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a12:	e106      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4b7c      	ldr	r3, [pc, #496]	; (8004c0c <UART_SetConfig+0x2d8>)
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d138      	bne.n	8004a90 <UART_SetConfig+0x15c>
 8004a1e:	4b7a      	ldr	r3, [pc, #488]	; (8004c08 <UART_SetConfig+0x2d4>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b0c      	cmp	r3, #12
 8004a2a:	d82d      	bhi.n	8004a88 <UART_SetConfig+0x154>
 8004a2c:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <UART_SetConfig+0x100>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a69 	.word	0x08004a69
 8004a38:	08004a89 	.word	0x08004a89
 8004a3c:	08004a89 	.word	0x08004a89
 8004a40:	08004a89 	.word	0x08004a89
 8004a44:	08004a79 	.word	0x08004a79
 8004a48:	08004a89 	.word	0x08004a89
 8004a4c:	08004a89 	.word	0x08004a89
 8004a50:	08004a89 	.word	0x08004a89
 8004a54:	08004a71 	.word	0x08004a71
 8004a58:	08004a89 	.word	0x08004a89
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a81 	.word	0x08004a81
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a6e:	e0d8      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004a70:	2302      	movs	r3, #2
 8004a72:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a76:	e0d4      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004a78:	2304      	movs	r3, #4
 8004a7a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a7e:	e0d0      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004a80:	2308      	movs	r3, #8
 8004a82:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a86:	e0cc      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a8e:	e0c8      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b5e      	ldr	r3, [pc, #376]	; (8004c10 <UART_SetConfig+0x2dc>)
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d125      	bne.n	8004ae6 <UART_SetConfig+0x1b2>
 8004a9a:	4b5b      	ldr	r3, [pc, #364]	; (8004c08 <UART_SetConfig+0x2d4>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004aa4:	2b30      	cmp	r3, #48	; 0x30
 8004aa6:	d016      	beq.n	8004ad6 <UART_SetConfig+0x1a2>
 8004aa8:	2b30      	cmp	r3, #48	; 0x30
 8004aaa:	d818      	bhi.n	8004ade <UART_SetConfig+0x1aa>
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d00a      	beq.n	8004ac6 <UART_SetConfig+0x192>
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d814      	bhi.n	8004ade <UART_SetConfig+0x1aa>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <UART_SetConfig+0x18a>
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	d008      	beq.n	8004ace <UART_SetConfig+0x19a>
 8004abc:	e00f      	b.n	8004ade <UART_SetConfig+0x1aa>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004ac4:	e0ad      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004acc:	e0a9      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004ace:	2304      	movs	r3, #4
 8004ad0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004ad4:	e0a5      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004adc:	e0a1      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004ade:	2310      	movs	r3, #16
 8004ae0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004ae4:	e09d      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4b4a      	ldr	r3, [pc, #296]	; (8004c14 <UART_SetConfig+0x2e0>)
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d125      	bne.n	8004b3c <UART_SetConfig+0x208>
 8004af0:	4b45      	ldr	r3, [pc, #276]	; (8004c08 <UART_SetConfig+0x2d4>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004afa:	2bc0      	cmp	r3, #192	; 0xc0
 8004afc:	d016      	beq.n	8004b2c <UART_SetConfig+0x1f8>
 8004afe:	2bc0      	cmp	r3, #192	; 0xc0
 8004b00:	d818      	bhi.n	8004b34 <UART_SetConfig+0x200>
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d00a      	beq.n	8004b1c <UART_SetConfig+0x1e8>
 8004b06:	2b80      	cmp	r3, #128	; 0x80
 8004b08:	d814      	bhi.n	8004b34 <UART_SetConfig+0x200>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <UART_SetConfig+0x1e0>
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d008      	beq.n	8004b24 <UART_SetConfig+0x1f0>
 8004b12:	e00f      	b.n	8004b34 <UART_SetConfig+0x200>
 8004b14:	2300      	movs	r3, #0
 8004b16:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b1a:	e082      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b22:	e07e      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004b24:	2304      	movs	r3, #4
 8004b26:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b2a:	e07a      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b32:	e076      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004b34:	2310      	movs	r3, #16
 8004b36:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b3a:	e072      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <UART_SetConfig+0x2e4>)
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d12a      	bne.n	8004b9c <UART_SetConfig+0x268>
 8004b46:	4b30      	ldr	r3, [pc, #192]	; (8004c08 <UART_SetConfig+0x2d4>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b54:	d01a      	beq.n	8004b8c <UART_SetConfig+0x258>
 8004b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b5a:	d81b      	bhi.n	8004b94 <UART_SetConfig+0x260>
 8004b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b60:	d00c      	beq.n	8004b7c <UART_SetConfig+0x248>
 8004b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b66:	d815      	bhi.n	8004b94 <UART_SetConfig+0x260>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <UART_SetConfig+0x240>
 8004b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b70:	d008      	beq.n	8004b84 <UART_SetConfig+0x250>
 8004b72:	e00f      	b.n	8004b94 <UART_SetConfig+0x260>
 8004b74:	2300      	movs	r3, #0
 8004b76:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b7a:	e052      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b82:	e04e      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004b84:	2304      	movs	r3, #4
 8004b86:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b8a:	e04a      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004b8c:	2308      	movs	r3, #8
 8004b8e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b92:	e046      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004b94:	2310      	movs	r3, #16
 8004b96:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b9a:	e042      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <UART_SetConfig+0x2cc>)
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d13a      	bne.n	8004c1c <UART_SetConfig+0x2e8>
 8004ba6:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <UART_SetConfig+0x2d4>)
 8004ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bb4:	d01a      	beq.n	8004bec <UART_SetConfig+0x2b8>
 8004bb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bba:	d81b      	bhi.n	8004bf4 <UART_SetConfig+0x2c0>
 8004bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc0:	d00c      	beq.n	8004bdc <UART_SetConfig+0x2a8>
 8004bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc6:	d815      	bhi.n	8004bf4 <UART_SetConfig+0x2c0>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <UART_SetConfig+0x2a0>
 8004bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd0:	d008      	beq.n	8004be4 <UART_SetConfig+0x2b0>
 8004bd2:	e00f      	b.n	8004bf4 <UART_SetConfig+0x2c0>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004bda:	e022      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004be2:	e01e      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004be4:	2304      	movs	r3, #4
 8004be6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004bea:	e01a      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004bec:	2308      	movs	r3, #8
 8004bee:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004bf2:	e016      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004bfa:	e012      	b.n	8004c22 <UART_SetConfig+0x2ee>
 8004bfc:	efff69f3 	.word	0xefff69f3
 8004c00:	40008000 	.word	0x40008000
 8004c04:	40013800 	.word	0x40013800
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	40004400 	.word	0x40004400
 8004c10:	40004800 	.word	0x40004800
 8004c14:	40004c00 	.word	0x40004c00
 8004c18:	40005000 	.word	0x40005000
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	4bb6      	ldr	r3, [pc, #728]	; (8004f00 <UART_SetConfig+0x5cc>)
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	f040 810c 	bne.w	8004e46 <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c2e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d823      	bhi.n	8004c7e <UART_SetConfig+0x34a>
 8004c36:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <UART_SetConfig+0x308>)
 8004c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c7f 	.word	0x08004c7f
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c7f 	.word	0x08004c7f
 8004c4c:	08004c6f 	.word	0x08004c6f
 8004c50:	08004c7f 	.word	0x08004c7f
 8004c54:	08004c7f 	.word	0x08004c7f
 8004c58:	08004c7f 	.word	0x08004c7f
 8004c5c:	08004c77 	.word	0x08004c77
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004c60:	f7ff fd5a 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8004c64:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c66:	e00e      	b.n	8004c86 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004c68:	4ba6      	ldr	r3, [pc, #664]	; (8004f04 <UART_SetConfig+0x5d0>)
 8004c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c6c:	e00b      	b.n	8004c86 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004c6e:	f7ff fcbb 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8004c72:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c74:	e007      	b.n	8004c86 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c7c:	e003      	b.n	8004c86 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004c84:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 81e5 	beq.w	8005058 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	441a      	add	r2, r3
 8004c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d305      	bcc.n	8004caa <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d903      	bls.n	8004cb2 <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004cb0:	e1d2      	b.n	8005058 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 8004cb2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	f200 80b0 	bhi.w	8004e1c <UART_SetConfig+0x4e8>
 8004cbc:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <UART_SetConfig+0x390>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004e1d 	.word	0x08004e1d
 8004ccc:	08004d49 	.word	0x08004d49
 8004cd0:	08004e1d 	.word	0x08004e1d
 8004cd4:	08004d89 	.word	0x08004d89
 8004cd8:	08004e1d 	.word	0x08004e1d
 8004cdc:	08004e1d 	.word	0x08004e1d
 8004ce0:	08004e1d 	.word	0x08004e1d
 8004ce4:	08004de5 	.word	0x08004de5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004ce8:	f7ff fd16 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8004cec:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4698      	mov	r8, r3
 8004cf4:	4691      	mov	r9, r2
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8004d02:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8004d06:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8004d0a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004d0c:	6849      	ldr	r1, [r1, #4]
 8004d0e:	0849      	lsrs	r1, r1, #1
 8004d10:	2000      	movs	r0, #0
 8004d12:	6539      	str	r1, [r7, #80]	; 0x50
 8004d14:	6578      	str	r0, [r7, #84]	; 0x54
 8004d16:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	1851      	adds	r1, r2, r1
 8004d1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d20:	4629      	mov	r1, r5
 8004d22:	eb43 0101 	adc.w	r1, r3, r1
 8004d26:	64f9      	str	r1, [r7, #76]	; 0x4c
 8004d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d30:	647a      	str	r2, [r7, #68]	; 0x44
 8004d32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d36:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d3a:	f7fb ff85 	bl	8000c48 <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4613      	mov	r3, r2
 8004d44:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d46:	e06d      	b.n	8004e24 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	2200      	movs	r2, #0
 8004d50:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d52:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d54:	4b6c      	ldr	r3, [pc, #432]	; (8004f08 <UART_SetConfig+0x5d4>)
 8004d56:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	18d3      	adds	r3, r2, r3
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d60:	460b      	mov	r3, r1
 8004d62:	f143 0300 	adc.w	r3, r3, #0
 8004d66:	637b      	str	r3, [r7, #52]	; 0x34
 8004d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d76:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004d7a:	f7fb ff65 	bl	8000c48 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4613      	mov	r3, r2
 8004d84:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d86:	e04d      	b.n	8004e24 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004d88:	f7ff fc2e 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8004d8c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d90:	2200      	movs	r2, #0
 8004d92:	461c      	mov	r4, r3
 8004d94:	4615      	mov	r5, r2
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	022b      	lsls	r3, r5, #8
 8004da0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004da4:	0222      	lsls	r2, r4, #8
 8004da6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004da8:	6849      	ldr	r1, [r1, #4]
 8004daa:	0849      	lsrs	r1, r1, #1
 8004dac:	2000      	movs	r0, #0
 8004dae:	6239      	str	r1, [r7, #32]
 8004db0:	6278      	str	r0, [r7, #36]	; 0x24
 8004db2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004db6:	4621      	mov	r1, r4
 8004db8:	1851      	adds	r1, r2, r1
 8004dba:	61b9      	str	r1, [r7, #24]
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	eb43 0101 	adc.w	r1, r3, r1
 8004dc2:	61f9      	str	r1, [r7, #28]
 8004dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	613b      	str	r3, [r7, #16]
 8004dcc:	617a      	str	r2, [r7, #20]
 8004dce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004dd6:	f7fb ff37 	bl	8000c48 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4613      	mov	r3, r2
 8004de0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004de2:	e01f      	b.n	8004e24 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	2200      	movs	r2, #0
 8004dec:	469a      	mov	sl, r3
 8004dee:	4693      	mov	fp, r2
 8004df0:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	f14b 0300 	adc.w	r3, fp, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e0e:	f7fb ff1b 	bl	8000c48 <__aeabi_uldivmod>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4613      	mov	r3, r2
 8004e18:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e1a:	e003      	b.n	8004e24 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 8004e22:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2a:	d308      	bcc.n	8004e3e <UART_SetConfig+0x50a>
 8004e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e32:	d204      	bcs.n	8004e3e <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 8004e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e3a:	60da      	str	r2, [r3, #12]
 8004e3c:	e10c      	b.n	8005058 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004e44:	e108      	b.n	8005058 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4e:	f040 808f 	bne.w	8004f70 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 8004e52:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d864      	bhi.n	8004f24 <UART_SetConfig+0x5f0>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <UART_SetConfig+0x52c>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004ea5 	.word	0x08004ea5
 8004e68:	08004ec5 	.word	0x08004ec5
 8004e6c:	08004f25 	.word	0x08004f25
 8004e70:	08004ee1 	.word	0x08004ee1
 8004e74:	08004f25 	.word	0x08004f25
 8004e78:	08004f25 	.word	0x08004f25
 8004e7c:	08004f25 	.word	0x08004f25
 8004e80:	08004f0d 	.word	0x08004f0d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7ff fc48 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8004e88:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e8c:	005a      	lsls	r2, r3, #1
 8004e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	441a      	add	r2, r3
 8004e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ea2:	e043      	b.n	8004f2c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea4:	f7ff fc4e 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 8004ea8:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eac:	005a      	lsls	r2, r3, #1
 8004eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	085b      	lsrs	r3, r3, #1
 8004eb4:	441a      	add	r2, r3
 8004eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ec2:	e033      	b.n	8004f2c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004ece:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004ed2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ed4:	6852      	ldr	r2, [r2, #4]
 8004ed6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ede:	e025      	b.n	8004f2c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee0:	f7ff fb82 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8004ee4:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee8:	005a      	lsls	r2, r3, #1
 8004eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	085b      	lsrs	r3, r3, #1
 8004ef0:	441a      	add	r2, r3
 8004ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004efe:	e015      	b.n	8004f2c <UART_SetConfig+0x5f8>
 8004f00:	40008000 	.word	0x40008000
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f22:	e003      	b.n	8004f2c <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004f2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f2e:	2b0f      	cmp	r3, #15
 8004f30:	d91a      	bls.n	8004f68 <UART_SetConfig+0x634>
 8004f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f38:	d216      	bcs.n	8004f68 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f023 030f 	bic.w	r3, r3, #15
 8004f42:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f48:	085b      	lsrs	r3, r3, #1
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 8004f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004f64:	60da      	str	r2, [r3, #12]
 8004f66:	e077      	b.n	8005058 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004f6e:	e073      	b.n	8005058 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8004f70:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d85c      	bhi.n	8005032 <UART_SetConfig+0x6fe>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x64c>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fc3 	.word	0x08004fc3
 8004f88:	08004fe1 	.word	0x08004fe1
 8004f8c:	08005033 	.word	0x08005033
 8004f90:	08004ffd 	.word	0x08004ffd
 8004f94:	08005033 	.word	0x08005033
 8004f98:	08005033 	.word	0x08005033
 8004f9c:	08005033 	.word	0x08005033
 8004fa0:	0800501b 	.word	0x0800501b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa4:	f7ff fbb8 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8004fa8:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	085a      	lsrs	r2, r3, #1
 8004fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fb2:	441a      	add	r2, r3
 8004fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fc0:	e03b      	b.n	800503a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc2:	f7ff fbbf 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 8004fc6:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	085a      	lsrs	r2, r3, #1
 8004fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fd0:	441a      	add	r2, r3
 8004fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fde:	e02c      	b.n	800503a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004fea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004fee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ff0:	6852      	ldr	r2, [r2, #4]
 8004ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ffa:	e01e      	b.n	800503a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffc:	f7ff faf4 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8005000:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	085a      	lsrs	r2, r3, #1
 8005008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800500a:	441a      	add	r2, r3
 800500c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	b29b      	uxth	r3, r3
 8005016:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005018:	e00f      	b.n	800503a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800501a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	b29b      	uxth	r3, r3
 800502e:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005030:	e003      	b.n	800503a <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8005038:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800503a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800503c:	2b0f      	cmp	r3, #15
 800503e:	d908      	bls.n	8005052 <UART_SetConfig+0x71e>
 8005040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005046:	d204      	bcs.n	8005052 <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 8005048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800504e:	60da      	str	r2, [r3, #12]
 8005050:	e002      	b.n	8005058 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800505a:	2200      	movs	r2, #0
 800505c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800505e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005060:	2200      	movs	r2, #0
 8005062:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005064:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8005068:	4618      	mov	r0, r3
 800506a:	3780      	adds	r7, #128	; 0x80
 800506c:	46bd      	mov	sp, r7
 800506e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005072:	bf00      	nop

08005074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01a      	beq.n	800518a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005172:	d10a      	bne.n	800518a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]
  }
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af02      	add	r7, sp, #8
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80051c6:	f7fe f8b5 	bl	8003334 <HAL_GetTick>
 80051ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d10e      	bne.n	80051f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f82a 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e020      	b.n	800523a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b04      	cmp	r3, #4
 8005204:	d10e      	bne.n	8005224 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005206:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f814 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e00a      	b.n	800523a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	4613      	mov	r3, r2
 8005250:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005252:	e05d      	b.n	8005310 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525a:	d059      	beq.n	8005310 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525c:	f7fe f86a 	bl	8003334 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	429a      	cmp	r2, r3
 800526a:	d302      	bcc.n	8005272 <UART_WaitOnFlagUntilTimeout+0x30>
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d11b      	bne.n	80052aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005280:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e042      	b.n	8005330 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d02b      	beq.n	8005310 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c6:	d123      	bne.n	8005310 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052d0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2220      	movs	r2, #32
 80052f6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e00f      	b.n	8005330 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69da      	ldr	r2, [r3, #28]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4013      	ands	r3, r2
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	429a      	cmp	r2, r3
 800531e:	bf0c      	ite	eq
 8005320:	2301      	moveq	r3, #1
 8005322:	2300      	movne	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	429a      	cmp	r2, r3
 800532c:	d092      	beq.n	8005254 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <findslot>:
 8005338:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <findslot+0x2c>)
 800533a:	b510      	push	{r4, lr}
 800533c:	4604      	mov	r4, r0
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	b118      	cbz	r0, 800534a <findslot+0x12>
 8005342:	6983      	ldr	r3, [r0, #24]
 8005344:	b90b      	cbnz	r3, 800534a <findslot+0x12>
 8005346:	f000 f9a1 	bl	800568c <__sinit>
 800534a:	2c13      	cmp	r4, #19
 800534c:	d807      	bhi.n	800535e <findslot+0x26>
 800534e:	4806      	ldr	r0, [pc, #24]	; (8005368 <findslot+0x30>)
 8005350:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005354:	3201      	adds	r2, #1
 8005356:	d002      	beq.n	800535e <findslot+0x26>
 8005358:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800535c:	bd10      	pop	{r4, pc}
 800535e:	2000      	movs	r0, #0
 8005360:	e7fc      	b.n	800535c <findslot+0x24>
 8005362:	bf00      	nop
 8005364:	20000058 	.word	0x20000058
 8005368:	200003fc 	.word	0x200003fc

0800536c <error>:
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	4604      	mov	r4, r0
 8005370:	f000 f92e 	bl	80055d0 <__errno>
 8005374:	2613      	movs	r6, #19
 8005376:	4605      	mov	r5, r0
 8005378:	2700      	movs	r7, #0
 800537a:	4630      	mov	r0, r6
 800537c:	4639      	mov	r1, r7
 800537e:	beab      	bkpt	0x00ab
 8005380:	4606      	mov	r6, r0
 8005382:	602e      	str	r6, [r5, #0]
 8005384:	4620      	mov	r0, r4
 8005386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005388 <checkerror>:
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d101      	bne.n	8005390 <checkerror+0x8>
 800538c:	f7ff bfee 	b.w	800536c <error>
 8005390:	4770      	bx	lr

08005392 <_swiread>:
 8005392:	b530      	push	{r4, r5, lr}
 8005394:	b085      	sub	sp, #20
 8005396:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800539a:	9203      	str	r2, [sp, #12]
 800539c:	2406      	movs	r4, #6
 800539e:	ad01      	add	r5, sp, #4
 80053a0:	4620      	mov	r0, r4
 80053a2:	4629      	mov	r1, r5
 80053a4:	beab      	bkpt	0x00ab
 80053a6:	4604      	mov	r4, r0
 80053a8:	4620      	mov	r0, r4
 80053aa:	f7ff ffed 	bl	8005388 <checkerror>
 80053ae:	b005      	add	sp, #20
 80053b0:	bd30      	pop	{r4, r5, pc}

080053b2 <_read>:
 80053b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053b4:	4615      	mov	r5, r2
 80053b6:	9101      	str	r1, [sp, #4]
 80053b8:	f7ff ffbe 	bl	8005338 <findslot>
 80053bc:	9901      	ldr	r1, [sp, #4]
 80053be:	4604      	mov	r4, r0
 80053c0:	b938      	cbnz	r0, 80053d2 <_read+0x20>
 80053c2:	f000 f905 	bl	80055d0 <__errno>
 80053c6:	2309      	movs	r3, #9
 80053c8:	6003      	str	r3, [r0, #0]
 80053ca:	f04f 30ff 	mov.w	r0, #4294967295
 80053ce:	b003      	add	sp, #12
 80053d0:	bd30      	pop	{r4, r5, pc}
 80053d2:	6800      	ldr	r0, [r0, #0]
 80053d4:	462a      	mov	r2, r5
 80053d6:	f7ff ffdc 	bl	8005392 <_swiread>
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	d0f7      	beq.n	80053ce <_read+0x1c>
 80053de:	6863      	ldr	r3, [r4, #4]
 80053e0:	1a2a      	subs	r2, r5, r0
 80053e2:	4413      	add	r3, r2
 80053e4:	6063      	str	r3, [r4, #4]
 80053e6:	4610      	mov	r0, r2
 80053e8:	e7f1      	b.n	80053ce <_read+0x1c>

080053ea <_swilseek>:
 80053ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ec:	460c      	mov	r4, r1
 80053ee:	4616      	mov	r6, r2
 80053f0:	f7ff ffa2 	bl	8005338 <findslot>
 80053f4:	4605      	mov	r5, r0
 80053f6:	b940      	cbnz	r0, 800540a <_swilseek+0x20>
 80053f8:	f000 f8ea 	bl	80055d0 <__errno>
 80053fc:	2309      	movs	r3, #9
 80053fe:	6003      	str	r3, [r0, #0]
 8005400:	f04f 34ff 	mov.w	r4, #4294967295
 8005404:	4620      	mov	r0, r4
 8005406:	b003      	add	sp, #12
 8005408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800540a:	2e02      	cmp	r6, #2
 800540c:	d903      	bls.n	8005416 <_swilseek+0x2c>
 800540e:	f000 f8df 	bl	80055d0 <__errno>
 8005412:	2316      	movs	r3, #22
 8005414:	e7f3      	b.n	80053fe <_swilseek+0x14>
 8005416:	2e01      	cmp	r6, #1
 8005418:	d112      	bne.n	8005440 <_swilseek+0x56>
 800541a:	6843      	ldr	r3, [r0, #4]
 800541c:	18e4      	adds	r4, r4, r3
 800541e:	d4f6      	bmi.n	800540e <_swilseek+0x24>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	260a      	movs	r6, #10
 8005424:	e9cd 3400 	strd	r3, r4, [sp]
 8005428:	466f      	mov	r7, sp
 800542a:	4630      	mov	r0, r6
 800542c:	4639      	mov	r1, r7
 800542e:	beab      	bkpt	0x00ab
 8005430:	4606      	mov	r6, r0
 8005432:	4630      	mov	r0, r6
 8005434:	f7ff ffa8 	bl	8005388 <checkerror>
 8005438:	2800      	cmp	r0, #0
 800543a:	dbe1      	blt.n	8005400 <_swilseek+0x16>
 800543c:	606c      	str	r4, [r5, #4]
 800543e:	e7e1      	b.n	8005404 <_swilseek+0x1a>
 8005440:	2e02      	cmp	r6, #2
 8005442:	d1ed      	bne.n	8005420 <_swilseek+0x36>
 8005444:	6803      	ldr	r3, [r0, #0]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	260c      	movs	r6, #12
 800544a:	466f      	mov	r7, sp
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	beab      	bkpt	0x00ab
 8005452:	4606      	mov	r6, r0
 8005454:	4630      	mov	r0, r6
 8005456:	f7ff ff97 	bl	8005388 <checkerror>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	d0d0      	beq.n	8005400 <_swilseek+0x16>
 800545e:	4404      	add	r4, r0
 8005460:	e7de      	b.n	8005420 <_swilseek+0x36>

08005462 <_lseek>:
 8005462:	f7ff bfc2 	b.w	80053ea <_swilseek>

08005466 <_swiwrite>:
 8005466:	b530      	push	{r4, r5, lr}
 8005468:	b085      	sub	sp, #20
 800546a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800546e:	9203      	str	r2, [sp, #12]
 8005470:	2405      	movs	r4, #5
 8005472:	ad01      	add	r5, sp, #4
 8005474:	4620      	mov	r0, r4
 8005476:	4629      	mov	r1, r5
 8005478:	beab      	bkpt	0x00ab
 800547a:	4604      	mov	r4, r0
 800547c:	4620      	mov	r0, r4
 800547e:	f7ff ff83 	bl	8005388 <checkerror>
 8005482:	b005      	add	sp, #20
 8005484:	bd30      	pop	{r4, r5, pc}

08005486 <_write>:
 8005486:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005488:	4615      	mov	r5, r2
 800548a:	9101      	str	r1, [sp, #4]
 800548c:	f7ff ff54 	bl	8005338 <findslot>
 8005490:	9901      	ldr	r1, [sp, #4]
 8005492:	4604      	mov	r4, r0
 8005494:	b930      	cbnz	r0, 80054a4 <_write+0x1e>
 8005496:	f000 f89b 	bl	80055d0 <__errno>
 800549a:	2309      	movs	r3, #9
 800549c:	6003      	str	r3, [r0, #0]
 800549e:	f04f 30ff 	mov.w	r0, #4294967295
 80054a2:	e012      	b.n	80054ca <_write+0x44>
 80054a4:	6800      	ldr	r0, [r0, #0]
 80054a6:	462a      	mov	r2, r5
 80054a8:	f7ff ffdd 	bl	8005466 <_swiwrite>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	dbf6      	blt.n	800549e <_write+0x18>
 80054b0:	6862      	ldr	r2, [r4, #4]
 80054b2:	1a2b      	subs	r3, r5, r0
 80054b4:	441a      	add	r2, r3
 80054b6:	42a8      	cmp	r0, r5
 80054b8:	6062      	str	r2, [r4, #4]
 80054ba:	d105      	bne.n	80054c8 <_write+0x42>
 80054bc:	2000      	movs	r0, #0
 80054be:	b003      	add	sp, #12
 80054c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054c4:	f7ff bf52 	b.w	800536c <error>
 80054c8:	4618      	mov	r0, r3
 80054ca:	b003      	add	sp, #12
 80054cc:	bd30      	pop	{r4, r5, pc}

080054ce <_swiclose>:
 80054ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054d0:	2402      	movs	r4, #2
 80054d2:	9001      	str	r0, [sp, #4]
 80054d4:	ad01      	add	r5, sp, #4
 80054d6:	4620      	mov	r0, r4
 80054d8:	4629      	mov	r1, r5
 80054da:	beab      	bkpt	0x00ab
 80054dc:	4604      	mov	r4, r0
 80054de:	4620      	mov	r0, r4
 80054e0:	f7ff ff52 	bl	8005388 <checkerror>
 80054e4:	b003      	add	sp, #12
 80054e6:	bd30      	pop	{r4, r5, pc}

080054e8 <_close>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4605      	mov	r5, r0
 80054ec:	f7ff ff24 	bl	8005338 <findslot>
 80054f0:	4604      	mov	r4, r0
 80054f2:	b930      	cbnz	r0, 8005502 <_close+0x1a>
 80054f4:	f000 f86c 	bl	80055d0 <__errno>
 80054f8:	2309      	movs	r3, #9
 80054fa:	6003      	str	r3, [r0, #0]
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005500:	bd38      	pop	{r3, r4, r5, pc}
 8005502:	3d01      	subs	r5, #1
 8005504:	2d01      	cmp	r5, #1
 8005506:	d809      	bhi.n	800551c <_close+0x34>
 8005508:	4b09      	ldr	r3, [pc, #36]	; (8005530 <_close+0x48>)
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	429a      	cmp	r2, r3
 8005510:	d104      	bne.n	800551c <_close+0x34>
 8005512:	f04f 33ff 	mov.w	r3, #4294967295
 8005516:	6003      	str	r3, [r0, #0]
 8005518:	2000      	movs	r0, #0
 800551a:	e7f1      	b.n	8005500 <_close+0x18>
 800551c:	6820      	ldr	r0, [r4, #0]
 800551e:	f7ff ffd6 	bl	80054ce <_swiclose>
 8005522:	2800      	cmp	r0, #0
 8005524:	d1ec      	bne.n	8005500 <_close+0x18>
 8005526:	f04f 33ff 	mov.w	r3, #4294967295
 800552a:	6023      	str	r3, [r4, #0]
 800552c:	e7e8      	b.n	8005500 <_close+0x18>
 800552e:	bf00      	nop
 8005530:	200003fc 	.word	0x200003fc

08005534 <_getpid>:
 8005534:	2001      	movs	r0, #1
 8005536:	4770      	bx	lr

08005538 <_swistat>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	460c      	mov	r4, r1
 800553c:	f7ff fefc 	bl	8005338 <findslot>
 8005540:	4605      	mov	r5, r0
 8005542:	b930      	cbnz	r0, 8005552 <_swistat+0x1a>
 8005544:	f000 f844 	bl	80055d0 <__errno>
 8005548:	2309      	movs	r3, #9
 800554a:	6003      	str	r3, [r0, #0]
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	bd70      	pop	{r4, r5, r6, pc}
 8005552:	6863      	ldr	r3, [r4, #4]
 8005554:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800555e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005560:	260c      	movs	r6, #12
 8005562:	4630      	mov	r0, r6
 8005564:	4629      	mov	r1, r5
 8005566:	beab      	bkpt	0x00ab
 8005568:	4605      	mov	r5, r0
 800556a:	4628      	mov	r0, r5
 800556c:	f7ff ff0c 	bl	8005388 <checkerror>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	bf1c      	itt	ne
 8005574:	6120      	strne	r0, [r4, #16]
 8005576:	2000      	movne	r0, #0
 8005578:	e7ea      	b.n	8005550 <_swistat+0x18>

0800557a <_fstat>:
 800557a:	460b      	mov	r3, r1
 800557c:	b510      	push	{r4, lr}
 800557e:	2100      	movs	r1, #0
 8005580:	4604      	mov	r4, r0
 8005582:	2258      	movs	r2, #88	; 0x58
 8005584:	4618      	mov	r0, r3
 8005586:	f000 f954 	bl	8005832 <memset>
 800558a:	4601      	mov	r1, r0
 800558c:	4620      	mov	r0, r4
 800558e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005592:	f7ff bfd1 	b.w	8005538 <_swistat>

08005596 <_isatty>:
 8005596:	b570      	push	{r4, r5, r6, lr}
 8005598:	f7ff fece 	bl	8005338 <findslot>
 800559c:	2509      	movs	r5, #9
 800559e:	4604      	mov	r4, r0
 80055a0:	b920      	cbnz	r0, 80055ac <_isatty+0x16>
 80055a2:	f000 f815 	bl	80055d0 <__errno>
 80055a6:	6005      	str	r5, [r0, #0]
 80055a8:	4620      	mov	r0, r4
 80055aa:	bd70      	pop	{r4, r5, r6, pc}
 80055ac:	4628      	mov	r0, r5
 80055ae:	4621      	mov	r1, r4
 80055b0:	beab      	bkpt	0x00ab
 80055b2:	4604      	mov	r4, r0
 80055b4:	2c01      	cmp	r4, #1
 80055b6:	d0f7      	beq.n	80055a8 <_isatty+0x12>
 80055b8:	f000 f80a 	bl	80055d0 <__errno>
 80055bc:	2400      	movs	r4, #0
 80055be:	4605      	mov	r5, r0
 80055c0:	2613      	movs	r6, #19
 80055c2:	4630      	mov	r0, r6
 80055c4:	4621      	mov	r1, r4
 80055c6:	beab      	bkpt	0x00ab
 80055c8:	4606      	mov	r6, r0
 80055ca:	602e      	str	r6, [r5, #0]
 80055cc:	e7ec      	b.n	80055a8 <_isatty+0x12>
	...

080055d0 <__errno>:
 80055d0:	4b01      	ldr	r3, [pc, #4]	; (80055d8 <__errno+0x8>)
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	20000058 	.word	0x20000058

080055dc <std>:
 80055dc:	2300      	movs	r3, #0
 80055de:	b510      	push	{r4, lr}
 80055e0:	4604      	mov	r4, r0
 80055e2:	e9c0 3300 	strd	r3, r3, [r0]
 80055e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055ea:	6083      	str	r3, [r0, #8]
 80055ec:	8181      	strh	r1, [r0, #12]
 80055ee:	6643      	str	r3, [r0, #100]	; 0x64
 80055f0:	81c2      	strh	r2, [r0, #14]
 80055f2:	6183      	str	r3, [r0, #24]
 80055f4:	4619      	mov	r1, r3
 80055f6:	2208      	movs	r2, #8
 80055f8:	305c      	adds	r0, #92	; 0x5c
 80055fa:	f000 f91a 	bl	8005832 <memset>
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <std+0x38>)
 8005600:	6263      	str	r3, [r4, #36]	; 0x24
 8005602:	4b05      	ldr	r3, [pc, #20]	; (8005618 <std+0x3c>)
 8005604:	62a3      	str	r3, [r4, #40]	; 0x28
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <std+0x40>)
 8005608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <std+0x44>)
 800560c:	6224      	str	r4, [r4, #32]
 800560e:	6323      	str	r3, [r4, #48]	; 0x30
 8005610:	bd10      	pop	{r4, pc}
 8005612:	bf00      	nop
 8005614:	080062a1 	.word	0x080062a1
 8005618:	080062c3 	.word	0x080062c3
 800561c:	080062fb 	.word	0x080062fb
 8005620:	0800631f 	.word	0x0800631f

08005624 <_cleanup_r>:
 8005624:	4901      	ldr	r1, [pc, #4]	; (800562c <_cleanup_r+0x8>)
 8005626:	f000 b8af 	b.w	8005788 <_fwalk_reent>
 800562a:	bf00      	nop
 800562c:	08007329 	.word	0x08007329

08005630 <__sfmoreglue>:
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	2268      	movs	r2, #104	; 0x68
 8005634:	1e4d      	subs	r5, r1, #1
 8005636:	4355      	muls	r5, r2
 8005638:	460e      	mov	r6, r1
 800563a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800563e:	f000 f921 	bl	8005884 <_malloc_r>
 8005642:	4604      	mov	r4, r0
 8005644:	b140      	cbz	r0, 8005658 <__sfmoreglue+0x28>
 8005646:	2100      	movs	r1, #0
 8005648:	e9c0 1600 	strd	r1, r6, [r0]
 800564c:	300c      	adds	r0, #12
 800564e:	60a0      	str	r0, [r4, #8]
 8005650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005654:	f000 f8ed 	bl	8005832 <memset>
 8005658:	4620      	mov	r0, r4
 800565a:	bd70      	pop	{r4, r5, r6, pc}

0800565c <__sfp_lock_acquire>:
 800565c:	4801      	ldr	r0, [pc, #4]	; (8005664 <__sfp_lock_acquire+0x8>)
 800565e:	f000 b8d8 	b.w	8005812 <__retarget_lock_acquire_recursive>
 8005662:	bf00      	nop
 8005664:	2000049d 	.word	0x2000049d

08005668 <__sfp_lock_release>:
 8005668:	4801      	ldr	r0, [pc, #4]	; (8005670 <__sfp_lock_release+0x8>)
 800566a:	f000 b8d3 	b.w	8005814 <__retarget_lock_release_recursive>
 800566e:	bf00      	nop
 8005670:	2000049d 	.word	0x2000049d

08005674 <__sinit_lock_acquire>:
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <__sinit_lock_acquire+0x8>)
 8005676:	f000 b8cc 	b.w	8005812 <__retarget_lock_acquire_recursive>
 800567a:	bf00      	nop
 800567c:	2000049e 	.word	0x2000049e

08005680 <__sinit_lock_release>:
 8005680:	4801      	ldr	r0, [pc, #4]	; (8005688 <__sinit_lock_release+0x8>)
 8005682:	f000 b8c7 	b.w	8005814 <__retarget_lock_release_recursive>
 8005686:	bf00      	nop
 8005688:	2000049e 	.word	0x2000049e

0800568c <__sinit>:
 800568c:	b510      	push	{r4, lr}
 800568e:	4604      	mov	r4, r0
 8005690:	f7ff fff0 	bl	8005674 <__sinit_lock_acquire>
 8005694:	69a3      	ldr	r3, [r4, #24]
 8005696:	b11b      	cbz	r3, 80056a0 <__sinit+0x14>
 8005698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800569c:	f7ff bff0 	b.w	8005680 <__sinit_lock_release>
 80056a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056a4:	6523      	str	r3, [r4, #80]	; 0x50
 80056a6:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <__sinit+0x68>)
 80056a8:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <__sinit+0x6c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	bf04      	itt	eq
 80056b2:	2301      	moveq	r3, #1
 80056b4:	61a3      	streq	r3, [r4, #24]
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 f820 	bl	80056fc <__sfp>
 80056bc:	6060      	str	r0, [r4, #4]
 80056be:	4620      	mov	r0, r4
 80056c0:	f000 f81c 	bl	80056fc <__sfp>
 80056c4:	60a0      	str	r0, [r4, #8]
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 f818 	bl	80056fc <__sfp>
 80056cc:	2200      	movs	r2, #0
 80056ce:	60e0      	str	r0, [r4, #12]
 80056d0:	2104      	movs	r1, #4
 80056d2:	6860      	ldr	r0, [r4, #4]
 80056d4:	f7ff ff82 	bl	80055dc <std>
 80056d8:	68a0      	ldr	r0, [r4, #8]
 80056da:	2201      	movs	r2, #1
 80056dc:	2109      	movs	r1, #9
 80056de:	f7ff ff7d 	bl	80055dc <std>
 80056e2:	68e0      	ldr	r0, [r4, #12]
 80056e4:	2202      	movs	r2, #2
 80056e6:	2112      	movs	r1, #18
 80056e8:	f7ff ff78 	bl	80055dc <std>
 80056ec:	2301      	movs	r3, #1
 80056ee:	61a3      	str	r3, [r4, #24]
 80056f0:	e7d2      	b.n	8005698 <__sinit+0xc>
 80056f2:	bf00      	nop
 80056f4:	08009624 	.word	0x08009624
 80056f8:	08005625 	.word	0x08005625

080056fc <__sfp>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	4607      	mov	r7, r0
 8005700:	f7ff ffac 	bl	800565c <__sfp_lock_acquire>
 8005704:	4b1e      	ldr	r3, [pc, #120]	; (8005780 <__sfp+0x84>)
 8005706:	681e      	ldr	r6, [r3, #0]
 8005708:	69b3      	ldr	r3, [r6, #24]
 800570a:	b913      	cbnz	r3, 8005712 <__sfp+0x16>
 800570c:	4630      	mov	r0, r6
 800570e:	f7ff ffbd 	bl	800568c <__sinit>
 8005712:	3648      	adds	r6, #72	; 0x48
 8005714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005718:	3b01      	subs	r3, #1
 800571a:	d503      	bpl.n	8005724 <__sfp+0x28>
 800571c:	6833      	ldr	r3, [r6, #0]
 800571e:	b30b      	cbz	r3, 8005764 <__sfp+0x68>
 8005720:	6836      	ldr	r6, [r6, #0]
 8005722:	e7f7      	b.n	8005714 <__sfp+0x18>
 8005724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005728:	b9d5      	cbnz	r5, 8005760 <__sfp+0x64>
 800572a:	4b16      	ldr	r3, [pc, #88]	; (8005784 <__sfp+0x88>)
 800572c:	60e3      	str	r3, [r4, #12]
 800572e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005732:	6665      	str	r5, [r4, #100]	; 0x64
 8005734:	f000 f86c 	bl	8005810 <__retarget_lock_init_recursive>
 8005738:	f7ff ff96 	bl	8005668 <__sfp_lock_release>
 800573c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005744:	6025      	str	r5, [r4, #0]
 8005746:	61a5      	str	r5, [r4, #24]
 8005748:	2208      	movs	r2, #8
 800574a:	4629      	mov	r1, r5
 800574c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005750:	f000 f86f 	bl	8005832 <memset>
 8005754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800575c:	4620      	mov	r0, r4
 800575e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005760:	3468      	adds	r4, #104	; 0x68
 8005762:	e7d9      	b.n	8005718 <__sfp+0x1c>
 8005764:	2104      	movs	r1, #4
 8005766:	4638      	mov	r0, r7
 8005768:	f7ff ff62 	bl	8005630 <__sfmoreglue>
 800576c:	4604      	mov	r4, r0
 800576e:	6030      	str	r0, [r6, #0]
 8005770:	2800      	cmp	r0, #0
 8005772:	d1d5      	bne.n	8005720 <__sfp+0x24>
 8005774:	f7ff ff78 	bl	8005668 <__sfp_lock_release>
 8005778:	230c      	movs	r3, #12
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	e7ee      	b.n	800575c <__sfp+0x60>
 800577e:	bf00      	nop
 8005780:	08009624 	.word	0x08009624
 8005784:	ffff0001 	.word	0xffff0001

08005788 <_fwalk_reent>:
 8005788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800578c:	4606      	mov	r6, r0
 800578e:	4688      	mov	r8, r1
 8005790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005794:	2700      	movs	r7, #0
 8005796:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800579a:	f1b9 0901 	subs.w	r9, r9, #1
 800579e:	d505      	bpl.n	80057ac <_fwalk_reent+0x24>
 80057a0:	6824      	ldr	r4, [r4, #0]
 80057a2:	2c00      	cmp	r4, #0
 80057a4:	d1f7      	bne.n	8005796 <_fwalk_reent+0xe>
 80057a6:	4638      	mov	r0, r7
 80057a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ac:	89ab      	ldrh	r3, [r5, #12]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d907      	bls.n	80057c2 <_fwalk_reent+0x3a>
 80057b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057b6:	3301      	adds	r3, #1
 80057b8:	d003      	beq.n	80057c2 <_fwalk_reent+0x3a>
 80057ba:	4629      	mov	r1, r5
 80057bc:	4630      	mov	r0, r6
 80057be:	47c0      	blx	r8
 80057c0:	4307      	orrs	r7, r0
 80057c2:	3568      	adds	r5, #104	; 0x68
 80057c4:	e7e9      	b.n	800579a <_fwalk_reent+0x12>
	...

080057c8 <__libc_init_array>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	4d0d      	ldr	r5, [pc, #52]	; (8005800 <__libc_init_array+0x38>)
 80057cc:	4c0d      	ldr	r4, [pc, #52]	; (8005804 <__libc_init_array+0x3c>)
 80057ce:	1b64      	subs	r4, r4, r5
 80057d0:	10a4      	asrs	r4, r4, #2
 80057d2:	2600      	movs	r6, #0
 80057d4:	42a6      	cmp	r6, r4
 80057d6:	d109      	bne.n	80057ec <__libc_init_array+0x24>
 80057d8:	4d0b      	ldr	r5, [pc, #44]	; (8005808 <__libc_init_array+0x40>)
 80057da:	4c0c      	ldr	r4, [pc, #48]	; (800580c <__libc_init_array+0x44>)
 80057dc:	f003 fd60 	bl	80092a0 <_init>
 80057e0:	1b64      	subs	r4, r4, r5
 80057e2:	10a4      	asrs	r4, r4, #2
 80057e4:	2600      	movs	r6, #0
 80057e6:	42a6      	cmp	r6, r4
 80057e8:	d105      	bne.n	80057f6 <__libc_init_array+0x2e>
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f0:	4798      	blx	r3
 80057f2:	3601      	adds	r6, #1
 80057f4:	e7ee      	b.n	80057d4 <__libc_init_array+0xc>
 80057f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fa:	4798      	blx	r3
 80057fc:	3601      	adds	r6, #1
 80057fe:	e7f2      	b.n	80057e6 <__libc_init_array+0x1e>
 8005800:	080099d8 	.word	0x080099d8
 8005804:	080099d8 	.word	0x080099d8
 8005808:	080099d8 	.word	0x080099d8
 800580c:	080099dc 	.word	0x080099dc

08005810 <__retarget_lock_init_recursive>:
 8005810:	4770      	bx	lr

08005812 <__retarget_lock_acquire_recursive>:
 8005812:	4770      	bx	lr

08005814 <__retarget_lock_release_recursive>:
 8005814:	4770      	bx	lr

08005816 <memcpy>:
 8005816:	440a      	add	r2, r1
 8005818:	4291      	cmp	r1, r2
 800581a:	f100 33ff 	add.w	r3, r0, #4294967295
 800581e:	d100      	bne.n	8005822 <memcpy+0xc>
 8005820:	4770      	bx	lr
 8005822:	b510      	push	{r4, lr}
 8005824:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005828:	f803 4f01 	strb.w	r4, [r3, #1]!
 800582c:	4291      	cmp	r1, r2
 800582e:	d1f9      	bne.n	8005824 <memcpy+0xe>
 8005830:	bd10      	pop	{r4, pc}

08005832 <memset>:
 8005832:	4402      	add	r2, r0
 8005834:	4603      	mov	r3, r0
 8005836:	4293      	cmp	r3, r2
 8005838:	d100      	bne.n	800583c <memset+0xa>
 800583a:	4770      	bx	lr
 800583c:	f803 1b01 	strb.w	r1, [r3], #1
 8005840:	e7f9      	b.n	8005836 <memset+0x4>
	...

08005844 <sbrk_aligned>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	4e0e      	ldr	r6, [pc, #56]	; (8005880 <sbrk_aligned+0x3c>)
 8005848:	460c      	mov	r4, r1
 800584a:	6831      	ldr	r1, [r6, #0]
 800584c:	4605      	mov	r5, r0
 800584e:	b911      	cbnz	r1, 8005856 <sbrk_aligned+0x12>
 8005850:	f000 fcf6 	bl	8006240 <_sbrk_r>
 8005854:	6030      	str	r0, [r6, #0]
 8005856:	4621      	mov	r1, r4
 8005858:	4628      	mov	r0, r5
 800585a:	f000 fcf1 	bl	8006240 <_sbrk_r>
 800585e:	1c43      	adds	r3, r0, #1
 8005860:	d00a      	beq.n	8005878 <sbrk_aligned+0x34>
 8005862:	1cc4      	adds	r4, r0, #3
 8005864:	f024 0403 	bic.w	r4, r4, #3
 8005868:	42a0      	cmp	r0, r4
 800586a:	d007      	beq.n	800587c <sbrk_aligned+0x38>
 800586c:	1a21      	subs	r1, r4, r0
 800586e:	4628      	mov	r0, r5
 8005870:	f000 fce6 	bl	8006240 <_sbrk_r>
 8005874:	3001      	adds	r0, #1
 8005876:	d101      	bne.n	800587c <sbrk_aligned+0x38>
 8005878:	f04f 34ff 	mov.w	r4, #4294967295
 800587c:	4620      	mov	r0, r4
 800587e:	bd70      	pop	{r4, r5, r6, pc}
 8005880:	200004a4 	.word	0x200004a4

08005884 <_malloc_r>:
 8005884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005888:	1ccd      	adds	r5, r1, #3
 800588a:	f025 0503 	bic.w	r5, r5, #3
 800588e:	3508      	adds	r5, #8
 8005890:	2d0c      	cmp	r5, #12
 8005892:	bf38      	it	cc
 8005894:	250c      	movcc	r5, #12
 8005896:	2d00      	cmp	r5, #0
 8005898:	4607      	mov	r7, r0
 800589a:	db01      	blt.n	80058a0 <_malloc_r+0x1c>
 800589c:	42a9      	cmp	r1, r5
 800589e:	d905      	bls.n	80058ac <_malloc_r+0x28>
 80058a0:	230c      	movs	r3, #12
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	2600      	movs	r6, #0
 80058a6:	4630      	mov	r0, r6
 80058a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ac:	4e2e      	ldr	r6, [pc, #184]	; (8005968 <_malloc_r+0xe4>)
 80058ae:	f001 fe0d 	bl	80074cc <__malloc_lock>
 80058b2:	6833      	ldr	r3, [r6, #0]
 80058b4:	461c      	mov	r4, r3
 80058b6:	bb34      	cbnz	r4, 8005906 <_malloc_r+0x82>
 80058b8:	4629      	mov	r1, r5
 80058ba:	4638      	mov	r0, r7
 80058bc:	f7ff ffc2 	bl	8005844 <sbrk_aligned>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	4604      	mov	r4, r0
 80058c4:	d14d      	bne.n	8005962 <_malloc_r+0xde>
 80058c6:	6834      	ldr	r4, [r6, #0]
 80058c8:	4626      	mov	r6, r4
 80058ca:	2e00      	cmp	r6, #0
 80058cc:	d140      	bne.n	8005950 <_malloc_r+0xcc>
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	4631      	mov	r1, r6
 80058d2:	4638      	mov	r0, r7
 80058d4:	eb04 0803 	add.w	r8, r4, r3
 80058d8:	f000 fcb2 	bl	8006240 <_sbrk_r>
 80058dc:	4580      	cmp	r8, r0
 80058de:	d13a      	bne.n	8005956 <_malloc_r+0xd2>
 80058e0:	6821      	ldr	r1, [r4, #0]
 80058e2:	3503      	adds	r5, #3
 80058e4:	1a6d      	subs	r5, r5, r1
 80058e6:	f025 0503 	bic.w	r5, r5, #3
 80058ea:	3508      	adds	r5, #8
 80058ec:	2d0c      	cmp	r5, #12
 80058ee:	bf38      	it	cc
 80058f0:	250c      	movcc	r5, #12
 80058f2:	4629      	mov	r1, r5
 80058f4:	4638      	mov	r0, r7
 80058f6:	f7ff ffa5 	bl	8005844 <sbrk_aligned>
 80058fa:	3001      	adds	r0, #1
 80058fc:	d02b      	beq.n	8005956 <_malloc_r+0xd2>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	442b      	add	r3, r5
 8005902:	6023      	str	r3, [r4, #0]
 8005904:	e00e      	b.n	8005924 <_malloc_r+0xa0>
 8005906:	6822      	ldr	r2, [r4, #0]
 8005908:	1b52      	subs	r2, r2, r5
 800590a:	d41e      	bmi.n	800594a <_malloc_r+0xc6>
 800590c:	2a0b      	cmp	r2, #11
 800590e:	d916      	bls.n	800593e <_malloc_r+0xba>
 8005910:	1961      	adds	r1, r4, r5
 8005912:	42a3      	cmp	r3, r4
 8005914:	6025      	str	r5, [r4, #0]
 8005916:	bf18      	it	ne
 8005918:	6059      	strne	r1, [r3, #4]
 800591a:	6863      	ldr	r3, [r4, #4]
 800591c:	bf08      	it	eq
 800591e:	6031      	streq	r1, [r6, #0]
 8005920:	5162      	str	r2, [r4, r5]
 8005922:	604b      	str	r3, [r1, #4]
 8005924:	4638      	mov	r0, r7
 8005926:	f104 060b 	add.w	r6, r4, #11
 800592a:	f001 fdd5 	bl	80074d8 <__malloc_unlock>
 800592e:	f026 0607 	bic.w	r6, r6, #7
 8005932:	1d23      	adds	r3, r4, #4
 8005934:	1af2      	subs	r2, r6, r3
 8005936:	d0b6      	beq.n	80058a6 <_malloc_r+0x22>
 8005938:	1b9b      	subs	r3, r3, r6
 800593a:	50a3      	str	r3, [r4, r2]
 800593c:	e7b3      	b.n	80058a6 <_malloc_r+0x22>
 800593e:	6862      	ldr	r2, [r4, #4]
 8005940:	42a3      	cmp	r3, r4
 8005942:	bf0c      	ite	eq
 8005944:	6032      	streq	r2, [r6, #0]
 8005946:	605a      	strne	r2, [r3, #4]
 8005948:	e7ec      	b.n	8005924 <_malloc_r+0xa0>
 800594a:	4623      	mov	r3, r4
 800594c:	6864      	ldr	r4, [r4, #4]
 800594e:	e7b2      	b.n	80058b6 <_malloc_r+0x32>
 8005950:	4634      	mov	r4, r6
 8005952:	6876      	ldr	r6, [r6, #4]
 8005954:	e7b9      	b.n	80058ca <_malloc_r+0x46>
 8005956:	230c      	movs	r3, #12
 8005958:	603b      	str	r3, [r7, #0]
 800595a:	4638      	mov	r0, r7
 800595c:	f001 fdbc 	bl	80074d8 <__malloc_unlock>
 8005960:	e7a1      	b.n	80058a6 <_malloc_r+0x22>
 8005962:	6025      	str	r5, [r4, #0]
 8005964:	e7de      	b.n	8005924 <_malloc_r+0xa0>
 8005966:	bf00      	nop
 8005968:	200004a0 	.word	0x200004a0

0800596c <__cvt>:
 800596c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005970:	ec55 4b10 	vmov	r4, r5, d0
 8005974:	2d00      	cmp	r5, #0
 8005976:	460e      	mov	r6, r1
 8005978:	4619      	mov	r1, r3
 800597a:	462b      	mov	r3, r5
 800597c:	bfbb      	ittet	lt
 800597e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005982:	461d      	movlt	r5, r3
 8005984:	2300      	movge	r3, #0
 8005986:	232d      	movlt	r3, #45	; 0x2d
 8005988:	700b      	strb	r3, [r1, #0]
 800598a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800598c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005990:	4691      	mov	r9, r2
 8005992:	f023 0820 	bic.w	r8, r3, #32
 8005996:	bfbc      	itt	lt
 8005998:	4622      	movlt	r2, r4
 800599a:	4614      	movlt	r4, r2
 800599c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059a0:	d005      	beq.n	80059ae <__cvt+0x42>
 80059a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80059a6:	d100      	bne.n	80059aa <__cvt+0x3e>
 80059a8:	3601      	adds	r6, #1
 80059aa:	2102      	movs	r1, #2
 80059ac:	e000      	b.n	80059b0 <__cvt+0x44>
 80059ae:	2103      	movs	r1, #3
 80059b0:	ab03      	add	r3, sp, #12
 80059b2:	9301      	str	r3, [sp, #4]
 80059b4:	ab02      	add	r3, sp, #8
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	ec45 4b10 	vmov	d0, r4, r5
 80059bc:	4653      	mov	r3, sl
 80059be:	4632      	mov	r2, r6
 80059c0:	f000 fe3e 	bl	8006640 <_dtoa_r>
 80059c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059c8:	4607      	mov	r7, r0
 80059ca:	d102      	bne.n	80059d2 <__cvt+0x66>
 80059cc:	f019 0f01 	tst.w	r9, #1
 80059d0:	d022      	beq.n	8005a18 <__cvt+0xac>
 80059d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059d6:	eb07 0906 	add.w	r9, r7, r6
 80059da:	d110      	bne.n	80059fe <__cvt+0x92>
 80059dc:	783b      	ldrb	r3, [r7, #0]
 80059de:	2b30      	cmp	r3, #48	; 0x30
 80059e0:	d10a      	bne.n	80059f8 <__cvt+0x8c>
 80059e2:	2200      	movs	r2, #0
 80059e4:	2300      	movs	r3, #0
 80059e6:	4620      	mov	r0, r4
 80059e8:	4629      	mov	r1, r5
 80059ea:	f7fb f86d 	bl	8000ac8 <__aeabi_dcmpeq>
 80059ee:	b918      	cbnz	r0, 80059f8 <__cvt+0x8c>
 80059f0:	f1c6 0601 	rsb	r6, r6, #1
 80059f4:	f8ca 6000 	str.w	r6, [sl]
 80059f8:	f8da 3000 	ldr.w	r3, [sl]
 80059fc:	4499      	add	r9, r3
 80059fe:	2200      	movs	r2, #0
 8005a00:	2300      	movs	r3, #0
 8005a02:	4620      	mov	r0, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	f7fb f85f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a0a:	b108      	cbz	r0, 8005a10 <__cvt+0xa4>
 8005a0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a10:	2230      	movs	r2, #48	; 0x30
 8005a12:	9b03      	ldr	r3, [sp, #12]
 8005a14:	454b      	cmp	r3, r9
 8005a16:	d307      	bcc.n	8005a28 <__cvt+0xbc>
 8005a18:	9b03      	ldr	r3, [sp, #12]
 8005a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a1c:	1bdb      	subs	r3, r3, r7
 8005a1e:	4638      	mov	r0, r7
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	b004      	add	sp, #16
 8005a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a28:	1c59      	adds	r1, r3, #1
 8005a2a:	9103      	str	r1, [sp, #12]
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e7f0      	b.n	8005a12 <__cvt+0xa6>

08005a30 <__exponent>:
 8005a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a32:	4603      	mov	r3, r0
 8005a34:	2900      	cmp	r1, #0
 8005a36:	bfb8      	it	lt
 8005a38:	4249      	neglt	r1, r1
 8005a3a:	f803 2b02 	strb.w	r2, [r3], #2
 8005a3e:	bfb4      	ite	lt
 8005a40:	222d      	movlt	r2, #45	; 0x2d
 8005a42:	222b      	movge	r2, #43	; 0x2b
 8005a44:	2909      	cmp	r1, #9
 8005a46:	7042      	strb	r2, [r0, #1]
 8005a48:	dd2a      	ble.n	8005aa0 <__exponent+0x70>
 8005a4a:	f10d 0407 	add.w	r4, sp, #7
 8005a4e:	46a4      	mov	ip, r4
 8005a50:	270a      	movs	r7, #10
 8005a52:	46a6      	mov	lr, r4
 8005a54:	460a      	mov	r2, r1
 8005a56:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a5a:	fb07 1516 	mls	r5, r7, r6, r1
 8005a5e:	3530      	adds	r5, #48	; 0x30
 8005a60:	2a63      	cmp	r2, #99	; 0x63
 8005a62:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	dcf1      	bgt.n	8005a52 <__exponent+0x22>
 8005a6e:	3130      	adds	r1, #48	; 0x30
 8005a70:	f1ae 0502 	sub.w	r5, lr, #2
 8005a74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a78:	1c44      	adds	r4, r0, #1
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	4561      	cmp	r1, ip
 8005a7e:	d30a      	bcc.n	8005a96 <__exponent+0x66>
 8005a80:	f10d 0209 	add.w	r2, sp, #9
 8005a84:	eba2 020e 	sub.w	r2, r2, lr
 8005a88:	4565      	cmp	r5, ip
 8005a8a:	bf88      	it	hi
 8005a8c:	2200      	movhi	r2, #0
 8005a8e:	4413      	add	r3, r2
 8005a90:	1a18      	subs	r0, r3, r0
 8005a92:	b003      	add	sp, #12
 8005a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a9e:	e7ed      	b.n	8005a7c <__exponent+0x4c>
 8005aa0:	2330      	movs	r3, #48	; 0x30
 8005aa2:	3130      	adds	r1, #48	; 0x30
 8005aa4:	7083      	strb	r3, [r0, #2]
 8005aa6:	70c1      	strb	r1, [r0, #3]
 8005aa8:	1d03      	adds	r3, r0, #4
 8005aaa:	e7f1      	b.n	8005a90 <__exponent+0x60>

08005aac <_printf_float>:
 8005aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab0:	ed2d 8b02 	vpush	{d8}
 8005ab4:	b08d      	sub	sp, #52	; 0x34
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005abc:	4616      	mov	r6, r2
 8005abe:	461f      	mov	r7, r3
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	f001 fc7f 	bl	80073c4 <_localeconv_r>
 8005ac6:	f8d0 a000 	ldr.w	sl, [r0]
 8005aca:	4650      	mov	r0, sl
 8005acc:	f7fa fb80 	bl	80001d0 <strlen>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	9305      	str	r3, [sp, #20]
 8005ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8005adc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ae0:	3307      	adds	r3, #7
 8005ae2:	f023 0307 	bic.w	r3, r3, #7
 8005ae6:	f103 0208 	add.w	r2, r3, #8
 8005aea:	f8c8 2000 	str.w	r2, [r8]
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005af6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005afa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005afe:	9307      	str	r3, [sp, #28]
 8005b00:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b04:	ee08 0a10 	vmov	s16, r0
 8005b08:	4b9f      	ldr	r3, [pc, #636]	; (8005d88 <_printf_float+0x2dc>)
 8005b0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b12:	f7fb f80b 	bl	8000b2c <__aeabi_dcmpun>
 8005b16:	bb88      	cbnz	r0, 8005b7c <_printf_float+0xd0>
 8005b18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b1c:	4b9a      	ldr	r3, [pc, #616]	; (8005d88 <_printf_float+0x2dc>)
 8005b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b22:	f7fa ffe5 	bl	8000af0 <__aeabi_dcmple>
 8005b26:	bb48      	cbnz	r0, 8005b7c <_printf_float+0xd0>
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	4640      	mov	r0, r8
 8005b2e:	4649      	mov	r1, r9
 8005b30:	f7fa ffd4 	bl	8000adc <__aeabi_dcmplt>
 8005b34:	b110      	cbz	r0, 8005b3c <_printf_float+0x90>
 8005b36:	232d      	movs	r3, #45	; 0x2d
 8005b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b3c:	4b93      	ldr	r3, [pc, #588]	; (8005d8c <_printf_float+0x2e0>)
 8005b3e:	4894      	ldr	r0, [pc, #592]	; (8005d90 <_printf_float+0x2e4>)
 8005b40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b44:	bf94      	ite	ls
 8005b46:	4698      	movls	r8, r3
 8005b48:	4680      	movhi	r8, r0
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	6123      	str	r3, [r4, #16]
 8005b4e:	9b05      	ldr	r3, [sp, #20]
 8005b50:	f023 0204 	bic.w	r2, r3, #4
 8005b54:	6022      	str	r2, [r4, #0]
 8005b56:	f04f 0900 	mov.w	r9, #0
 8005b5a:	9700      	str	r7, [sp, #0]
 8005b5c:	4633      	mov	r3, r6
 8005b5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b60:	4621      	mov	r1, r4
 8005b62:	4628      	mov	r0, r5
 8005b64:	f000 f9d8 	bl	8005f18 <_printf_common>
 8005b68:	3001      	adds	r0, #1
 8005b6a:	f040 8090 	bne.w	8005c8e <_printf_float+0x1e2>
 8005b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b72:	b00d      	add	sp, #52	; 0x34
 8005b74:	ecbd 8b02 	vpop	{d8}
 8005b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	464b      	mov	r3, r9
 8005b80:	4640      	mov	r0, r8
 8005b82:	4649      	mov	r1, r9
 8005b84:	f7fa ffd2 	bl	8000b2c <__aeabi_dcmpun>
 8005b88:	b140      	cbz	r0, 8005b9c <_printf_float+0xf0>
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bfbc      	itt	lt
 8005b90:	232d      	movlt	r3, #45	; 0x2d
 8005b92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b96:	487f      	ldr	r0, [pc, #508]	; (8005d94 <_printf_float+0x2e8>)
 8005b98:	4b7f      	ldr	r3, [pc, #508]	; (8005d98 <_printf_float+0x2ec>)
 8005b9a:	e7d1      	b.n	8005b40 <_printf_float+0x94>
 8005b9c:	6863      	ldr	r3, [r4, #4]
 8005b9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ba2:	9206      	str	r2, [sp, #24]
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	d13f      	bne.n	8005c28 <_printf_float+0x17c>
 8005ba8:	2306      	movs	r3, #6
 8005baa:	6063      	str	r3, [r4, #4]
 8005bac:	9b05      	ldr	r3, [sp, #20]
 8005bae:	6861      	ldr	r1, [r4, #4]
 8005bb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9303      	str	r3, [sp, #12]
 8005bb8:	ab0a      	add	r3, sp, #40	; 0x28
 8005bba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005bbe:	ab09      	add	r3, sp, #36	; 0x24
 8005bc0:	ec49 8b10 	vmov	d0, r8, r9
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	6022      	str	r2, [r4, #0]
 8005bc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f7ff fecd 	bl	800596c <__cvt>
 8005bd2:	9b06      	ldr	r3, [sp, #24]
 8005bd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bd6:	2b47      	cmp	r3, #71	; 0x47
 8005bd8:	4680      	mov	r8, r0
 8005bda:	d108      	bne.n	8005bee <_printf_float+0x142>
 8005bdc:	1cc8      	adds	r0, r1, #3
 8005bde:	db02      	blt.n	8005be6 <_printf_float+0x13a>
 8005be0:	6863      	ldr	r3, [r4, #4]
 8005be2:	4299      	cmp	r1, r3
 8005be4:	dd41      	ble.n	8005c6a <_printf_float+0x1be>
 8005be6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005bea:	fa5f fb8b 	uxtb.w	fp, fp
 8005bee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bf2:	d820      	bhi.n	8005c36 <_printf_float+0x18a>
 8005bf4:	3901      	subs	r1, #1
 8005bf6:	465a      	mov	r2, fp
 8005bf8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bfc:	9109      	str	r1, [sp, #36]	; 0x24
 8005bfe:	f7ff ff17 	bl	8005a30 <__exponent>
 8005c02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c04:	1813      	adds	r3, r2, r0
 8005c06:	2a01      	cmp	r2, #1
 8005c08:	4681      	mov	r9, r0
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	dc02      	bgt.n	8005c14 <_printf_float+0x168>
 8005c0e:	6822      	ldr	r2, [r4, #0]
 8005c10:	07d2      	lsls	r2, r2, #31
 8005c12:	d501      	bpl.n	8005c18 <_printf_float+0x16c>
 8005c14:	3301      	adds	r3, #1
 8005c16:	6123      	str	r3, [r4, #16]
 8005c18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d09c      	beq.n	8005b5a <_printf_float+0xae>
 8005c20:	232d      	movs	r3, #45	; 0x2d
 8005c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c26:	e798      	b.n	8005b5a <_printf_float+0xae>
 8005c28:	9a06      	ldr	r2, [sp, #24]
 8005c2a:	2a47      	cmp	r2, #71	; 0x47
 8005c2c:	d1be      	bne.n	8005bac <_printf_float+0x100>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1bc      	bne.n	8005bac <_printf_float+0x100>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e7b9      	b.n	8005baa <_printf_float+0xfe>
 8005c36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c3a:	d118      	bne.n	8005c6e <_printf_float+0x1c2>
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	6863      	ldr	r3, [r4, #4]
 8005c40:	dd0b      	ble.n	8005c5a <_printf_float+0x1ae>
 8005c42:	6121      	str	r1, [r4, #16]
 8005c44:	b913      	cbnz	r3, 8005c4c <_printf_float+0x1a0>
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	07d0      	lsls	r0, r2, #31
 8005c4a:	d502      	bpl.n	8005c52 <_printf_float+0x1a6>
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	440b      	add	r3, r1
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c54:	f04f 0900 	mov.w	r9, #0
 8005c58:	e7de      	b.n	8005c18 <_printf_float+0x16c>
 8005c5a:	b913      	cbnz	r3, 8005c62 <_printf_float+0x1b6>
 8005c5c:	6822      	ldr	r2, [r4, #0]
 8005c5e:	07d2      	lsls	r2, r2, #31
 8005c60:	d501      	bpl.n	8005c66 <_printf_float+0x1ba>
 8005c62:	3302      	adds	r3, #2
 8005c64:	e7f4      	b.n	8005c50 <_printf_float+0x1a4>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e7f2      	b.n	8005c50 <_printf_float+0x1a4>
 8005c6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c70:	4299      	cmp	r1, r3
 8005c72:	db05      	blt.n	8005c80 <_printf_float+0x1d4>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	6121      	str	r1, [r4, #16]
 8005c78:	07d8      	lsls	r0, r3, #31
 8005c7a:	d5ea      	bpl.n	8005c52 <_printf_float+0x1a6>
 8005c7c:	1c4b      	adds	r3, r1, #1
 8005c7e:	e7e7      	b.n	8005c50 <_printf_float+0x1a4>
 8005c80:	2900      	cmp	r1, #0
 8005c82:	bfd4      	ite	le
 8005c84:	f1c1 0202 	rsble	r2, r1, #2
 8005c88:	2201      	movgt	r2, #1
 8005c8a:	4413      	add	r3, r2
 8005c8c:	e7e0      	b.n	8005c50 <_printf_float+0x1a4>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	055a      	lsls	r2, r3, #21
 8005c92:	d407      	bmi.n	8005ca4 <_printf_float+0x1f8>
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	4642      	mov	r2, r8
 8005c98:	4631      	mov	r1, r6
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	47b8      	blx	r7
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d12c      	bne.n	8005cfc <_printf_float+0x250>
 8005ca2:	e764      	b.n	8005b6e <_printf_float+0xc2>
 8005ca4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ca8:	f240 80e0 	bls.w	8005e6c <_printf_float+0x3c0>
 8005cac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f7fa ff08 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d034      	beq.n	8005d26 <_printf_float+0x27a>
 8005cbc:	4a37      	ldr	r2, [pc, #220]	; (8005d9c <_printf_float+0x2f0>)
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	f43f af51 	beq.w	8005b6e <_printf_float+0xc2>
 8005ccc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	db02      	blt.n	8005cda <_printf_float+0x22e>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	07d8      	lsls	r0, r3, #31
 8005cd8:	d510      	bpl.n	8005cfc <_printf_float+0x250>
 8005cda:	ee18 3a10 	vmov	r3, s16
 8005cde:	4652      	mov	r2, sl
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f43f af41 	beq.w	8005b6e <_printf_float+0xc2>
 8005cec:	f04f 0800 	mov.w	r8, #0
 8005cf0:	f104 091a 	add.w	r9, r4, #26
 8005cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	4543      	cmp	r3, r8
 8005cfa:	dc09      	bgt.n	8005d10 <_printf_float+0x264>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	079b      	lsls	r3, r3, #30
 8005d00:	f100 8105 	bmi.w	8005f0e <_printf_float+0x462>
 8005d04:	68e0      	ldr	r0, [r4, #12]
 8005d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d08:	4298      	cmp	r0, r3
 8005d0a:	bfb8      	it	lt
 8005d0c:	4618      	movlt	r0, r3
 8005d0e:	e730      	b.n	8005b72 <_printf_float+0xc6>
 8005d10:	2301      	movs	r3, #1
 8005d12:	464a      	mov	r2, r9
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b8      	blx	r7
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	f43f af27 	beq.w	8005b6e <_printf_float+0xc2>
 8005d20:	f108 0801 	add.w	r8, r8, #1
 8005d24:	e7e6      	b.n	8005cf4 <_printf_float+0x248>
 8005d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	dc39      	bgt.n	8005da0 <_printf_float+0x2f4>
 8005d2c:	4a1b      	ldr	r2, [pc, #108]	; (8005d9c <_printf_float+0x2f0>)
 8005d2e:	2301      	movs	r3, #1
 8005d30:	4631      	mov	r1, r6
 8005d32:	4628      	mov	r0, r5
 8005d34:	47b8      	blx	r7
 8005d36:	3001      	adds	r0, #1
 8005d38:	f43f af19 	beq.w	8005b6e <_printf_float+0xc2>
 8005d3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d40:	4313      	orrs	r3, r2
 8005d42:	d102      	bne.n	8005d4a <_printf_float+0x29e>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	07d9      	lsls	r1, r3, #31
 8005d48:	d5d8      	bpl.n	8005cfc <_printf_float+0x250>
 8005d4a:	ee18 3a10 	vmov	r3, s16
 8005d4e:	4652      	mov	r2, sl
 8005d50:	4631      	mov	r1, r6
 8005d52:	4628      	mov	r0, r5
 8005d54:	47b8      	blx	r7
 8005d56:	3001      	adds	r0, #1
 8005d58:	f43f af09 	beq.w	8005b6e <_printf_float+0xc2>
 8005d5c:	f04f 0900 	mov.w	r9, #0
 8005d60:	f104 0a1a 	add.w	sl, r4, #26
 8005d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d66:	425b      	negs	r3, r3
 8005d68:	454b      	cmp	r3, r9
 8005d6a:	dc01      	bgt.n	8005d70 <_printf_float+0x2c4>
 8005d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d6e:	e792      	b.n	8005c96 <_printf_float+0x1ea>
 8005d70:	2301      	movs	r3, #1
 8005d72:	4652      	mov	r2, sl
 8005d74:	4631      	mov	r1, r6
 8005d76:	4628      	mov	r0, r5
 8005d78:	47b8      	blx	r7
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	f43f aef7 	beq.w	8005b6e <_printf_float+0xc2>
 8005d80:	f109 0901 	add.w	r9, r9, #1
 8005d84:	e7ee      	b.n	8005d64 <_printf_float+0x2b8>
 8005d86:	bf00      	nop
 8005d88:	7fefffff 	.word	0x7fefffff
 8005d8c:	08009628 	.word	0x08009628
 8005d90:	0800962c 	.word	0x0800962c
 8005d94:	08009634 	.word	0x08009634
 8005d98:	08009630 	.word	0x08009630
 8005d9c:	08009638 	.word	0x08009638
 8005da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005da2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005da4:	429a      	cmp	r2, r3
 8005da6:	bfa8      	it	ge
 8005da8:	461a      	movge	r2, r3
 8005daa:	2a00      	cmp	r2, #0
 8005dac:	4691      	mov	r9, r2
 8005dae:	dc37      	bgt.n	8005e20 <_printf_float+0x374>
 8005db0:	f04f 0b00 	mov.w	fp, #0
 8005db4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005db8:	f104 021a 	add.w	r2, r4, #26
 8005dbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005dbe:	9305      	str	r3, [sp, #20]
 8005dc0:	eba3 0309 	sub.w	r3, r3, r9
 8005dc4:	455b      	cmp	r3, fp
 8005dc6:	dc33      	bgt.n	8005e30 <_printf_float+0x384>
 8005dc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	db3b      	blt.n	8005e48 <_printf_float+0x39c>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	07da      	lsls	r2, r3, #31
 8005dd4:	d438      	bmi.n	8005e48 <_printf_float+0x39c>
 8005dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd8:	9a05      	ldr	r2, [sp, #20]
 8005dda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ddc:	1a9a      	subs	r2, r3, r2
 8005dde:	eba3 0901 	sub.w	r9, r3, r1
 8005de2:	4591      	cmp	r9, r2
 8005de4:	bfa8      	it	ge
 8005de6:	4691      	movge	r9, r2
 8005de8:	f1b9 0f00 	cmp.w	r9, #0
 8005dec:	dc35      	bgt.n	8005e5a <_printf_float+0x3ae>
 8005dee:	f04f 0800 	mov.w	r8, #0
 8005df2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005df6:	f104 0a1a 	add.w	sl, r4, #26
 8005dfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	eba3 0309 	sub.w	r3, r3, r9
 8005e04:	4543      	cmp	r3, r8
 8005e06:	f77f af79 	ble.w	8005cfc <_printf_float+0x250>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4652      	mov	r2, sl
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b8      	blx	r7
 8005e14:	3001      	adds	r0, #1
 8005e16:	f43f aeaa 	beq.w	8005b6e <_printf_float+0xc2>
 8005e1a:	f108 0801 	add.w	r8, r8, #1
 8005e1e:	e7ec      	b.n	8005dfa <_printf_float+0x34e>
 8005e20:	4613      	mov	r3, r2
 8005e22:	4631      	mov	r1, r6
 8005e24:	4642      	mov	r2, r8
 8005e26:	4628      	mov	r0, r5
 8005e28:	47b8      	blx	r7
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	d1c0      	bne.n	8005db0 <_printf_float+0x304>
 8005e2e:	e69e      	b.n	8005b6e <_printf_float+0xc2>
 8005e30:	2301      	movs	r3, #1
 8005e32:	4631      	mov	r1, r6
 8005e34:	4628      	mov	r0, r5
 8005e36:	9205      	str	r2, [sp, #20]
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	f43f ae97 	beq.w	8005b6e <_printf_float+0xc2>
 8005e40:	9a05      	ldr	r2, [sp, #20]
 8005e42:	f10b 0b01 	add.w	fp, fp, #1
 8005e46:	e7b9      	b.n	8005dbc <_printf_float+0x310>
 8005e48:	ee18 3a10 	vmov	r3, s16
 8005e4c:	4652      	mov	r2, sl
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	47b8      	blx	r7
 8005e54:	3001      	adds	r0, #1
 8005e56:	d1be      	bne.n	8005dd6 <_printf_float+0x32a>
 8005e58:	e689      	b.n	8005b6e <_printf_float+0xc2>
 8005e5a:	9a05      	ldr	r2, [sp, #20]
 8005e5c:	464b      	mov	r3, r9
 8005e5e:	4442      	add	r2, r8
 8005e60:	4631      	mov	r1, r6
 8005e62:	4628      	mov	r0, r5
 8005e64:	47b8      	blx	r7
 8005e66:	3001      	adds	r0, #1
 8005e68:	d1c1      	bne.n	8005dee <_printf_float+0x342>
 8005e6a:	e680      	b.n	8005b6e <_printf_float+0xc2>
 8005e6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e6e:	2a01      	cmp	r2, #1
 8005e70:	dc01      	bgt.n	8005e76 <_printf_float+0x3ca>
 8005e72:	07db      	lsls	r3, r3, #31
 8005e74:	d538      	bpl.n	8005ee8 <_printf_float+0x43c>
 8005e76:	2301      	movs	r3, #1
 8005e78:	4642      	mov	r2, r8
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	47b8      	blx	r7
 8005e80:	3001      	adds	r0, #1
 8005e82:	f43f ae74 	beq.w	8005b6e <_printf_float+0xc2>
 8005e86:	ee18 3a10 	vmov	r3, s16
 8005e8a:	4652      	mov	r2, sl
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4628      	mov	r0, r5
 8005e90:	47b8      	blx	r7
 8005e92:	3001      	adds	r0, #1
 8005e94:	f43f ae6b 	beq.w	8005b6e <_printf_float+0xc2>
 8005e98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f7fa fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ea4:	b9d8      	cbnz	r0, 8005ede <_printf_float+0x432>
 8005ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea8:	f108 0201 	add.w	r2, r8, #1
 8005eac:	3b01      	subs	r3, #1
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	47b8      	blx	r7
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d10e      	bne.n	8005ed6 <_printf_float+0x42a>
 8005eb8:	e659      	b.n	8005b6e <_printf_float+0xc2>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	4652      	mov	r2, sl
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b8      	blx	r7
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	f43f ae52 	beq.w	8005b6e <_printf_float+0xc2>
 8005eca:	f108 0801 	add.w	r8, r8, #1
 8005ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	4543      	cmp	r3, r8
 8005ed4:	dcf1      	bgt.n	8005eba <_printf_float+0x40e>
 8005ed6:	464b      	mov	r3, r9
 8005ed8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005edc:	e6dc      	b.n	8005c98 <_printf_float+0x1ec>
 8005ede:	f04f 0800 	mov.w	r8, #0
 8005ee2:	f104 0a1a 	add.w	sl, r4, #26
 8005ee6:	e7f2      	b.n	8005ece <_printf_float+0x422>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4642      	mov	r2, r8
 8005eec:	e7df      	b.n	8005eae <_printf_float+0x402>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	464a      	mov	r2, r9
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	47b8      	blx	r7
 8005ef8:	3001      	adds	r0, #1
 8005efa:	f43f ae38 	beq.w	8005b6e <_printf_float+0xc2>
 8005efe:	f108 0801 	add.w	r8, r8, #1
 8005f02:	68e3      	ldr	r3, [r4, #12]
 8005f04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f06:	1a5b      	subs	r3, r3, r1
 8005f08:	4543      	cmp	r3, r8
 8005f0a:	dcf0      	bgt.n	8005eee <_printf_float+0x442>
 8005f0c:	e6fa      	b.n	8005d04 <_printf_float+0x258>
 8005f0e:	f04f 0800 	mov.w	r8, #0
 8005f12:	f104 0919 	add.w	r9, r4, #25
 8005f16:	e7f4      	b.n	8005f02 <_printf_float+0x456>

08005f18 <_printf_common>:
 8005f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f1c:	4616      	mov	r6, r2
 8005f1e:	4699      	mov	r9, r3
 8005f20:	688a      	ldr	r2, [r1, #8]
 8005f22:	690b      	ldr	r3, [r1, #16]
 8005f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	bfb8      	it	lt
 8005f2c:	4613      	movlt	r3, r2
 8005f2e:	6033      	str	r3, [r6, #0]
 8005f30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f34:	4607      	mov	r7, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	b10a      	cbz	r2, 8005f3e <_printf_common+0x26>
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	6033      	str	r3, [r6, #0]
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	0699      	lsls	r1, r3, #26
 8005f42:	bf42      	ittt	mi
 8005f44:	6833      	ldrmi	r3, [r6, #0]
 8005f46:	3302      	addmi	r3, #2
 8005f48:	6033      	strmi	r3, [r6, #0]
 8005f4a:	6825      	ldr	r5, [r4, #0]
 8005f4c:	f015 0506 	ands.w	r5, r5, #6
 8005f50:	d106      	bne.n	8005f60 <_printf_common+0x48>
 8005f52:	f104 0a19 	add.w	sl, r4, #25
 8005f56:	68e3      	ldr	r3, [r4, #12]
 8005f58:	6832      	ldr	r2, [r6, #0]
 8005f5a:	1a9b      	subs	r3, r3, r2
 8005f5c:	42ab      	cmp	r3, r5
 8005f5e:	dc26      	bgt.n	8005fae <_printf_common+0x96>
 8005f60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f64:	1e13      	subs	r3, r2, #0
 8005f66:	6822      	ldr	r2, [r4, #0]
 8005f68:	bf18      	it	ne
 8005f6a:	2301      	movne	r3, #1
 8005f6c:	0692      	lsls	r2, r2, #26
 8005f6e:	d42b      	bmi.n	8005fc8 <_printf_common+0xb0>
 8005f70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f74:	4649      	mov	r1, r9
 8005f76:	4638      	mov	r0, r7
 8005f78:	47c0      	blx	r8
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d01e      	beq.n	8005fbc <_printf_common+0xa4>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	68e5      	ldr	r5, [r4, #12]
 8005f82:	6832      	ldr	r2, [r6, #0]
 8005f84:	f003 0306 	and.w	r3, r3, #6
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	bf08      	it	eq
 8005f8c:	1aad      	subeq	r5, r5, r2
 8005f8e:	68a3      	ldr	r3, [r4, #8]
 8005f90:	6922      	ldr	r2, [r4, #16]
 8005f92:	bf0c      	ite	eq
 8005f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f98:	2500      	movne	r5, #0
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	bfc4      	itt	gt
 8005f9e:	1a9b      	subgt	r3, r3, r2
 8005fa0:	18ed      	addgt	r5, r5, r3
 8005fa2:	2600      	movs	r6, #0
 8005fa4:	341a      	adds	r4, #26
 8005fa6:	42b5      	cmp	r5, r6
 8005fa8:	d11a      	bne.n	8005fe0 <_printf_common+0xc8>
 8005faa:	2000      	movs	r0, #0
 8005fac:	e008      	b.n	8005fc0 <_printf_common+0xa8>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	4652      	mov	r2, sl
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	4638      	mov	r0, r7
 8005fb6:	47c0      	blx	r8
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d103      	bne.n	8005fc4 <_printf_common+0xac>
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc4:	3501      	adds	r5, #1
 8005fc6:	e7c6      	b.n	8005f56 <_printf_common+0x3e>
 8005fc8:	18e1      	adds	r1, r4, r3
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	2030      	movs	r0, #48	; 0x30
 8005fce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fd2:	4422      	add	r2, r4
 8005fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fdc:	3302      	adds	r3, #2
 8005fde:	e7c7      	b.n	8005f70 <_printf_common+0x58>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	47c0      	blx	r8
 8005fea:	3001      	adds	r0, #1
 8005fec:	d0e6      	beq.n	8005fbc <_printf_common+0xa4>
 8005fee:	3601      	adds	r6, #1
 8005ff0:	e7d9      	b.n	8005fa6 <_printf_common+0x8e>
	...

08005ff4 <_printf_i>:
 8005ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff8:	7e0f      	ldrb	r7, [r1, #24]
 8005ffa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ffc:	2f78      	cmp	r7, #120	; 0x78
 8005ffe:	4691      	mov	r9, r2
 8006000:	4680      	mov	r8, r0
 8006002:	460c      	mov	r4, r1
 8006004:	469a      	mov	sl, r3
 8006006:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800600a:	d807      	bhi.n	800601c <_printf_i+0x28>
 800600c:	2f62      	cmp	r7, #98	; 0x62
 800600e:	d80a      	bhi.n	8006026 <_printf_i+0x32>
 8006010:	2f00      	cmp	r7, #0
 8006012:	f000 80d8 	beq.w	80061c6 <_printf_i+0x1d2>
 8006016:	2f58      	cmp	r7, #88	; 0x58
 8006018:	f000 80a3 	beq.w	8006162 <_printf_i+0x16e>
 800601c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006020:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006024:	e03a      	b.n	800609c <_printf_i+0xa8>
 8006026:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800602a:	2b15      	cmp	r3, #21
 800602c:	d8f6      	bhi.n	800601c <_printf_i+0x28>
 800602e:	a101      	add	r1, pc, #4	; (adr r1, 8006034 <_printf_i+0x40>)
 8006030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006034:	0800608d 	.word	0x0800608d
 8006038:	080060a1 	.word	0x080060a1
 800603c:	0800601d 	.word	0x0800601d
 8006040:	0800601d 	.word	0x0800601d
 8006044:	0800601d 	.word	0x0800601d
 8006048:	0800601d 	.word	0x0800601d
 800604c:	080060a1 	.word	0x080060a1
 8006050:	0800601d 	.word	0x0800601d
 8006054:	0800601d 	.word	0x0800601d
 8006058:	0800601d 	.word	0x0800601d
 800605c:	0800601d 	.word	0x0800601d
 8006060:	080061ad 	.word	0x080061ad
 8006064:	080060d1 	.word	0x080060d1
 8006068:	0800618f 	.word	0x0800618f
 800606c:	0800601d 	.word	0x0800601d
 8006070:	0800601d 	.word	0x0800601d
 8006074:	080061cf 	.word	0x080061cf
 8006078:	0800601d 	.word	0x0800601d
 800607c:	080060d1 	.word	0x080060d1
 8006080:	0800601d 	.word	0x0800601d
 8006084:	0800601d 	.word	0x0800601d
 8006088:	08006197 	.word	0x08006197
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	1d1a      	adds	r2, r3, #4
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	602a      	str	r2, [r5, #0]
 8006094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800609c:	2301      	movs	r3, #1
 800609e:	e0a3      	b.n	80061e8 <_printf_i+0x1f4>
 80060a0:	6820      	ldr	r0, [r4, #0]
 80060a2:	6829      	ldr	r1, [r5, #0]
 80060a4:	0606      	lsls	r6, r0, #24
 80060a6:	f101 0304 	add.w	r3, r1, #4
 80060aa:	d50a      	bpl.n	80060c2 <_printf_i+0xce>
 80060ac:	680e      	ldr	r6, [r1, #0]
 80060ae:	602b      	str	r3, [r5, #0]
 80060b0:	2e00      	cmp	r6, #0
 80060b2:	da03      	bge.n	80060bc <_printf_i+0xc8>
 80060b4:	232d      	movs	r3, #45	; 0x2d
 80060b6:	4276      	negs	r6, r6
 80060b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060bc:	485e      	ldr	r0, [pc, #376]	; (8006238 <_printf_i+0x244>)
 80060be:	230a      	movs	r3, #10
 80060c0:	e019      	b.n	80060f6 <_printf_i+0x102>
 80060c2:	680e      	ldr	r6, [r1, #0]
 80060c4:	602b      	str	r3, [r5, #0]
 80060c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060ca:	bf18      	it	ne
 80060cc:	b236      	sxthne	r6, r6
 80060ce:	e7ef      	b.n	80060b0 <_printf_i+0xbc>
 80060d0:	682b      	ldr	r3, [r5, #0]
 80060d2:	6820      	ldr	r0, [r4, #0]
 80060d4:	1d19      	adds	r1, r3, #4
 80060d6:	6029      	str	r1, [r5, #0]
 80060d8:	0601      	lsls	r1, r0, #24
 80060da:	d501      	bpl.n	80060e0 <_printf_i+0xec>
 80060dc:	681e      	ldr	r6, [r3, #0]
 80060de:	e002      	b.n	80060e6 <_printf_i+0xf2>
 80060e0:	0646      	lsls	r6, r0, #25
 80060e2:	d5fb      	bpl.n	80060dc <_printf_i+0xe8>
 80060e4:	881e      	ldrh	r6, [r3, #0]
 80060e6:	4854      	ldr	r0, [pc, #336]	; (8006238 <_printf_i+0x244>)
 80060e8:	2f6f      	cmp	r7, #111	; 0x6f
 80060ea:	bf0c      	ite	eq
 80060ec:	2308      	moveq	r3, #8
 80060ee:	230a      	movne	r3, #10
 80060f0:	2100      	movs	r1, #0
 80060f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060f6:	6865      	ldr	r5, [r4, #4]
 80060f8:	60a5      	str	r5, [r4, #8]
 80060fa:	2d00      	cmp	r5, #0
 80060fc:	bfa2      	ittt	ge
 80060fe:	6821      	ldrge	r1, [r4, #0]
 8006100:	f021 0104 	bicge.w	r1, r1, #4
 8006104:	6021      	strge	r1, [r4, #0]
 8006106:	b90e      	cbnz	r6, 800610c <_printf_i+0x118>
 8006108:	2d00      	cmp	r5, #0
 800610a:	d04d      	beq.n	80061a8 <_printf_i+0x1b4>
 800610c:	4615      	mov	r5, r2
 800610e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006112:	fb03 6711 	mls	r7, r3, r1, r6
 8006116:	5dc7      	ldrb	r7, [r0, r7]
 8006118:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800611c:	4637      	mov	r7, r6
 800611e:	42bb      	cmp	r3, r7
 8006120:	460e      	mov	r6, r1
 8006122:	d9f4      	bls.n	800610e <_printf_i+0x11a>
 8006124:	2b08      	cmp	r3, #8
 8006126:	d10b      	bne.n	8006140 <_printf_i+0x14c>
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	07de      	lsls	r6, r3, #31
 800612c:	d508      	bpl.n	8006140 <_printf_i+0x14c>
 800612e:	6923      	ldr	r3, [r4, #16]
 8006130:	6861      	ldr	r1, [r4, #4]
 8006132:	4299      	cmp	r1, r3
 8006134:	bfde      	ittt	le
 8006136:	2330      	movle	r3, #48	; 0x30
 8006138:	f805 3c01 	strble.w	r3, [r5, #-1]
 800613c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006140:	1b52      	subs	r2, r2, r5
 8006142:	6122      	str	r2, [r4, #16]
 8006144:	f8cd a000 	str.w	sl, [sp]
 8006148:	464b      	mov	r3, r9
 800614a:	aa03      	add	r2, sp, #12
 800614c:	4621      	mov	r1, r4
 800614e:	4640      	mov	r0, r8
 8006150:	f7ff fee2 	bl	8005f18 <_printf_common>
 8006154:	3001      	adds	r0, #1
 8006156:	d14c      	bne.n	80061f2 <_printf_i+0x1fe>
 8006158:	f04f 30ff 	mov.w	r0, #4294967295
 800615c:	b004      	add	sp, #16
 800615e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006162:	4835      	ldr	r0, [pc, #212]	; (8006238 <_printf_i+0x244>)
 8006164:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006168:	6829      	ldr	r1, [r5, #0]
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006170:	6029      	str	r1, [r5, #0]
 8006172:	061d      	lsls	r5, r3, #24
 8006174:	d514      	bpl.n	80061a0 <_printf_i+0x1ac>
 8006176:	07df      	lsls	r7, r3, #31
 8006178:	bf44      	itt	mi
 800617a:	f043 0320 	orrmi.w	r3, r3, #32
 800617e:	6023      	strmi	r3, [r4, #0]
 8006180:	b91e      	cbnz	r6, 800618a <_printf_i+0x196>
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	f023 0320 	bic.w	r3, r3, #32
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	2310      	movs	r3, #16
 800618c:	e7b0      	b.n	80060f0 <_printf_i+0xfc>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	f043 0320 	orr.w	r3, r3, #32
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	2378      	movs	r3, #120	; 0x78
 8006198:	4828      	ldr	r0, [pc, #160]	; (800623c <_printf_i+0x248>)
 800619a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800619e:	e7e3      	b.n	8006168 <_printf_i+0x174>
 80061a0:	0659      	lsls	r1, r3, #25
 80061a2:	bf48      	it	mi
 80061a4:	b2b6      	uxthmi	r6, r6
 80061a6:	e7e6      	b.n	8006176 <_printf_i+0x182>
 80061a8:	4615      	mov	r5, r2
 80061aa:	e7bb      	b.n	8006124 <_printf_i+0x130>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	6826      	ldr	r6, [r4, #0]
 80061b0:	6961      	ldr	r1, [r4, #20]
 80061b2:	1d18      	adds	r0, r3, #4
 80061b4:	6028      	str	r0, [r5, #0]
 80061b6:	0635      	lsls	r5, r6, #24
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	d501      	bpl.n	80061c0 <_printf_i+0x1cc>
 80061bc:	6019      	str	r1, [r3, #0]
 80061be:	e002      	b.n	80061c6 <_printf_i+0x1d2>
 80061c0:	0670      	lsls	r0, r6, #25
 80061c2:	d5fb      	bpl.n	80061bc <_printf_i+0x1c8>
 80061c4:	8019      	strh	r1, [r3, #0]
 80061c6:	2300      	movs	r3, #0
 80061c8:	6123      	str	r3, [r4, #16]
 80061ca:	4615      	mov	r5, r2
 80061cc:	e7ba      	b.n	8006144 <_printf_i+0x150>
 80061ce:	682b      	ldr	r3, [r5, #0]
 80061d0:	1d1a      	adds	r2, r3, #4
 80061d2:	602a      	str	r2, [r5, #0]
 80061d4:	681d      	ldr	r5, [r3, #0]
 80061d6:	6862      	ldr	r2, [r4, #4]
 80061d8:	2100      	movs	r1, #0
 80061da:	4628      	mov	r0, r5
 80061dc:	f7fa f800 	bl	80001e0 <memchr>
 80061e0:	b108      	cbz	r0, 80061e6 <_printf_i+0x1f2>
 80061e2:	1b40      	subs	r0, r0, r5
 80061e4:	6060      	str	r0, [r4, #4]
 80061e6:	6863      	ldr	r3, [r4, #4]
 80061e8:	6123      	str	r3, [r4, #16]
 80061ea:	2300      	movs	r3, #0
 80061ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f0:	e7a8      	b.n	8006144 <_printf_i+0x150>
 80061f2:	6923      	ldr	r3, [r4, #16]
 80061f4:	462a      	mov	r2, r5
 80061f6:	4649      	mov	r1, r9
 80061f8:	4640      	mov	r0, r8
 80061fa:	47d0      	blx	sl
 80061fc:	3001      	adds	r0, #1
 80061fe:	d0ab      	beq.n	8006158 <_printf_i+0x164>
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	079b      	lsls	r3, r3, #30
 8006204:	d413      	bmi.n	800622e <_printf_i+0x23a>
 8006206:	68e0      	ldr	r0, [r4, #12]
 8006208:	9b03      	ldr	r3, [sp, #12]
 800620a:	4298      	cmp	r0, r3
 800620c:	bfb8      	it	lt
 800620e:	4618      	movlt	r0, r3
 8006210:	e7a4      	b.n	800615c <_printf_i+0x168>
 8006212:	2301      	movs	r3, #1
 8006214:	4632      	mov	r2, r6
 8006216:	4649      	mov	r1, r9
 8006218:	4640      	mov	r0, r8
 800621a:	47d0      	blx	sl
 800621c:	3001      	adds	r0, #1
 800621e:	d09b      	beq.n	8006158 <_printf_i+0x164>
 8006220:	3501      	adds	r5, #1
 8006222:	68e3      	ldr	r3, [r4, #12]
 8006224:	9903      	ldr	r1, [sp, #12]
 8006226:	1a5b      	subs	r3, r3, r1
 8006228:	42ab      	cmp	r3, r5
 800622a:	dcf2      	bgt.n	8006212 <_printf_i+0x21e>
 800622c:	e7eb      	b.n	8006206 <_printf_i+0x212>
 800622e:	2500      	movs	r5, #0
 8006230:	f104 0619 	add.w	r6, r4, #25
 8006234:	e7f5      	b.n	8006222 <_printf_i+0x22e>
 8006236:	bf00      	nop
 8006238:	0800963a 	.word	0x0800963a
 800623c:	0800964b 	.word	0x0800964b

08006240 <_sbrk_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	4d06      	ldr	r5, [pc, #24]	; (800625c <_sbrk_r+0x1c>)
 8006244:	2300      	movs	r3, #0
 8006246:	4604      	mov	r4, r0
 8006248:	4608      	mov	r0, r1
 800624a:	602b      	str	r3, [r5, #0]
 800624c:	f7fc f91c 	bl	8002488 <_sbrk>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_sbrk_r+0x1a>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_sbrk_r+0x1a>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	200004a8 	.word	0x200004a8

08006260 <siprintf>:
 8006260:	b40e      	push	{r1, r2, r3}
 8006262:	b500      	push	{lr}
 8006264:	b09c      	sub	sp, #112	; 0x70
 8006266:	ab1d      	add	r3, sp, #116	; 0x74
 8006268:	9002      	str	r0, [sp, #8]
 800626a:	9006      	str	r0, [sp, #24]
 800626c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006270:	4809      	ldr	r0, [pc, #36]	; (8006298 <siprintf+0x38>)
 8006272:	9107      	str	r1, [sp, #28]
 8006274:	9104      	str	r1, [sp, #16]
 8006276:	4909      	ldr	r1, [pc, #36]	; (800629c <siprintf+0x3c>)
 8006278:	f853 2b04 	ldr.w	r2, [r3], #4
 800627c:	9105      	str	r1, [sp, #20]
 800627e:	6800      	ldr	r0, [r0, #0]
 8006280:	9301      	str	r3, [sp, #4]
 8006282:	a902      	add	r1, sp, #8
 8006284:	f001 fd70 	bl	8007d68 <_svfiprintf_r>
 8006288:	9b02      	ldr	r3, [sp, #8]
 800628a:	2200      	movs	r2, #0
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	b01c      	add	sp, #112	; 0x70
 8006290:	f85d eb04 	ldr.w	lr, [sp], #4
 8006294:	b003      	add	sp, #12
 8006296:	4770      	bx	lr
 8006298:	20000058 	.word	0x20000058
 800629c:	ffff0208 	.word	0xffff0208

080062a0 <__sread>:
 80062a0:	b510      	push	{r4, lr}
 80062a2:	460c      	mov	r4, r1
 80062a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a8:	f001 ffb8 	bl	800821c <_read_r>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	bfab      	itete	ge
 80062b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062b2:	89a3      	ldrhlt	r3, [r4, #12]
 80062b4:	181b      	addge	r3, r3, r0
 80062b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062ba:	bfac      	ite	ge
 80062bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80062be:	81a3      	strhlt	r3, [r4, #12]
 80062c0:	bd10      	pop	{r4, pc}

080062c2 <__swrite>:
 80062c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c6:	461f      	mov	r7, r3
 80062c8:	898b      	ldrh	r3, [r1, #12]
 80062ca:	05db      	lsls	r3, r3, #23
 80062cc:	4605      	mov	r5, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	4616      	mov	r6, r2
 80062d2:	d505      	bpl.n	80062e0 <__swrite+0x1e>
 80062d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d8:	2302      	movs	r3, #2
 80062da:	2200      	movs	r2, #0
 80062dc:	f001 f876 	bl	80073cc <_lseek_r>
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ea:	81a3      	strh	r3, [r4, #12]
 80062ec:	4632      	mov	r2, r6
 80062ee:	463b      	mov	r3, r7
 80062f0:	4628      	mov	r0, r5
 80062f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062f6:	f000 b869 	b.w	80063cc <_write_r>

080062fa <__sseek>:
 80062fa:	b510      	push	{r4, lr}
 80062fc:	460c      	mov	r4, r1
 80062fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006302:	f001 f863 	bl	80073cc <_lseek_r>
 8006306:	1c43      	adds	r3, r0, #1
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	bf15      	itete	ne
 800630c:	6560      	strne	r0, [r4, #84]	; 0x54
 800630e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006316:	81a3      	strheq	r3, [r4, #12]
 8006318:	bf18      	it	ne
 800631a:	81a3      	strhne	r3, [r4, #12]
 800631c:	bd10      	pop	{r4, pc}

0800631e <__sclose>:
 800631e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006322:	f000 b8f1 	b.w	8006508 <_close_r>
	...

08006328 <__swbuf_r>:
 8006328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632a:	460e      	mov	r6, r1
 800632c:	4614      	mov	r4, r2
 800632e:	4605      	mov	r5, r0
 8006330:	b118      	cbz	r0, 800633a <__swbuf_r+0x12>
 8006332:	6983      	ldr	r3, [r0, #24]
 8006334:	b90b      	cbnz	r3, 800633a <__swbuf_r+0x12>
 8006336:	f7ff f9a9 	bl	800568c <__sinit>
 800633a:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <__swbuf_r+0x98>)
 800633c:	429c      	cmp	r4, r3
 800633e:	d12b      	bne.n	8006398 <__swbuf_r+0x70>
 8006340:	686c      	ldr	r4, [r5, #4]
 8006342:	69a3      	ldr	r3, [r4, #24]
 8006344:	60a3      	str	r3, [r4, #8]
 8006346:	89a3      	ldrh	r3, [r4, #12]
 8006348:	071a      	lsls	r2, r3, #28
 800634a:	d52f      	bpl.n	80063ac <__swbuf_r+0x84>
 800634c:	6923      	ldr	r3, [r4, #16]
 800634e:	b36b      	cbz	r3, 80063ac <__swbuf_r+0x84>
 8006350:	6923      	ldr	r3, [r4, #16]
 8006352:	6820      	ldr	r0, [r4, #0]
 8006354:	1ac0      	subs	r0, r0, r3
 8006356:	6963      	ldr	r3, [r4, #20]
 8006358:	b2f6      	uxtb	r6, r6
 800635a:	4283      	cmp	r3, r0
 800635c:	4637      	mov	r7, r6
 800635e:	dc04      	bgt.n	800636a <__swbuf_r+0x42>
 8006360:	4621      	mov	r1, r4
 8006362:	4628      	mov	r0, r5
 8006364:	f000 ffe0 	bl	8007328 <_fflush_r>
 8006368:	bb30      	cbnz	r0, 80063b8 <__swbuf_r+0x90>
 800636a:	68a3      	ldr	r3, [r4, #8]
 800636c:	3b01      	subs	r3, #1
 800636e:	60a3      	str	r3, [r4, #8]
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	6022      	str	r2, [r4, #0]
 8006376:	701e      	strb	r6, [r3, #0]
 8006378:	6963      	ldr	r3, [r4, #20]
 800637a:	3001      	adds	r0, #1
 800637c:	4283      	cmp	r3, r0
 800637e:	d004      	beq.n	800638a <__swbuf_r+0x62>
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	07db      	lsls	r3, r3, #31
 8006384:	d506      	bpl.n	8006394 <__swbuf_r+0x6c>
 8006386:	2e0a      	cmp	r6, #10
 8006388:	d104      	bne.n	8006394 <__swbuf_r+0x6c>
 800638a:	4621      	mov	r1, r4
 800638c:	4628      	mov	r0, r5
 800638e:	f000 ffcb 	bl	8007328 <_fflush_r>
 8006392:	b988      	cbnz	r0, 80063b8 <__swbuf_r+0x90>
 8006394:	4638      	mov	r0, r7
 8006396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006398:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <__swbuf_r+0x9c>)
 800639a:	429c      	cmp	r4, r3
 800639c:	d101      	bne.n	80063a2 <__swbuf_r+0x7a>
 800639e:	68ac      	ldr	r4, [r5, #8]
 80063a0:	e7cf      	b.n	8006342 <__swbuf_r+0x1a>
 80063a2:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <__swbuf_r+0xa0>)
 80063a4:	429c      	cmp	r4, r3
 80063a6:	bf08      	it	eq
 80063a8:	68ec      	ldreq	r4, [r5, #12]
 80063aa:	e7ca      	b.n	8006342 <__swbuf_r+0x1a>
 80063ac:	4621      	mov	r1, r4
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 f81e 	bl	80063f0 <__swsetup_r>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d0cb      	beq.n	8006350 <__swbuf_r+0x28>
 80063b8:	f04f 37ff 	mov.w	r7, #4294967295
 80063bc:	e7ea      	b.n	8006394 <__swbuf_r+0x6c>
 80063be:	bf00      	nop
 80063c0:	080095e4 	.word	0x080095e4
 80063c4:	08009604 	.word	0x08009604
 80063c8:	080095c4 	.word	0x080095c4

080063cc <_write_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4d07      	ldr	r5, [pc, #28]	; (80063ec <_write_r+0x20>)
 80063d0:	4604      	mov	r4, r0
 80063d2:	4608      	mov	r0, r1
 80063d4:	4611      	mov	r1, r2
 80063d6:	2200      	movs	r2, #0
 80063d8:	602a      	str	r2, [r5, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	f7ff f853 	bl	8005486 <_write>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d102      	bne.n	80063ea <_write_r+0x1e>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	b103      	cbz	r3, 80063ea <_write_r+0x1e>
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	200004a8 	.word	0x200004a8

080063f0 <__swsetup_r>:
 80063f0:	4b32      	ldr	r3, [pc, #200]	; (80064bc <__swsetup_r+0xcc>)
 80063f2:	b570      	push	{r4, r5, r6, lr}
 80063f4:	681d      	ldr	r5, [r3, #0]
 80063f6:	4606      	mov	r6, r0
 80063f8:	460c      	mov	r4, r1
 80063fa:	b125      	cbz	r5, 8006406 <__swsetup_r+0x16>
 80063fc:	69ab      	ldr	r3, [r5, #24]
 80063fe:	b913      	cbnz	r3, 8006406 <__swsetup_r+0x16>
 8006400:	4628      	mov	r0, r5
 8006402:	f7ff f943 	bl	800568c <__sinit>
 8006406:	4b2e      	ldr	r3, [pc, #184]	; (80064c0 <__swsetup_r+0xd0>)
 8006408:	429c      	cmp	r4, r3
 800640a:	d10f      	bne.n	800642c <__swsetup_r+0x3c>
 800640c:	686c      	ldr	r4, [r5, #4]
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006414:	0719      	lsls	r1, r3, #28
 8006416:	d42c      	bmi.n	8006472 <__swsetup_r+0x82>
 8006418:	06dd      	lsls	r5, r3, #27
 800641a:	d411      	bmi.n	8006440 <__swsetup_r+0x50>
 800641c:	2309      	movs	r3, #9
 800641e:	6033      	str	r3, [r6, #0]
 8006420:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006424:	81a3      	strh	r3, [r4, #12]
 8006426:	f04f 30ff 	mov.w	r0, #4294967295
 800642a:	e03e      	b.n	80064aa <__swsetup_r+0xba>
 800642c:	4b25      	ldr	r3, [pc, #148]	; (80064c4 <__swsetup_r+0xd4>)
 800642e:	429c      	cmp	r4, r3
 8006430:	d101      	bne.n	8006436 <__swsetup_r+0x46>
 8006432:	68ac      	ldr	r4, [r5, #8]
 8006434:	e7eb      	b.n	800640e <__swsetup_r+0x1e>
 8006436:	4b24      	ldr	r3, [pc, #144]	; (80064c8 <__swsetup_r+0xd8>)
 8006438:	429c      	cmp	r4, r3
 800643a:	bf08      	it	eq
 800643c:	68ec      	ldreq	r4, [r5, #12]
 800643e:	e7e6      	b.n	800640e <__swsetup_r+0x1e>
 8006440:	0758      	lsls	r0, r3, #29
 8006442:	d512      	bpl.n	800646a <__swsetup_r+0x7a>
 8006444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006446:	b141      	cbz	r1, 800645a <__swsetup_r+0x6a>
 8006448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800644c:	4299      	cmp	r1, r3
 800644e:	d002      	beq.n	8006456 <__swsetup_r+0x66>
 8006450:	4630      	mov	r0, r6
 8006452:	f001 fbe1 	bl	8007c18 <_free_r>
 8006456:	2300      	movs	r3, #0
 8006458:	6363      	str	r3, [r4, #52]	; 0x34
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006460:	81a3      	strh	r3, [r4, #12]
 8006462:	2300      	movs	r3, #0
 8006464:	6063      	str	r3, [r4, #4]
 8006466:	6923      	ldr	r3, [r4, #16]
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	f043 0308 	orr.w	r3, r3, #8
 8006470:	81a3      	strh	r3, [r4, #12]
 8006472:	6923      	ldr	r3, [r4, #16]
 8006474:	b94b      	cbnz	r3, 800648a <__swsetup_r+0x9a>
 8006476:	89a3      	ldrh	r3, [r4, #12]
 8006478:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800647c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006480:	d003      	beq.n	800648a <__swsetup_r+0x9a>
 8006482:	4621      	mov	r1, r4
 8006484:	4630      	mov	r0, r6
 8006486:	f000 ffd9 	bl	800743c <__smakebuf_r>
 800648a:	89a0      	ldrh	r0, [r4, #12]
 800648c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006490:	f010 0301 	ands.w	r3, r0, #1
 8006494:	d00a      	beq.n	80064ac <__swsetup_r+0xbc>
 8006496:	2300      	movs	r3, #0
 8006498:	60a3      	str	r3, [r4, #8]
 800649a:	6963      	ldr	r3, [r4, #20]
 800649c:	425b      	negs	r3, r3
 800649e:	61a3      	str	r3, [r4, #24]
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	b943      	cbnz	r3, 80064b6 <__swsetup_r+0xc6>
 80064a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064a8:	d1ba      	bne.n	8006420 <__swsetup_r+0x30>
 80064aa:	bd70      	pop	{r4, r5, r6, pc}
 80064ac:	0781      	lsls	r1, r0, #30
 80064ae:	bf58      	it	pl
 80064b0:	6963      	ldrpl	r3, [r4, #20]
 80064b2:	60a3      	str	r3, [r4, #8]
 80064b4:	e7f4      	b.n	80064a0 <__swsetup_r+0xb0>
 80064b6:	2000      	movs	r0, #0
 80064b8:	e7f7      	b.n	80064aa <__swsetup_r+0xba>
 80064ba:	bf00      	nop
 80064bc:	20000058 	.word	0x20000058
 80064c0:	080095e4 	.word	0x080095e4
 80064c4:	08009604 	.word	0x08009604
 80064c8:	080095c4 	.word	0x080095c4

080064cc <__assert_func>:
 80064cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064ce:	4614      	mov	r4, r2
 80064d0:	461a      	mov	r2, r3
 80064d2:	4b09      	ldr	r3, [pc, #36]	; (80064f8 <__assert_func+0x2c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4605      	mov	r5, r0
 80064d8:	68d8      	ldr	r0, [r3, #12]
 80064da:	b14c      	cbz	r4, 80064f0 <__assert_func+0x24>
 80064dc:	4b07      	ldr	r3, [pc, #28]	; (80064fc <__assert_func+0x30>)
 80064de:	9100      	str	r1, [sp, #0]
 80064e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064e4:	4906      	ldr	r1, [pc, #24]	; (8006500 <__assert_func+0x34>)
 80064e6:	462b      	mov	r3, r5
 80064e8:	f000 ff5a 	bl	80073a0 <fiprintf>
 80064ec:	f001 fea8 	bl	8008240 <abort>
 80064f0:	4b04      	ldr	r3, [pc, #16]	; (8006504 <__assert_func+0x38>)
 80064f2:	461c      	mov	r4, r3
 80064f4:	e7f3      	b.n	80064de <__assert_func+0x12>
 80064f6:	bf00      	nop
 80064f8:	20000058 	.word	0x20000058
 80064fc:	0800965c 	.word	0x0800965c
 8006500:	08009669 	.word	0x08009669
 8006504:	08009697 	.word	0x08009697

08006508 <_close_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4d06      	ldr	r5, [pc, #24]	; (8006524 <_close_r+0x1c>)
 800650c:	2300      	movs	r3, #0
 800650e:	4604      	mov	r4, r0
 8006510:	4608      	mov	r0, r1
 8006512:	602b      	str	r3, [r5, #0]
 8006514:	f7fe ffe8 	bl	80054e8 <_close>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d102      	bne.n	8006522 <_close_r+0x1a>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	b103      	cbz	r3, 8006522 <_close_r+0x1a>
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	200004a8 	.word	0x200004a8

08006528 <quorem>:
 8006528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	6903      	ldr	r3, [r0, #16]
 800652e:	690c      	ldr	r4, [r1, #16]
 8006530:	42a3      	cmp	r3, r4
 8006532:	4607      	mov	r7, r0
 8006534:	f2c0 8081 	blt.w	800663a <quorem+0x112>
 8006538:	3c01      	subs	r4, #1
 800653a:	f101 0814 	add.w	r8, r1, #20
 800653e:	f100 0514 	add.w	r5, r0, #20
 8006542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800654c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006550:	3301      	adds	r3, #1
 8006552:	429a      	cmp	r2, r3
 8006554:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006558:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800655c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006560:	d331      	bcc.n	80065c6 <quorem+0x9e>
 8006562:	f04f 0e00 	mov.w	lr, #0
 8006566:	4640      	mov	r0, r8
 8006568:	46ac      	mov	ip, r5
 800656a:	46f2      	mov	sl, lr
 800656c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006570:	b293      	uxth	r3, r2
 8006572:	fb06 e303 	mla	r3, r6, r3, lr
 8006576:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800657a:	b29b      	uxth	r3, r3
 800657c:	ebaa 0303 	sub.w	r3, sl, r3
 8006580:	f8dc a000 	ldr.w	sl, [ip]
 8006584:	0c12      	lsrs	r2, r2, #16
 8006586:	fa13 f38a 	uxtah	r3, r3, sl
 800658a:	fb06 e202 	mla	r2, r6, r2, lr
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	9b00      	ldr	r3, [sp, #0]
 8006592:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006596:	b292      	uxth	r2, r2
 8006598:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800659c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80065a4:	4581      	cmp	r9, r0
 80065a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065aa:	f84c 3b04 	str.w	r3, [ip], #4
 80065ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065b2:	d2db      	bcs.n	800656c <quorem+0x44>
 80065b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80065b8:	b92b      	cbnz	r3, 80065c6 <quorem+0x9e>
 80065ba:	9b01      	ldr	r3, [sp, #4]
 80065bc:	3b04      	subs	r3, #4
 80065be:	429d      	cmp	r5, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	d32e      	bcc.n	8006622 <quorem+0xfa>
 80065c4:	613c      	str	r4, [r7, #16]
 80065c6:	4638      	mov	r0, r7
 80065c8:	f001 fa0e 	bl	80079e8 <__mcmp>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	db24      	blt.n	800661a <quorem+0xf2>
 80065d0:	3601      	adds	r6, #1
 80065d2:	4628      	mov	r0, r5
 80065d4:	f04f 0c00 	mov.w	ip, #0
 80065d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80065dc:	f8d0 e000 	ldr.w	lr, [r0]
 80065e0:	b293      	uxth	r3, r2
 80065e2:	ebac 0303 	sub.w	r3, ip, r3
 80065e6:	0c12      	lsrs	r2, r2, #16
 80065e8:	fa13 f38e 	uxtah	r3, r3, lr
 80065ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065fa:	45c1      	cmp	r9, r8
 80065fc:	f840 3b04 	str.w	r3, [r0], #4
 8006600:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006604:	d2e8      	bcs.n	80065d8 <quorem+0xb0>
 8006606:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800660a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800660e:	b922      	cbnz	r2, 800661a <quorem+0xf2>
 8006610:	3b04      	subs	r3, #4
 8006612:	429d      	cmp	r5, r3
 8006614:	461a      	mov	r2, r3
 8006616:	d30a      	bcc.n	800662e <quorem+0x106>
 8006618:	613c      	str	r4, [r7, #16]
 800661a:	4630      	mov	r0, r6
 800661c:	b003      	add	sp, #12
 800661e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006622:	6812      	ldr	r2, [r2, #0]
 8006624:	3b04      	subs	r3, #4
 8006626:	2a00      	cmp	r2, #0
 8006628:	d1cc      	bne.n	80065c4 <quorem+0x9c>
 800662a:	3c01      	subs	r4, #1
 800662c:	e7c7      	b.n	80065be <quorem+0x96>
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	3b04      	subs	r3, #4
 8006632:	2a00      	cmp	r2, #0
 8006634:	d1f0      	bne.n	8006618 <quorem+0xf0>
 8006636:	3c01      	subs	r4, #1
 8006638:	e7eb      	b.n	8006612 <quorem+0xea>
 800663a:	2000      	movs	r0, #0
 800663c:	e7ee      	b.n	800661c <quorem+0xf4>
	...

08006640 <_dtoa_r>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	ed2d 8b04 	vpush	{d8-d9}
 8006648:	ec57 6b10 	vmov	r6, r7, d0
 800664c:	b093      	sub	sp, #76	; 0x4c
 800664e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006650:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006654:	9106      	str	r1, [sp, #24]
 8006656:	ee10 aa10 	vmov	sl, s0
 800665a:	4604      	mov	r4, r0
 800665c:	9209      	str	r2, [sp, #36]	; 0x24
 800665e:	930c      	str	r3, [sp, #48]	; 0x30
 8006660:	46bb      	mov	fp, r7
 8006662:	b975      	cbnz	r5, 8006682 <_dtoa_r+0x42>
 8006664:	2010      	movs	r0, #16
 8006666:	f000 ff29 	bl	80074bc <malloc>
 800666a:	4602      	mov	r2, r0
 800666c:	6260      	str	r0, [r4, #36]	; 0x24
 800666e:	b920      	cbnz	r0, 800667a <_dtoa_r+0x3a>
 8006670:	4ba7      	ldr	r3, [pc, #668]	; (8006910 <_dtoa_r+0x2d0>)
 8006672:	21ea      	movs	r1, #234	; 0xea
 8006674:	48a7      	ldr	r0, [pc, #668]	; (8006914 <_dtoa_r+0x2d4>)
 8006676:	f7ff ff29 	bl	80064cc <__assert_func>
 800667a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800667e:	6005      	str	r5, [r0, #0]
 8006680:	60c5      	str	r5, [r0, #12]
 8006682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006684:	6819      	ldr	r1, [r3, #0]
 8006686:	b151      	cbz	r1, 800669e <_dtoa_r+0x5e>
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	604a      	str	r2, [r1, #4]
 800668c:	2301      	movs	r3, #1
 800668e:	4093      	lsls	r3, r2
 8006690:	608b      	str	r3, [r1, #8]
 8006692:	4620      	mov	r0, r4
 8006694:	f000 ff66 	bl	8007564 <_Bfree>
 8006698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	1e3b      	subs	r3, r7, #0
 80066a0:	bfaa      	itet	ge
 80066a2:	2300      	movge	r3, #0
 80066a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80066a8:	f8c8 3000 	strge.w	r3, [r8]
 80066ac:	4b9a      	ldr	r3, [pc, #616]	; (8006918 <_dtoa_r+0x2d8>)
 80066ae:	bfbc      	itt	lt
 80066b0:	2201      	movlt	r2, #1
 80066b2:	f8c8 2000 	strlt.w	r2, [r8]
 80066b6:	ea33 030b 	bics.w	r3, r3, fp
 80066ba:	d11b      	bne.n	80066f4 <_dtoa_r+0xb4>
 80066bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066be:	f242 730f 	movw	r3, #9999	; 0x270f
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066c8:	4333      	orrs	r3, r6
 80066ca:	f000 8592 	beq.w	80071f2 <_dtoa_r+0xbb2>
 80066ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066d0:	b963      	cbnz	r3, 80066ec <_dtoa_r+0xac>
 80066d2:	4b92      	ldr	r3, [pc, #584]	; (800691c <_dtoa_r+0x2dc>)
 80066d4:	e022      	b.n	800671c <_dtoa_r+0xdc>
 80066d6:	4b92      	ldr	r3, [pc, #584]	; (8006920 <_dtoa_r+0x2e0>)
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	3308      	adds	r3, #8
 80066dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	9801      	ldr	r0, [sp, #4]
 80066e2:	b013      	add	sp, #76	; 0x4c
 80066e4:	ecbd 8b04 	vpop	{d8-d9}
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ec:	4b8b      	ldr	r3, [pc, #556]	; (800691c <_dtoa_r+0x2dc>)
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	3303      	adds	r3, #3
 80066f2:	e7f3      	b.n	80066dc <_dtoa_r+0x9c>
 80066f4:	2200      	movs	r2, #0
 80066f6:	2300      	movs	r3, #0
 80066f8:	4650      	mov	r0, sl
 80066fa:	4659      	mov	r1, fp
 80066fc:	f7fa f9e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006700:	ec4b ab19 	vmov	d9, sl, fp
 8006704:	4680      	mov	r8, r0
 8006706:	b158      	cbz	r0, 8006720 <_dtoa_r+0xe0>
 8006708:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800670a:	2301      	movs	r3, #1
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 856b 	beq.w	80071ec <_dtoa_r+0xbac>
 8006716:	4883      	ldr	r0, [pc, #524]	; (8006924 <_dtoa_r+0x2e4>)
 8006718:	6018      	str	r0, [r3, #0]
 800671a:	1e43      	subs	r3, r0, #1
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	e7df      	b.n	80066e0 <_dtoa_r+0xa0>
 8006720:	ec4b ab10 	vmov	d0, sl, fp
 8006724:	aa10      	add	r2, sp, #64	; 0x40
 8006726:	a911      	add	r1, sp, #68	; 0x44
 8006728:	4620      	mov	r0, r4
 800672a:	f001 fa03 	bl	8007b34 <__d2b>
 800672e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006732:	ee08 0a10 	vmov	s16, r0
 8006736:	2d00      	cmp	r5, #0
 8006738:	f000 8084 	beq.w	8006844 <_dtoa_r+0x204>
 800673c:	ee19 3a90 	vmov	r3, s19
 8006740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006744:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006748:	4656      	mov	r6, sl
 800674a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800674e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006752:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006756:	4b74      	ldr	r3, [pc, #464]	; (8006928 <_dtoa_r+0x2e8>)
 8006758:	2200      	movs	r2, #0
 800675a:	4630      	mov	r0, r6
 800675c:	4639      	mov	r1, r7
 800675e:	f7f9 fd93 	bl	8000288 <__aeabi_dsub>
 8006762:	a365      	add	r3, pc, #404	; (adr r3, 80068f8 <_dtoa_r+0x2b8>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f7f9 ff46 	bl	80005f8 <__aeabi_dmul>
 800676c:	a364      	add	r3, pc, #400	; (adr r3, 8006900 <_dtoa_r+0x2c0>)
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f7f9 fd8b 	bl	800028c <__adddf3>
 8006776:	4606      	mov	r6, r0
 8006778:	4628      	mov	r0, r5
 800677a:	460f      	mov	r7, r1
 800677c:	f7f9 fed2 	bl	8000524 <__aeabi_i2d>
 8006780:	a361      	add	r3, pc, #388	; (adr r3, 8006908 <_dtoa_r+0x2c8>)
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	f7f9 ff37 	bl	80005f8 <__aeabi_dmul>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4630      	mov	r0, r6
 8006790:	4639      	mov	r1, r7
 8006792:	f7f9 fd7b 	bl	800028c <__adddf3>
 8006796:	4606      	mov	r6, r0
 8006798:	460f      	mov	r7, r1
 800679a:	f7fa f9dd 	bl	8000b58 <__aeabi_d2iz>
 800679e:	2200      	movs	r2, #0
 80067a0:	9000      	str	r0, [sp, #0]
 80067a2:	2300      	movs	r3, #0
 80067a4:	4630      	mov	r0, r6
 80067a6:	4639      	mov	r1, r7
 80067a8:	f7fa f998 	bl	8000adc <__aeabi_dcmplt>
 80067ac:	b150      	cbz	r0, 80067c4 <_dtoa_r+0x184>
 80067ae:	9800      	ldr	r0, [sp, #0]
 80067b0:	f7f9 feb8 	bl	8000524 <__aeabi_i2d>
 80067b4:	4632      	mov	r2, r6
 80067b6:	463b      	mov	r3, r7
 80067b8:	f7fa f986 	bl	8000ac8 <__aeabi_dcmpeq>
 80067bc:	b910      	cbnz	r0, 80067c4 <_dtoa_r+0x184>
 80067be:	9b00      	ldr	r3, [sp, #0]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	9b00      	ldr	r3, [sp, #0]
 80067c6:	2b16      	cmp	r3, #22
 80067c8:	d85a      	bhi.n	8006880 <_dtoa_r+0x240>
 80067ca:	9a00      	ldr	r2, [sp, #0]
 80067cc:	4b57      	ldr	r3, [pc, #348]	; (800692c <_dtoa_r+0x2ec>)
 80067ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	ec51 0b19 	vmov	r0, r1, d9
 80067da:	f7fa f97f 	bl	8000adc <__aeabi_dcmplt>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d050      	beq.n	8006884 <_dtoa_r+0x244>
 80067e2:	9b00      	ldr	r3, [sp, #0]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	2300      	movs	r3, #0
 80067ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80067ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067ee:	1b5d      	subs	r5, r3, r5
 80067f0:	1e6b      	subs	r3, r5, #1
 80067f2:	9305      	str	r3, [sp, #20]
 80067f4:	bf45      	ittet	mi
 80067f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80067fa:	9304      	strmi	r3, [sp, #16]
 80067fc:	2300      	movpl	r3, #0
 80067fe:	2300      	movmi	r3, #0
 8006800:	bf4c      	ite	mi
 8006802:	9305      	strmi	r3, [sp, #20]
 8006804:	9304      	strpl	r3, [sp, #16]
 8006806:	9b00      	ldr	r3, [sp, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	db3d      	blt.n	8006888 <_dtoa_r+0x248>
 800680c:	9b05      	ldr	r3, [sp, #20]
 800680e:	9a00      	ldr	r2, [sp, #0]
 8006810:	920a      	str	r2, [sp, #40]	; 0x28
 8006812:	4413      	add	r3, r2
 8006814:	9305      	str	r3, [sp, #20]
 8006816:	2300      	movs	r3, #0
 8006818:	9307      	str	r3, [sp, #28]
 800681a:	9b06      	ldr	r3, [sp, #24]
 800681c:	2b09      	cmp	r3, #9
 800681e:	f200 8089 	bhi.w	8006934 <_dtoa_r+0x2f4>
 8006822:	2b05      	cmp	r3, #5
 8006824:	bfc4      	itt	gt
 8006826:	3b04      	subgt	r3, #4
 8006828:	9306      	strgt	r3, [sp, #24]
 800682a:	9b06      	ldr	r3, [sp, #24]
 800682c:	f1a3 0302 	sub.w	r3, r3, #2
 8006830:	bfcc      	ite	gt
 8006832:	2500      	movgt	r5, #0
 8006834:	2501      	movle	r5, #1
 8006836:	2b03      	cmp	r3, #3
 8006838:	f200 8087 	bhi.w	800694a <_dtoa_r+0x30a>
 800683c:	e8df f003 	tbb	[pc, r3]
 8006840:	59383a2d 	.word	0x59383a2d
 8006844:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006848:	441d      	add	r5, r3
 800684a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800684e:	2b20      	cmp	r3, #32
 8006850:	bfc1      	itttt	gt
 8006852:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006856:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800685a:	fa0b f303 	lslgt.w	r3, fp, r3
 800685e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006862:	bfda      	itte	le
 8006864:	f1c3 0320 	rsble	r3, r3, #32
 8006868:	fa06 f003 	lslle.w	r0, r6, r3
 800686c:	4318      	orrgt	r0, r3
 800686e:	f7f9 fe49 	bl	8000504 <__aeabi_ui2d>
 8006872:	2301      	movs	r3, #1
 8006874:	4606      	mov	r6, r0
 8006876:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800687a:	3d01      	subs	r5, #1
 800687c:	930e      	str	r3, [sp, #56]	; 0x38
 800687e:	e76a      	b.n	8006756 <_dtoa_r+0x116>
 8006880:	2301      	movs	r3, #1
 8006882:	e7b2      	b.n	80067ea <_dtoa_r+0x1aa>
 8006884:	900b      	str	r0, [sp, #44]	; 0x2c
 8006886:	e7b1      	b.n	80067ec <_dtoa_r+0x1ac>
 8006888:	9b04      	ldr	r3, [sp, #16]
 800688a:	9a00      	ldr	r2, [sp, #0]
 800688c:	1a9b      	subs	r3, r3, r2
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	4253      	negs	r3, r2
 8006892:	9307      	str	r3, [sp, #28]
 8006894:	2300      	movs	r3, #0
 8006896:	930a      	str	r3, [sp, #40]	; 0x28
 8006898:	e7bf      	b.n	800681a <_dtoa_r+0x1da>
 800689a:	2300      	movs	r3, #0
 800689c:	9308      	str	r3, [sp, #32]
 800689e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	dc55      	bgt.n	8006950 <_dtoa_r+0x310>
 80068a4:	2301      	movs	r3, #1
 80068a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068aa:	461a      	mov	r2, r3
 80068ac:	9209      	str	r2, [sp, #36]	; 0x24
 80068ae:	e00c      	b.n	80068ca <_dtoa_r+0x28a>
 80068b0:	2301      	movs	r3, #1
 80068b2:	e7f3      	b.n	800689c <_dtoa_r+0x25c>
 80068b4:	2300      	movs	r3, #0
 80068b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068b8:	9308      	str	r3, [sp, #32]
 80068ba:	9b00      	ldr	r3, [sp, #0]
 80068bc:	4413      	add	r3, r2
 80068be:	9302      	str	r3, [sp, #8]
 80068c0:	3301      	adds	r3, #1
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	9303      	str	r3, [sp, #12]
 80068c6:	bfb8      	it	lt
 80068c8:	2301      	movlt	r3, #1
 80068ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80068cc:	2200      	movs	r2, #0
 80068ce:	6042      	str	r2, [r0, #4]
 80068d0:	2204      	movs	r2, #4
 80068d2:	f102 0614 	add.w	r6, r2, #20
 80068d6:	429e      	cmp	r6, r3
 80068d8:	6841      	ldr	r1, [r0, #4]
 80068da:	d93d      	bls.n	8006958 <_dtoa_r+0x318>
 80068dc:	4620      	mov	r0, r4
 80068de:	f000 fe01 	bl	80074e4 <_Balloc>
 80068e2:	9001      	str	r0, [sp, #4]
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d13b      	bne.n	8006960 <_dtoa_r+0x320>
 80068e8:	4b11      	ldr	r3, [pc, #68]	; (8006930 <_dtoa_r+0x2f0>)
 80068ea:	4602      	mov	r2, r0
 80068ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068f0:	e6c0      	b.n	8006674 <_dtoa_r+0x34>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e7df      	b.n	80068b6 <_dtoa_r+0x276>
 80068f6:	bf00      	nop
 80068f8:	636f4361 	.word	0x636f4361
 80068fc:	3fd287a7 	.word	0x3fd287a7
 8006900:	8b60c8b3 	.word	0x8b60c8b3
 8006904:	3fc68a28 	.word	0x3fc68a28
 8006908:	509f79fb 	.word	0x509f79fb
 800690c:	3fd34413 	.word	0x3fd34413
 8006910:	080096a5 	.word	0x080096a5
 8006914:	080096bc 	.word	0x080096bc
 8006918:	7ff00000 	.word	0x7ff00000
 800691c:	080096a1 	.word	0x080096a1
 8006920:	08009698 	.word	0x08009698
 8006924:	08009639 	.word	0x08009639
 8006928:	3ff80000 	.word	0x3ff80000
 800692c:	080097b0 	.word	0x080097b0
 8006930:	08009717 	.word	0x08009717
 8006934:	2501      	movs	r5, #1
 8006936:	2300      	movs	r3, #0
 8006938:	9306      	str	r3, [sp, #24]
 800693a:	9508      	str	r5, [sp, #32]
 800693c:	f04f 33ff 	mov.w	r3, #4294967295
 8006940:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006944:	2200      	movs	r2, #0
 8006946:	2312      	movs	r3, #18
 8006948:	e7b0      	b.n	80068ac <_dtoa_r+0x26c>
 800694a:	2301      	movs	r3, #1
 800694c:	9308      	str	r3, [sp, #32]
 800694e:	e7f5      	b.n	800693c <_dtoa_r+0x2fc>
 8006950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006952:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006956:	e7b8      	b.n	80068ca <_dtoa_r+0x28a>
 8006958:	3101      	adds	r1, #1
 800695a:	6041      	str	r1, [r0, #4]
 800695c:	0052      	lsls	r2, r2, #1
 800695e:	e7b8      	b.n	80068d2 <_dtoa_r+0x292>
 8006960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006962:	9a01      	ldr	r2, [sp, #4]
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	2b0e      	cmp	r3, #14
 800696a:	f200 809d 	bhi.w	8006aa8 <_dtoa_r+0x468>
 800696e:	2d00      	cmp	r5, #0
 8006970:	f000 809a 	beq.w	8006aa8 <_dtoa_r+0x468>
 8006974:	9b00      	ldr	r3, [sp, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	dd32      	ble.n	80069e0 <_dtoa_r+0x3a0>
 800697a:	4ab7      	ldr	r2, [pc, #732]	; (8006c58 <_dtoa_r+0x618>)
 800697c:	f003 030f 	and.w	r3, r3, #15
 8006980:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006984:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006988:	9b00      	ldr	r3, [sp, #0]
 800698a:	05d8      	lsls	r0, r3, #23
 800698c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006990:	d516      	bpl.n	80069c0 <_dtoa_r+0x380>
 8006992:	4bb2      	ldr	r3, [pc, #712]	; (8006c5c <_dtoa_r+0x61c>)
 8006994:	ec51 0b19 	vmov	r0, r1, d9
 8006998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800699c:	f7f9 ff56 	bl	800084c <__aeabi_ddiv>
 80069a0:	f007 070f 	and.w	r7, r7, #15
 80069a4:	4682      	mov	sl, r0
 80069a6:	468b      	mov	fp, r1
 80069a8:	2503      	movs	r5, #3
 80069aa:	4eac      	ldr	r6, [pc, #688]	; (8006c5c <_dtoa_r+0x61c>)
 80069ac:	b957      	cbnz	r7, 80069c4 <_dtoa_r+0x384>
 80069ae:	4642      	mov	r2, r8
 80069b0:	464b      	mov	r3, r9
 80069b2:	4650      	mov	r0, sl
 80069b4:	4659      	mov	r1, fp
 80069b6:	f7f9 ff49 	bl	800084c <__aeabi_ddiv>
 80069ba:	4682      	mov	sl, r0
 80069bc:	468b      	mov	fp, r1
 80069be:	e028      	b.n	8006a12 <_dtoa_r+0x3d2>
 80069c0:	2502      	movs	r5, #2
 80069c2:	e7f2      	b.n	80069aa <_dtoa_r+0x36a>
 80069c4:	07f9      	lsls	r1, r7, #31
 80069c6:	d508      	bpl.n	80069da <_dtoa_r+0x39a>
 80069c8:	4640      	mov	r0, r8
 80069ca:	4649      	mov	r1, r9
 80069cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069d0:	f7f9 fe12 	bl	80005f8 <__aeabi_dmul>
 80069d4:	3501      	adds	r5, #1
 80069d6:	4680      	mov	r8, r0
 80069d8:	4689      	mov	r9, r1
 80069da:	107f      	asrs	r7, r7, #1
 80069dc:	3608      	adds	r6, #8
 80069de:	e7e5      	b.n	80069ac <_dtoa_r+0x36c>
 80069e0:	f000 809b 	beq.w	8006b1a <_dtoa_r+0x4da>
 80069e4:	9b00      	ldr	r3, [sp, #0]
 80069e6:	4f9d      	ldr	r7, [pc, #628]	; (8006c5c <_dtoa_r+0x61c>)
 80069e8:	425e      	negs	r6, r3
 80069ea:	4b9b      	ldr	r3, [pc, #620]	; (8006c58 <_dtoa_r+0x618>)
 80069ec:	f006 020f 	and.w	r2, r6, #15
 80069f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	ec51 0b19 	vmov	r0, r1, d9
 80069fc:	f7f9 fdfc 	bl	80005f8 <__aeabi_dmul>
 8006a00:	1136      	asrs	r6, r6, #4
 8006a02:	4682      	mov	sl, r0
 8006a04:	468b      	mov	fp, r1
 8006a06:	2300      	movs	r3, #0
 8006a08:	2502      	movs	r5, #2
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	d17a      	bne.n	8006b04 <_dtoa_r+0x4c4>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1d3      	bne.n	80069ba <_dtoa_r+0x37a>
 8006a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8082 	beq.w	8006b1e <_dtoa_r+0x4de>
 8006a1a:	4b91      	ldr	r3, [pc, #580]	; (8006c60 <_dtoa_r+0x620>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4650      	mov	r0, sl
 8006a20:	4659      	mov	r1, fp
 8006a22:	f7fa f85b 	bl	8000adc <__aeabi_dcmplt>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d079      	beq.n	8006b1e <_dtoa_r+0x4de>
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d076      	beq.n	8006b1e <_dtoa_r+0x4de>
 8006a30:	9b02      	ldr	r3, [sp, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	dd36      	ble.n	8006aa4 <_dtoa_r+0x464>
 8006a36:	9b00      	ldr	r3, [sp, #0]
 8006a38:	4650      	mov	r0, sl
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	1e5f      	subs	r7, r3, #1
 8006a3e:	2200      	movs	r2, #0
 8006a40:	4b88      	ldr	r3, [pc, #544]	; (8006c64 <_dtoa_r+0x624>)
 8006a42:	f7f9 fdd9 	bl	80005f8 <__aeabi_dmul>
 8006a46:	9e02      	ldr	r6, [sp, #8]
 8006a48:	4682      	mov	sl, r0
 8006a4a:	468b      	mov	fp, r1
 8006a4c:	3501      	adds	r5, #1
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f7f9 fd68 	bl	8000524 <__aeabi_i2d>
 8006a54:	4652      	mov	r2, sl
 8006a56:	465b      	mov	r3, fp
 8006a58:	f7f9 fdce 	bl	80005f8 <__aeabi_dmul>
 8006a5c:	4b82      	ldr	r3, [pc, #520]	; (8006c68 <_dtoa_r+0x628>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f7f9 fc14 	bl	800028c <__adddf3>
 8006a64:	46d0      	mov	r8, sl
 8006a66:	46d9      	mov	r9, fp
 8006a68:	4682      	mov	sl, r0
 8006a6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006a6e:	2e00      	cmp	r6, #0
 8006a70:	d158      	bne.n	8006b24 <_dtoa_r+0x4e4>
 8006a72:	4b7e      	ldr	r3, [pc, #504]	; (8006c6c <_dtoa_r+0x62c>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	4640      	mov	r0, r8
 8006a78:	4649      	mov	r1, r9
 8006a7a:	f7f9 fc05 	bl	8000288 <__aeabi_dsub>
 8006a7e:	4652      	mov	r2, sl
 8006a80:	465b      	mov	r3, fp
 8006a82:	4680      	mov	r8, r0
 8006a84:	4689      	mov	r9, r1
 8006a86:	f7fa f847 	bl	8000b18 <__aeabi_dcmpgt>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	f040 8295 	bne.w	8006fba <_dtoa_r+0x97a>
 8006a90:	4652      	mov	r2, sl
 8006a92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a96:	4640      	mov	r0, r8
 8006a98:	4649      	mov	r1, r9
 8006a9a:	f7fa f81f 	bl	8000adc <__aeabi_dcmplt>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	f040 8289 	bne.w	8006fb6 <_dtoa_r+0x976>
 8006aa4:	ec5b ab19 	vmov	sl, fp, d9
 8006aa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f2c0 8148 	blt.w	8006d40 <_dtoa_r+0x700>
 8006ab0:	9a00      	ldr	r2, [sp, #0]
 8006ab2:	2a0e      	cmp	r2, #14
 8006ab4:	f300 8144 	bgt.w	8006d40 <_dtoa_r+0x700>
 8006ab8:	4b67      	ldr	r3, [pc, #412]	; (8006c58 <_dtoa_r+0x618>)
 8006aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006abe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f280 80d5 	bge.w	8006c74 <_dtoa_r+0x634>
 8006aca:	9b03      	ldr	r3, [sp, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f300 80d1 	bgt.w	8006c74 <_dtoa_r+0x634>
 8006ad2:	f040 826f 	bne.w	8006fb4 <_dtoa_r+0x974>
 8006ad6:	4b65      	ldr	r3, [pc, #404]	; (8006c6c <_dtoa_r+0x62c>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4640      	mov	r0, r8
 8006adc:	4649      	mov	r1, r9
 8006ade:	f7f9 fd8b 	bl	80005f8 <__aeabi_dmul>
 8006ae2:	4652      	mov	r2, sl
 8006ae4:	465b      	mov	r3, fp
 8006ae6:	f7fa f80d 	bl	8000b04 <__aeabi_dcmpge>
 8006aea:	9e03      	ldr	r6, [sp, #12]
 8006aec:	4637      	mov	r7, r6
 8006aee:	2800      	cmp	r0, #0
 8006af0:	f040 8245 	bne.w	8006f7e <_dtoa_r+0x93e>
 8006af4:	9d01      	ldr	r5, [sp, #4]
 8006af6:	2331      	movs	r3, #49	; 0x31
 8006af8:	f805 3b01 	strb.w	r3, [r5], #1
 8006afc:	9b00      	ldr	r3, [sp, #0]
 8006afe:	3301      	adds	r3, #1
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	e240      	b.n	8006f86 <_dtoa_r+0x946>
 8006b04:	07f2      	lsls	r2, r6, #31
 8006b06:	d505      	bpl.n	8006b14 <_dtoa_r+0x4d4>
 8006b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0c:	f7f9 fd74 	bl	80005f8 <__aeabi_dmul>
 8006b10:	3501      	adds	r5, #1
 8006b12:	2301      	movs	r3, #1
 8006b14:	1076      	asrs	r6, r6, #1
 8006b16:	3708      	adds	r7, #8
 8006b18:	e777      	b.n	8006a0a <_dtoa_r+0x3ca>
 8006b1a:	2502      	movs	r5, #2
 8006b1c:	e779      	b.n	8006a12 <_dtoa_r+0x3d2>
 8006b1e:	9f00      	ldr	r7, [sp, #0]
 8006b20:	9e03      	ldr	r6, [sp, #12]
 8006b22:	e794      	b.n	8006a4e <_dtoa_r+0x40e>
 8006b24:	9901      	ldr	r1, [sp, #4]
 8006b26:	4b4c      	ldr	r3, [pc, #304]	; (8006c58 <_dtoa_r+0x618>)
 8006b28:	4431      	add	r1, r6
 8006b2a:	910d      	str	r1, [sp, #52]	; 0x34
 8006b2c:	9908      	ldr	r1, [sp, #32]
 8006b2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b36:	2900      	cmp	r1, #0
 8006b38:	d043      	beq.n	8006bc2 <_dtoa_r+0x582>
 8006b3a:	494d      	ldr	r1, [pc, #308]	; (8006c70 <_dtoa_r+0x630>)
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	f7f9 fe85 	bl	800084c <__aeabi_ddiv>
 8006b42:	4652      	mov	r2, sl
 8006b44:	465b      	mov	r3, fp
 8006b46:	f7f9 fb9f 	bl	8000288 <__aeabi_dsub>
 8006b4a:	9d01      	ldr	r5, [sp, #4]
 8006b4c:	4682      	mov	sl, r0
 8006b4e:	468b      	mov	fp, r1
 8006b50:	4649      	mov	r1, r9
 8006b52:	4640      	mov	r0, r8
 8006b54:	f7fa f800 	bl	8000b58 <__aeabi_d2iz>
 8006b58:	4606      	mov	r6, r0
 8006b5a:	f7f9 fce3 	bl	8000524 <__aeabi_i2d>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4640      	mov	r0, r8
 8006b64:	4649      	mov	r1, r9
 8006b66:	f7f9 fb8f 	bl	8000288 <__aeabi_dsub>
 8006b6a:	3630      	adds	r6, #48	; 0x30
 8006b6c:	f805 6b01 	strb.w	r6, [r5], #1
 8006b70:	4652      	mov	r2, sl
 8006b72:	465b      	mov	r3, fp
 8006b74:	4680      	mov	r8, r0
 8006b76:	4689      	mov	r9, r1
 8006b78:	f7f9 ffb0 	bl	8000adc <__aeabi_dcmplt>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d163      	bne.n	8006c48 <_dtoa_r+0x608>
 8006b80:	4642      	mov	r2, r8
 8006b82:	464b      	mov	r3, r9
 8006b84:	4936      	ldr	r1, [pc, #216]	; (8006c60 <_dtoa_r+0x620>)
 8006b86:	2000      	movs	r0, #0
 8006b88:	f7f9 fb7e 	bl	8000288 <__aeabi_dsub>
 8006b8c:	4652      	mov	r2, sl
 8006b8e:	465b      	mov	r3, fp
 8006b90:	f7f9 ffa4 	bl	8000adc <__aeabi_dcmplt>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	f040 80b5 	bne.w	8006d04 <_dtoa_r+0x6c4>
 8006b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b9c:	429d      	cmp	r5, r3
 8006b9e:	d081      	beq.n	8006aa4 <_dtoa_r+0x464>
 8006ba0:	4b30      	ldr	r3, [pc, #192]	; (8006c64 <_dtoa_r+0x624>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	4650      	mov	r0, sl
 8006ba6:	4659      	mov	r1, fp
 8006ba8:	f7f9 fd26 	bl	80005f8 <__aeabi_dmul>
 8006bac:	4b2d      	ldr	r3, [pc, #180]	; (8006c64 <_dtoa_r+0x624>)
 8006bae:	4682      	mov	sl, r0
 8006bb0:	468b      	mov	fp, r1
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	4649      	mov	r1, r9
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f7f9 fd1e 	bl	80005f8 <__aeabi_dmul>
 8006bbc:	4680      	mov	r8, r0
 8006bbe:	4689      	mov	r9, r1
 8006bc0:	e7c6      	b.n	8006b50 <_dtoa_r+0x510>
 8006bc2:	4650      	mov	r0, sl
 8006bc4:	4659      	mov	r1, fp
 8006bc6:	f7f9 fd17 	bl	80005f8 <__aeabi_dmul>
 8006bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bcc:	9d01      	ldr	r5, [sp, #4]
 8006bce:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bd0:	4682      	mov	sl, r0
 8006bd2:	468b      	mov	fp, r1
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	f7f9 ffbe 	bl	8000b58 <__aeabi_d2iz>
 8006bdc:	4606      	mov	r6, r0
 8006bde:	f7f9 fca1 	bl	8000524 <__aeabi_i2d>
 8006be2:	3630      	adds	r6, #48	; 0x30
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4640      	mov	r0, r8
 8006bea:	4649      	mov	r1, r9
 8006bec:	f7f9 fb4c 	bl	8000288 <__aeabi_dsub>
 8006bf0:	f805 6b01 	strb.w	r6, [r5], #1
 8006bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bf6:	429d      	cmp	r5, r3
 8006bf8:	4680      	mov	r8, r0
 8006bfa:	4689      	mov	r9, r1
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	d124      	bne.n	8006c4c <_dtoa_r+0x60c>
 8006c02:	4b1b      	ldr	r3, [pc, #108]	; (8006c70 <_dtoa_r+0x630>)
 8006c04:	4650      	mov	r0, sl
 8006c06:	4659      	mov	r1, fp
 8006c08:	f7f9 fb40 	bl	800028c <__adddf3>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4640      	mov	r0, r8
 8006c12:	4649      	mov	r1, r9
 8006c14:	f7f9 ff80 	bl	8000b18 <__aeabi_dcmpgt>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d173      	bne.n	8006d04 <_dtoa_r+0x6c4>
 8006c1c:	4652      	mov	r2, sl
 8006c1e:	465b      	mov	r3, fp
 8006c20:	4913      	ldr	r1, [pc, #76]	; (8006c70 <_dtoa_r+0x630>)
 8006c22:	2000      	movs	r0, #0
 8006c24:	f7f9 fb30 	bl	8000288 <__aeabi_dsub>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4640      	mov	r0, r8
 8006c2e:	4649      	mov	r1, r9
 8006c30:	f7f9 ff54 	bl	8000adc <__aeabi_dcmplt>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	f43f af35 	beq.w	8006aa4 <_dtoa_r+0x464>
 8006c3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c3c:	1e6b      	subs	r3, r5, #1
 8006c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c44:	2b30      	cmp	r3, #48	; 0x30
 8006c46:	d0f8      	beq.n	8006c3a <_dtoa_r+0x5fa>
 8006c48:	9700      	str	r7, [sp, #0]
 8006c4a:	e049      	b.n	8006ce0 <_dtoa_r+0x6a0>
 8006c4c:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <_dtoa_r+0x624>)
 8006c4e:	f7f9 fcd3 	bl	80005f8 <__aeabi_dmul>
 8006c52:	4680      	mov	r8, r0
 8006c54:	4689      	mov	r9, r1
 8006c56:	e7bd      	b.n	8006bd4 <_dtoa_r+0x594>
 8006c58:	080097b0 	.word	0x080097b0
 8006c5c:	08009788 	.word	0x08009788
 8006c60:	3ff00000 	.word	0x3ff00000
 8006c64:	40240000 	.word	0x40240000
 8006c68:	401c0000 	.word	0x401c0000
 8006c6c:	40140000 	.word	0x40140000
 8006c70:	3fe00000 	.word	0x3fe00000
 8006c74:	9d01      	ldr	r5, [sp, #4]
 8006c76:	4656      	mov	r6, sl
 8006c78:	465f      	mov	r7, fp
 8006c7a:	4642      	mov	r2, r8
 8006c7c:	464b      	mov	r3, r9
 8006c7e:	4630      	mov	r0, r6
 8006c80:	4639      	mov	r1, r7
 8006c82:	f7f9 fde3 	bl	800084c <__aeabi_ddiv>
 8006c86:	f7f9 ff67 	bl	8000b58 <__aeabi_d2iz>
 8006c8a:	4682      	mov	sl, r0
 8006c8c:	f7f9 fc4a 	bl	8000524 <__aeabi_i2d>
 8006c90:	4642      	mov	r2, r8
 8006c92:	464b      	mov	r3, r9
 8006c94:	f7f9 fcb0 	bl	80005f8 <__aeabi_dmul>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006ca4:	f7f9 faf0 	bl	8000288 <__aeabi_dsub>
 8006ca8:	f805 6b01 	strb.w	r6, [r5], #1
 8006cac:	9e01      	ldr	r6, [sp, #4]
 8006cae:	9f03      	ldr	r7, [sp, #12]
 8006cb0:	1bae      	subs	r6, r5, r6
 8006cb2:	42b7      	cmp	r7, r6
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	d135      	bne.n	8006d26 <_dtoa_r+0x6e6>
 8006cba:	f7f9 fae7 	bl	800028c <__adddf3>
 8006cbe:	4642      	mov	r2, r8
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	460f      	mov	r7, r1
 8006cc6:	f7f9 ff27 	bl	8000b18 <__aeabi_dcmpgt>
 8006cca:	b9d0      	cbnz	r0, 8006d02 <_dtoa_r+0x6c2>
 8006ccc:	4642      	mov	r2, r8
 8006cce:	464b      	mov	r3, r9
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	4639      	mov	r1, r7
 8006cd4:	f7f9 fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cd8:	b110      	cbz	r0, 8006ce0 <_dtoa_r+0x6a0>
 8006cda:	f01a 0f01 	tst.w	sl, #1
 8006cde:	d110      	bne.n	8006d02 <_dtoa_r+0x6c2>
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	ee18 1a10 	vmov	r1, s16
 8006ce6:	f000 fc3d 	bl	8007564 <_Bfree>
 8006cea:	2300      	movs	r3, #0
 8006cec:	9800      	ldr	r0, [sp, #0]
 8006cee:	702b      	strb	r3, [r5, #0]
 8006cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	6018      	str	r0, [r3, #0]
 8006cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f43f acf1 	beq.w	80066e0 <_dtoa_r+0xa0>
 8006cfe:	601d      	str	r5, [r3, #0]
 8006d00:	e4ee      	b.n	80066e0 <_dtoa_r+0xa0>
 8006d02:	9f00      	ldr	r7, [sp, #0]
 8006d04:	462b      	mov	r3, r5
 8006d06:	461d      	mov	r5, r3
 8006d08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d0c:	2a39      	cmp	r2, #57	; 0x39
 8006d0e:	d106      	bne.n	8006d1e <_dtoa_r+0x6de>
 8006d10:	9a01      	ldr	r2, [sp, #4]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d1f7      	bne.n	8006d06 <_dtoa_r+0x6c6>
 8006d16:	9901      	ldr	r1, [sp, #4]
 8006d18:	2230      	movs	r2, #48	; 0x30
 8006d1a:	3701      	adds	r7, #1
 8006d1c:	700a      	strb	r2, [r1, #0]
 8006d1e:	781a      	ldrb	r2, [r3, #0]
 8006d20:	3201      	adds	r2, #1
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	e790      	b.n	8006c48 <_dtoa_r+0x608>
 8006d26:	4ba6      	ldr	r3, [pc, #664]	; (8006fc0 <_dtoa_r+0x980>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f7f9 fc65 	bl	80005f8 <__aeabi_dmul>
 8006d2e:	2200      	movs	r2, #0
 8006d30:	2300      	movs	r3, #0
 8006d32:	4606      	mov	r6, r0
 8006d34:	460f      	mov	r7, r1
 8006d36:	f7f9 fec7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d09d      	beq.n	8006c7a <_dtoa_r+0x63a>
 8006d3e:	e7cf      	b.n	8006ce0 <_dtoa_r+0x6a0>
 8006d40:	9a08      	ldr	r2, [sp, #32]
 8006d42:	2a00      	cmp	r2, #0
 8006d44:	f000 80d7 	beq.w	8006ef6 <_dtoa_r+0x8b6>
 8006d48:	9a06      	ldr	r2, [sp, #24]
 8006d4a:	2a01      	cmp	r2, #1
 8006d4c:	f300 80ba 	bgt.w	8006ec4 <_dtoa_r+0x884>
 8006d50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	f000 80b2 	beq.w	8006ebc <_dtoa_r+0x87c>
 8006d58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d5c:	9e07      	ldr	r6, [sp, #28]
 8006d5e:	9d04      	ldr	r5, [sp, #16]
 8006d60:	9a04      	ldr	r2, [sp, #16]
 8006d62:	441a      	add	r2, r3
 8006d64:	9204      	str	r2, [sp, #16]
 8006d66:	9a05      	ldr	r2, [sp, #20]
 8006d68:	2101      	movs	r1, #1
 8006d6a:	441a      	add	r2, r3
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	9205      	str	r2, [sp, #20]
 8006d70:	f000 fcb0 	bl	80076d4 <__i2b>
 8006d74:	4607      	mov	r7, r0
 8006d76:	2d00      	cmp	r5, #0
 8006d78:	dd0c      	ble.n	8006d94 <_dtoa_r+0x754>
 8006d7a:	9b05      	ldr	r3, [sp, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	dd09      	ble.n	8006d94 <_dtoa_r+0x754>
 8006d80:	42ab      	cmp	r3, r5
 8006d82:	9a04      	ldr	r2, [sp, #16]
 8006d84:	bfa8      	it	ge
 8006d86:	462b      	movge	r3, r5
 8006d88:	1ad2      	subs	r2, r2, r3
 8006d8a:	9204      	str	r2, [sp, #16]
 8006d8c:	9a05      	ldr	r2, [sp, #20]
 8006d8e:	1aed      	subs	r5, r5, r3
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	9305      	str	r3, [sp, #20]
 8006d94:	9b07      	ldr	r3, [sp, #28]
 8006d96:	b31b      	cbz	r3, 8006de0 <_dtoa_r+0x7a0>
 8006d98:	9b08      	ldr	r3, [sp, #32]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80af 	beq.w	8006efe <_dtoa_r+0x8be>
 8006da0:	2e00      	cmp	r6, #0
 8006da2:	dd13      	ble.n	8006dcc <_dtoa_r+0x78c>
 8006da4:	4639      	mov	r1, r7
 8006da6:	4632      	mov	r2, r6
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fd53 	bl	8007854 <__pow5mult>
 8006dae:	ee18 2a10 	vmov	r2, s16
 8006db2:	4601      	mov	r1, r0
 8006db4:	4607      	mov	r7, r0
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 fca2 	bl	8007700 <__multiply>
 8006dbc:	ee18 1a10 	vmov	r1, s16
 8006dc0:	4680      	mov	r8, r0
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 fbce 	bl	8007564 <_Bfree>
 8006dc8:	ee08 8a10 	vmov	s16, r8
 8006dcc:	9b07      	ldr	r3, [sp, #28]
 8006dce:	1b9a      	subs	r2, r3, r6
 8006dd0:	d006      	beq.n	8006de0 <_dtoa_r+0x7a0>
 8006dd2:	ee18 1a10 	vmov	r1, s16
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 fd3c 	bl	8007854 <__pow5mult>
 8006ddc:	ee08 0a10 	vmov	s16, r0
 8006de0:	2101      	movs	r1, #1
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 fc76 	bl	80076d4 <__i2b>
 8006de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	4606      	mov	r6, r0
 8006dee:	f340 8088 	ble.w	8006f02 <_dtoa_r+0x8c2>
 8006df2:	461a      	mov	r2, r3
 8006df4:	4601      	mov	r1, r0
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 fd2c 	bl	8007854 <__pow5mult>
 8006dfc:	9b06      	ldr	r3, [sp, #24]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	4606      	mov	r6, r0
 8006e02:	f340 8081 	ble.w	8006f08 <_dtoa_r+0x8c8>
 8006e06:	f04f 0800 	mov.w	r8, #0
 8006e0a:	6933      	ldr	r3, [r6, #16]
 8006e0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e10:	6918      	ldr	r0, [r3, #16]
 8006e12:	f000 fc0f 	bl	8007634 <__hi0bits>
 8006e16:	f1c0 0020 	rsb	r0, r0, #32
 8006e1a:	9b05      	ldr	r3, [sp, #20]
 8006e1c:	4418      	add	r0, r3
 8006e1e:	f010 001f 	ands.w	r0, r0, #31
 8006e22:	f000 8092 	beq.w	8006f4a <_dtoa_r+0x90a>
 8006e26:	f1c0 0320 	rsb	r3, r0, #32
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	f340 808a 	ble.w	8006f44 <_dtoa_r+0x904>
 8006e30:	f1c0 001c 	rsb	r0, r0, #28
 8006e34:	9b04      	ldr	r3, [sp, #16]
 8006e36:	4403      	add	r3, r0
 8006e38:	9304      	str	r3, [sp, #16]
 8006e3a:	9b05      	ldr	r3, [sp, #20]
 8006e3c:	4403      	add	r3, r0
 8006e3e:	4405      	add	r5, r0
 8006e40:	9305      	str	r3, [sp, #20]
 8006e42:	9b04      	ldr	r3, [sp, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dd07      	ble.n	8006e58 <_dtoa_r+0x818>
 8006e48:	ee18 1a10 	vmov	r1, s16
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f000 fd5a 	bl	8007908 <__lshift>
 8006e54:	ee08 0a10 	vmov	s16, r0
 8006e58:	9b05      	ldr	r3, [sp, #20]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dd05      	ble.n	8006e6a <_dtoa_r+0x82a>
 8006e5e:	4631      	mov	r1, r6
 8006e60:	461a      	mov	r2, r3
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 fd50 	bl	8007908 <__lshift>
 8006e68:	4606      	mov	r6, r0
 8006e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d06e      	beq.n	8006f4e <_dtoa_r+0x90e>
 8006e70:	ee18 0a10 	vmov	r0, s16
 8006e74:	4631      	mov	r1, r6
 8006e76:	f000 fdb7 	bl	80079e8 <__mcmp>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	da67      	bge.n	8006f4e <_dtoa_r+0x90e>
 8006e7e:	9b00      	ldr	r3, [sp, #0]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	ee18 1a10 	vmov	r1, s16
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	220a      	movs	r2, #10
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f000 fb8b 	bl	80075a8 <__multadd>
 8006e92:	9b08      	ldr	r3, [sp, #32]
 8006e94:	ee08 0a10 	vmov	s16, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 81b1 	beq.w	8007200 <_dtoa_r+0xbc0>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	220a      	movs	r2, #10
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f000 fb7f 	bl	80075a8 <__multadd>
 8006eaa:	9b02      	ldr	r3, [sp, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	4607      	mov	r7, r0
 8006eb0:	f300 808e 	bgt.w	8006fd0 <_dtoa_r+0x990>
 8006eb4:	9b06      	ldr	r3, [sp, #24]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	dc51      	bgt.n	8006f5e <_dtoa_r+0x91e>
 8006eba:	e089      	b.n	8006fd0 <_dtoa_r+0x990>
 8006ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ebe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ec2:	e74b      	b.n	8006d5c <_dtoa_r+0x71c>
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	1e5e      	subs	r6, r3, #1
 8006ec8:	9b07      	ldr	r3, [sp, #28]
 8006eca:	42b3      	cmp	r3, r6
 8006ecc:	bfbf      	itttt	lt
 8006ece:	9b07      	ldrlt	r3, [sp, #28]
 8006ed0:	9607      	strlt	r6, [sp, #28]
 8006ed2:	1af2      	sublt	r2, r6, r3
 8006ed4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ed6:	bfb6      	itet	lt
 8006ed8:	189b      	addlt	r3, r3, r2
 8006eda:	1b9e      	subge	r6, r3, r6
 8006edc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006ede:	9b03      	ldr	r3, [sp, #12]
 8006ee0:	bfb8      	it	lt
 8006ee2:	2600      	movlt	r6, #0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bfb7      	itett	lt
 8006ee8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006eec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006ef0:	1a9d      	sublt	r5, r3, r2
 8006ef2:	2300      	movlt	r3, #0
 8006ef4:	e734      	b.n	8006d60 <_dtoa_r+0x720>
 8006ef6:	9e07      	ldr	r6, [sp, #28]
 8006ef8:	9d04      	ldr	r5, [sp, #16]
 8006efa:	9f08      	ldr	r7, [sp, #32]
 8006efc:	e73b      	b.n	8006d76 <_dtoa_r+0x736>
 8006efe:	9a07      	ldr	r2, [sp, #28]
 8006f00:	e767      	b.n	8006dd2 <_dtoa_r+0x792>
 8006f02:	9b06      	ldr	r3, [sp, #24]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	dc18      	bgt.n	8006f3a <_dtoa_r+0x8fa>
 8006f08:	f1ba 0f00 	cmp.w	sl, #0
 8006f0c:	d115      	bne.n	8006f3a <_dtoa_r+0x8fa>
 8006f0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f12:	b993      	cbnz	r3, 8006f3a <_dtoa_r+0x8fa>
 8006f14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f18:	0d1b      	lsrs	r3, r3, #20
 8006f1a:	051b      	lsls	r3, r3, #20
 8006f1c:	b183      	cbz	r3, 8006f40 <_dtoa_r+0x900>
 8006f1e:	9b04      	ldr	r3, [sp, #16]
 8006f20:	3301      	adds	r3, #1
 8006f22:	9304      	str	r3, [sp, #16]
 8006f24:	9b05      	ldr	r3, [sp, #20]
 8006f26:	3301      	adds	r3, #1
 8006f28:	9305      	str	r3, [sp, #20]
 8006f2a:	f04f 0801 	mov.w	r8, #1
 8006f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f47f af6a 	bne.w	8006e0a <_dtoa_r+0x7ca>
 8006f36:	2001      	movs	r0, #1
 8006f38:	e76f      	b.n	8006e1a <_dtoa_r+0x7da>
 8006f3a:	f04f 0800 	mov.w	r8, #0
 8006f3e:	e7f6      	b.n	8006f2e <_dtoa_r+0x8ee>
 8006f40:	4698      	mov	r8, r3
 8006f42:	e7f4      	b.n	8006f2e <_dtoa_r+0x8ee>
 8006f44:	f43f af7d 	beq.w	8006e42 <_dtoa_r+0x802>
 8006f48:	4618      	mov	r0, r3
 8006f4a:	301c      	adds	r0, #28
 8006f4c:	e772      	b.n	8006e34 <_dtoa_r+0x7f4>
 8006f4e:	9b03      	ldr	r3, [sp, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	dc37      	bgt.n	8006fc4 <_dtoa_r+0x984>
 8006f54:	9b06      	ldr	r3, [sp, #24]
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	dd34      	ble.n	8006fc4 <_dtoa_r+0x984>
 8006f5a:	9b03      	ldr	r3, [sp, #12]
 8006f5c:	9302      	str	r3, [sp, #8]
 8006f5e:	9b02      	ldr	r3, [sp, #8]
 8006f60:	b96b      	cbnz	r3, 8006f7e <_dtoa_r+0x93e>
 8006f62:	4631      	mov	r1, r6
 8006f64:	2205      	movs	r2, #5
 8006f66:	4620      	mov	r0, r4
 8006f68:	f000 fb1e 	bl	80075a8 <__multadd>
 8006f6c:	4601      	mov	r1, r0
 8006f6e:	4606      	mov	r6, r0
 8006f70:	ee18 0a10 	vmov	r0, s16
 8006f74:	f000 fd38 	bl	80079e8 <__mcmp>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	f73f adbb 	bgt.w	8006af4 <_dtoa_r+0x4b4>
 8006f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f80:	9d01      	ldr	r5, [sp, #4]
 8006f82:	43db      	mvns	r3, r3
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	f04f 0800 	mov.w	r8, #0
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f000 fae9 	bl	8007564 <_Bfree>
 8006f92:	2f00      	cmp	r7, #0
 8006f94:	f43f aea4 	beq.w	8006ce0 <_dtoa_r+0x6a0>
 8006f98:	f1b8 0f00 	cmp.w	r8, #0
 8006f9c:	d005      	beq.n	8006faa <_dtoa_r+0x96a>
 8006f9e:	45b8      	cmp	r8, r7
 8006fa0:	d003      	beq.n	8006faa <_dtoa_r+0x96a>
 8006fa2:	4641      	mov	r1, r8
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f000 fadd 	bl	8007564 <_Bfree>
 8006faa:	4639      	mov	r1, r7
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 fad9 	bl	8007564 <_Bfree>
 8006fb2:	e695      	b.n	8006ce0 <_dtoa_r+0x6a0>
 8006fb4:	2600      	movs	r6, #0
 8006fb6:	4637      	mov	r7, r6
 8006fb8:	e7e1      	b.n	8006f7e <_dtoa_r+0x93e>
 8006fba:	9700      	str	r7, [sp, #0]
 8006fbc:	4637      	mov	r7, r6
 8006fbe:	e599      	b.n	8006af4 <_dtoa_r+0x4b4>
 8006fc0:	40240000 	.word	0x40240000
 8006fc4:	9b08      	ldr	r3, [sp, #32]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 80ca 	beq.w	8007160 <_dtoa_r+0xb20>
 8006fcc:	9b03      	ldr	r3, [sp, #12]
 8006fce:	9302      	str	r3, [sp, #8]
 8006fd0:	2d00      	cmp	r5, #0
 8006fd2:	dd05      	ble.n	8006fe0 <_dtoa_r+0x9a0>
 8006fd4:	4639      	mov	r1, r7
 8006fd6:	462a      	mov	r2, r5
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 fc95 	bl	8007908 <__lshift>
 8006fde:	4607      	mov	r7, r0
 8006fe0:	f1b8 0f00 	cmp.w	r8, #0
 8006fe4:	d05b      	beq.n	800709e <_dtoa_r+0xa5e>
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f000 fa7b 	bl	80074e4 <_Balloc>
 8006fee:	4605      	mov	r5, r0
 8006ff0:	b928      	cbnz	r0, 8006ffe <_dtoa_r+0x9be>
 8006ff2:	4b87      	ldr	r3, [pc, #540]	; (8007210 <_dtoa_r+0xbd0>)
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ffa:	f7ff bb3b 	b.w	8006674 <_dtoa_r+0x34>
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	3202      	adds	r2, #2
 8007002:	0092      	lsls	r2, r2, #2
 8007004:	f107 010c 	add.w	r1, r7, #12
 8007008:	300c      	adds	r0, #12
 800700a:	f7fe fc04 	bl	8005816 <memcpy>
 800700e:	2201      	movs	r2, #1
 8007010:	4629      	mov	r1, r5
 8007012:	4620      	mov	r0, r4
 8007014:	f000 fc78 	bl	8007908 <__lshift>
 8007018:	9b01      	ldr	r3, [sp, #4]
 800701a:	f103 0901 	add.w	r9, r3, #1
 800701e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007022:	4413      	add	r3, r2
 8007024:	9305      	str	r3, [sp, #20]
 8007026:	f00a 0301 	and.w	r3, sl, #1
 800702a:	46b8      	mov	r8, r7
 800702c:	9304      	str	r3, [sp, #16]
 800702e:	4607      	mov	r7, r0
 8007030:	4631      	mov	r1, r6
 8007032:	ee18 0a10 	vmov	r0, s16
 8007036:	f7ff fa77 	bl	8006528 <quorem>
 800703a:	4641      	mov	r1, r8
 800703c:	9002      	str	r0, [sp, #8]
 800703e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007042:	ee18 0a10 	vmov	r0, s16
 8007046:	f000 fccf 	bl	80079e8 <__mcmp>
 800704a:	463a      	mov	r2, r7
 800704c:	9003      	str	r0, [sp, #12]
 800704e:	4631      	mov	r1, r6
 8007050:	4620      	mov	r0, r4
 8007052:	f000 fce5 	bl	8007a20 <__mdiff>
 8007056:	68c2      	ldr	r2, [r0, #12]
 8007058:	f109 3bff 	add.w	fp, r9, #4294967295
 800705c:	4605      	mov	r5, r0
 800705e:	bb02      	cbnz	r2, 80070a2 <_dtoa_r+0xa62>
 8007060:	4601      	mov	r1, r0
 8007062:	ee18 0a10 	vmov	r0, s16
 8007066:	f000 fcbf 	bl	80079e8 <__mcmp>
 800706a:	4602      	mov	r2, r0
 800706c:	4629      	mov	r1, r5
 800706e:	4620      	mov	r0, r4
 8007070:	9207      	str	r2, [sp, #28]
 8007072:	f000 fa77 	bl	8007564 <_Bfree>
 8007076:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800707a:	ea43 0102 	orr.w	r1, r3, r2
 800707e:	9b04      	ldr	r3, [sp, #16]
 8007080:	430b      	orrs	r3, r1
 8007082:	464d      	mov	r5, r9
 8007084:	d10f      	bne.n	80070a6 <_dtoa_r+0xa66>
 8007086:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800708a:	d02a      	beq.n	80070e2 <_dtoa_r+0xaa2>
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	dd02      	ble.n	8007098 <_dtoa_r+0xa58>
 8007092:	9b02      	ldr	r3, [sp, #8]
 8007094:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007098:	f88b a000 	strb.w	sl, [fp]
 800709c:	e775      	b.n	8006f8a <_dtoa_r+0x94a>
 800709e:	4638      	mov	r0, r7
 80070a0:	e7ba      	b.n	8007018 <_dtoa_r+0x9d8>
 80070a2:	2201      	movs	r2, #1
 80070a4:	e7e2      	b.n	800706c <_dtoa_r+0xa2c>
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	db04      	blt.n	80070b6 <_dtoa_r+0xa76>
 80070ac:	9906      	ldr	r1, [sp, #24]
 80070ae:	430b      	orrs	r3, r1
 80070b0:	9904      	ldr	r1, [sp, #16]
 80070b2:	430b      	orrs	r3, r1
 80070b4:	d122      	bne.n	80070fc <_dtoa_r+0xabc>
 80070b6:	2a00      	cmp	r2, #0
 80070b8:	ddee      	ble.n	8007098 <_dtoa_r+0xa58>
 80070ba:	ee18 1a10 	vmov	r1, s16
 80070be:	2201      	movs	r2, #1
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 fc21 	bl	8007908 <__lshift>
 80070c6:	4631      	mov	r1, r6
 80070c8:	ee08 0a10 	vmov	s16, r0
 80070cc:	f000 fc8c 	bl	80079e8 <__mcmp>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	dc03      	bgt.n	80070dc <_dtoa_r+0xa9c>
 80070d4:	d1e0      	bne.n	8007098 <_dtoa_r+0xa58>
 80070d6:	f01a 0f01 	tst.w	sl, #1
 80070da:	d0dd      	beq.n	8007098 <_dtoa_r+0xa58>
 80070dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070e0:	d1d7      	bne.n	8007092 <_dtoa_r+0xa52>
 80070e2:	2339      	movs	r3, #57	; 0x39
 80070e4:	f88b 3000 	strb.w	r3, [fp]
 80070e8:	462b      	mov	r3, r5
 80070ea:	461d      	mov	r5, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070f2:	2a39      	cmp	r2, #57	; 0x39
 80070f4:	d071      	beq.n	80071da <_dtoa_r+0xb9a>
 80070f6:	3201      	adds	r2, #1
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	e746      	b.n	8006f8a <_dtoa_r+0x94a>
 80070fc:	2a00      	cmp	r2, #0
 80070fe:	dd07      	ble.n	8007110 <_dtoa_r+0xad0>
 8007100:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007104:	d0ed      	beq.n	80070e2 <_dtoa_r+0xaa2>
 8007106:	f10a 0301 	add.w	r3, sl, #1
 800710a:	f88b 3000 	strb.w	r3, [fp]
 800710e:	e73c      	b.n	8006f8a <_dtoa_r+0x94a>
 8007110:	9b05      	ldr	r3, [sp, #20]
 8007112:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007116:	4599      	cmp	r9, r3
 8007118:	d047      	beq.n	80071aa <_dtoa_r+0xb6a>
 800711a:	ee18 1a10 	vmov	r1, s16
 800711e:	2300      	movs	r3, #0
 8007120:	220a      	movs	r2, #10
 8007122:	4620      	mov	r0, r4
 8007124:	f000 fa40 	bl	80075a8 <__multadd>
 8007128:	45b8      	cmp	r8, r7
 800712a:	ee08 0a10 	vmov	s16, r0
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	f04f 020a 	mov.w	r2, #10
 8007136:	4641      	mov	r1, r8
 8007138:	4620      	mov	r0, r4
 800713a:	d106      	bne.n	800714a <_dtoa_r+0xb0a>
 800713c:	f000 fa34 	bl	80075a8 <__multadd>
 8007140:	4680      	mov	r8, r0
 8007142:	4607      	mov	r7, r0
 8007144:	f109 0901 	add.w	r9, r9, #1
 8007148:	e772      	b.n	8007030 <_dtoa_r+0x9f0>
 800714a:	f000 fa2d 	bl	80075a8 <__multadd>
 800714e:	4639      	mov	r1, r7
 8007150:	4680      	mov	r8, r0
 8007152:	2300      	movs	r3, #0
 8007154:	220a      	movs	r2, #10
 8007156:	4620      	mov	r0, r4
 8007158:	f000 fa26 	bl	80075a8 <__multadd>
 800715c:	4607      	mov	r7, r0
 800715e:	e7f1      	b.n	8007144 <_dtoa_r+0xb04>
 8007160:	9b03      	ldr	r3, [sp, #12]
 8007162:	9302      	str	r3, [sp, #8]
 8007164:	9d01      	ldr	r5, [sp, #4]
 8007166:	ee18 0a10 	vmov	r0, s16
 800716a:	4631      	mov	r1, r6
 800716c:	f7ff f9dc 	bl	8006528 <quorem>
 8007170:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007174:	9b01      	ldr	r3, [sp, #4]
 8007176:	f805 ab01 	strb.w	sl, [r5], #1
 800717a:	1aea      	subs	r2, r5, r3
 800717c:	9b02      	ldr	r3, [sp, #8]
 800717e:	4293      	cmp	r3, r2
 8007180:	dd09      	ble.n	8007196 <_dtoa_r+0xb56>
 8007182:	ee18 1a10 	vmov	r1, s16
 8007186:	2300      	movs	r3, #0
 8007188:	220a      	movs	r2, #10
 800718a:	4620      	mov	r0, r4
 800718c:	f000 fa0c 	bl	80075a8 <__multadd>
 8007190:	ee08 0a10 	vmov	s16, r0
 8007194:	e7e7      	b.n	8007166 <_dtoa_r+0xb26>
 8007196:	9b02      	ldr	r3, [sp, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	bfc8      	it	gt
 800719c:	461d      	movgt	r5, r3
 800719e:	9b01      	ldr	r3, [sp, #4]
 80071a0:	bfd8      	it	le
 80071a2:	2501      	movle	r5, #1
 80071a4:	441d      	add	r5, r3
 80071a6:	f04f 0800 	mov.w	r8, #0
 80071aa:	ee18 1a10 	vmov	r1, s16
 80071ae:	2201      	movs	r2, #1
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 fba9 	bl	8007908 <__lshift>
 80071b6:	4631      	mov	r1, r6
 80071b8:	ee08 0a10 	vmov	s16, r0
 80071bc:	f000 fc14 	bl	80079e8 <__mcmp>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	dc91      	bgt.n	80070e8 <_dtoa_r+0xaa8>
 80071c4:	d102      	bne.n	80071cc <_dtoa_r+0xb8c>
 80071c6:	f01a 0f01 	tst.w	sl, #1
 80071ca:	d18d      	bne.n	80070e8 <_dtoa_r+0xaa8>
 80071cc:	462b      	mov	r3, r5
 80071ce:	461d      	mov	r5, r3
 80071d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071d4:	2a30      	cmp	r2, #48	; 0x30
 80071d6:	d0fa      	beq.n	80071ce <_dtoa_r+0xb8e>
 80071d8:	e6d7      	b.n	8006f8a <_dtoa_r+0x94a>
 80071da:	9a01      	ldr	r2, [sp, #4]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d184      	bne.n	80070ea <_dtoa_r+0xaaa>
 80071e0:	9b00      	ldr	r3, [sp, #0]
 80071e2:	3301      	adds	r3, #1
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	2331      	movs	r3, #49	; 0x31
 80071e8:	7013      	strb	r3, [r2, #0]
 80071ea:	e6ce      	b.n	8006f8a <_dtoa_r+0x94a>
 80071ec:	4b09      	ldr	r3, [pc, #36]	; (8007214 <_dtoa_r+0xbd4>)
 80071ee:	f7ff ba95 	b.w	800671c <_dtoa_r+0xdc>
 80071f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f47f aa6e 	bne.w	80066d6 <_dtoa_r+0x96>
 80071fa:	4b07      	ldr	r3, [pc, #28]	; (8007218 <_dtoa_r+0xbd8>)
 80071fc:	f7ff ba8e 	b.w	800671c <_dtoa_r+0xdc>
 8007200:	9b02      	ldr	r3, [sp, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	dcae      	bgt.n	8007164 <_dtoa_r+0xb24>
 8007206:	9b06      	ldr	r3, [sp, #24]
 8007208:	2b02      	cmp	r3, #2
 800720a:	f73f aea8 	bgt.w	8006f5e <_dtoa_r+0x91e>
 800720e:	e7a9      	b.n	8007164 <_dtoa_r+0xb24>
 8007210:	08009717 	.word	0x08009717
 8007214:	08009638 	.word	0x08009638
 8007218:	08009698 	.word	0x08009698

0800721c <__sflush_r>:
 800721c:	898a      	ldrh	r2, [r1, #12]
 800721e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007222:	4605      	mov	r5, r0
 8007224:	0710      	lsls	r0, r2, #28
 8007226:	460c      	mov	r4, r1
 8007228:	d458      	bmi.n	80072dc <__sflush_r+0xc0>
 800722a:	684b      	ldr	r3, [r1, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	dc05      	bgt.n	800723c <__sflush_r+0x20>
 8007230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	dc02      	bgt.n	800723c <__sflush_r+0x20>
 8007236:	2000      	movs	r0, #0
 8007238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800723c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800723e:	2e00      	cmp	r6, #0
 8007240:	d0f9      	beq.n	8007236 <__sflush_r+0x1a>
 8007242:	2300      	movs	r3, #0
 8007244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007248:	682f      	ldr	r7, [r5, #0]
 800724a:	602b      	str	r3, [r5, #0]
 800724c:	d032      	beq.n	80072b4 <__sflush_r+0x98>
 800724e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	075a      	lsls	r2, r3, #29
 8007254:	d505      	bpl.n	8007262 <__sflush_r+0x46>
 8007256:	6863      	ldr	r3, [r4, #4]
 8007258:	1ac0      	subs	r0, r0, r3
 800725a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800725c:	b10b      	cbz	r3, 8007262 <__sflush_r+0x46>
 800725e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007260:	1ac0      	subs	r0, r0, r3
 8007262:	2300      	movs	r3, #0
 8007264:	4602      	mov	r2, r0
 8007266:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007268:	6a21      	ldr	r1, [r4, #32]
 800726a:	4628      	mov	r0, r5
 800726c:	47b0      	blx	r6
 800726e:	1c43      	adds	r3, r0, #1
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	d106      	bne.n	8007282 <__sflush_r+0x66>
 8007274:	6829      	ldr	r1, [r5, #0]
 8007276:	291d      	cmp	r1, #29
 8007278:	d82c      	bhi.n	80072d4 <__sflush_r+0xb8>
 800727a:	4a2a      	ldr	r2, [pc, #168]	; (8007324 <__sflush_r+0x108>)
 800727c:	40ca      	lsrs	r2, r1
 800727e:	07d6      	lsls	r6, r2, #31
 8007280:	d528      	bpl.n	80072d4 <__sflush_r+0xb8>
 8007282:	2200      	movs	r2, #0
 8007284:	6062      	str	r2, [r4, #4]
 8007286:	04d9      	lsls	r1, r3, #19
 8007288:	6922      	ldr	r2, [r4, #16]
 800728a:	6022      	str	r2, [r4, #0]
 800728c:	d504      	bpl.n	8007298 <__sflush_r+0x7c>
 800728e:	1c42      	adds	r2, r0, #1
 8007290:	d101      	bne.n	8007296 <__sflush_r+0x7a>
 8007292:	682b      	ldr	r3, [r5, #0]
 8007294:	b903      	cbnz	r3, 8007298 <__sflush_r+0x7c>
 8007296:	6560      	str	r0, [r4, #84]	; 0x54
 8007298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800729a:	602f      	str	r7, [r5, #0]
 800729c:	2900      	cmp	r1, #0
 800729e:	d0ca      	beq.n	8007236 <__sflush_r+0x1a>
 80072a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072a4:	4299      	cmp	r1, r3
 80072a6:	d002      	beq.n	80072ae <__sflush_r+0x92>
 80072a8:	4628      	mov	r0, r5
 80072aa:	f000 fcb5 	bl	8007c18 <_free_r>
 80072ae:	2000      	movs	r0, #0
 80072b0:	6360      	str	r0, [r4, #52]	; 0x34
 80072b2:	e7c1      	b.n	8007238 <__sflush_r+0x1c>
 80072b4:	6a21      	ldr	r1, [r4, #32]
 80072b6:	2301      	movs	r3, #1
 80072b8:	4628      	mov	r0, r5
 80072ba:	47b0      	blx	r6
 80072bc:	1c41      	adds	r1, r0, #1
 80072be:	d1c7      	bne.n	8007250 <__sflush_r+0x34>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0c4      	beq.n	8007250 <__sflush_r+0x34>
 80072c6:	2b1d      	cmp	r3, #29
 80072c8:	d001      	beq.n	80072ce <__sflush_r+0xb2>
 80072ca:	2b16      	cmp	r3, #22
 80072cc:	d101      	bne.n	80072d2 <__sflush_r+0xb6>
 80072ce:	602f      	str	r7, [r5, #0]
 80072d0:	e7b1      	b.n	8007236 <__sflush_r+0x1a>
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072d8:	81a3      	strh	r3, [r4, #12]
 80072da:	e7ad      	b.n	8007238 <__sflush_r+0x1c>
 80072dc:	690f      	ldr	r7, [r1, #16]
 80072de:	2f00      	cmp	r7, #0
 80072e0:	d0a9      	beq.n	8007236 <__sflush_r+0x1a>
 80072e2:	0793      	lsls	r3, r2, #30
 80072e4:	680e      	ldr	r6, [r1, #0]
 80072e6:	bf08      	it	eq
 80072e8:	694b      	ldreq	r3, [r1, #20]
 80072ea:	600f      	str	r7, [r1, #0]
 80072ec:	bf18      	it	ne
 80072ee:	2300      	movne	r3, #0
 80072f0:	eba6 0807 	sub.w	r8, r6, r7
 80072f4:	608b      	str	r3, [r1, #8]
 80072f6:	f1b8 0f00 	cmp.w	r8, #0
 80072fa:	dd9c      	ble.n	8007236 <__sflush_r+0x1a>
 80072fc:	6a21      	ldr	r1, [r4, #32]
 80072fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007300:	4643      	mov	r3, r8
 8007302:	463a      	mov	r2, r7
 8007304:	4628      	mov	r0, r5
 8007306:	47b0      	blx	r6
 8007308:	2800      	cmp	r0, #0
 800730a:	dc06      	bgt.n	800731a <__sflush_r+0xfe>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007312:	81a3      	strh	r3, [r4, #12]
 8007314:	f04f 30ff 	mov.w	r0, #4294967295
 8007318:	e78e      	b.n	8007238 <__sflush_r+0x1c>
 800731a:	4407      	add	r7, r0
 800731c:	eba8 0800 	sub.w	r8, r8, r0
 8007320:	e7e9      	b.n	80072f6 <__sflush_r+0xda>
 8007322:	bf00      	nop
 8007324:	20400001 	.word	0x20400001

08007328 <_fflush_r>:
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	690b      	ldr	r3, [r1, #16]
 800732c:	4605      	mov	r5, r0
 800732e:	460c      	mov	r4, r1
 8007330:	b913      	cbnz	r3, 8007338 <_fflush_r+0x10>
 8007332:	2500      	movs	r5, #0
 8007334:	4628      	mov	r0, r5
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	b118      	cbz	r0, 8007342 <_fflush_r+0x1a>
 800733a:	6983      	ldr	r3, [r0, #24]
 800733c:	b90b      	cbnz	r3, 8007342 <_fflush_r+0x1a>
 800733e:	f7fe f9a5 	bl	800568c <__sinit>
 8007342:	4b14      	ldr	r3, [pc, #80]	; (8007394 <_fflush_r+0x6c>)
 8007344:	429c      	cmp	r4, r3
 8007346:	d11b      	bne.n	8007380 <_fflush_r+0x58>
 8007348:	686c      	ldr	r4, [r5, #4]
 800734a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0ef      	beq.n	8007332 <_fflush_r+0xa>
 8007352:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007354:	07d0      	lsls	r0, r2, #31
 8007356:	d404      	bmi.n	8007362 <_fflush_r+0x3a>
 8007358:	0599      	lsls	r1, r3, #22
 800735a:	d402      	bmi.n	8007362 <_fflush_r+0x3a>
 800735c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800735e:	f7fe fa58 	bl	8005812 <__retarget_lock_acquire_recursive>
 8007362:	4628      	mov	r0, r5
 8007364:	4621      	mov	r1, r4
 8007366:	f7ff ff59 	bl	800721c <__sflush_r>
 800736a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800736c:	07da      	lsls	r2, r3, #31
 800736e:	4605      	mov	r5, r0
 8007370:	d4e0      	bmi.n	8007334 <_fflush_r+0xc>
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	059b      	lsls	r3, r3, #22
 8007376:	d4dd      	bmi.n	8007334 <_fflush_r+0xc>
 8007378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800737a:	f7fe fa4b 	bl	8005814 <__retarget_lock_release_recursive>
 800737e:	e7d9      	b.n	8007334 <_fflush_r+0xc>
 8007380:	4b05      	ldr	r3, [pc, #20]	; (8007398 <_fflush_r+0x70>)
 8007382:	429c      	cmp	r4, r3
 8007384:	d101      	bne.n	800738a <_fflush_r+0x62>
 8007386:	68ac      	ldr	r4, [r5, #8]
 8007388:	e7df      	b.n	800734a <_fflush_r+0x22>
 800738a:	4b04      	ldr	r3, [pc, #16]	; (800739c <_fflush_r+0x74>)
 800738c:	429c      	cmp	r4, r3
 800738e:	bf08      	it	eq
 8007390:	68ec      	ldreq	r4, [r5, #12]
 8007392:	e7da      	b.n	800734a <_fflush_r+0x22>
 8007394:	080095e4 	.word	0x080095e4
 8007398:	08009604 	.word	0x08009604
 800739c:	080095c4 	.word	0x080095c4

080073a0 <fiprintf>:
 80073a0:	b40e      	push	{r1, r2, r3}
 80073a2:	b503      	push	{r0, r1, lr}
 80073a4:	4601      	mov	r1, r0
 80073a6:	ab03      	add	r3, sp, #12
 80073a8:	4805      	ldr	r0, [pc, #20]	; (80073c0 <fiprintf+0x20>)
 80073aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ae:	6800      	ldr	r0, [r0, #0]
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	f000 fe03 	bl	8007fbc <_vfiprintf_r>
 80073b6:	b002      	add	sp, #8
 80073b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073bc:	b003      	add	sp, #12
 80073be:	4770      	bx	lr
 80073c0:	20000058 	.word	0x20000058

080073c4 <_localeconv_r>:
 80073c4:	4800      	ldr	r0, [pc, #0]	; (80073c8 <_localeconv_r+0x4>)
 80073c6:	4770      	bx	lr
 80073c8:	200001ac 	.word	0x200001ac

080073cc <_lseek_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4d07      	ldr	r5, [pc, #28]	; (80073ec <_lseek_r+0x20>)
 80073d0:	4604      	mov	r4, r0
 80073d2:	4608      	mov	r0, r1
 80073d4:	4611      	mov	r1, r2
 80073d6:	2200      	movs	r2, #0
 80073d8:	602a      	str	r2, [r5, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f7fe f841 	bl	8005462 <_lseek>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_lseek_r+0x1e>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_lseek_r+0x1e>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	200004a8 	.word	0x200004a8

080073f0 <__swhatbuf_r>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	460e      	mov	r6, r1
 80073f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f8:	2900      	cmp	r1, #0
 80073fa:	b096      	sub	sp, #88	; 0x58
 80073fc:	4614      	mov	r4, r2
 80073fe:	461d      	mov	r5, r3
 8007400:	da08      	bge.n	8007414 <__swhatbuf_r+0x24>
 8007402:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	602a      	str	r2, [r5, #0]
 800740a:	061a      	lsls	r2, r3, #24
 800740c:	d410      	bmi.n	8007430 <__swhatbuf_r+0x40>
 800740e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007412:	e00e      	b.n	8007432 <__swhatbuf_r+0x42>
 8007414:	466a      	mov	r2, sp
 8007416:	f000 ff1b 	bl	8008250 <_fstat_r>
 800741a:	2800      	cmp	r0, #0
 800741c:	dbf1      	blt.n	8007402 <__swhatbuf_r+0x12>
 800741e:	9a01      	ldr	r2, [sp, #4]
 8007420:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007424:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007428:	425a      	negs	r2, r3
 800742a:	415a      	adcs	r2, r3
 800742c:	602a      	str	r2, [r5, #0]
 800742e:	e7ee      	b.n	800740e <__swhatbuf_r+0x1e>
 8007430:	2340      	movs	r3, #64	; 0x40
 8007432:	2000      	movs	r0, #0
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	b016      	add	sp, #88	; 0x58
 8007438:	bd70      	pop	{r4, r5, r6, pc}
	...

0800743c <__smakebuf_r>:
 800743c:	898b      	ldrh	r3, [r1, #12]
 800743e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007440:	079d      	lsls	r5, r3, #30
 8007442:	4606      	mov	r6, r0
 8007444:	460c      	mov	r4, r1
 8007446:	d507      	bpl.n	8007458 <__smakebuf_r+0x1c>
 8007448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	6123      	str	r3, [r4, #16]
 8007450:	2301      	movs	r3, #1
 8007452:	6163      	str	r3, [r4, #20]
 8007454:	b002      	add	sp, #8
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	ab01      	add	r3, sp, #4
 800745a:	466a      	mov	r2, sp
 800745c:	f7ff ffc8 	bl	80073f0 <__swhatbuf_r>
 8007460:	9900      	ldr	r1, [sp, #0]
 8007462:	4605      	mov	r5, r0
 8007464:	4630      	mov	r0, r6
 8007466:	f7fe fa0d 	bl	8005884 <_malloc_r>
 800746a:	b948      	cbnz	r0, 8007480 <__smakebuf_r+0x44>
 800746c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007470:	059a      	lsls	r2, r3, #22
 8007472:	d4ef      	bmi.n	8007454 <__smakebuf_r+0x18>
 8007474:	f023 0303 	bic.w	r3, r3, #3
 8007478:	f043 0302 	orr.w	r3, r3, #2
 800747c:	81a3      	strh	r3, [r4, #12]
 800747e:	e7e3      	b.n	8007448 <__smakebuf_r+0xc>
 8007480:	4b0d      	ldr	r3, [pc, #52]	; (80074b8 <__smakebuf_r+0x7c>)
 8007482:	62b3      	str	r3, [r6, #40]	; 0x28
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	6020      	str	r0, [r4, #0]
 8007488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	9b00      	ldr	r3, [sp, #0]
 8007490:	6163      	str	r3, [r4, #20]
 8007492:	9b01      	ldr	r3, [sp, #4]
 8007494:	6120      	str	r0, [r4, #16]
 8007496:	b15b      	cbz	r3, 80074b0 <__smakebuf_r+0x74>
 8007498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800749c:	4630      	mov	r0, r6
 800749e:	f000 fee9 	bl	8008274 <_isatty_r>
 80074a2:	b128      	cbz	r0, 80074b0 <__smakebuf_r+0x74>
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	f023 0303 	bic.w	r3, r3, #3
 80074aa:	f043 0301 	orr.w	r3, r3, #1
 80074ae:	81a3      	strh	r3, [r4, #12]
 80074b0:	89a0      	ldrh	r0, [r4, #12]
 80074b2:	4305      	orrs	r5, r0
 80074b4:	81a5      	strh	r5, [r4, #12]
 80074b6:	e7cd      	b.n	8007454 <__smakebuf_r+0x18>
 80074b8:	08005625 	.word	0x08005625

080074bc <malloc>:
 80074bc:	4b02      	ldr	r3, [pc, #8]	; (80074c8 <malloc+0xc>)
 80074be:	4601      	mov	r1, r0
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	f7fe b9df 	b.w	8005884 <_malloc_r>
 80074c6:	bf00      	nop
 80074c8:	20000058 	.word	0x20000058

080074cc <__malloc_lock>:
 80074cc:	4801      	ldr	r0, [pc, #4]	; (80074d4 <__malloc_lock+0x8>)
 80074ce:	f7fe b9a0 	b.w	8005812 <__retarget_lock_acquire_recursive>
 80074d2:	bf00      	nop
 80074d4:	2000049c 	.word	0x2000049c

080074d8 <__malloc_unlock>:
 80074d8:	4801      	ldr	r0, [pc, #4]	; (80074e0 <__malloc_unlock+0x8>)
 80074da:	f7fe b99b 	b.w	8005814 <__retarget_lock_release_recursive>
 80074de:	bf00      	nop
 80074e0:	2000049c 	.word	0x2000049c

080074e4 <_Balloc>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074e8:	4604      	mov	r4, r0
 80074ea:	460d      	mov	r5, r1
 80074ec:	b976      	cbnz	r6, 800750c <_Balloc+0x28>
 80074ee:	2010      	movs	r0, #16
 80074f0:	f7ff ffe4 	bl	80074bc <malloc>
 80074f4:	4602      	mov	r2, r0
 80074f6:	6260      	str	r0, [r4, #36]	; 0x24
 80074f8:	b920      	cbnz	r0, 8007504 <_Balloc+0x20>
 80074fa:	4b18      	ldr	r3, [pc, #96]	; (800755c <_Balloc+0x78>)
 80074fc:	4818      	ldr	r0, [pc, #96]	; (8007560 <_Balloc+0x7c>)
 80074fe:	2166      	movs	r1, #102	; 0x66
 8007500:	f7fe ffe4 	bl	80064cc <__assert_func>
 8007504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007508:	6006      	str	r6, [r0, #0]
 800750a:	60c6      	str	r6, [r0, #12]
 800750c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800750e:	68f3      	ldr	r3, [r6, #12]
 8007510:	b183      	cbz	r3, 8007534 <_Balloc+0x50>
 8007512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800751a:	b9b8      	cbnz	r0, 800754c <_Balloc+0x68>
 800751c:	2101      	movs	r1, #1
 800751e:	fa01 f605 	lsl.w	r6, r1, r5
 8007522:	1d72      	adds	r2, r6, #5
 8007524:	0092      	lsls	r2, r2, #2
 8007526:	4620      	mov	r0, r4
 8007528:	f000 fb60 	bl	8007bec <_calloc_r>
 800752c:	b160      	cbz	r0, 8007548 <_Balloc+0x64>
 800752e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007532:	e00e      	b.n	8007552 <_Balloc+0x6e>
 8007534:	2221      	movs	r2, #33	; 0x21
 8007536:	2104      	movs	r1, #4
 8007538:	4620      	mov	r0, r4
 800753a:	f000 fb57 	bl	8007bec <_calloc_r>
 800753e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007540:	60f0      	str	r0, [r6, #12]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e4      	bne.n	8007512 <_Balloc+0x2e>
 8007548:	2000      	movs	r0, #0
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	6802      	ldr	r2, [r0, #0]
 800754e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007552:	2300      	movs	r3, #0
 8007554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007558:	e7f7      	b.n	800754a <_Balloc+0x66>
 800755a:	bf00      	nop
 800755c:	080096a5 	.word	0x080096a5
 8007560:	08009728 	.word	0x08009728

08007564 <_Bfree>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007568:	4605      	mov	r5, r0
 800756a:	460c      	mov	r4, r1
 800756c:	b976      	cbnz	r6, 800758c <_Bfree+0x28>
 800756e:	2010      	movs	r0, #16
 8007570:	f7ff ffa4 	bl	80074bc <malloc>
 8007574:	4602      	mov	r2, r0
 8007576:	6268      	str	r0, [r5, #36]	; 0x24
 8007578:	b920      	cbnz	r0, 8007584 <_Bfree+0x20>
 800757a:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <_Bfree+0x3c>)
 800757c:	4809      	ldr	r0, [pc, #36]	; (80075a4 <_Bfree+0x40>)
 800757e:	218a      	movs	r1, #138	; 0x8a
 8007580:	f7fe ffa4 	bl	80064cc <__assert_func>
 8007584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007588:	6006      	str	r6, [r0, #0]
 800758a:	60c6      	str	r6, [r0, #12]
 800758c:	b13c      	cbz	r4, 800759e <_Bfree+0x3a>
 800758e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007590:	6862      	ldr	r2, [r4, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007598:	6021      	str	r1, [r4, #0]
 800759a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	080096a5 	.word	0x080096a5
 80075a4:	08009728 	.word	0x08009728

080075a8 <__multadd>:
 80075a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ac:	690d      	ldr	r5, [r1, #16]
 80075ae:	4607      	mov	r7, r0
 80075b0:	460c      	mov	r4, r1
 80075b2:	461e      	mov	r6, r3
 80075b4:	f101 0c14 	add.w	ip, r1, #20
 80075b8:	2000      	movs	r0, #0
 80075ba:	f8dc 3000 	ldr.w	r3, [ip]
 80075be:	b299      	uxth	r1, r3
 80075c0:	fb02 6101 	mla	r1, r2, r1, r6
 80075c4:	0c1e      	lsrs	r6, r3, #16
 80075c6:	0c0b      	lsrs	r3, r1, #16
 80075c8:	fb02 3306 	mla	r3, r2, r6, r3
 80075cc:	b289      	uxth	r1, r1
 80075ce:	3001      	adds	r0, #1
 80075d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075d4:	4285      	cmp	r5, r0
 80075d6:	f84c 1b04 	str.w	r1, [ip], #4
 80075da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075de:	dcec      	bgt.n	80075ba <__multadd+0x12>
 80075e0:	b30e      	cbz	r6, 8007626 <__multadd+0x7e>
 80075e2:	68a3      	ldr	r3, [r4, #8]
 80075e4:	42ab      	cmp	r3, r5
 80075e6:	dc19      	bgt.n	800761c <__multadd+0x74>
 80075e8:	6861      	ldr	r1, [r4, #4]
 80075ea:	4638      	mov	r0, r7
 80075ec:	3101      	adds	r1, #1
 80075ee:	f7ff ff79 	bl	80074e4 <_Balloc>
 80075f2:	4680      	mov	r8, r0
 80075f4:	b928      	cbnz	r0, 8007602 <__multadd+0x5a>
 80075f6:	4602      	mov	r2, r0
 80075f8:	4b0c      	ldr	r3, [pc, #48]	; (800762c <__multadd+0x84>)
 80075fa:	480d      	ldr	r0, [pc, #52]	; (8007630 <__multadd+0x88>)
 80075fc:	21b5      	movs	r1, #181	; 0xb5
 80075fe:	f7fe ff65 	bl	80064cc <__assert_func>
 8007602:	6922      	ldr	r2, [r4, #16]
 8007604:	3202      	adds	r2, #2
 8007606:	f104 010c 	add.w	r1, r4, #12
 800760a:	0092      	lsls	r2, r2, #2
 800760c:	300c      	adds	r0, #12
 800760e:	f7fe f902 	bl	8005816 <memcpy>
 8007612:	4621      	mov	r1, r4
 8007614:	4638      	mov	r0, r7
 8007616:	f7ff ffa5 	bl	8007564 <_Bfree>
 800761a:	4644      	mov	r4, r8
 800761c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007620:	3501      	adds	r5, #1
 8007622:	615e      	str	r6, [r3, #20]
 8007624:	6125      	str	r5, [r4, #16]
 8007626:	4620      	mov	r0, r4
 8007628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800762c:	08009717 	.word	0x08009717
 8007630:	08009728 	.word	0x08009728

08007634 <__hi0bits>:
 8007634:	0c03      	lsrs	r3, r0, #16
 8007636:	041b      	lsls	r3, r3, #16
 8007638:	b9d3      	cbnz	r3, 8007670 <__hi0bits+0x3c>
 800763a:	0400      	lsls	r0, r0, #16
 800763c:	2310      	movs	r3, #16
 800763e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007642:	bf04      	itt	eq
 8007644:	0200      	lsleq	r0, r0, #8
 8007646:	3308      	addeq	r3, #8
 8007648:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800764c:	bf04      	itt	eq
 800764e:	0100      	lsleq	r0, r0, #4
 8007650:	3304      	addeq	r3, #4
 8007652:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007656:	bf04      	itt	eq
 8007658:	0080      	lsleq	r0, r0, #2
 800765a:	3302      	addeq	r3, #2
 800765c:	2800      	cmp	r0, #0
 800765e:	db05      	blt.n	800766c <__hi0bits+0x38>
 8007660:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007664:	f103 0301 	add.w	r3, r3, #1
 8007668:	bf08      	it	eq
 800766a:	2320      	moveq	r3, #32
 800766c:	4618      	mov	r0, r3
 800766e:	4770      	bx	lr
 8007670:	2300      	movs	r3, #0
 8007672:	e7e4      	b.n	800763e <__hi0bits+0xa>

08007674 <__lo0bits>:
 8007674:	6803      	ldr	r3, [r0, #0]
 8007676:	f013 0207 	ands.w	r2, r3, #7
 800767a:	4601      	mov	r1, r0
 800767c:	d00b      	beq.n	8007696 <__lo0bits+0x22>
 800767e:	07da      	lsls	r2, r3, #31
 8007680:	d423      	bmi.n	80076ca <__lo0bits+0x56>
 8007682:	0798      	lsls	r0, r3, #30
 8007684:	bf49      	itett	mi
 8007686:	085b      	lsrmi	r3, r3, #1
 8007688:	089b      	lsrpl	r3, r3, #2
 800768a:	2001      	movmi	r0, #1
 800768c:	600b      	strmi	r3, [r1, #0]
 800768e:	bf5c      	itt	pl
 8007690:	600b      	strpl	r3, [r1, #0]
 8007692:	2002      	movpl	r0, #2
 8007694:	4770      	bx	lr
 8007696:	b298      	uxth	r0, r3
 8007698:	b9a8      	cbnz	r0, 80076c6 <__lo0bits+0x52>
 800769a:	0c1b      	lsrs	r3, r3, #16
 800769c:	2010      	movs	r0, #16
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	b90a      	cbnz	r2, 80076a6 <__lo0bits+0x32>
 80076a2:	3008      	adds	r0, #8
 80076a4:	0a1b      	lsrs	r3, r3, #8
 80076a6:	071a      	lsls	r2, r3, #28
 80076a8:	bf04      	itt	eq
 80076aa:	091b      	lsreq	r3, r3, #4
 80076ac:	3004      	addeq	r0, #4
 80076ae:	079a      	lsls	r2, r3, #30
 80076b0:	bf04      	itt	eq
 80076b2:	089b      	lsreq	r3, r3, #2
 80076b4:	3002      	addeq	r0, #2
 80076b6:	07da      	lsls	r2, r3, #31
 80076b8:	d403      	bmi.n	80076c2 <__lo0bits+0x4e>
 80076ba:	085b      	lsrs	r3, r3, #1
 80076bc:	f100 0001 	add.w	r0, r0, #1
 80076c0:	d005      	beq.n	80076ce <__lo0bits+0x5a>
 80076c2:	600b      	str	r3, [r1, #0]
 80076c4:	4770      	bx	lr
 80076c6:	4610      	mov	r0, r2
 80076c8:	e7e9      	b.n	800769e <__lo0bits+0x2a>
 80076ca:	2000      	movs	r0, #0
 80076cc:	4770      	bx	lr
 80076ce:	2020      	movs	r0, #32
 80076d0:	4770      	bx	lr
	...

080076d4 <__i2b>:
 80076d4:	b510      	push	{r4, lr}
 80076d6:	460c      	mov	r4, r1
 80076d8:	2101      	movs	r1, #1
 80076da:	f7ff ff03 	bl	80074e4 <_Balloc>
 80076de:	4602      	mov	r2, r0
 80076e0:	b928      	cbnz	r0, 80076ee <__i2b+0x1a>
 80076e2:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <__i2b+0x24>)
 80076e4:	4805      	ldr	r0, [pc, #20]	; (80076fc <__i2b+0x28>)
 80076e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80076ea:	f7fe feef 	bl	80064cc <__assert_func>
 80076ee:	2301      	movs	r3, #1
 80076f0:	6144      	str	r4, [r0, #20]
 80076f2:	6103      	str	r3, [r0, #16]
 80076f4:	bd10      	pop	{r4, pc}
 80076f6:	bf00      	nop
 80076f8:	08009717 	.word	0x08009717
 80076fc:	08009728 	.word	0x08009728

08007700 <__multiply>:
 8007700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007704:	4691      	mov	r9, r2
 8007706:	690a      	ldr	r2, [r1, #16]
 8007708:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800770c:	429a      	cmp	r2, r3
 800770e:	bfb8      	it	lt
 8007710:	460b      	movlt	r3, r1
 8007712:	460c      	mov	r4, r1
 8007714:	bfbc      	itt	lt
 8007716:	464c      	movlt	r4, r9
 8007718:	4699      	movlt	r9, r3
 800771a:	6927      	ldr	r7, [r4, #16]
 800771c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007720:	68a3      	ldr	r3, [r4, #8]
 8007722:	6861      	ldr	r1, [r4, #4]
 8007724:	eb07 060a 	add.w	r6, r7, sl
 8007728:	42b3      	cmp	r3, r6
 800772a:	b085      	sub	sp, #20
 800772c:	bfb8      	it	lt
 800772e:	3101      	addlt	r1, #1
 8007730:	f7ff fed8 	bl	80074e4 <_Balloc>
 8007734:	b930      	cbnz	r0, 8007744 <__multiply+0x44>
 8007736:	4602      	mov	r2, r0
 8007738:	4b44      	ldr	r3, [pc, #272]	; (800784c <__multiply+0x14c>)
 800773a:	4845      	ldr	r0, [pc, #276]	; (8007850 <__multiply+0x150>)
 800773c:	f240 115d 	movw	r1, #349	; 0x15d
 8007740:	f7fe fec4 	bl	80064cc <__assert_func>
 8007744:	f100 0514 	add.w	r5, r0, #20
 8007748:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800774c:	462b      	mov	r3, r5
 800774e:	2200      	movs	r2, #0
 8007750:	4543      	cmp	r3, r8
 8007752:	d321      	bcc.n	8007798 <__multiply+0x98>
 8007754:	f104 0314 	add.w	r3, r4, #20
 8007758:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800775c:	f109 0314 	add.w	r3, r9, #20
 8007760:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007764:	9202      	str	r2, [sp, #8]
 8007766:	1b3a      	subs	r2, r7, r4
 8007768:	3a15      	subs	r2, #21
 800776a:	f022 0203 	bic.w	r2, r2, #3
 800776e:	3204      	adds	r2, #4
 8007770:	f104 0115 	add.w	r1, r4, #21
 8007774:	428f      	cmp	r7, r1
 8007776:	bf38      	it	cc
 8007778:	2204      	movcc	r2, #4
 800777a:	9201      	str	r2, [sp, #4]
 800777c:	9a02      	ldr	r2, [sp, #8]
 800777e:	9303      	str	r3, [sp, #12]
 8007780:	429a      	cmp	r2, r3
 8007782:	d80c      	bhi.n	800779e <__multiply+0x9e>
 8007784:	2e00      	cmp	r6, #0
 8007786:	dd03      	ble.n	8007790 <__multiply+0x90>
 8007788:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800778c:	2b00      	cmp	r3, #0
 800778e:	d05a      	beq.n	8007846 <__multiply+0x146>
 8007790:	6106      	str	r6, [r0, #16]
 8007792:	b005      	add	sp, #20
 8007794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007798:	f843 2b04 	str.w	r2, [r3], #4
 800779c:	e7d8      	b.n	8007750 <__multiply+0x50>
 800779e:	f8b3 a000 	ldrh.w	sl, [r3]
 80077a2:	f1ba 0f00 	cmp.w	sl, #0
 80077a6:	d024      	beq.n	80077f2 <__multiply+0xf2>
 80077a8:	f104 0e14 	add.w	lr, r4, #20
 80077ac:	46a9      	mov	r9, r5
 80077ae:	f04f 0c00 	mov.w	ip, #0
 80077b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80077b6:	f8d9 1000 	ldr.w	r1, [r9]
 80077ba:	fa1f fb82 	uxth.w	fp, r2
 80077be:	b289      	uxth	r1, r1
 80077c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80077c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80077c8:	f8d9 2000 	ldr.w	r2, [r9]
 80077cc:	4461      	add	r1, ip
 80077ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80077d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80077da:	b289      	uxth	r1, r1
 80077dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077e0:	4577      	cmp	r7, lr
 80077e2:	f849 1b04 	str.w	r1, [r9], #4
 80077e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077ea:	d8e2      	bhi.n	80077b2 <__multiply+0xb2>
 80077ec:	9a01      	ldr	r2, [sp, #4]
 80077ee:	f845 c002 	str.w	ip, [r5, r2]
 80077f2:	9a03      	ldr	r2, [sp, #12]
 80077f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077f8:	3304      	adds	r3, #4
 80077fa:	f1b9 0f00 	cmp.w	r9, #0
 80077fe:	d020      	beq.n	8007842 <__multiply+0x142>
 8007800:	6829      	ldr	r1, [r5, #0]
 8007802:	f104 0c14 	add.w	ip, r4, #20
 8007806:	46ae      	mov	lr, r5
 8007808:	f04f 0a00 	mov.w	sl, #0
 800780c:	f8bc b000 	ldrh.w	fp, [ip]
 8007810:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007814:	fb09 220b 	mla	r2, r9, fp, r2
 8007818:	4492      	add	sl, r2
 800781a:	b289      	uxth	r1, r1
 800781c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007820:	f84e 1b04 	str.w	r1, [lr], #4
 8007824:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007828:	f8be 1000 	ldrh.w	r1, [lr]
 800782c:	0c12      	lsrs	r2, r2, #16
 800782e:	fb09 1102 	mla	r1, r9, r2, r1
 8007832:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007836:	4567      	cmp	r7, ip
 8007838:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800783c:	d8e6      	bhi.n	800780c <__multiply+0x10c>
 800783e:	9a01      	ldr	r2, [sp, #4]
 8007840:	50a9      	str	r1, [r5, r2]
 8007842:	3504      	adds	r5, #4
 8007844:	e79a      	b.n	800777c <__multiply+0x7c>
 8007846:	3e01      	subs	r6, #1
 8007848:	e79c      	b.n	8007784 <__multiply+0x84>
 800784a:	bf00      	nop
 800784c:	08009717 	.word	0x08009717
 8007850:	08009728 	.word	0x08009728

08007854 <__pow5mult>:
 8007854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007858:	4615      	mov	r5, r2
 800785a:	f012 0203 	ands.w	r2, r2, #3
 800785e:	4606      	mov	r6, r0
 8007860:	460f      	mov	r7, r1
 8007862:	d007      	beq.n	8007874 <__pow5mult+0x20>
 8007864:	4c25      	ldr	r4, [pc, #148]	; (80078fc <__pow5mult+0xa8>)
 8007866:	3a01      	subs	r2, #1
 8007868:	2300      	movs	r3, #0
 800786a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800786e:	f7ff fe9b 	bl	80075a8 <__multadd>
 8007872:	4607      	mov	r7, r0
 8007874:	10ad      	asrs	r5, r5, #2
 8007876:	d03d      	beq.n	80078f4 <__pow5mult+0xa0>
 8007878:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800787a:	b97c      	cbnz	r4, 800789c <__pow5mult+0x48>
 800787c:	2010      	movs	r0, #16
 800787e:	f7ff fe1d 	bl	80074bc <malloc>
 8007882:	4602      	mov	r2, r0
 8007884:	6270      	str	r0, [r6, #36]	; 0x24
 8007886:	b928      	cbnz	r0, 8007894 <__pow5mult+0x40>
 8007888:	4b1d      	ldr	r3, [pc, #116]	; (8007900 <__pow5mult+0xac>)
 800788a:	481e      	ldr	r0, [pc, #120]	; (8007904 <__pow5mult+0xb0>)
 800788c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007890:	f7fe fe1c 	bl	80064cc <__assert_func>
 8007894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007898:	6004      	str	r4, [r0, #0]
 800789a:	60c4      	str	r4, [r0, #12]
 800789c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078a4:	b94c      	cbnz	r4, 80078ba <__pow5mult+0x66>
 80078a6:	f240 2171 	movw	r1, #625	; 0x271
 80078aa:	4630      	mov	r0, r6
 80078ac:	f7ff ff12 	bl	80076d4 <__i2b>
 80078b0:	2300      	movs	r3, #0
 80078b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80078b6:	4604      	mov	r4, r0
 80078b8:	6003      	str	r3, [r0, #0]
 80078ba:	f04f 0900 	mov.w	r9, #0
 80078be:	07eb      	lsls	r3, r5, #31
 80078c0:	d50a      	bpl.n	80078d8 <__pow5mult+0x84>
 80078c2:	4639      	mov	r1, r7
 80078c4:	4622      	mov	r2, r4
 80078c6:	4630      	mov	r0, r6
 80078c8:	f7ff ff1a 	bl	8007700 <__multiply>
 80078cc:	4639      	mov	r1, r7
 80078ce:	4680      	mov	r8, r0
 80078d0:	4630      	mov	r0, r6
 80078d2:	f7ff fe47 	bl	8007564 <_Bfree>
 80078d6:	4647      	mov	r7, r8
 80078d8:	106d      	asrs	r5, r5, #1
 80078da:	d00b      	beq.n	80078f4 <__pow5mult+0xa0>
 80078dc:	6820      	ldr	r0, [r4, #0]
 80078de:	b938      	cbnz	r0, 80078f0 <__pow5mult+0x9c>
 80078e0:	4622      	mov	r2, r4
 80078e2:	4621      	mov	r1, r4
 80078e4:	4630      	mov	r0, r6
 80078e6:	f7ff ff0b 	bl	8007700 <__multiply>
 80078ea:	6020      	str	r0, [r4, #0]
 80078ec:	f8c0 9000 	str.w	r9, [r0]
 80078f0:	4604      	mov	r4, r0
 80078f2:	e7e4      	b.n	80078be <__pow5mult+0x6a>
 80078f4:	4638      	mov	r0, r7
 80078f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078fa:	bf00      	nop
 80078fc:	08009878 	.word	0x08009878
 8007900:	080096a5 	.word	0x080096a5
 8007904:	08009728 	.word	0x08009728

08007908 <__lshift>:
 8007908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800790c:	460c      	mov	r4, r1
 800790e:	6849      	ldr	r1, [r1, #4]
 8007910:	6923      	ldr	r3, [r4, #16]
 8007912:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007916:	68a3      	ldr	r3, [r4, #8]
 8007918:	4607      	mov	r7, r0
 800791a:	4691      	mov	r9, r2
 800791c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007920:	f108 0601 	add.w	r6, r8, #1
 8007924:	42b3      	cmp	r3, r6
 8007926:	db0b      	blt.n	8007940 <__lshift+0x38>
 8007928:	4638      	mov	r0, r7
 800792a:	f7ff fddb 	bl	80074e4 <_Balloc>
 800792e:	4605      	mov	r5, r0
 8007930:	b948      	cbnz	r0, 8007946 <__lshift+0x3e>
 8007932:	4602      	mov	r2, r0
 8007934:	4b2a      	ldr	r3, [pc, #168]	; (80079e0 <__lshift+0xd8>)
 8007936:	482b      	ldr	r0, [pc, #172]	; (80079e4 <__lshift+0xdc>)
 8007938:	f240 11d9 	movw	r1, #473	; 0x1d9
 800793c:	f7fe fdc6 	bl	80064cc <__assert_func>
 8007940:	3101      	adds	r1, #1
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	e7ee      	b.n	8007924 <__lshift+0x1c>
 8007946:	2300      	movs	r3, #0
 8007948:	f100 0114 	add.w	r1, r0, #20
 800794c:	f100 0210 	add.w	r2, r0, #16
 8007950:	4618      	mov	r0, r3
 8007952:	4553      	cmp	r3, sl
 8007954:	db37      	blt.n	80079c6 <__lshift+0xbe>
 8007956:	6920      	ldr	r0, [r4, #16]
 8007958:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800795c:	f104 0314 	add.w	r3, r4, #20
 8007960:	f019 091f 	ands.w	r9, r9, #31
 8007964:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007968:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800796c:	d02f      	beq.n	80079ce <__lshift+0xc6>
 800796e:	f1c9 0e20 	rsb	lr, r9, #32
 8007972:	468a      	mov	sl, r1
 8007974:	f04f 0c00 	mov.w	ip, #0
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	fa02 f209 	lsl.w	r2, r2, r9
 800797e:	ea42 020c 	orr.w	r2, r2, ip
 8007982:	f84a 2b04 	str.w	r2, [sl], #4
 8007986:	f853 2b04 	ldr.w	r2, [r3], #4
 800798a:	4298      	cmp	r0, r3
 800798c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007990:	d8f2      	bhi.n	8007978 <__lshift+0x70>
 8007992:	1b03      	subs	r3, r0, r4
 8007994:	3b15      	subs	r3, #21
 8007996:	f023 0303 	bic.w	r3, r3, #3
 800799a:	3304      	adds	r3, #4
 800799c:	f104 0215 	add.w	r2, r4, #21
 80079a0:	4290      	cmp	r0, r2
 80079a2:	bf38      	it	cc
 80079a4:	2304      	movcc	r3, #4
 80079a6:	f841 c003 	str.w	ip, [r1, r3]
 80079aa:	f1bc 0f00 	cmp.w	ip, #0
 80079ae:	d001      	beq.n	80079b4 <__lshift+0xac>
 80079b0:	f108 0602 	add.w	r6, r8, #2
 80079b4:	3e01      	subs	r6, #1
 80079b6:	4638      	mov	r0, r7
 80079b8:	612e      	str	r6, [r5, #16]
 80079ba:	4621      	mov	r1, r4
 80079bc:	f7ff fdd2 	bl	8007564 <_Bfree>
 80079c0:	4628      	mov	r0, r5
 80079c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80079ca:	3301      	adds	r3, #1
 80079cc:	e7c1      	b.n	8007952 <__lshift+0x4a>
 80079ce:	3904      	subs	r1, #4
 80079d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80079d8:	4298      	cmp	r0, r3
 80079da:	d8f9      	bhi.n	80079d0 <__lshift+0xc8>
 80079dc:	e7ea      	b.n	80079b4 <__lshift+0xac>
 80079de:	bf00      	nop
 80079e0:	08009717 	.word	0x08009717
 80079e4:	08009728 	.word	0x08009728

080079e8 <__mcmp>:
 80079e8:	b530      	push	{r4, r5, lr}
 80079ea:	6902      	ldr	r2, [r0, #16]
 80079ec:	690c      	ldr	r4, [r1, #16]
 80079ee:	1b12      	subs	r2, r2, r4
 80079f0:	d10e      	bne.n	8007a10 <__mcmp+0x28>
 80079f2:	f100 0314 	add.w	r3, r0, #20
 80079f6:	3114      	adds	r1, #20
 80079f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80079fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a08:	42a5      	cmp	r5, r4
 8007a0a:	d003      	beq.n	8007a14 <__mcmp+0x2c>
 8007a0c:	d305      	bcc.n	8007a1a <__mcmp+0x32>
 8007a0e:	2201      	movs	r2, #1
 8007a10:	4610      	mov	r0, r2
 8007a12:	bd30      	pop	{r4, r5, pc}
 8007a14:	4283      	cmp	r3, r0
 8007a16:	d3f3      	bcc.n	8007a00 <__mcmp+0x18>
 8007a18:	e7fa      	b.n	8007a10 <__mcmp+0x28>
 8007a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a1e:	e7f7      	b.n	8007a10 <__mcmp+0x28>

08007a20 <__mdiff>:
 8007a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	460c      	mov	r4, r1
 8007a26:	4606      	mov	r6, r0
 8007a28:	4611      	mov	r1, r2
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	4690      	mov	r8, r2
 8007a2e:	f7ff ffdb 	bl	80079e8 <__mcmp>
 8007a32:	1e05      	subs	r5, r0, #0
 8007a34:	d110      	bne.n	8007a58 <__mdiff+0x38>
 8007a36:	4629      	mov	r1, r5
 8007a38:	4630      	mov	r0, r6
 8007a3a:	f7ff fd53 	bl	80074e4 <_Balloc>
 8007a3e:	b930      	cbnz	r0, 8007a4e <__mdiff+0x2e>
 8007a40:	4b3a      	ldr	r3, [pc, #232]	; (8007b2c <__mdiff+0x10c>)
 8007a42:	4602      	mov	r2, r0
 8007a44:	f240 2132 	movw	r1, #562	; 0x232
 8007a48:	4839      	ldr	r0, [pc, #228]	; (8007b30 <__mdiff+0x110>)
 8007a4a:	f7fe fd3f 	bl	80064cc <__assert_func>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a58:	bfa4      	itt	ge
 8007a5a:	4643      	movge	r3, r8
 8007a5c:	46a0      	movge	r8, r4
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a64:	bfa6      	itte	ge
 8007a66:	461c      	movge	r4, r3
 8007a68:	2500      	movge	r5, #0
 8007a6a:	2501      	movlt	r5, #1
 8007a6c:	f7ff fd3a 	bl	80074e4 <_Balloc>
 8007a70:	b920      	cbnz	r0, 8007a7c <__mdiff+0x5c>
 8007a72:	4b2e      	ldr	r3, [pc, #184]	; (8007b2c <__mdiff+0x10c>)
 8007a74:	4602      	mov	r2, r0
 8007a76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a7a:	e7e5      	b.n	8007a48 <__mdiff+0x28>
 8007a7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a80:	6926      	ldr	r6, [r4, #16]
 8007a82:	60c5      	str	r5, [r0, #12]
 8007a84:	f104 0914 	add.w	r9, r4, #20
 8007a88:	f108 0514 	add.w	r5, r8, #20
 8007a8c:	f100 0e14 	add.w	lr, r0, #20
 8007a90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a98:	f108 0210 	add.w	r2, r8, #16
 8007a9c:	46f2      	mov	sl, lr
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007aa4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007aa8:	fa1f f883 	uxth.w	r8, r3
 8007aac:	fa11 f18b 	uxtah	r1, r1, fp
 8007ab0:	0c1b      	lsrs	r3, r3, #16
 8007ab2:	eba1 0808 	sub.w	r8, r1, r8
 8007ab6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007aba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007abe:	fa1f f888 	uxth.w	r8, r8
 8007ac2:	1419      	asrs	r1, r3, #16
 8007ac4:	454e      	cmp	r6, r9
 8007ac6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007aca:	f84a 3b04 	str.w	r3, [sl], #4
 8007ace:	d8e7      	bhi.n	8007aa0 <__mdiff+0x80>
 8007ad0:	1b33      	subs	r3, r6, r4
 8007ad2:	3b15      	subs	r3, #21
 8007ad4:	f023 0303 	bic.w	r3, r3, #3
 8007ad8:	3304      	adds	r3, #4
 8007ada:	3415      	adds	r4, #21
 8007adc:	42a6      	cmp	r6, r4
 8007ade:	bf38      	it	cc
 8007ae0:	2304      	movcc	r3, #4
 8007ae2:	441d      	add	r5, r3
 8007ae4:	4473      	add	r3, lr
 8007ae6:	469e      	mov	lr, r3
 8007ae8:	462e      	mov	r6, r5
 8007aea:	4566      	cmp	r6, ip
 8007aec:	d30e      	bcc.n	8007b0c <__mdiff+0xec>
 8007aee:	f10c 0203 	add.w	r2, ip, #3
 8007af2:	1b52      	subs	r2, r2, r5
 8007af4:	f022 0203 	bic.w	r2, r2, #3
 8007af8:	3d03      	subs	r5, #3
 8007afa:	45ac      	cmp	ip, r5
 8007afc:	bf38      	it	cc
 8007afe:	2200      	movcc	r2, #0
 8007b00:	441a      	add	r2, r3
 8007b02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b06:	b17b      	cbz	r3, 8007b28 <__mdiff+0x108>
 8007b08:	6107      	str	r7, [r0, #16]
 8007b0a:	e7a3      	b.n	8007a54 <__mdiff+0x34>
 8007b0c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b10:	fa11 f288 	uxtah	r2, r1, r8
 8007b14:	1414      	asrs	r4, r2, #16
 8007b16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b1a:	b292      	uxth	r2, r2
 8007b1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007b20:	f84e 2b04 	str.w	r2, [lr], #4
 8007b24:	1421      	asrs	r1, r4, #16
 8007b26:	e7e0      	b.n	8007aea <__mdiff+0xca>
 8007b28:	3f01      	subs	r7, #1
 8007b2a:	e7ea      	b.n	8007b02 <__mdiff+0xe2>
 8007b2c:	08009717 	.word	0x08009717
 8007b30:	08009728 	.word	0x08009728

08007b34 <__d2b>:
 8007b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b38:	4689      	mov	r9, r1
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	ec57 6b10 	vmov	r6, r7, d0
 8007b40:	4690      	mov	r8, r2
 8007b42:	f7ff fccf 	bl	80074e4 <_Balloc>
 8007b46:	4604      	mov	r4, r0
 8007b48:	b930      	cbnz	r0, 8007b58 <__d2b+0x24>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	4b25      	ldr	r3, [pc, #148]	; (8007be4 <__d2b+0xb0>)
 8007b4e:	4826      	ldr	r0, [pc, #152]	; (8007be8 <__d2b+0xb4>)
 8007b50:	f240 310a 	movw	r1, #778	; 0x30a
 8007b54:	f7fe fcba 	bl	80064cc <__assert_func>
 8007b58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b60:	bb35      	cbnz	r5, 8007bb0 <__d2b+0x7c>
 8007b62:	2e00      	cmp	r6, #0
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	d028      	beq.n	8007bba <__d2b+0x86>
 8007b68:	4668      	mov	r0, sp
 8007b6a:	9600      	str	r6, [sp, #0]
 8007b6c:	f7ff fd82 	bl	8007674 <__lo0bits>
 8007b70:	9900      	ldr	r1, [sp, #0]
 8007b72:	b300      	cbz	r0, 8007bb6 <__d2b+0x82>
 8007b74:	9a01      	ldr	r2, [sp, #4]
 8007b76:	f1c0 0320 	rsb	r3, r0, #32
 8007b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7e:	430b      	orrs	r3, r1
 8007b80:	40c2      	lsrs	r2, r0
 8007b82:	6163      	str	r3, [r4, #20]
 8007b84:	9201      	str	r2, [sp, #4]
 8007b86:	9b01      	ldr	r3, [sp, #4]
 8007b88:	61a3      	str	r3, [r4, #24]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	bf14      	ite	ne
 8007b8e:	2202      	movne	r2, #2
 8007b90:	2201      	moveq	r2, #1
 8007b92:	6122      	str	r2, [r4, #16]
 8007b94:	b1d5      	cbz	r5, 8007bcc <__d2b+0x98>
 8007b96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b9a:	4405      	add	r5, r0
 8007b9c:	f8c9 5000 	str.w	r5, [r9]
 8007ba0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ba4:	f8c8 0000 	str.w	r0, [r8]
 8007ba8:	4620      	mov	r0, r4
 8007baa:	b003      	add	sp, #12
 8007bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bb4:	e7d5      	b.n	8007b62 <__d2b+0x2e>
 8007bb6:	6161      	str	r1, [r4, #20]
 8007bb8:	e7e5      	b.n	8007b86 <__d2b+0x52>
 8007bba:	a801      	add	r0, sp, #4
 8007bbc:	f7ff fd5a 	bl	8007674 <__lo0bits>
 8007bc0:	9b01      	ldr	r3, [sp, #4]
 8007bc2:	6163      	str	r3, [r4, #20]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	6122      	str	r2, [r4, #16]
 8007bc8:	3020      	adds	r0, #32
 8007bca:	e7e3      	b.n	8007b94 <__d2b+0x60>
 8007bcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bd4:	f8c9 0000 	str.w	r0, [r9]
 8007bd8:	6918      	ldr	r0, [r3, #16]
 8007bda:	f7ff fd2b 	bl	8007634 <__hi0bits>
 8007bde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007be2:	e7df      	b.n	8007ba4 <__d2b+0x70>
 8007be4:	08009717 	.word	0x08009717
 8007be8:	08009728 	.word	0x08009728

08007bec <_calloc_r>:
 8007bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bee:	fba1 2402 	umull	r2, r4, r1, r2
 8007bf2:	b94c      	cbnz	r4, 8007c08 <_calloc_r+0x1c>
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	9201      	str	r2, [sp, #4]
 8007bf8:	f7fd fe44 	bl	8005884 <_malloc_r>
 8007bfc:	9a01      	ldr	r2, [sp, #4]
 8007bfe:	4605      	mov	r5, r0
 8007c00:	b930      	cbnz	r0, 8007c10 <_calloc_r+0x24>
 8007c02:	4628      	mov	r0, r5
 8007c04:	b003      	add	sp, #12
 8007c06:	bd30      	pop	{r4, r5, pc}
 8007c08:	220c      	movs	r2, #12
 8007c0a:	6002      	str	r2, [r0, #0]
 8007c0c:	2500      	movs	r5, #0
 8007c0e:	e7f8      	b.n	8007c02 <_calloc_r+0x16>
 8007c10:	4621      	mov	r1, r4
 8007c12:	f7fd fe0e 	bl	8005832 <memset>
 8007c16:	e7f4      	b.n	8007c02 <_calloc_r+0x16>

08007c18 <_free_r>:
 8007c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c1a:	2900      	cmp	r1, #0
 8007c1c:	d044      	beq.n	8007ca8 <_free_r+0x90>
 8007c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c22:	9001      	str	r0, [sp, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f1a1 0404 	sub.w	r4, r1, #4
 8007c2a:	bfb8      	it	lt
 8007c2c:	18e4      	addlt	r4, r4, r3
 8007c2e:	f7ff fc4d 	bl	80074cc <__malloc_lock>
 8007c32:	4a1e      	ldr	r2, [pc, #120]	; (8007cac <_free_r+0x94>)
 8007c34:	9801      	ldr	r0, [sp, #4]
 8007c36:	6813      	ldr	r3, [r2, #0]
 8007c38:	b933      	cbnz	r3, 8007c48 <_free_r+0x30>
 8007c3a:	6063      	str	r3, [r4, #4]
 8007c3c:	6014      	str	r4, [r2, #0]
 8007c3e:	b003      	add	sp, #12
 8007c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c44:	f7ff bc48 	b.w	80074d8 <__malloc_unlock>
 8007c48:	42a3      	cmp	r3, r4
 8007c4a:	d908      	bls.n	8007c5e <_free_r+0x46>
 8007c4c:	6825      	ldr	r5, [r4, #0]
 8007c4e:	1961      	adds	r1, r4, r5
 8007c50:	428b      	cmp	r3, r1
 8007c52:	bf01      	itttt	eq
 8007c54:	6819      	ldreq	r1, [r3, #0]
 8007c56:	685b      	ldreq	r3, [r3, #4]
 8007c58:	1949      	addeq	r1, r1, r5
 8007c5a:	6021      	streq	r1, [r4, #0]
 8007c5c:	e7ed      	b.n	8007c3a <_free_r+0x22>
 8007c5e:	461a      	mov	r2, r3
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	b10b      	cbz	r3, 8007c68 <_free_r+0x50>
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	d9fa      	bls.n	8007c5e <_free_r+0x46>
 8007c68:	6811      	ldr	r1, [r2, #0]
 8007c6a:	1855      	adds	r5, r2, r1
 8007c6c:	42a5      	cmp	r5, r4
 8007c6e:	d10b      	bne.n	8007c88 <_free_r+0x70>
 8007c70:	6824      	ldr	r4, [r4, #0]
 8007c72:	4421      	add	r1, r4
 8007c74:	1854      	adds	r4, r2, r1
 8007c76:	42a3      	cmp	r3, r4
 8007c78:	6011      	str	r1, [r2, #0]
 8007c7a:	d1e0      	bne.n	8007c3e <_free_r+0x26>
 8007c7c:	681c      	ldr	r4, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	6053      	str	r3, [r2, #4]
 8007c82:	4421      	add	r1, r4
 8007c84:	6011      	str	r1, [r2, #0]
 8007c86:	e7da      	b.n	8007c3e <_free_r+0x26>
 8007c88:	d902      	bls.n	8007c90 <_free_r+0x78>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	6003      	str	r3, [r0, #0]
 8007c8e:	e7d6      	b.n	8007c3e <_free_r+0x26>
 8007c90:	6825      	ldr	r5, [r4, #0]
 8007c92:	1961      	adds	r1, r4, r5
 8007c94:	428b      	cmp	r3, r1
 8007c96:	bf04      	itt	eq
 8007c98:	6819      	ldreq	r1, [r3, #0]
 8007c9a:	685b      	ldreq	r3, [r3, #4]
 8007c9c:	6063      	str	r3, [r4, #4]
 8007c9e:	bf04      	itt	eq
 8007ca0:	1949      	addeq	r1, r1, r5
 8007ca2:	6021      	streq	r1, [r4, #0]
 8007ca4:	6054      	str	r4, [r2, #4]
 8007ca6:	e7ca      	b.n	8007c3e <_free_r+0x26>
 8007ca8:	b003      	add	sp, #12
 8007caa:	bd30      	pop	{r4, r5, pc}
 8007cac:	200004a0 	.word	0x200004a0

08007cb0 <__ssputs_r>:
 8007cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb4:	688e      	ldr	r6, [r1, #8]
 8007cb6:	429e      	cmp	r6, r3
 8007cb8:	4682      	mov	sl, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	4690      	mov	r8, r2
 8007cbe:	461f      	mov	r7, r3
 8007cc0:	d838      	bhi.n	8007d34 <__ssputs_r+0x84>
 8007cc2:	898a      	ldrh	r2, [r1, #12]
 8007cc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cc8:	d032      	beq.n	8007d30 <__ssputs_r+0x80>
 8007cca:	6825      	ldr	r5, [r4, #0]
 8007ccc:	6909      	ldr	r1, [r1, #16]
 8007cce:	eba5 0901 	sub.w	r9, r5, r1
 8007cd2:	6965      	ldr	r5, [r4, #20]
 8007cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cdc:	3301      	adds	r3, #1
 8007cde:	444b      	add	r3, r9
 8007ce0:	106d      	asrs	r5, r5, #1
 8007ce2:	429d      	cmp	r5, r3
 8007ce4:	bf38      	it	cc
 8007ce6:	461d      	movcc	r5, r3
 8007ce8:	0553      	lsls	r3, r2, #21
 8007cea:	d531      	bpl.n	8007d50 <__ssputs_r+0xa0>
 8007cec:	4629      	mov	r1, r5
 8007cee:	f7fd fdc9 	bl	8005884 <_malloc_r>
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	b950      	cbnz	r0, 8007d0c <__ssputs_r+0x5c>
 8007cf6:	230c      	movs	r3, #12
 8007cf8:	f8ca 3000 	str.w	r3, [sl]
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d02:	81a3      	strh	r3, [r4, #12]
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295
 8007d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d0c:	6921      	ldr	r1, [r4, #16]
 8007d0e:	464a      	mov	r2, r9
 8007d10:	f7fd fd81 	bl	8005816 <memcpy>
 8007d14:	89a3      	ldrh	r3, [r4, #12]
 8007d16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1e:	81a3      	strh	r3, [r4, #12]
 8007d20:	6126      	str	r6, [r4, #16]
 8007d22:	6165      	str	r5, [r4, #20]
 8007d24:	444e      	add	r6, r9
 8007d26:	eba5 0509 	sub.w	r5, r5, r9
 8007d2a:	6026      	str	r6, [r4, #0]
 8007d2c:	60a5      	str	r5, [r4, #8]
 8007d2e:	463e      	mov	r6, r7
 8007d30:	42be      	cmp	r6, r7
 8007d32:	d900      	bls.n	8007d36 <__ssputs_r+0x86>
 8007d34:	463e      	mov	r6, r7
 8007d36:	6820      	ldr	r0, [r4, #0]
 8007d38:	4632      	mov	r2, r6
 8007d3a:	4641      	mov	r1, r8
 8007d3c:	f000 fabc 	bl	80082b8 <memmove>
 8007d40:	68a3      	ldr	r3, [r4, #8]
 8007d42:	1b9b      	subs	r3, r3, r6
 8007d44:	60a3      	str	r3, [r4, #8]
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	4433      	add	r3, r6
 8007d4a:	6023      	str	r3, [r4, #0]
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	e7db      	b.n	8007d08 <__ssputs_r+0x58>
 8007d50:	462a      	mov	r2, r5
 8007d52:	f000 facb 	bl	80082ec <_realloc_r>
 8007d56:	4606      	mov	r6, r0
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d1e1      	bne.n	8007d20 <__ssputs_r+0x70>
 8007d5c:	6921      	ldr	r1, [r4, #16]
 8007d5e:	4650      	mov	r0, sl
 8007d60:	f7ff ff5a 	bl	8007c18 <_free_r>
 8007d64:	e7c7      	b.n	8007cf6 <__ssputs_r+0x46>
	...

08007d68 <_svfiprintf_r>:
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	4698      	mov	r8, r3
 8007d6e:	898b      	ldrh	r3, [r1, #12]
 8007d70:	061b      	lsls	r3, r3, #24
 8007d72:	b09d      	sub	sp, #116	; 0x74
 8007d74:	4607      	mov	r7, r0
 8007d76:	460d      	mov	r5, r1
 8007d78:	4614      	mov	r4, r2
 8007d7a:	d50e      	bpl.n	8007d9a <_svfiprintf_r+0x32>
 8007d7c:	690b      	ldr	r3, [r1, #16]
 8007d7e:	b963      	cbnz	r3, 8007d9a <_svfiprintf_r+0x32>
 8007d80:	2140      	movs	r1, #64	; 0x40
 8007d82:	f7fd fd7f 	bl	8005884 <_malloc_r>
 8007d86:	6028      	str	r0, [r5, #0]
 8007d88:	6128      	str	r0, [r5, #16]
 8007d8a:	b920      	cbnz	r0, 8007d96 <_svfiprintf_r+0x2e>
 8007d8c:	230c      	movs	r3, #12
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295
 8007d94:	e0d1      	b.n	8007f3a <_svfiprintf_r+0x1d2>
 8007d96:	2340      	movs	r3, #64	; 0x40
 8007d98:	616b      	str	r3, [r5, #20]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d9e:	2320      	movs	r3, #32
 8007da0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007da8:	2330      	movs	r3, #48	; 0x30
 8007daa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f54 <_svfiprintf_r+0x1ec>
 8007dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007db2:	f04f 0901 	mov.w	r9, #1
 8007db6:	4623      	mov	r3, r4
 8007db8:	469a      	mov	sl, r3
 8007dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dbe:	b10a      	cbz	r2, 8007dc4 <_svfiprintf_r+0x5c>
 8007dc0:	2a25      	cmp	r2, #37	; 0x25
 8007dc2:	d1f9      	bne.n	8007db8 <_svfiprintf_r+0x50>
 8007dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8007dc8:	d00b      	beq.n	8007de2 <_svfiprintf_r+0x7a>
 8007dca:	465b      	mov	r3, fp
 8007dcc:	4622      	mov	r2, r4
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	f7ff ff6d 	bl	8007cb0 <__ssputs_r>
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	f000 80aa 	beq.w	8007f30 <_svfiprintf_r+0x1c8>
 8007ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dde:	445a      	add	r2, fp
 8007de0:	9209      	str	r2, [sp, #36]	; 0x24
 8007de2:	f89a 3000 	ldrb.w	r3, [sl]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 80a2 	beq.w	8007f30 <_svfiprintf_r+0x1c8>
 8007dec:	2300      	movs	r3, #0
 8007dee:	f04f 32ff 	mov.w	r2, #4294967295
 8007df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007df6:	f10a 0a01 	add.w	sl, sl, #1
 8007dfa:	9304      	str	r3, [sp, #16]
 8007dfc:	9307      	str	r3, [sp, #28]
 8007dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e02:	931a      	str	r3, [sp, #104]	; 0x68
 8007e04:	4654      	mov	r4, sl
 8007e06:	2205      	movs	r2, #5
 8007e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e0c:	4851      	ldr	r0, [pc, #324]	; (8007f54 <_svfiprintf_r+0x1ec>)
 8007e0e:	f7f8 f9e7 	bl	80001e0 <memchr>
 8007e12:	9a04      	ldr	r2, [sp, #16]
 8007e14:	b9d8      	cbnz	r0, 8007e4e <_svfiprintf_r+0xe6>
 8007e16:	06d0      	lsls	r0, r2, #27
 8007e18:	bf44      	itt	mi
 8007e1a:	2320      	movmi	r3, #32
 8007e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e20:	0711      	lsls	r1, r2, #28
 8007e22:	bf44      	itt	mi
 8007e24:	232b      	movmi	r3, #43	; 0x2b
 8007e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e30:	d015      	beq.n	8007e5e <_svfiprintf_r+0xf6>
 8007e32:	9a07      	ldr	r2, [sp, #28]
 8007e34:	4654      	mov	r4, sl
 8007e36:	2000      	movs	r0, #0
 8007e38:	f04f 0c0a 	mov.w	ip, #10
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e42:	3b30      	subs	r3, #48	; 0x30
 8007e44:	2b09      	cmp	r3, #9
 8007e46:	d94e      	bls.n	8007ee6 <_svfiprintf_r+0x17e>
 8007e48:	b1b0      	cbz	r0, 8007e78 <_svfiprintf_r+0x110>
 8007e4a:	9207      	str	r2, [sp, #28]
 8007e4c:	e014      	b.n	8007e78 <_svfiprintf_r+0x110>
 8007e4e:	eba0 0308 	sub.w	r3, r0, r8
 8007e52:	fa09 f303 	lsl.w	r3, r9, r3
 8007e56:	4313      	orrs	r3, r2
 8007e58:	9304      	str	r3, [sp, #16]
 8007e5a:	46a2      	mov	sl, r4
 8007e5c:	e7d2      	b.n	8007e04 <_svfiprintf_r+0x9c>
 8007e5e:	9b03      	ldr	r3, [sp, #12]
 8007e60:	1d19      	adds	r1, r3, #4
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	9103      	str	r1, [sp, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bfbb      	ittet	lt
 8007e6a:	425b      	neglt	r3, r3
 8007e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e70:	9307      	strge	r3, [sp, #28]
 8007e72:	9307      	strlt	r3, [sp, #28]
 8007e74:	bfb8      	it	lt
 8007e76:	9204      	strlt	r2, [sp, #16]
 8007e78:	7823      	ldrb	r3, [r4, #0]
 8007e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e7c:	d10c      	bne.n	8007e98 <_svfiprintf_r+0x130>
 8007e7e:	7863      	ldrb	r3, [r4, #1]
 8007e80:	2b2a      	cmp	r3, #42	; 0x2a
 8007e82:	d135      	bne.n	8007ef0 <_svfiprintf_r+0x188>
 8007e84:	9b03      	ldr	r3, [sp, #12]
 8007e86:	1d1a      	adds	r2, r3, #4
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	9203      	str	r2, [sp, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	bfb8      	it	lt
 8007e90:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e94:	3402      	adds	r4, #2
 8007e96:	9305      	str	r3, [sp, #20]
 8007e98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f64 <_svfiprintf_r+0x1fc>
 8007e9c:	7821      	ldrb	r1, [r4, #0]
 8007e9e:	2203      	movs	r2, #3
 8007ea0:	4650      	mov	r0, sl
 8007ea2:	f7f8 f99d 	bl	80001e0 <memchr>
 8007ea6:	b140      	cbz	r0, 8007eba <_svfiprintf_r+0x152>
 8007ea8:	2340      	movs	r3, #64	; 0x40
 8007eaa:	eba0 000a 	sub.w	r0, r0, sl
 8007eae:	fa03 f000 	lsl.w	r0, r3, r0
 8007eb2:	9b04      	ldr	r3, [sp, #16]
 8007eb4:	4303      	orrs	r3, r0
 8007eb6:	3401      	adds	r4, #1
 8007eb8:	9304      	str	r3, [sp, #16]
 8007eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ebe:	4826      	ldr	r0, [pc, #152]	; (8007f58 <_svfiprintf_r+0x1f0>)
 8007ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ec4:	2206      	movs	r2, #6
 8007ec6:	f7f8 f98b 	bl	80001e0 <memchr>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	d038      	beq.n	8007f40 <_svfiprintf_r+0x1d8>
 8007ece:	4b23      	ldr	r3, [pc, #140]	; (8007f5c <_svfiprintf_r+0x1f4>)
 8007ed0:	bb1b      	cbnz	r3, 8007f1a <_svfiprintf_r+0x1b2>
 8007ed2:	9b03      	ldr	r3, [sp, #12]
 8007ed4:	3307      	adds	r3, #7
 8007ed6:	f023 0307 	bic.w	r3, r3, #7
 8007eda:	3308      	adds	r3, #8
 8007edc:	9303      	str	r3, [sp, #12]
 8007ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee0:	4433      	add	r3, r6
 8007ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ee4:	e767      	b.n	8007db6 <_svfiprintf_r+0x4e>
 8007ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eea:	460c      	mov	r4, r1
 8007eec:	2001      	movs	r0, #1
 8007eee:	e7a5      	b.n	8007e3c <_svfiprintf_r+0xd4>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	3401      	adds	r4, #1
 8007ef4:	9305      	str	r3, [sp, #20]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	f04f 0c0a 	mov.w	ip, #10
 8007efc:	4620      	mov	r0, r4
 8007efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f02:	3a30      	subs	r2, #48	; 0x30
 8007f04:	2a09      	cmp	r2, #9
 8007f06:	d903      	bls.n	8007f10 <_svfiprintf_r+0x1a8>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d0c5      	beq.n	8007e98 <_svfiprintf_r+0x130>
 8007f0c:	9105      	str	r1, [sp, #20]
 8007f0e:	e7c3      	b.n	8007e98 <_svfiprintf_r+0x130>
 8007f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f14:	4604      	mov	r4, r0
 8007f16:	2301      	movs	r3, #1
 8007f18:	e7f0      	b.n	8007efc <_svfiprintf_r+0x194>
 8007f1a:	ab03      	add	r3, sp, #12
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	462a      	mov	r2, r5
 8007f20:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <_svfiprintf_r+0x1f8>)
 8007f22:	a904      	add	r1, sp, #16
 8007f24:	4638      	mov	r0, r7
 8007f26:	f7fd fdc1 	bl	8005aac <_printf_float>
 8007f2a:	1c42      	adds	r2, r0, #1
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	d1d6      	bne.n	8007ede <_svfiprintf_r+0x176>
 8007f30:	89ab      	ldrh	r3, [r5, #12]
 8007f32:	065b      	lsls	r3, r3, #25
 8007f34:	f53f af2c 	bmi.w	8007d90 <_svfiprintf_r+0x28>
 8007f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f3a:	b01d      	add	sp, #116	; 0x74
 8007f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f40:	ab03      	add	r3, sp, #12
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	462a      	mov	r2, r5
 8007f46:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <_svfiprintf_r+0x1f8>)
 8007f48:	a904      	add	r1, sp, #16
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	f7fe f852 	bl	8005ff4 <_printf_i>
 8007f50:	e7eb      	b.n	8007f2a <_svfiprintf_r+0x1c2>
 8007f52:	bf00      	nop
 8007f54:	08009884 	.word	0x08009884
 8007f58:	0800988e 	.word	0x0800988e
 8007f5c:	08005aad 	.word	0x08005aad
 8007f60:	08007cb1 	.word	0x08007cb1
 8007f64:	0800988a 	.word	0x0800988a

08007f68 <__sfputc_r>:
 8007f68:	6893      	ldr	r3, [r2, #8]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	b410      	push	{r4}
 8007f70:	6093      	str	r3, [r2, #8]
 8007f72:	da08      	bge.n	8007f86 <__sfputc_r+0x1e>
 8007f74:	6994      	ldr	r4, [r2, #24]
 8007f76:	42a3      	cmp	r3, r4
 8007f78:	db01      	blt.n	8007f7e <__sfputc_r+0x16>
 8007f7a:	290a      	cmp	r1, #10
 8007f7c:	d103      	bne.n	8007f86 <__sfputc_r+0x1e>
 8007f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f82:	f7fe b9d1 	b.w	8006328 <__swbuf_r>
 8007f86:	6813      	ldr	r3, [r2, #0]
 8007f88:	1c58      	adds	r0, r3, #1
 8007f8a:	6010      	str	r0, [r2, #0]
 8007f8c:	7019      	strb	r1, [r3, #0]
 8007f8e:	4608      	mov	r0, r1
 8007f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <__sfputs_r>:
 8007f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f98:	4606      	mov	r6, r0
 8007f9a:	460f      	mov	r7, r1
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	18d5      	adds	r5, r2, r3
 8007fa0:	42ac      	cmp	r4, r5
 8007fa2:	d101      	bne.n	8007fa8 <__sfputs_r+0x12>
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	e007      	b.n	8007fb8 <__sfputs_r+0x22>
 8007fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fac:	463a      	mov	r2, r7
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f7ff ffda 	bl	8007f68 <__sfputc_r>
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	d1f3      	bne.n	8007fa0 <__sfputs_r+0xa>
 8007fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fbc <_vfiprintf_r>:
 8007fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc0:	460d      	mov	r5, r1
 8007fc2:	b09d      	sub	sp, #116	; 0x74
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	4698      	mov	r8, r3
 8007fc8:	4606      	mov	r6, r0
 8007fca:	b118      	cbz	r0, 8007fd4 <_vfiprintf_r+0x18>
 8007fcc:	6983      	ldr	r3, [r0, #24]
 8007fce:	b90b      	cbnz	r3, 8007fd4 <_vfiprintf_r+0x18>
 8007fd0:	f7fd fb5c 	bl	800568c <__sinit>
 8007fd4:	4b89      	ldr	r3, [pc, #548]	; (80081fc <_vfiprintf_r+0x240>)
 8007fd6:	429d      	cmp	r5, r3
 8007fd8:	d11b      	bne.n	8008012 <_vfiprintf_r+0x56>
 8007fda:	6875      	ldr	r5, [r6, #4]
 8007fdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fde:	07d9      	lsls	r1, r3, #31
 8007fe0:	d405      	bmi.n	8007fee <_vfiprintf_r+0x32>
 8007fe2:	89ab      	ldrh	r3, [r5, #12]
 8007fe4:	059a      	lsls	r2, r3, #22
 8007fe6:	d402      	bmi.n	8007fee <_vfiprintf_r+0x32>
 8007fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fea:	f7fd fc12 	bl	8005812 <__retarget_lock_acquire_recursive>
 8007fee:	89ab      	ldrh	r3, [r5, #12]
 8007ff0:	071b      	lsls	r3, r3, #28
 8007ff2:	d501      	bpl.n	8007ff8 <_vfiprintf_r+0x3c>
 8007ff4:	692b      	ldr	r3, [r5, #16]
 8007ff6:	b9eb      	cbnz	r3, 8008034 <_vfiprintf_r+0x78>
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f7fe f9f8 	bl	80063f0 <__swsetup_r>
 8008000:	b1c0      	cbz	r0, 8008034 <_vfiprintf_r+0x78>
 8008002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008004:	07dc      	lsls	r4, r3, #31
 8008006:	d50e      	bpl.n	8008026 <_vfiprintf_r+0x6a>
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	b01d      	add	sp, #116	; 0x74
 800800e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008012:	4b7b      	ldr	r3, [pc, #492]	; (8008200 <_vfiprintf_r+0x244>)
 8008014:	429d      	cmp	r5, r3
 8008016:	d101      	bne.n	800801c <_vfiprintf_r+0x60>
 8008018:	68b5      	ldr	r5, [r6, #8]
 800801a:	e7df      	b.n	8007fdc <_vfiprintf_r+0x20>
 800801c:	4b79      	ldr	r3, [pc, #484]	; (8008204 <_vfiprintf_r+0x248>)
 800801e:	429d      	cmp	r5, r3
 8008020:	bf08      	it	eq
 8008022:	68f5      	ldreq	r5, [r6, #12]
 8008024:	e7da      	b.n	8007fdc <_vfiprintf_r+0x20>
 8008026:	89ab      	ldrh	r3, [r5, #12]
 8008028:	0598      	lsls	r0, r3, #22
 800802a:	d4ed      	bmi.n	8008008 <_vfiprintf_r+0x4c>
 800802c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800802e:	f7fd fbf1 	bl	8005814 <__retarget_lock_release_recursive>
 8008032:	e7e9      	b.n	8008008 <_vfiprintf_r+0x4c>
 8008034:	2300      	movs	r3, #0
 8008036:	9309      	str	r3, [sp, #36]	; 0x24
 8008038:	2320      	movs	r3, #32
 800803a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800803e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008042:	2330      	movs	r3, #48	; 0x30
 8008044:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008208 <_vfiprintf_r+0x24c>
 8008048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800804c:	f04f 0901 	mov.w	r9, #1
 8008050:	4623      	mov	r3, r4
 8008052:	469a      	mov	sl, r3
 8008054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008058:	b10a      	cbz	r2, 800805e <_vfiprintf_r+0xa2>
 800805a:	2a25      	cmp	r2, #37	; 0x25
 800805c:	d1f9      	bne.n	8008052 <_vfiprintf_r+0x96>
 800805e:	ebba 0b04 	subs.w	fp, sl, r4
 8008062:	d00b      	beq.n	800807c <_vfiprintf_r+0xc0>
 8008064:	465b      	mov	r3, fp
 8008066:	4622      	mov	r2, r4
 8008068:	4629      	mov	r1, r5
 800806a:	4630      	mov	r0, r6
 800806c:	f7ff ff93 	bl	8007f96 <__sfputs_r>
 8008070:	3001      	adds	r0, #1
 8008072:	f000 80aa 	beq.w	80081ca <_vfiprintf_r+0x20e>
 8008076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008078:	445a      	add	r2, fp
 800807a:	9209      	str	r2, [sp, #36]	; 0x24
 800807c:	f89a 3000 	ldrb.w	r3, [sl]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 80a2 	beq.w	80081ca <_vfiprintf_r+0x20e>
 8008086:	2300      	movs	r3, #0
 8008088:	f04f 32ff 	mov.w	r2, #4294967295
 800808c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008090:	f10a 0a01 	add.w	sl, sl, #1
 8008094:	9304      	str	r3, [sp, #16]
 8008096:	9307      	str	r3, [sp, #28]
 8008098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800809c:	931a      	str	r3, [sp, #104]	; 0x68
 800809e:	4654      	mov	r4, sl
 80080a0:	2205      	movs	r2, #5
 80080a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a6:	4858      	ldr	r0, [pc, #352]	; (8008208 <_vfiprintf_r+0x24c>)
 80080a8:	f7f8 f89a 	bl	80001e0 <memchr>
 80080ac:	9a04      	ldr	r2, [sp, #16]
 80080ae:	b9d8      	cbnz	r0, 80080e8 <_vfiprintf_r+0x12c>
 80080b0:	06d1      	lsls	r1, r2, #27
 80080b2:	bf44      	itt	mi
 80080b4:	2320      	movmi	r3, #32
 80080b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ba:	0713      	lsls	r3, r2, #28
 80080bc:	bf44      	itt	mi
 80080be:	232b      	movmi	r3, #43	; 0x2b
 80080c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080c4:	f89a 3000 	ldrb.w	r3, [sl]
 80080c8:	2b2a      	cmp	r3, #42	; 0x2a
 80080ca:	d015      	beq.n	80080f8 <_vfiprintf_r+0x13c>
 80080cc:	9a07      	ldr	r2, [sp, #28]
 80080ce:	4654      	mov	r4, sl
 80080d0:	2000      	movs	r0, #0
 80080d2:	f04f 0c0a 	mov.w	ip, #10
 80080d6:	4621      	mov	r1, r4
 80080d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080dc:	3b30      	subs	r3, #48	; 0x30
 80080de:	2b09      	cmp	r3, #9
 80080e0:	d94e      	bls.n	8008180 <_vfiprintf_r+0x1c4>
 80080e2:	b1b0      	cbz	r0, 8008112 <_vfiprintf_r+0x156>
 80080e4:	9207      	str	r2, [sp, #28]
 80080e6:	e014      	b.n	8008112 <_vfiprintf_r+0x156>
 80080e8:	eba0 0308 	sub.w	r3, r0, r8
 80080ec:	fa09 f303 	lsl.w	r3, r9, r3
 80080f0:	4313      	orrs	r3, r2
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	46a2      	mov	sl, r4
 80080f6:	e7d2      	b.n	800809e <_vfiprintf_r+0xe2>
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	1d19      	adds	r1, r3, #4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	9103      	str	r1, [sp, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	bfbb      	ittet	lt
 8008104:	425b      	neglt	r3, r3
 8008106:	f042 0202 	orrlt.w	r2, r2, #2
 800810a:	9307      	strge	r3, [sp, #28]
 800810c:	9307      	strlt	r3, [sp, #28]
 800810e:	bfb8      	it	lt
 8008110:	9204      	strlt	r2, [sp, #16]
 8008112:	7823      	ldrb	r3, [r4, #0]
 8008114:	2b2e      	cmp	r3, #46	; 0x2e
 8008116:	d10c      	bne.n	8008132 <_vfiprintf_r+0x176>
 8008118:	7863      	ldrb	r3, [r4, #1]
 800811a:	2b2a      	cmp	r3, #42	; 0x2a
 800811c:	d135      	bne.n	800818a <_vfiprintf_r+0x1ce>
 800811e:	9b03      	ldr	r3, [sp, #12]
 8008120:	1d1a      	adds	r2, r3, #4
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	9203      	str	r2, [sp, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	bfb8      	it	lt
 800812a:	f04f 33ff 	movlt.w	r3, #4294967295
 800812e:	3402      	adds	r4, #2
 8008130:	9305      	str	r3, [sp, #20]
 8008132:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008218 <_vfiprintf_r+0x25c>
 8008136:	7821      	ldrb	r1, [r4, #0]
 8008138:	2203      	movs	r2, #3
 800813a:	4650      	mov	r0, sl
 800813c:	f7f8 f850 	bl	80001e0 <memchr>
 8008140:	b140      	cbz	r0, 8008154 <_vfiprintf_r+0x198>
 8008142:	2340      	movs	r3, #64	; 0x40
 8008144:	eba0 000a 	sub.w	r0, r0, sl
 8008148:	fa03 f000 	lsl.w	r0, r3, r0
 800814c:	9b04      	ldr	r3, [sp, #16]
 800814e:	4303      	orrs	r3, r0
 8008150:	3401      	adds	r4, #1
 8008152:	9304      	str	r3, [sp, #16]
 8008154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008158:	482c      	ldr	r0, [pc, #176]	; (800820c <_vfiprintf_r+0x250>)
 800815a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800815e:	2206      	movs	r2, #6
 8008160:	f7f8 f83e 	bl	80001e0 <memchr>
 8008164:	2800      	cmp	r0, #0
 8008166:	d03f      	beq.n	80081e8 <_vfiprintf_r+0x22c>
 8008168:	4b29      	ldr	r3, [pc, #164]	; (8008210 <_vfiprintf_r+0x254>)
 800816a:	bb1b      	cbnz	r3, 80081b4 <_vfiprintf_r+0x1f8>
 800816c:	9b03      	ldr	r3, [sp, #12]
 800816e:	3307      	adds	r3, #7
 8008170:	f023 0307 	bic.w	r3, r3, #7
 8008174:	3308      	adds	r3, #8
 8008176:	9303      	str	r3, [sp, #12]
 8008178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800817a:	443b      	add	r3, r7
 800817c:	9309      	str	r3, [sp, #36]	; 0x24
 800817e:	e767      	b.n	8008050 <_vfiprintf_r+0x94>
 8008180:	fb0c 3202 	mla	r2, ip, r2, r3
 8008184:	460c      	mov	r4, r1
 8008186:	2001      	movs	r0, #1
 8008188:	e7a5      	b.n	80080d6 <_vfiprintf_r+0x11a>
 800818a:	2300      	movs	r3, #0
 800818c:	3401      	adds	r4, #1
 800818e:	9305      	str	r3, [sp, #20]
 8008190:	4619      	mov	r1, r3
 8008192:	f04f 0c0a 	mov.w	ip, #10
 8008196:	4620      	mov	r0, r4
 8008198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800819c:	3a30      	subs	r2, #48	; 0x30
 800819e:	2a09      	cmp	r2, #9
 80081a0:	d903      	bls.n	80081aa <_vfiprintf_r+0x1ee>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0c5      	beq.n	8008132 <_vfiprintf_r+0x176>
 80081a6:	9105      	str	r1, [sp, #20]
 80081a8:	e7c3      	b.n	8008132 <_vfiprintf_r+0x176>
 80081aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80081ae:	4604      	mov	r4, r0
 80081b0:	2301      	movs	r3, #1
 80081b2:	e7f0      	b.n	8008196 <_vfiprintf_r+0x1da>
 80081b4:	ab03      	add	r3, sp, #12
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	462a      	mov	r2, r5
 80081ba:	4b16      	ldr	r3, [pc, #88]	; (8008214 <_vfiprintf_r+0x258>)
 80081bc:	a904      	add	r1, sp, #16
 80081be:	4630      	mov	r0, r6
 80081c0:	f7fd fc74 	bl	8005aac <_printf_float>
 80081c4:	4607      	mov	r7, r0
 80081c6:	1c78      	adds	r0, r7, #1
 80081c8:	d1d6      	bne.n	8008178 <_vfiprintf_r+0x1bc>
 80081ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081cc:	07d9      	lsls	r1, r3, #31
 80081ce:	d405      	bmi.n	80081dc <_vfiprintf_r+0x220>
 80081d0:	89ab      	ldrh	r3, [r5, #12]
 80081d2:	059a      	lsls	r2, r3, #22
 80081d4:	d402      	bmi.n	80081dc <_vfiprintf_r+0x220>
 80081d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081d8:	f7fd fb1c 	bl	8005814 <__retarget_lock_release_recursive>
 80081dc:	89ab      	ldrh	r3, [r5, #12]
 80081de:	065b      	lsls	r3, r3, #25
 80081e0:	f53f af12 	bmi.w	8008008 <_vfiprintf_r+0x4c>
 80081e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081e6:	e711      	b.n	800800c <_vfiprintf_r+0x50>
 80081e8:	ab03      	add	r3, sp, #12
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	462a      	mov	r2, r5
 80081ee:	4b09      	ldr	r3, [pc, #36]	; (8008214 <_vfiprintf_r+0x258>)
 80081f0:	a904      	add	r1, sp, #16
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7fd fefe 	bl	8005ff4 <_printf_i>
 80081f8:	e7e4      	b.n	80081c4 <_vfiprintf_r+0x208>
 80081fa:	bf00      	nop
 80081fc:	080095e4 	.word	0x080095e4
 8008200:	08009604 	.word	0x08009604
 8008204:	080095c4 	.word	0x080095c4
 8008208:	08009884 	.word	0x08009884
 800820c:	0800988e 	.word	0x0800988e
 8008210:	08005aad 	.word	0x08005aad
 8008214:	08007f97 	.word	0x08007f97
 8008218:	0800988a 	.word	0x0800988a

0800821c <_read_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d07      	ldr	r5, [pc, #28]	; (800823c <_read_r+0x20>)
 8008220:	4604      	mov	r4, r0
 8008222:	4608      	mov	r0, r1
 8008224:	4611      	mov	r1, r2
 8008226:	2200      	movs	r2, #0
 8008228:	602a      	str	r2, [r5, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	f7fd f8c1 	bl	80053b2 <_read>
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d102      	bne.n	800823a <_read_r+0x1e>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	b103      	cbz	r3, 800823a <_read_r+0x1e>
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	bd38      	pop	{r3, r4, r5, pc}
 800823c:	200004a8 	.word	0x200004a8

08008240 <abort>:
 8008240:	b508      	push	{r3, lr}
 8008242:	2006      	movs	r0, #6
 8008244:	f000 f8aa 	bl	800839c <raise>
 8008248:	2001      	movs	r0, #1
 800824a:	f001 f827 	bl	800929c <_exit>
	...

08008250 <_fstat_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d07      	ldr	r5, [pc, #28]	; (8008270 <_fstat_r+0x20>)
 8008254:	2300      	movs	r3, #0
 8008256:	4604      	mov	r4, r0
 8008258:	4608      	mov	r0, r1
 800825a:	4611      	mov	r1, r2
 800825c:	602b      	str	r3, [r5, #0]
 800825e:	f7fd f98c 	bl	800557a <_fstat>
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	d102      	bne.n	800826c <_fstat_r+0x1c>
 8008266:	682b      	ldr	r3, [r5, #0]
 8008268:	b103      	cbz	r3, 800826c <_fstat_r+0x1c>
 800826a:	6023      	str	r3, [r4, #0]
 800826c:	bd38      	pop	{r3, r4, r5, pc}
 800826e:	bf00      	nop
 8008270:	200004a8 	.word	0x200004a8

08008274 <_isatty_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4d06      	ldr	r5, [pc, #24]	; (8008290 <_isatty_r+0x1c>)
 8008278:	2300      	movs	r3, #0
 800827a:	4604      	mov	r4, r0
 800827c:	4608      	mov	r0, r1
 800827e:	602b      	str	r3, [r5, #0]
 8008280:	f7fd f989 	bl	8005596 <_isatty>
 8008284:	1c43      	adds	r3, r0, #1
 8008286:	d102      	bne.n	800828e <_isatty_r+0x1a>
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	b103      	cbz	r3, 800828e <_isatty_r+0x1a>
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	bd38      	pop	{r3, r4, r5, pc}
 8008290:	200004a8 	.word	0x200004a8

08008294 <__ascii_mbtowc>:
 8008294:	b082      	sub	sp, #8
 8008296:	b901      	cbnz	r1, 800829a <__ascii_mbtowc+0x6>
 8008298:	a901      	add	r1, sp, #4
 800829a:	b142      	cbz	r2, 80082ae <__ascii_mbtowc+0x1a>
 800829c:	b14b      	cbz	r3, 80082b2 <__ascii_mbtowc+0x1e>
 800829e:	7813      	ldrb	r3, [r2, #0]
 80082a0:	600b      	str	r3, [r1, #0]
 80082a2:	7812      	ldrb	r2, [r2, #0]
 80082a4:	1e10      	subs	r0, r2, #0
 80082a6:	bf18      	it	ne
 80082a8:	2001      	movne	r0, #1
 80082aa:	b002      	add	sp, #8
 80082ac:	4770      	bx	lr
 80082ae:	4610      	mov	r0, r2
 80082b0:	e7fb      	b.n	80082aa <__ascii_mbtowc+0x16>
 80082b2:	f06f 0001 	mvn.w	r0, #1
 80082b6:	e7f8      	b.n	80082aa <__ascii_mbtowc+0x16>

080082b8 <memmove>:
 80082b8:	4288      	cmp	r0, r1
 80082ba:	b510      	push	{r4, lr}
 80082bc:	eb01 0402 	add.w	r4, r1, r2
 80082c0:	d902      	bls.n	80082c8 <memmove+0x10>
 80082c2:	4284      	cmp	r4, r0
 80082c4:	4623      	mov	r3, r4
 80082c6:	d807      	bhi.n	80082d8 <memmove+0x20>
 80082c8:	1e43      	subs	r3, r0, #1
 80082ca:	42a1      	cmp	r1, r4
 80082cc:	d008      	beq.n	80082e0 <memmove+0x28>
 80082ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082d6:	e7f8      	b.n	80082ca <memmove+0x12>
 80082d8:	4402      	add	r2, r0
 80082da:	4601      	mov	r1, r0
 80082dc:	428a      	cmp	r2, r1
 80082de:	d100      	bne.n	80082e2 <memmove+0x2a>
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082ea:	e7f7      	b.n	80082dc <memmove+0x24>

080082ec <_realloc_r>:
 80082ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f0:	4680      	mov	r8, r0
 80082f2:	4614      	mov	r4, r2
 80082f4:	460e      	mov	r6, r1
 80082f6:	b921      	cbnz	r1, 8008302 <_realloc_r+0x16>
 80082f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082fc:	4611      	mov	r1, r2
 80082fe:	f7fd bac1 	b.w	8005884 <_malloc_r>
 8008302:	b92a      	cbnz	r2, 8008310 <_realloc_r+0x24>
 8008304:	f7ff fc88 	bl	8007c18 <_free_r>
 8008308:	4625      	mov	r5, r4
 800830a:	4628      	mov	r0, r5
 800830c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008310:	f000 f86d 	bl	80083ee <_malloc_usable_size_r>
 8008314:	4284      	cmp	r4, r0
 8008316:	4607      	mov	r7, r0
 8008318:	d802      	bhi.n	8008320 <_realloc_r+0x34>
 800831a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800831e:	d812      	bhi.n	8008346 <_realloc_r+0x5a>
 8008320:	4621      	mov	r1, r4
 8008322:	4640      	mov	r0, r8
 8008324:	f7fd faae 	bl	8005884 <_malloc_r>
 8008328:	4605      	mov	r5, r0
 800832a:	2800      	cmp	r0, #0
 800832c:	d0ed      	beq.n	800830a <_realloc_r+0x1e>
 800832e:	42bc      	cmp	r4, r7
 8008330:	4622      	mov	r2, r4
 8008332:	4631      	mov	r1, r6
 8008334:	bf28      	it	cs
 8008336:	463a      	movcs	r2, r7
 8008338:	f7fd fa6d 	bl	8005816 <memcpy>
 800833c:	4631      	mov	r1, r6
 800833e:	4640      	mov	r0, r8
 8008340:	f7ff fc6a 	bl	8007c18 <_free_r>
 8008344:	e7e1      	b.n	800830a <_realloc_r+0x1e>
 8008346:	4635      	mov	r5, r6
 8008348:	e7df      	b.n	800830a <_realloc_r+0x1e>

0800834a <_raise_r>:
 800834a:	291f      	cmp	r1, #31
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4604      	mov	r4, r0
 8008350:	460d      	mov	r5, r1
 8008352:	d904      	bls.n	800835e <_raise_r+0x14>
 8008354:	2316      	movs	r3, #22
 8008356:	6003      	str	r3, [r0, #0]
 8008358:	f04f 30ff 	mov.w	r0, #4294967295
 800835c:	bd38      	pop	{r3, r4, r5, pc}
 800835e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008360:	b112      	cbz	r2, 8008368 <_raise_r+0x1e>
 8008362:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008366:	b94b      	cbnz	r3, 800837c <_raise_r+0x32>
 8008368:	4620      	mov	r0, r4
 800836a:	f000 f831 	bl	80083d0 <_getpid_r>
 800836e:	462a      	mov	r2, r5
 8008370:	4601      	mov	r1, r0
 8008372:	4620      	mov	r0, r4
 8008374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008378:	f000 b818 	b.w	80083ac <_kill_r>
 800837c:	2b01      	cmp	r3, #1
 800837e:	d00a      	beq.n	8008396 <_raise_r+0x4c>
 8008380:	1c59      	adds	r1, r3, #1
 8008382:	d103      	bne.n	800838c <_raise_r+0x42>
 8008384:	2316      	movs	r3, #22
 8008386:	6003      	str	r3, [r0, #0]
 8008388:	2001      	movs	r0, #1
 800838a:	e7e7      	b.n	800835c <_raise_r+0x12>
 800838c:	2400      	movs	r4, #0
 800838e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008392:	4628      	mov	r0, r5
 8008394:	4798      	blx	r3
 8008396:	2000      	movs	r0, #0
 8008398:	e7e0      	b.n	800835c <_raise_r+0x12>
	...

0800839c <raise>:
 800839c:	4b02      	ldr	r3, [pc, #8]	; (80083a8 <raise+0xc>)
 800839e:	4601      	mov	r1, r0
 80083a0:	6818      	ldr	r0, [r3, #0]
 80083a2:	f7ff bfd2 	b.w	800834a <_raise_r>
 80083a6:	bf00      	nop
 80083a8:	20000058 	.word	0x20000058

080083ac <_kill_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	4d07      	ldr	r5, [pc, #28]	; (80083cc <_kill_r+0x20>)
 80083b0:	2300      	movs	r3, #0
 80083b2:	4604      	mov	r4, r0
 80083b4:	4608      	mov	r0, r1
 80083b6:	4611      	mov	r1, r2
 80083b8:	602b      	str	r3, [r5, #0]
 80083ba:	f000 ff67 	bl	800928c <_kill>
 80083be:	1c43      	adds	r3, r0, #1
 80083c0:	d102      	bne.n	80083c8 <_kill_r+0x1c>
 80083c2:	682b      	ldr	r3, [r5, #0]
 80083c4:	b103      	cbz	r3, 80083c8 <_kill_r+0x1c>
 80083c6:	6023      	str	r3, [r4, #0]
 80083c8:	bd38      	pop	{r3, r4, r5, pc}
 80083ca:	bf00      	nop
 80083cc:	200004a8 	.word	0x200004a8

080083d0 <_getpid_r>:
 80083d0:	f7fd b8b0 	b.w	8005534 <_getpid>

080083d4 <__ascii_wctomb>:
 80083d4:	b149      	cbz	r1, 80083ea <__ascii_wctomb+0x16>
 80083d6:	2aff      	cmp	r2, #255	; 0xff
 80083d8:	bf85      	ittet	hi
 80083da:	238a      	movhi	r3, #138	; 0x8a
 80083dc:	6003      	strhi	r3, [r0, #0]
 80083de:	700a      	strbls	r2, [r1, #0]
 80083e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80083e4:	bf98      	it	ls
 80083e6:	2001      	movls	r0, #1
 80083e8:	4770      	bx	lr
 80083ea:	4608      	mov	r0, r1
 80083ec:	4770      	bx	lr

080083ee <_malloc_usable_size_r>:
 80083ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f2:	1f18      	subs	r0, r3, #4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bfbc      	itt	lt
 80083f8:	580b      	ldrlt	r3, [r1, r0]
 80083fa:	18c0      	addlt	r0, r0, r3
 80083fc:	4770      	bx	lr
	...

08008400 <pow>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	ed2d 8b02 	vpush	{d8}
 8008406:	eeb0 8a40 	vmov.f32	s16, s0
 800840a:	eef0 8a60 	vmov.f32	s17, s1
 800840e:	ec55 4b11 	vmov	r4, r5, d1
 8008412:	f000 f891 	bl	8008538 <__ieee754_pow>
 8008416:	4622      	mov	r2, r4
 8008418:	462b      	mov	r3, r5
 800841a:	4620      	mov	r0, r4
 800841c:	4629      	mov	r1, r5
 800841e:	ec57 6b10 	vmov	r6, r7, d0
 8008422:	f7f8 fb83 	bl	8000b2c <__aeabi_dcmpun>
 8008426:	2800      	cmp	r0, #0
 8008428:	d13b      	bne.n	80084a2 <pow+0xa2>
 800842a:	ec51 0b18 	vmov	r0, r1, d8
 800842e:	2200      	movs	r2, #0
 8008430:	2300      	movs	r3, #0
 8008432:	f7f8 fb49 	bl	8000ac8 <__aeabi_dcmpeq>
 8008436:	b1b8      	cbz	r0, 8008468 <pow+0x68>
 8008438:	2200      	movs	r2, #0
 800843a:	2300      	movs	r3, #0
 800843c:	4620      	mov	r0, r4
 800843e:	4629      	mov	r1, r5
 8008440:	f7f8 fb42 	bl	8000ac8 <__aeabi_dcmpeq>
 8008444:	2800      	cmp	r0, #0
 8008446:	d146      	bne.n	80084d6 <pow+0xd6>
 8008448:	ec45 4b10 	vmov	d0, r4, r5
 800844c:	f000 fe8d 	bl	800916a <finite>
 8008450:	b338      	cbz	r0, 80084a2 <pow+0xa2>
 8008452:	2200      	movs	r2, #0
 8008454:	2300      	movs	r3, #0
 8008456:	4620      	mov	r0, r4
 8008458:	4629      	mov	r1, r5
 800845a:	f7f8 fb3f 	bl	8000adc <__aeabi_dcmplt>
 800845e:	b300      	cbz	r0, 80084a2 <pow+0xa2>
 8008460:	f7fd f8b6 	bl	80055d0 <__errno>
 8008464:	2322      	movs	r3, #34	; 0x22
 8008466:	e01b      	b.n	80084a0 <pow+0xa0>
 8008468:	ec47 6b10 	vmov	d0, r6, r7
 800846c:	f000 fe7d 	bl	800916a <finite>
 8008470:	b9e0      	cbnz	r0, 80084ac <pow+0xac>
 8008472:	eeb0 0a48 	vmov.f32	s0, s16
 8008476:	eef0 0a68 	vmov.f32	s1, s17
 800847a:	f000 fe76 	bl	800916a <finite>
 800847e:	b1a8      	cbz	r0, 80084ac <pow+0xac>
 8008480:	ec45 4b10 	vmov	d0, r4, r5
 8008484:	f000 fe71 	bl	800916a <finite>
 8008488:	b180      	cbz	r0, 80084ac <pow+0xac>
 800848a:	4632      	mov	r2, r6
 800848c:	463b      	mov	r3, r7
 800848e:	4630      	mov	r0, r6
 8008490:	4639      	mov	r1, r7
 8008492:	f7f8 fb4b 	bl	8000b2c <__aeabi_dcmpun>
 8008496:	2800      	cmp	r0, #0
 8008498:	d0e2      	beq.n	8008460 <pow+0x60>
 800849a:	f7fd f899 	bl	80055d0 <__errno>
 800849e:	2321      	movs	r3, #33	; 0x21
 80084a0:	6003      	str	r3, [r0, #0]
 80084a2:	ecbd 8b02 	vpop	{d8}
 80084a6:	ec47 6b10 	vmov	d0, r6, r7
 80084aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ac:	2200      	movs	r2, #0
 80084ae:	2300      	movs	r3, #0
 80084b0:	4630      	mov	r0, r6
 80084b2:	4639      	mov	r1, r7
 80084b4:	f7f8 fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d0f2      	beq.n	80084a2 <pow+0xa2>
 80084bc:	eeb0 0a48 	vmov.f32	s0, s16
 80084c0:	eef0 0a68 	vmov.f32	s1, s17
 80084c4:	f000 fe51 	bl	800916a <finite>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d0ea      	beq.n	80084a2 <pow+0xa2>
 80084cc:	ec45 4b10 	vmov	d0, r4, r5
 80084d0:	f000 fe4b 	bl	800916a <finite>
 80084d4:	e7c3      	b.n	800845e <pow+0x5e>
 80084d6:	4f01      	ldr	r7, [pc, #4]	; (80084dc <pow+0xdc>)
 80084d8:	2600      	movs	r6, #0
 80084da:	e7e2      	b.n	80084a2 <pow+0xa2>
 80084dc:	3ff00000 	.word	0x3ff00000

080084e0 <sqrt>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	ed2d 8b02 	vpush	{d8}
 80084e6:	ec55 4b10 	vmov	r4, r5, d0
 80084ea:	f000 fd53 	bl	8008f94 <__ieee754_sqrt>
 80084ee:	4622      	mov	r2, r4
 80084f0:	462b      	mov	r3, r5
 80084f2:	4620      	mov	r0, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	eeb0 8a40 	vmov.f32	s16, s0
 80084fa:	eef0 8a60 	vmov.f32	s17, s1
 80084fe:	f7f8 fb15 	bl	8000b2c <__aeabi_dcmpun>
 8008502:	b990      	cbnz	r0, 800852a <sqrt+0x4a>
 8008504:	2200      	movs	r2, #0
 8008506:	2300      	movs	r3, #0
 8008508:	4620      	mov	r0, r4
 800850a:	4629      	mov	r1, r5
 800850c:	f7f8 fae6 	bl	8000adc <__aeabi_dcmplt>
 8008510:	b158      	cbz	r0, 800852a <sqrt+0x4a>
 8008512:	f7fd f85d 	bl	80055d0 <__errno>
 8008516:	2321      	movs	r3, #33	; 0x21
 8008518:	6003      	str	r3, [r0, #0]
 800851a:	2200      	movs	r2, #0
 800851c:	2300      	movs	r3, #0
 800851e:	4610      	mov	r0, r2
 8008520:	4619      	mov	r1, r3
 8008522:	f7f8 f993 	bl	800084c <__aeabi_ddiv>
 8008526:	ec41 0b18 	vmov	d8, r0, r1
 800852a:	eeb0 0a48 	vmov.f32	s0, s16
 800852e:	eef0 0a68 	vmov.f32	s1, s17
 8008532:	ecbd 8b02 	vpop	{d8}
 8008536:	bd38      	pop	{r3, r4, r5, pc}

08008538 <__ieee754_pow>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	ed2d 8b06 	vpush	{d8-d10}
 8008540:	b089      	sub	sp, #36	; 0x24
 8008542:	ed8d 1b00 	vstr	d1, [sp]
 8008546:	e9dd 2900 	ldrd	r2, r9, [sp]
 800854a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800854e:	ea58 0102 	orrs.w	r1, r8, r2
 8008552:	ec57 6b10 	vmov	r6, r7, d0
 8008556:	d115      	bne.n	8008584 <__ieee754_pow+0x4c>
 8008558:	19b3      	adds	r3, r6, r6
 800855a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800855e:	4152      	adcs	r2, r2
 8008560:	4299      	cmp	r1, r3
 8008562:	4b89      	ldr	r3, [pc, #548]	; (8008788 <__ieee754_pow+0x250>)
 8008564:	4193      	sbcs	r3, r2
 8008566:	f080 84d2 	bcs.w	8008f0e <__ieee754_pow+0x9d6>
 800856a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800856e:	4630      	mov	r0, r6
 8008570:	4639      	mov	r1, r7
 8008572:	f7f7 fe8b 	bl	800028c <__adddf3>
 8008576:	ec41 0b10 	vmov	d0, r0, r1
 800857a:	b009      	add	sp, #36	; 0x24
 800857c:	ecbd 8b06 	vpop	{d8-d10}
 8008580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008584:	4b81      	ldr	r3, [pc, #516]	; (800878c <__ieee754_pow+0x254>)
 8008586:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800858a:	429c      	cmp	r4, r3
 800858c:	ee10 aa10 	vmov	sl, s0
 8008590:	463d      	mov	r5, r7
 8008592:	dc06      	bgt.n	80085a2 <__ieee754_pow+0x6a>
 8008594:	d101      	bne.n	800859a <__ieee754_pow+0x62>
 8008596:	2e00      	cmp	r6, #0
 8008598:	d1e7      	bne.n	800856a <__ieee754_pow+0x32>
 800859a:	4598      	cmp	r8, r3
 800859c:	dc01      	bgt.n	80085a2 <__ieee754_pow+0x6a>
 800859e:	d10f      	bne.n	80085c0 <__ieee754_pow+0x88>
 80085a0:	b172      	cbz	r2, 80085c0 <__ieee754_pow+0x88>
 80085a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80085a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80085aa:	ea55 050a 	orrs.w	r5, r5, sl
 80085ae:	d1dc      	bne.n	800856a <__ieee754_pow+0x32>
 80085b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80085b4:	18db      	adds	r3, r3, r3
 80085b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80085ba:	4152      	adcs	r2, r2
 80085bc:	429d      	cmp	r5, r3
 80085be:	e7d0      	b.n	8008562 <__ieee754_pow+0x2a>
 80085c0:	2d00      	cmp	r5, #0
 80085c2:	da3b      	bge.n	800863c <__ieee754_pow+0x104>
 80085c4:	4b72      	ldr	r3, [pc, #456]	; (8008790 <__ieee754_pow+0x258>)
 80085c6:	4598      	cmp	r8, r3
 80085c8:	dc51      	bgt.n	800866e <__ieee754_pow+0x136>
 80085ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80085ce:	4598      	cmp	r8, r3
 80085d0:	f340 84ac 	ble.w	8008f2c <__ieee754_pow+0x9f4>
 80085d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80085d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80085dc:	2b14      	cmp	r3, #20
 80085de:	dd0f      	ble.n	8008600 <__ieee754_pow+0xc8>
 80085e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80085e4:	fa22 f103 	lsr.w	r1, r2, r3
 80085e8:	fa01 f303 	lsl.w	r3, r1, r3
 80085ec:	4293      	cmp	r3, r2
 80085ee:	f040 849d 	bne.w	8008f2c <__ieee754_pow+0x9f4>
 80085f2:	f001 0101 	and.w	r1, r1, #1
 80085f6:	f1c1 0302 	rsb	r3, r1, #2
 80085fa:	9304      	str	r3, [sp, #16]
 80085fc:	b182      	cbz	r2, 8008620 <__ieee754_pow+0xe8>
 80085fe:	e05f      	b.n	80086c0 <__ieee754_pow+0x188>
 8008600:	2a00      	cmp	r2, #0
 8008602:	d15b      	bne.n	80086bc <__ieee754_pow+0x184>
 8008604:	f1c3 0314 	rsb	r3, r3, #20
 8008608:	fa48 f103 	asr.w	r1, r8, r3
 800860c:	fa01 f303 	lsl.w	r3, r1, r3
 8008610:	4543      	cmp	r3, r8
 8008612:	f040 8488 	bne.w	8008f26 <__ieee754_pow+0x9ee>
 8008616:	f001 0101 	and.w	r1, r1, #1
 800861a:	f1c1 0302 	rsb	r3, r1, #2
 800861e:	9304      	str	r3, [sp, #16]
 8008620:	4b5c      	ldr	r3, [pc, #368]	; (8008794 <__ieee754_pow+0x25c>)
 8008622:	4598      	cmp	r8, r3
 8008624:	d132      	bne.n	800868c <__ieee754_pow+0x154>
 8008626:	f1b9 0f00 	cmp.w	r9, #0
 800862a:	f280 8478 	bge.w	8008f1e <__ieee754_pow+0x9e6>
 800862e:	4959      	ldr	r1, [pc, #356]	; (8008794 <__ieee754_pow+0x25c>)
 8008630:	4632      	mov	r2, r6
 8008632:	463b      	mov	r3, r7
 8008634:	2000      	movs	r0, #0
 8008636:	f7f8 f909 	bl	800084c <__aeabi_ddiv>
 800863a:	e79c      	b.n	8008576 <__ieee754_pow+0x3e>
 800863c:	2300      	movs	r3, #0
 800863e:	9304      	str	r3, [sp, #16]
 8008640:	2a00      	cmp	r2, #0
 8008642:	d13d      	bne.n	80086c0 <__ieee754_pow+0x188>
 8008644:	4b51      	ldr	r3, [pc, #324]	; (800878c <__ieee754_pow+0x254>)
 8008646:	4598      	cmp	r8, r3
 8008648:	d1ea      	bne.n	8008620 <__ieee754_pow+0xe8>
 800864a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800864e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008652:	ea53 030a 	orrs.w	r3, r3, sl
 8008656:	f000 845a 	beq.w	8008f0e <__ieee754_pow+0x9d6>
 800865a:	4b4f      	ldr	r3, [pc, #316]	; (8008798 <__ieee754_pow+0x260>)
 800865c:	429c      	cmp	r4, r3
 800865e:	dd08      	ble.n	8008672 <__ieee754_pow+0x13a>
 8008660:	f1b9 0f00 	cmp.w	r9, #0
 8008664:	f2c0 8457 	blt.w	8008f16 <__ieee754_pow+0x9de>
 8008668:	e9dd 0100 	ldrd	r0, r1, [sp]
 800866c:	e783      	b.n	8008576 <__ieee754_pow+0x3e>
 800866e:	2302      	movs	r3, #2
 8008670:	e7e5      	b.n	800863e <__ieee754_pow+0x106>
 8008672:	f1b9 0f00 	cmp.w	r9, #0
 8008676:	f04f 0000 	mov.w	r0, #0
 800867a:	f04f 0100 	mov.w	r1, #0
 800867e:	f6bf af7a 	bge.w	8008576 <__ieee754_pow+0x3e>
 8008682:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008686:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800868a:	e774      	b.n	8008576 <__ieee754_pow+0x3e>
 800868c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008690:	d106      	bne.n	80086a0 <__ieee754_pow+0x168>
 8008692:	4632      	mov	r2, r6
 8008694:	463b      	mov	r3, r7
 8008696:	4630      	mov	r0, r6
 8008698:	4639      	mov	r1, r7
 800869a:	f7f7 ffad 	bl	80005f8 <__aeabi_dmul>
 800869e:	e76a      	b.n	8008576 <__ieee754_pow+0x3e>
 80086a0:	4b3e      	ldr	r3, [pc, #248]	; (800879c <__ieee754_pow+0x264>)
 80086a2:	4599      	cmp	r9, r3
 80086a4:	d10c      	bne.n	80086c0 <__ieee754_pow+0x188>
 80086a6:	2d00      	cmp	r5, #0
 80086a8:	db0a      	blt.n	80086c0 <__ieee754_pow+0x188>
 80086aa:	ec47 6b10 	vmov	d0, r6, r7
 80086ae:	b009      	add	sp, #36	; 0x24
 80086b0:	ecbd 8b06 	vpop	{d8-d10}
 80086b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b8:	f000 bc6c 	b.w	8008f94 <__ieee754_sqrt>
 80086bc:	2300      	movs	r3, #0
 80086be:	9304      	str	r3, [sp, #16]
 80086c0:	ec47 6b10 	vmov	d0, r6, r7
 80086c4:	f000 fd48 	bl	8009158 <fabs>
 80086c8:	ec51 0b10 	vmov	r0, r1, d0
 80086cc:	f1ba 0f00 	cmp.w	sl, #0
 80086d0:	d129      	bne.n	8008726 <__ieee754_pow+0x1ee>
 80086d2:	b124      	cbz	r4, 80086de <__ieee754_pow+0x1a6>
 80086d4:	4b2f      	ldr	r3, [pc, #188]	; (8008794 <__ieee754_pow+0x25c>)
 80086d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80086da:	429a      	cmp	r2, r3
 80086dc:	d123      	bne.n	8008726 <__ieee754_pow+0x1ee>
 80086de:	f1b9 0f00 	cmp.w	r9, #0
 80086e2:	da05      	bge.n	80086f0 <__ieee754_pow+0x1b8>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	2000      	movs	r0, #0
 80086ea:	492a      	ldr	r1, [pc, #168]	; (8008794 <__ieee754_pow+0x25c>)
 80086ec:	f7f8 f8ae 	bl	800084c <__aeabi_ddiv>
 80086f0:	2d00      	cmp	r5, #0
 80086f2:	f6bf af40 	bge.w	8008576 <__ieee754_pow+0x3e>
 80086f6:	9b04      	ldr	r3, [sp, #16]
 80086f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80086fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008700:	4323      	orrs	r3, r4
 8008702:	d108      	bne.n	8008716 <__ieee754_pow+0x1de>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4610      	mov	r0, r2
 800870a:	4619      	mov	r1, r3
 800870c:	f7f7 fdbc 	bl	8000288 <__aeabi_dsub>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	e78f      	b.n	8008636 <__ieee754_pow+0xfe>
 8008716:	9b04      	ldr	r3, [sp, #16]
 8008718:	2b01      	cmp	r3, #1
 800871a:	f47f af2c 	bne.w	8008576 <__ieee754_pow+0x3e>
 800871e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008722:	4619      	mov	r1, r3
 8008724:	e727      	b.n	8008576 <__ieee754_pow+0x3e>
 8008726:	0feb      	lsrs	r3, r5, #31
 8008728:	3b01      	subs	r3, #1
 800872a:	9306      	str	r3, [sp, #24]
 800872c:	9a06      	ldr	r2, [sp, #24]
 800872e:	9b04      	ldr	r3, [sp, #16]
 8008730:	4313      	orrs	r3, r2
 8008732:	d102      	bne.n	800873a <__ieee754_pow+0x202>
 8008734:	4632      	mov	r2, r6
 8008736:	463b      	mov	r3, r7
 8008738:	e7e6      	b.n	8008708 <__ieee754_pow+0x1d0>
 800873a:	4b19      	ldr	r3, [pc, #100]	; (80087a0 <__ieee754_pow+0x268>)
 800873c:	4598      	cmp	r8, r3
 800873e:	f340 80fb 	ble.w	8008938 <__ieee754_pow+0x400>
 8008742:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008746:	4598      	cmp	r8, r3
 8008748:	4b13      	ldr	r3, [pc, #76]	; (8008798 <__ieee754_pow+0x260>)
 800874a:	dd0c      	ble.n	8008766 <__ieee754_pow+0x22e>
 800874c:	429c      	cmp	r4, r3
 800874e:	dc0f      	bgt.n	8008770 <__ieee754_pow+0x238>
 8008750:	f1b9 0f00 	cmp.w	r9, #0
 8008754:	da0f      	bge.n	8008776 <__ieee754_pow+0x23e>
 8008756:	2000      	movs	r0, #0
 8008758:	b009      	add	sp, #36	; 0x24
 800875a:	ecbd 8b06 	vpop	{d8-d10}
 800875e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008762:	f000 bcf0 	b.w	8009146 <__math_oflow>
 8008766:	429c      	cmp	r4, r3
 8008768:	dbf2      	blt.n	8008750 <__ieee754_pow+0x218>
 800876a:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <__ieee754_pow+0x25c>)
 800876c:	429c      	cmp	r4, r3
 800876e:	dd19      	ble.n	80087a4 <__ieee754_pow+0x26c>
 8008770:	f1b9 0f00 	cmp.w	r9, #0
 8008774:	dcef      	bgt.n	8008756 <__ieee754_pow+0x21e>
 8008776:	2000      	movs	r0, #0
 8008778:	b009      	add	sp, #36	; 0x24
 800877a:	ecbd 8b06 	vpop	{d8-d10}
 800877e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008782:	f000 bcd7 	b.w	8009134 <__math_uflow>
 8008786:	bf00      	nop
 8008788:	fff00000 	.word	0xfff00000
 800878c:	7ff00000 	.word	0x7ff00000
 8008790:	433fffff 	.word	0x433fffff
 8008794:	3ff00000 	.word	0x3ff00000
 8008798:	3fefffff 	.word	0x3fefffff
 800879c:	3fe00000 	.word	0x3fe00000
 80087a0:	41e00000 	.word	0x41e00000
 80087a4:	4b60      	ldr	r3, [pc, #384]	; (8008928 <__ieee754_pow+0x3f0>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	f7f7 fd6e 	bl	8000288 <__aeabi_dsub>
 80087ac:	a354      	add	r3, pc, #336	; (adr r3, 8008900 <__ieee754_pow+0x3c8>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	4604      	mov	r4, r0
 80087b4:	460d      	mov	r5, r1
 80087b6:	f7f7 ff1f 	bl	80005f8 <__aeabi_dmul>
 80087ba:	a353      	add	r3, pc, #332	; (adr r3, 8008908 <__ieee754_pow+0x3d0>)
 80087bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c0:	4606      	mov	r6, r0
 80087c2:	460f      	mov	r7, r1
 80087c4:	4620      	mov	r0, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	f7f7 ff16 	bl	80005f8 <__aeabi_dmul>
 80087cc:	4b57      	ldr	r3, [pc, #348]	; (800892c <__ieee754_pow+0x3f4>)
 80087ce:	4682      	mov	sl, r0
 80087d0:	468b      	mov	fp, r1
 80087d2:	2200      	movs	r2, #0
 80087d4:	4620      	mov	r0, r4
 80087d6:	4629      	mov	r1, r5
 80087d8:	f7f7 ff0e 	bl	80005f8 <__aeabi_dmul>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	a14b      	add	r1, pc, #300	; (adr r1, 8008910 <__ieee754_pow+0x3d8>)
 80087e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087e6:	f7f7 fd4f 	bl	8000288 <__aeabi_dsub>
 80087ea:	4622      	mov	r2, r4
 80087ec:	462b      	mov	r3, r5
 80087ee:	f7f7 ff03 	bl	80005f8 <__aeabi_dmul>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	2000      	movs	r0, #0
 80087f8:	494d      	ldr	r1, [pc, #308]	; (8008930 <__ieee754_pow+0x3f8>)
 80087fa:	f7f7 fd45 	bl	8000288 <__aeabi_dsub>
 80087fe:	4622      	mov	r2, r4
 8008800:	4680      	mov	r8, r0
 8008802:	4689      	mov	r9, r1
 8008804:	462b      	mov	r3, r5
 8008806:	4620      	mov	r0, r4
 8008808:	4629      	mov	r1, r5
 800880a:	f7f7 fef5 	bl	80005f8 <__aeabi_dmul>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4640      	mov	r0, r8
 8008814:	4649      	mov	r1, r9
 8008816:	f7f7 feef 	bl	80005f8 <__aeabi_dmul>
 800881a:	a33f      	add	r3, pc, #252	; (adr r3, 8008918 <__ieee754_pow+0x3e0>)
 800881c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008820:	f7f7 feea 	bl	80005f8 <__aeabi_dmul>
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	4650      	mov	r0, sl
 800882a:	4659      	mov	r1, fp
 800882c:	f7f7 fd2c 	bl	8000288 <__aeabi_dsub>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4680      	mov	r8, r0
 8008836:	4689      	mov	r9, r1
 8008838:	4630      	mov	r0, r6
 800883a:	4639      	mov	r1, r7
 800883c:	f7f7 fd26 	bl	800028c <__adddf3>
 8008840:	2000      	movs	r0, #0
 8008842:	4632      	mov	r2, r6
 8008844:	463b      	mov	r3, r7
 8008846:	4604      	mov	r4, r0
 8008848:	460d      	mov	r5, r1
 800884a:	f7f7 fd1d 	bl	8000288 <__aeabi_dsub>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	4640      	mov	r0, r8
 8008854:	4649      	mov	r1, r9
 8008856:	f7f7 fd17 	bl	8000288 <__aeabi_dsub>
 800885a:	9b04      	ldr	r3, [sp, #16]
 800885c:	9a06      	ldr	r2, [sp, #24]
 800885e:	3b01      	subs	r3, #1
 8008860:	4313      	orrs	r3, r2
 8008862:	4682      	mov	sl, r0
 8008864:	468b      	mov	fp, r1
 8008866:	f040 81e7 	bne.w	8008c38 <__ieee754_pow+0x700>
 800886a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008920 <__ieee754_pow+0x3e8>
 800886e:	eeb0 8a47 	vmov.f32	s16, s14
 8008872:	eef0 8a67 	vmov.f32	s17, s15
 8008876:	e9dd 6700 	ldrd	r6, r7, [sp]
 800887a:	2600      	movs	r6, #0
 800887c:	4632      	mov	r2, r6
 800887e:	463b      	mov	r3, r7
 8008880:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008884:	f7f7 fd00 	bl	8000288 <__aeabi_dsub>
 8008888:	4622      	mov	r2, r4
 800888a:	462b      	mov	r3, r5
 800888c:	f7f7 feb4 	bl	80005f8 <__aeabi_dmul>
 8008890:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008894:	4680      	mov	r8, r0
 8008896:	4689      	mov	r9, r1
 8008898:	4650      	mov	r0, sl
 800889a:	4659      	mov	r1, fp
 800889c:	f7f7 feac 	bl	80005f8 <__aeabi_dmul>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4640      	mov	r0, r8
 80088a6:	4649      	mov	r1, r9
 80088a8:	f7f7 fcf0 	bl	800028c <__adddf3>
 80088ac:	4632      	mov	r2, r6
 80088ae:	463b      	mov	r3, r7
 80088b0:	4680      	mov	r8, r0
 80088b2:	4689      	mov	r9, r1
 80088b4:	4620      	mov	r0, r4
 80088b6:	4629      	mov	r1, r5
 80088b8:	f7f7 fe9e 	bl	80005f8 <__aeabi_dmul>
 80088bc:	460b      	mov	r3, r1
 80088be:	4604      	mov	r4, r0
 80088c0:	460d      	mov	r5, r1
 80088c2:	4602      	mov	r2, r0
 80088c4:	4649      	mov	r1, r9
 80088c6:	4640      	mov	r0, r8
 80088c8:	f7f7 fce0 	bl	800028c <__adddf3>
 80088cc:	4b19      	ldr	r3, [pc, #100]	; (8008934 <__ieee754_pow+0x3fc>)
 80088ce:	4299      	cmp	r1, r3
 80088d0:	ec45 4b19 	vmov	d9, r4, r5
 80088d4:	4606      	mov	r6, r0
 80088d6:	460f      	mov	r7, r1
 80088d8:	468b      	mov	fp, r1
 80088da:	f340 82f1 	ble.w	8008ec0 <__ieee754_pow+0x988>
 80088de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80088e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80088e6:	4303      	orrs	r3, r0
 80088e8:	f000 81e4 	beq.w	8008cb4 <__ieee754_pow+0x77c>
 80088ec:	ec51 0b18 	vmov	r0, r1, d8
 80088f0:	2200      	movs	r2, #0
 80088f2:	2300      	movs	r3, #0
 80088f4:	f7f8 f8f2 	bl	8000adc <__aeabi_dcmplt>
 80088f8:	3800      	subs	r0, #0
 80088fa:	bf18      	it	ne
 80088fc:	2001      	movne	r0, #1
 80088fe:	e72b      	b.n	8008758 <__ieee754_pow+0x220>
 8008900:	60000000 	.word	0x60000000
 8008904:	3ff71547 	.word	0x3ff71547
 8008908:	f85ddf44 	.word	0xf85ddf44
 800890c:	3e54ae0b 	.word	0x3e54ae0b
 8008910:	55555555 	.word	0x55555555
 8008914:	3fd55555 	.word	0x3fd55555
 8008918:	652b82fe 	.word	0x652b82fe
 800891c:	3ff71547 	.word	0x3ff71547
 8008920:	00000000 	.word	0x00000000
 8008924:	bff00000 	.word	0xbff00000
 8008928:	3ff00000 	.word	0x3ff00000
 800892c:	3fd00000 	.word	0x3fd00000
 8008930:	3fe00000 	.word	0x3fe00000
 8008934:	408fffff 	.word	0x408fffff
 8008938:	4bd5      	ldr	r3, [pc, #852]	; (8008c90 <__ieee754_pow+0x758>)
 800893a:	402b      	ands	r3, r5
 800893c:	2200      	movs	r2, #0
 800893e:	b92b      	cbnz	r3, 800894c <__ieee754_pow+0x414>
 8008940:	4bd4      	ldr	r3, [pc, #848]	; (8008c94 <__ieee754_pow+0x75c>)
 8008942:	f7f7 fe59 	bl	80005f8 <__aeabi_dmul>
 8008946:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800894a:	460c      	mov	r4, r1
 800894c:	1523      	asrs	r3, r4, #20
 800894e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008952:	4413      	add	r3, r2
 8008954:	9305      	str	r3, [sp, #20]
 8008956:	4bd0      	ldr	r3, [pc, #832]	; (8008c98 <__ieee754_pow+0x760>)
 8008958:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800895c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008960:	429c      	cmp	r4, r3
 8008962:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008966:	dd08      	ble.n	800897a <__ieee754_pow+0x442>
 8008968:	4bcc      	ldr	r3, [pc, #816]	; (8008c9c <__ieee754_pow+0x764>)
 800896a:	429c      	cmp	r4, r3
 800896c:	f340 8162 	ble.w	8008c34 <__ieee754_pow+0x6fc>
 8008970:	9b05      	ldr	r3, [sp, #20]
 8008972:	3301      	adds	r3, #1
 8008974:	9305      	str	r3, [sp, #20]
 8008976:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800897a:	2400      	movs	r4, #0
 800897c:	00e3      	lsls	r3, r4, #3
 800897e:	9307      	str	r3, [sp, #28]
 8008980:	4bc7      	ldr	r3, [pc, #796]	; (8008ca0 <__ieee754_pow+0x768>)
 8008982:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008986:	ed93 7b00 	vldr	d7, [r3]
 800898a:	4629      	mov	r1, r5
 800898c:	ec53 2b17 	vmov	r2, r3, d7
 8008990:	eeb0 9a47 	vmov.f32	s18, s14
 8008994:	eef0 9a67 	vmov.f32	s19, s15
 8008998:	4682      	mov	sl, r0
 800899a:	f7f7 fc75 	bl	8000288 <__aeabi_dsub>
 800899e:	4652      	mov	r2, sl
 80089a0:	4606      	mov	r6, r0
 80089a2:	460f      	mov	r7, r1
 80089a4:	462b      	mov	r3, r5
 80089a6:	ec51 0b19 	vmov	r0, r1, d9
 80089aa:	f7f7 fc6f 	bl	800028c <__adddf3>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	2000      	movs	r0, #0
 80089b4:	49bb      	ldr	r1, [pc, #748]	; (8008ca4 <__ieee754_pow+0x76c>)
 80089b6:	f7f7 ff49 	bl	800084c <__aeabi_ddiv>
 80089ba:	ec41 0b1a 	vmov	d10, r0, r1
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	4630      	mov	r0, r6
 80089c4:	4639      	mov	r1, r7
 80089c6:	f7f7 fe17 	bl	80005f8 <__aeabi_dmul>
 80089ca:	2300      	movs	r3, #0
 80089cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089d0:	9302      	str	r3, [sp, #8]
 80089d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089d6:	46ab      	mov	fp, r5
 80089d8:	106d      	asrs	r5, r5, #1
 80089da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80089de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80089e2:	ec41 0b18 	vmov	d8, r0, r1
 80089e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80089ea:	2200      	movs	r2, #0
 80089ec:	4640      	mov	r0, r8
 80089ee:	4649      	mov	r1, r9
 80089f0:	4614      	mov	r4, r2
 80089f2:	461d      	mov	r5, r3
 80089f4:	f7f7 fe00 	bl	80005f8 <__aeabi_dmul>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4630      	mov	r0, r6
 80089fe:	4639      	mov	r1, r7
 8008a00:	f7f7 fc42 	bl	8000288 <__aeabi_dsub>
 8008a04:	ec53 2b19 	vmov	r2, r3, d9
 8008a08:	4606      	mov	r6, r0
 8008a0a:	460f      	mov	r7, r1
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	4629      	mov	r1, r5
 8008a10:	f7f7 fc3a 	bl	8000288 <__aeabi_dsub>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	4650      	mov	r0, sl
 8008a1a:	4659      	mov	r1, fp
 8008a1c:	f7f7 fc34 	bl	8000288 <__aeabi_dsub>
 8008a20:	4642      	mov	r2, r8
 8008a22:	464b      	mov	r3, r9
 8008a24:	f7f7 fde8 	bl	80005f8 <__aeabi_dmul>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	4639      	mov	r1, r7
 8008a30:	f7f7 fc2a 	bl	8000288 <__aeabi_dsub>
 8008a34:	ec53 2b1a 	vmov	r2, r3, d10
 8008a38:	f7f7 fdde 	bl	80005f8 <__aeabi_dmul>
 8008a3c:	ec53 2b18 	vmov	r2, r3, d8
 8008a40:	ec41 0b19 	vmov	d9, r0, r1
 8008a44:	ec51 0b18 	vmov	r0, r1, d8
 8008a48:	f7f7 fdd6 	bl	80005f8 <__aeabi_dmul>
 8008a4c:	a37c      	add	r3, pc, #496	; (adr r3, 8008c40 <__ieee754_pow+0x708>)
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	4604      	mov	r4, r0
 8008a54:	460d      	mov	r5, r1
 8008a56:	f7f7 fdcf 	bl	80005f8 <__aeabi_dmul>
 8008a5a:	a37b      	add	r3, pc, #492	; (adr r3, 8008c48 <__ieee754_pow+0x710>)
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f7f7 fc14 	bl	800028c <__adddf3>
 8008a64:	4622      	mov	r2, r4
 8008a66:	462b      	mov	r3, r5
 8008a68:	f7f7 fdc6 	bl	80005f8 <__aeabi_dmul>
 8008a6c:	a378      	add	r3, pc, #480	; (adr r3, 8008c50 <__ieee754_pow+0x718>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f7f7 fc0b 	bl	800028c <__adddf3>
 8008a76:	4622      	mov	r2, r4
 8008a78:	462b      	mov	r3, r5
 8008a7a:	f7f7 fdbd 	bl	80005f8 <__aeabi_dmul>
 8008a7e:	a376      	add	r3, pc, #472	; (adr r3, 8008c58 <__ieee754_pow+0x720>)
 8008a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a84:	f7f7 fc02 	bl	800028c <__adddf3>
 8008a88:	4622      	mov	r2, r4
 8008a8a:	462b      	mov	r3, r5
 8008a8c:	f7f7 fdb4 	bl	80005f8 <__aeabi_dmul>
 8008a90:	a373      	add	r3, pc, #460	; (adr r3, 8008c60 <__ieee754_pow+0x728>)
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	f7f7 fbf9 	bl	800028c <__adddf3>
 8008a9a:	4622      	mov	r2, r4
 8008a9c:	462b      	mov	r3, r5
 8008a9e:	f7f7 fdab 	bl	80005f8 <__aeabi_dmul>
 8008aa2:	a371      	add	r3, pc, #452	; (adr r3, 8008c68 <__ieee754_pow+0x730>)
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	f7f7 fbf0 	bl	800028c <__adddf3>
 8008aac:	4622      	mov	r2, r4
 8008aae:	4606      	mov	r6, r0
 8008ab0:	460f      	mov	r7, r1
 8008ab2:	462b      	mov	r3, r5
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	f7f7 fd9e 	bl	80005f8 <__aeabi_dmul>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	f7f7 fd98 	bl	80005f8 <__aeabi_dmul>
 8008ac8:	4642      	mov	r2, r8
 8008aca:	4604      	mov	r4, r0
 8008acc:	460d      	mov	r5, r1
 8008ace:	464b      	mov	r3, r9
 8008ad0:	ec51 0b18 	vmov	r0, r1, d8
 8008ad4:	f7f7 fbda 	bl	800028c <__adddf3>
 8008ad8:	ec53 2b19 	vmov	r2, r3, d9
 8008adc:	f7f7 fd8c 	bl	80005f8 <__aeabi_dmul>
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	462b      	mov	r3, r5
 8008ae4:	f7f7 fbd2 	bl	800028c <__adddf3>
 8008ae8:	4642      	mov	r2, r8
 8008aea:	4682      	mov	sl, r0
 8008aec:	468b      	mov	fp, r1
 8008aee:	464b      	mov	r3, r9
 8008af0:	4640      	mov	r0, r8
 8008af2:	4649      	mov	r1, r9
 8008af4:	f7f7 fd80 	bl	80005f8 <__aeabi_dmul>
 8008af8:	4b6b      	ldr	r3, [pc, #428]	; (8008ca8 <__ieee754_pow+0x770>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	4606      	mov	r6, r0
 8008afe:	460f      	mov	r7, r1
 8008b00:	f7f7 fbc4 	bl	800028c <__adddf3>
 8008b04:	4652      	mov	r2, sl
 8008b06:	465b      	mov	r3, fp
 8008b08:	f7f7 fbc0 	bl	800028c <__adddf3>
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	4604      	mov	r4, r0
 8008b10:	460d      	mov	r5, r1
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4640      	mov	r0, r8
 8008b18:	4649      	mov	r1, r9
 8008b1a:	f7f7 fd6d 	bl	80005f8 <__aeabi_dmul>
 8008b1e:	4b62      	ldr	r3, [pc, #392]	; (8008ca8 <__ieee754_pow+0x770>)
 8008b20:	4680      	mov	r8, r0
 8008b22:	4689      	mov	r9, r1
 8008b24:	2200      	movs	r2, #0
 8008b26:	4620      	mov	r0, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f7f7 fbad 	bl	8000288 <__aeabi_dsub>
 8008b2e:	4632      	mov	r2, r6
 8008b30:	463b      	mov	r3, r7
 8008b32:	f7f7 fba9 	bl	8000288 <__aeabi_dsub>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4650      	mov	r0, sl
 8008b3c:	4659      	mov	r1, fp
 8008b3e:	f7f7 fba3 	bl	8000288 <__aeabi_dsub>
 8008b42:	ec53 2b18 	vmov	r2, r3, d8
 8008b46:	f7f7 fd57 	bl	80005f8 <__aeabi_dmul>
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	460f      	mov	r7, r1
 8008b50:	462b      	mov	r3, r5
 8008b52:	ec51 0b19 	vmov	r0, r1, d9
 8008b56:	f7f7 fd4f 	bl	80005f8 <__aeabi_dmul>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4639      	mov	r1, r7
 8008b62:	f7f7 fb93 	bl	800028c <__adddf3>
 8008b66:	4606      	mov	r6, r0
 8008b68:	460f      	mov	r7, r1
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4640      	mov	r0, r8
 8008b70:	4649      	mov	r1, r9
 8008b72:	f7f7 fb8b 	bl	800028c <__adddf3>
 8008b76:	a33e      	add	r3, pc, #248	; (adr r3, 8008c70 <__ieee754_pow+0x738>)
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	4604      	mov	r4, r0
 8008b80:	460d      	mov	r5, r1
 8008b82:	f7f7 fd39 	bl	80005f8 <__aeabi_dmul>
 8008b86:	4642      	mov	r2, r8
 8008b88:	ec41 0b18 	vmov	d8, r0, r1
 8008b8c:	464b      	mov	r3, r9
 8008b8e:	4620      	mov	r0, r4
 8008b90:	4629      	mov	r1, r5
 8008b92:	f7f7 fb79 	bl	8000288 <__aeabi_dsub>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	4639      	mov	r1, r7
 8008b9e:	f7f7 fb73 	bl	8000288 <__aeabi_dsub>
 8008ba2:	a335      	add	r3, pc, #212	; (adr r3, 8008c78 <__ieee754_pow+0x740>)
 8008ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba8:	f7f7 fd26 	bl	80005f8 <__aeabi_dmul>
 8008bac:	a334      	add	r3, pc, #208	; (adr r3, 8008c80 <__ieee754_pow+0x748>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460f      	mov	r7, r1
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	4629      	mov	r1, r5
 8008bba:	f7f7 fd1d 	bl	80005f8 <__aeabi_dmul>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	f7f7 fb61 	bl	800028c <__adddf3>
 8008bca:	9a07      	ldr	r2, [sp, #28]
 8008bcc:	4b37      	ldr	r3, [pc, #220]	; (8008cac <__ieee754_pow+0x774>)
 8008bce:	4413      	add	r3, r2
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f7f7 fb5a 	bl	800028c <__adddf3>
 8008bd8:	4682      	mov	sl, r0
 8008bda:	9805      	ldr	r0, [sp, #20]
 8008bdc:	468b      	mov	fp, r1
 8008bde:	f7f7 fca1 	bl	8000524 <__aeabi_i2d>
 8008be2:	9a07      	ldr	r2, [sp, #28]
 8008be4:	4b32      	ldr	r3, [pc, #200]	; (8008cb0 <__ieee754_pow+0x778>)
 8008be6:	4413      	add	r3, r2
 8008be8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bec:	4606      	mov	r6, r0
 8008bee:	460f      	mov	r7, r1
 8008bf0:	4652      	mov	r2, sl
 8008bf2:	465b      	mov	r3, fp
 8008bf4:	ec51 0b18 	vmov	r0, r1, d8
 8008bf8:	f7f7 fb48 	bl	800028c <__adddf3>
 8008bfc:	4642      	mov	r2, r8
 8008bfe:	464b      	mov	r3, r9
 8008c00:	f7f7 fb44 	bl	800028c <__adddf3>
 8008c04:	4632      	mov	r2, r6
 8008c06:	463b      	mov	r3, r7
 8008c08:	f7f7 fb40 	bl	800028c <__adddf3>
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	4632      	mov	r2, r6
 8008c10:	463b      	mov	r3, r7
 8008c12:	4604      	mov	r4, r0
 8008c14:	460d      	mov	r5, r1
 8008c16:	f7f7 fb37 	bl	8000288 <__aeabi_dsub>
 8008c1a:	4642      	mov	r2, r8
 8008c1c:	464b      	mov	r3, r9
 8008c1e:	f7f7 fb33 	bl	8000288 <__aeabi_dsub>
 8008c22:	ec53 2b18 	vmov	r2, r3, d8
 8008c26:	f7f7 fb2f 	bl	8000288 <__aeabi_dsub>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4650      	mov	r0, sl
 8008c30:	4659      	mov	r1, fp
 8008c32:	e610      	b.n	8008856 <__ieee754_pow+0x31e>
 8008c34:	2401      	movs	r4, #1
 8008c36:	e6a1      	b.n	800897c <__ieee754_pow+0x444>
 8008c38:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008c88 <__ieee754_pow+0x750>
 8008c3c:	e617      	b.n	800886e <__ieee754_pow+0x336>
 8008c3e:	bf00      	nop
 8008c40:	4a454eef 	.word	0x4a454eef
 8008c44:	3fca7e28 	.word	0x3fca7e28
 8008c48:	93c9db65 	.word	0x93c9db65
 8008c4c:	3fcd864a 	.word	0x3fcd864a
 8008c50:	a91d4101 	.word	0xa91d4101
 8008c54:	3fd17460 	.word	0x3fd17460
 8008c58:	518f264d 	.word	0x518f264d
 8008c5c:	3fd55555 	.word	0x3fd55555
 8008c60:	db6fabff 	.word	0xdb6fabff
 8008c64:	3fdb6db6 	.word	0x3fdb6db6
 8008c68:	33333303 	.word	0x33333303
 8008c6c:	3fe33333 	.word	0x3fe33333
 8008c70:	e0000000 	.word	0xe0000000
 8008c74:	3feec709 	.word	0x3feec709
 8008c78:	dc3a03fd 	.word	0xdc3a03fd
 8008c7c:	3feec709 	.word	0x3feec709
 8008c80:	145b01f5 	.word	0x145b01f5
 8008c84:	be3e2fe0 	.word	0xbe3e2fe0
 8008c88:	00000000 	.word	0x00000000
 8008c8c:	3ff00000 	.word	0x3ff00000
 8008c90:	7ff00000 	.word	0x7ff00000
 8008c94:	43400000 	.word	0x43400000
 8008c98:	0003988e 	.word	0x0003988e
 8008c9c:	000bb679 	.word	0x000bb679
 8008ca0:	080099a0 	.word	0x080099a0
 8008ca4:	3ff00000 	.word	0x3ff00000
 8008ca8:	40080000 	.word	0x40080000
 8008cac:	080099c0 	.word	0x080099c0
 8008cb0:	080099b0 	.word	0x080099b0
 8008cb4:	a3b5      	add	r3, pc, #724	; (adr r3, 8008f8c <__ieee754_pow+0xa54>)
 8008cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cba:	4640      	mov	r0, r8
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	f7f7 fae5 	bl	800028c <__adddf3>
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	ec41 0b1a 	vmov	d10, r0, r1
 8008cc8:	462b      	mov	r3, r5
 8008cca:	4630      	mov	r0, r6
 8008ccc:	4639      	mov	r1, r7
 8008cce:	f7f7 fadb 	bl	8000288 <__aeabi_dsub>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	ec51 0b1a 	vmov	r0, r1, d10
 8008cda:	f7f7 ff1d 	bl	8000b18 <__aeabi_dcmpgt>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	f47f ae04 	bne.w	80088ec <__ieee754_pow+0x3b4>
 8008ce4:	4aa4      	ldr	r2, [pc, #656]	; (8008f78 <__ieee754_pow+0xa40>)
 8008ce6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008cea:	4293      	cmp	r3, r2
 8008cec:	f340 8108 	ble.w	8008f00 <__ieee754_pow+0x9c8>
 8008cf0:	151b      	asrs	r3, r3, #20
 8008cf2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008cf6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008cfa:	fa4a f303 	asr.w	r3, sl, r3
 8008cfe:	445b      	add	r3, fp
 8008d00:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008d04:	4e9d      	ldr	r6, [pc, #628]	; (8008f7c <__ieee754_pow+0xa44>)
 8008d06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008d0a:	4116      	asrs	r6, r2
 8008d0c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008d10:	2000      	movs	r0, #0
 8008d12:	ea23 0106 	bic.w	r1, r3, r6
 8008d16:	f1c2 0214 	rsb	r2, r2, #20
 8008d1a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008d1e:	fa4a fa02 	asr.w	sl, sl, r2
 8008d22:	f1bb 0f00 	cmp.w	fp, #0
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	bfb8      	it	lt
 8008d30:	f1ca 0a00 	rsblt	sl, sl, #0
 8008d34:	f7f7 faa8 	bl	8000288 <__aeabi_dsub>
 8008d38:	ec41 0b19 	vmov	d9, r0, r1
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	464b      	mov	r3, r9
 8008d40:	ec51 0b19 	vmov	r0, r1, d9
 8008d44:	f7f7 faa2 	bl	800028c <__adddf3>
 8008d48:	a37b      	add	r3, pc, #492	; (adr r3, 8008f38 <__ieee754_pow+0xa00>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	2000      	movs	r0, #0
 8008d50:	4604      	mov	r4, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	f7f7 fc50 	bl	80005f8 <__aeabi_dmul>
 8008d58:	ec53 2b19 	vmov	r2, r3, d9
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	460f      	mov	r7, r1
 8008d60:	4620      	mov	r0, r4
 8008d62:	4629      	mov	r1, r5
 8008d64:	f7f7 fa90 	bl	8000288 <__aeabi_dsub>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4640      	mov	r0, r8
 8008d6e:	4649      	mov	r1, r9
 8008d70:	f7f7 fa8a 	bl	8000288 <__aeabi_dsub>
 8008d74:	a372      	add	r3, pc, #456	; (adr r3, 8008f40 <__ieee754_pow+0xa08>)
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	f7f7 fc3d 	bl	80005f8 <__aeabi_dmul>
 8008d7e:	a372      	add	r3, pc, #456	; (adr r3, 8008f48 <__ieee754_pow+0xa10>)
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	4680      	mov	r8, r0
 8008d86:	4689      	mov	r9, r1
 8008d88:	4620      	mov	r0, r4
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	f7f7 fc34 	bl	80005f8 <__aeabi_dmul>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4640      	mov	r0, r8
 8008d96:	4649      	mov	r1, r9
 8008d98:	f7f7 fa78 	bl	800028c <__adddf3>
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	460d      	mov	r5, r1
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4630      	mov	r0, r6
 8008da6:	4639      	mov	r1, r7
 8008da8:	f7f7 fa70 	bl	800028c <__adddf3>
 8008dac:	4632      	mov	r2, r6
 8008dae:	463b      	mov	r3, r7
 8008db0:	4680      	mov	r8, r0
 8008db2:	4689      	mov	r9, r1
 8008db4:	f7f7 fa68 	bl	8000288 <__aeabi_dsub>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	f7f7 fa62 	bl	8000288 <__aeabi_dsub>
 8008dc4:	4642      	mov	r2, r8
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	460f      	mov	r7, r1
 8008dca:	464b      	mov	r3, r9
 8008dcc:	4640      	mov	r0, r8
 8008dce:	4649      	mov	r1, r9
 8008dd0:	f7f7 fc12 	bl	80005f8 <__aeabi_dmul>
 8008dd4:	a35e      	add	r3, pc, #376	; (adr r3, 8008f50 <__ieee754_pow+0xa18>)
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	4604      	mov	r4, r0
 8008ddc:	460d      	mov	r5, r1
 8008dde:	f7f7 fc0b 	bl	80005f8 <__aeabi_dmul>
 8008de2:	a35d      	add	r3, pc, #372	; (adr r3, 8008f58 <__ieee754_pow+0xa20>)
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	f7f7 fa4e 	bl	8000288 <__aeabi_dsub>
 8008dec:	4622      	mov	r2, r4
 8008dee:	462b      	mov	r3, r5
 8008df0:	f7f7 fc02 	bl	80005f8 <__aeabi_dmul>
 8008df4:	a35a      	add	r3, pc, #360	; (adr r3, 8008f60 <__ieee754_pow+0xa28>)
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	f7f7 fa47 	bl	800028c <__adddf3>
 8008dfe:	4622      	mov	r2, r4
 8008e00:	462b      	mov	r3, r5
 8008e02:	f7f7 fbf9 	bl	80005f8 <__aeabi_dmul>
 8008e06:	a358      	add	r3, pc, #352	; (adr r3, 8008f68 <__ieee754_pow+0xa30>)
 8008e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0c:	f7f7 fa3c 	bl	8000288 <__aeabi_dsub>
 8008e10:	4622      	mov	r2, r4
 8008e12:	462b      	mov	r3, r5
 8008e14:	f7f7 fbf0 	bl	80005f8 <__aeabi_dmul>
 8008e18:	a355      	add	r3, pc, #340	; (adr r3, 8008f70 <__ieee754_pow+0xa38>)
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	f7f7 fa35 	bl	800028c <__adddf3>
 8008e22:	4622      	mov	r2, r4
 8008e24:	462b      	mov	r3, r5
 8008e26:	f7f7 fbe7 	bl	80005f8 <__aeabi_dmul>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7f7 fa29 	bl	8000288 <__aeabi_dsub>
 8008e36:	4604      	mov	r4, r0
 8008e38:	460d      	mov	r5, r1
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4640      	mov	r0, r8
 8008e40:	4649      	mov	r1, r9
 8008e42:	f7f7 fbd9 	bl	80005f8 <__aeabi_dmul>
 8008e46:	2200      	movs	r2, #0
 8008e48:	ec41 0b19 	vmov	d9, r0, r1
 8008e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e50:	4620      	mov	r0, r4
 8008e52:	4629      	mov	r1, r5
 8008e54:	f7f7 fa18 	bl	8000288 <__aeabi_dsub>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	ec51 0b19 	vmov	r0, r1, d9
 8008e60:	f7f7 fcf4 	bl	800084c <__aeabi_ddiv>
 8008e64:	4632      	mov	r2, r6
 8008e66:	4604      	mov	r4, r0
 8008e68:	460d      	mov	r5, r1
 8008e6a:	463b      	mov	r3, r7
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	4649      	mov	r1, r9
 8008e70:	f7f7 fbc2 	bl	80005f8 <__aeabi_dmul>
 8008e74:	4632      	mov	r2, r6
 8008e76:	463b      	mov	r3, r7
 8008e78:	f7f7 fa08 	bl	800028c <__adddf3>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4620      	mov	r0, r4
 8008e82:	4629      	mov	r1, r5
 8008e84:	f7f7 fa00 	bl	8000288 <__aeabi_dsub>
 8008e88:	4642      	mov	r2, r8
 8008e8a:	464b      	mov	r3, r9
 8008e8c:	f7f7 f9fc 	bl	8000288 <__aeabi_dsub>
 8008e90:	460b      	mov	r3, r1
 8008e92:	4602      	mov	r2, r0
 8008e94:	493a      	ldr	r1, [pc, #232]	; (8008f80 <__ieee754_pow+0xa48>)
 8008e96:	2000      	movs	r0, #0
 8008e98:	f7f7 f9f6 	bl	8000288 <__aeabi_dsub>
 8008e9c:	ec41 0b10 	vmov	d0, r0, r1
 8008ea0:	ee10 3a90 	vmov	r3, s1
 8008ea4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008ea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eac:	da2b      	bge.n	8008f06 <__ieee754_pow+0x9ce>
 8008eae:	4650      	mov	r0, sl
 8008eb0:	f000 f966 	bl	8009180 <scalbn>
 8008eb4:	ec51 0b10 	vmov	r0, r1, d0
 8008eb8:	ec53 2b18 	vmov	r2, r3, d8
 8008ebc:	f7ff bbed 	b.w	800869a <__ieee754_pow+0x162>
 8008ec0:	4b30      	ldr	r3, [pc, #192]	; (8008f84 <__ieee754_pow+0xa4c>)
 8008ec2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008ec6:	429e      	cmp	r6, r3
 8008ec8:	f77f af0c 	ble.w	8008ce4 <__ieee754_pow+0x7ac>
 8008ecc:	4b2e      	ldr	r3, [pc, #184]	; (8008f88 <__ieee754_pow+0xa50>)
 8008ece:	440b      	add	r3, r1
 8008ed0:	4303      	orrs	r3, r0
 8008ed2:	d009      	beq.n	8008ee8 <__ieee754_pow+0x9b0>
 8008ed4:	ec51 0b18 	vmov	r0, r1, d8
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2300      	movs	r3, #0
 8008edc:	f7f7 fdfe 	bl	8000adc <__aeabi_dcmplt>
 8008ee0:	3800      	subs	r0, #0
 8008ee2:	bf18      	it	ne
 8008ee4:	2001      	movne	r0, #1
 8008ee6:	e447      	b.n	8008778 <__ieee754_pow+0x240>
 8008ee8:	4622      	mov	r2, r4
 8008eea:	462b      	mov	r3, r5
 8008eec:	f7f7 f9cc 	bl	8000288 <__aeabi_dsub>
 8008ef0:	4642      	mov	r2, r8
 8008ef2:	464b      	mov	r3, r9
 8008ef4:	f7f7 fe06 	bl	8000b04 <__aeabi_dcmpge>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	f43f aef3 	beq.w	8008ce4 <__ieee754_pow+0x7ac>
 8008efe:	e7e9      	b.n	8008ed4 <__ieee754_pow+0x99c>
 8008f00:	f04f 0a00 	mov.w	sl, #0
 8008f04:	e71a      	b.n	8008d3c <__ieee754_pow+0x804>
 8008f06:	ec51 0b10 	vmov	r0, r1, d0
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	e7d4      	b.n	8008eb8 <__ieee754_pow+0x980>
 8008f0e:	491c      	ldr	r1, [pc, #112]	; (8008f80 <__ieee754_pow+0xa48>)
 8008f10:	2000      	movs	r0, #0
 8008f12:	f7ff bb30 	b.w	8008576 <__ieee754_pow+0x3e>
 8008f16:	2000      	movs	r0, #0
 8008f18:	2100      	movs	r1, #0
 8008f1a:	f7ff bb2c 	b.w	8008576 <__ieee754_pow+0x3e>
 8008f1e:	4630      	mov	r0, r6
 8008f20:	4639      	mov	r1, r7
 8008f22:	f7ff bb28 	b.w	8008576 <__ieee754_pow+0x3e>
 8008f26:	9204      	str	r2, [sp, #16]
 8008f28:	f7ff bb7a 	b.w	8008620 <__ieee754_pow+0xe8>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f7ff bb64 	b.w	80085fa <__ieee754_pow+0xc2>
 8008f32:	bf00      	nop
 8008f34:	f3af 8000 	nop.w
 8008f38:	00000000 	.word	0x00000000
 8008f3c:	3fe62e43 	.word	0x3fe62e43
 8008f40:	fefa39ef 	.word	0xfefa39ef
 8008f44:	3fe62e42 	.word	0x3fe62e42
 8008f48:	0ca86c39 	.word	0x0ca86c39
 8008f4c:	be205c61 	.word	0xbe205c61
 8008f50:	72bea4d0 	.word	0x72bea4d0
 8008f54:	3e663769 	.word	0x3e663769
 8008f58:	c5d26bf1 	.word	0xc5d26bf1
 8008f5c:	3ebbbd41 	.word	0x3ebbbd41
 8008f60:	af25de2c 	.word	0xaf25de2c
 8008f64:	3f11566a 	.word	0x3f11566a
 8008f68:	16bebd93 	.word	0x16bebd93
 8008f6c:	3f66c16c 	.word	0x3f66c16c
 8008f70:	5555553e 	.word	0x5555553e
 8008f74:	3fc55555 	.word	0x3fc55555
 8008f78:	3fe00000 	.word	0x3fe00000
 8008f7c:	000fffff 	.word	0x000fffff
 8008f80:	3ff00000 	.word	0x3ff00000
 8008f84:	4090cbff 	.word	0x4090cbff
 8008f88:	3f6f3400 	.word	0x3f6f3400
 8008f8c:	652b82fe 	.word	0x652b82fe
 8008f90:	3c971547 	.word	0x3c971547

08008f94 <__ieee754_sqrt>:
 8008f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f98:	ec55 4b10 	vmov	r4, r5, d0
 8008f9c:	4e55      	ldr	r6, [pc, #340]	; (80090f4 <__ieee754_sqrt+0x160>)
 8008f9e:	43ae      	bics	r6, r5
 8008fa0:	ee10 0a10 	vmov	r0, s0
 8008fa4:	ee10 3a10 	vmov	r3, s0
 8008fa8:	462a      	mov	r2, r5
 8008faa:	4629      	mov	r1, r5
 8008fac:	d110      	bne.n	8008fd0 <__ieee754_sqrt+0x3c>
 8008fae:	ee10 2a10 	vmov	r2, s0
 8008fb2:	462b      	mov	r3, r5
 8008fb4:	f7f7 fb20 	bl	80005f8 <__aeabi_dmul>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7f7 f964 	bl	800028c <__adddf3>
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	460d      	mov	r5, r1
 8008fc8:	ec45 4b10 	vmov	d0, r4, r5
 8008fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd0:	2d00      	cmp	r5, #0
 8008fd2:	dc10      	bgt.n	8008ff6 <__ieee754_sqrt+0x62>
 8008fd4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008fd8:	4330      	orrs	r0, r6
 8008fda:	d0f5      	beq.n	8008fc8 <__ieee754_sqrt+0x34>
 8008fdc:	b15d      	cbz	r5, 8008ff6 <__ieee754_sqrt+0x62>
 8008fde:	ee10 2a10 	vmov	r2, s0
 8008fe2:	462b      	mov	r3, r5
 8008fe4:	ee10 0a10 	vmov	r0, s0
 8008fe8:	f7f7 f94e 	bl	8000288 <__aeabi_dsub>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	f7f7 fc2c 	bl	800084c <__aeabi_ddiv>
 8008ff4:	e7e6      	b.n	8008fc4 <__ieee754_sqrt+0x30>
 8008ff6:	1512      	asrs	r2, r2, #20
 8008ff8:	d074      	beq.n	80090e4 <__ieee754_sqrt+0x150>
 8008ffa:	07d4      	lsls	r4, r2, #31
 8008ffc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009000:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009004:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009008:	bf5e      	ittt	pl
 800900a:	0fda      	lsrpl	r2, r3, #31
 800900c:	005b      	lslpl	r3, r3, #1
 800900e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009012:	2400      	movs	r4, #0
 8009014:	0fda      	lsrs	r2, r3, #31
 8009016:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800901a:	107f      	asrs	r7, r7, #1
 800901c:	005b      	lsls	r3, r3, #1
 800901e:	2516      	movs	r5, #22
 8009020:	4620      	mov	r0, r4
 8009022:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009026:	1886      	adds	r6, r0, r2
 8009028:	428e      	cmp	r6, r1
 800902a:	bfde      	ittt	le
 800902c:	1b89      	suble	r1, r1, r6
 800902e:	18b0      	addle	r0, r6, r2
 8009030:	18a4      	addle	r4, r4, r2
 8009032:	0049      	lsls	r1, r1, #1
 8009034:	3d01      	subs	r5, #1
 8009036:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800903a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800903e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009042:	d1f0      	bne.n	8009026 <__ieee754_sqrt+0x92>
 8009044:	462a      	mov	r2, r5
 8009046:	f04f 0e20 	mov.w	lr, #32
 800904a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800904e:	4281      	cmp	r1, r0
 8009050:	eb06 0c05 	add.w	ip, r6, r5
 8009054:	dc02      	bgt.n	800905c <__ieee754_sqrt+0xc8>
 8009056:	d113      	bne.n	8009080 <__ieee754_sqrt+0xec>
 8009058:	459c      	cmp	ip, r3
 800905a:	d811      	bhi.n	8009080 <__ieee754_sqrt+0xec>
 800905c:	f1bc 0f00 	cmp.w	ip, #0
 8009060:	eb0c 0506 	add.w	r5, ip, r6
 8009064:	da43      	bge.n	80090ee <__ieee754_sqrt+0x15a>
 8009066:	2d00      	cmp	r5, #0
 8009068:	db41      	blt.n	80090ee <__ieee754_sqrt+0x15a>
 800906a:	f100 0801 	add.w	r8, r0, #1
 800906e:	1a09      	subs	r1, r1, r0
 8009070:	459c      	cmp	ip, r3
 8009072:	bf88      	it	hi
 8009074:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009078:	eba3 030c 	sub.w	r3, r3, ip
 800907c:	4432      	add	r2, r6
 800907e:	4640      	mov	r0, r8
 8009080:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009084:	f1be 0e01 	subs.w	lr, lr, #1
 8009088:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800908c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009090:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009094:	d1db      	bne.n	800904e <__ieee754_sqrt+0xba>
 8009096:	430b      	orrs	r3, r1
 8009098:	d006      	beq.n	80090a8 <__ieee754_sqrt+0x114>
 800909a:	1c50      	adds	r0, r2, #1
 800909c:	bf13      	iteet	ne
 800909e:	3201      	addne	r2, #1
 80090a0:	3401      	addeq	r4, #1
 80090a2:	4672      	moveq	r2, lr
 80090a4:	f022 0201 	bicne.w	r2, r2, #1
 80090a8:	1063      	asrs	r3, r4, #1
 80090aa:	0852      	lsrs	r2, r2, #1
 80090ac:	07e1      	lsls	r1, r4, #31
 80090ae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80090b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80090b6:	bf48      	it	mi
 80090b8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80090bc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80090c0:	4614      	mov	r4, r2
 80090c2:	e781      	b.n	8008fc8 <__ieee754_sqrt+0x34>
 80090c4:	0ad9      	lsrs	r1, r3, #11
 80090c6:	3815      	subs	r0, #21
 80090c8:	055b      	lsls	r3, r3, #21
 80090ca:	2900      	cmp	r1, #0
 80090cc:	d0fa      	beq.n	80090c4 <__ieee754_sqrt+0x130>
 80090ce:	02cd      	lsls	r5, r1, #11
 80090d0:	d50a      	bpl.n	80090e8 <__ieee754_sqrt+0x154>
 80090d2:	f1c2 0420 	rsb	r4, r2, #32
 80090d6:	fa23 f404 	lsr.w	r4, r3, r4
 80090da:	1e55      	subs	r5, r2, #1
 80090dc:	4093      	lsls	r3, r2
 80090de:	4321      	orrs	r1, r4
 80090e0:	1b42      	subs	r2, r0, r5
 80090e2:	e78a      	b.n	8008ffa <__ieee754_sqrt+0x66>
 80090e4:	4610      	mov	r0, r2
 80090e6:	e7f0      	b.n	80090ca <__ieee754_sqrt+0x136>
 80090e8:	0049      	lsls	r1, r1, #1
 80090ea:	3201      	adds	r2, #1
 80090ec:	e7ef      	b.n	80090ce <__ieee754_sqrt+0x13a>
 80090ee:	4680      	mov	r8, r0
 80090f0:	e7bd      	b.n	800906e <__ieee754_sqrt+0xda>
 80090f2:	bf00      	nop
 80090f4:	7ff00000 	.word	0x7ff00000

080090f8 <with_errno>:
 80090f8:	b570      	push	{r4, r5, r6, lr}
 80090fa:	4604      	mov	r4, r0
 80090fc:	460d      	mov	r5, r1
 80090fe:	4616      	mov	r6, r2
 8009100:	f7fc fa66 	bl	80055d0 <__errno>
 8009104:	4629      	mov	r1, r5
 8009106:	6006      	str	r6, [r0, #0]
 8009108:	4620      	mov	r0, r4
 800910a:	bd70      	pop	{r4, r5, r6, pc}

0800910c <xflow>:
 800910c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800910e:	4614      	mov	r4, r2
 8009110:	461d      	mov	r5, r3
 8009112:	b108      	cbz	r0, 8009118 <xflow+0xc>
 8009114:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009118:	e9cd 2300 	strd	r2, r3, [sp]
 800911c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009120:	4620      	mov	r0, r4
 8009122:	4629      	mov	r1, r5
 8009124:	f7f7 fa68 	bl	80005f8 <__aeabi_dmul>
 8009128:	2222      	movs	r2, #34	; 0x22
 800912a:	b003      	add	sp, #12
 800912c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009130:	f7ff bfe2 	b.w	80090f8 <with_errno>

08009134 <__math_uflow>:
 8009134:	b508      	push	{r3, lr}
 8009136:	2200      	movs	r2, #0
 8009138:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800913c:	f7ff ffe6 	bl	800910c <xflow>
 8009140:	ec41 0b10 	vmov	d0, r0, r1
 8009144:	bd08      	pop	{r3, pc}

08009146 <__math_oflow>:
 8009146:	b508      	push	{r3, lr}
 8009148:	2200      	movs	r2, #0
 800914a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800914e:	f7ff ffdd 	bl	800910c <xflow>
 8009152:	ec41 0b10 	vmov	d0, r0, r1
 8009156:	bd08      	pop	{r3, pc}

08009158 <fabs>:
 8009158:	ec51 0b10 	vmov	r0, r1, d0
 800915c:	ee10 2a10 	vmov	r2, s0
 8009160:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009164:	ec43 2b10 	vmov	d0, r2, r3
 8009168:	4770      	bx	lr

0800916a <finite>:
 800916a:	b082      	sub	sp, #8
 800916c:	ed8d 0b00 	vstr	d0, [sp]
 8009170:	9801      	ldr	r0, [sp, #4]
 8009172:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009176:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800917a:	0fc0      	lsrs	r0, r0, #31
 800917c:	b002      	add	sp, #8
 800917e:	4770      	bx	lr

08009180 <scalbn>:
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	ec55 4b10 	vmov	r4, r5, d0
 8009186:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800918a:	4606      	mov	r6, r0
 800918c:	462b      	mov	r3, r5
 800918e:	b99a      	cbnz	r2, 80091b8 <scalbn+0x38>
 8009190:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009194:	4323      	orrs	r3, r4
 8009196:	d036      	beq.n	8009206 <scalbn+0x86>
 8009198:	4b39      	ldr	r3, [pc, #228]	; (8009280 <scalbn+0x100>)
 800919a:	4629      	mov	r1, r5
 800919c:	ee10 0a10 	vmov	r0, s0
 80091a0:	2200      	movs	r2, #0
 80091a2:	f7f7 fa29 	bl	80005f8 <__aeabi_dmul>
 80091a6:	4b37      	ldr	r3, [pc, #220]	; (8009284 <scalbn+0x104>)
 80091a8:	429e      	cmp	r6, r3
 80091aa:	4604      	mov	r4, r0
 80091ac:	460d      	mov	r5, r1
 80091ae:	da10      	bge.n	80091d2 <scalbn+0x52>
 80091b0:	a32b      	add	r3, pc, #172	; (adr r3, 8009260 <scalbn+0xe0>)
 80091b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b6:	e03a      	b.n	800922e <scalbn+0xae>
 80091b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80091bc:	428a      	cmp	r2, r1
 80091be:	d10c      	bne.n	80091da <scalbn+0x5a>
 80091c0:	ee10 2a10 	vmov	r2, s0
 80091c4:	4620      	mov	r0, r4
 80091c6:	4629      	mov	r1, r5
 80091c8:	f7f7 f860 	bl	800028c <__adddf3>
 80091cc:	4604      	mov	r4, r0
 80091ce:	460d      	mov	r5, r1
 80091d0:	e019      	b.n	8009206 <scalbn+0x86>
 80091d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80091d6:	460b      	mov	r3, r1
 80091d8:	3a36      	subs	r2, #54	; 0x36
 80091da:	4432      	add	r2, r6
 80091dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80091e0:	428a      	cmp	r2, r1
 80091e2:	dd08      	ble.n	80091f6 <scalbn+0x76>
 80091e4:	2d00      	cmp	r5, #0
 80091e6:	a120      	add	r1, pc, #128	; (adr r1, 8009268 <scalbn+0xe8>)
 80091e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091ec:	da1c      	bge.n	8009228 <scalbn+0xa8>
 80091ee:	a120      	add	r1, pc, #128	; (adr r1, 8009270 <scalbn+0xf0>)
 80091f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091f4:	e018      	b.n	8009228 <scalbn+0xa8>
 80091f6:	2a00      	cmp	r2, #0
 80091f8:	dd08      	ble.n	800920c <scalbn+0x8c>
 80091fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80091fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009202:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009206:	ec45 4b10 	vmov	d0, r4, r5
 800920a:	bd70      	pop	{r4, r5, r6, pc}
 800920c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009210:	da19      	bge.n	8009246 <scalbn+0xc6>
 8009212:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009216:	429e      	cmp	r6, r3
 8009218:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800921c:	dd0a      	ble.n	8009234 <scalbn+0xb4>
 800921e:	a112      	add	r1, pc, #72	; (adr r1, 8009268 <scalbn+0xe8>)
 8009220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e2      	bne.n	80091ee <scalbn+0x6e>
 8009228:	a30f      	add	r3, pc, #60	; (adr r3, 8009268 <scalbn+0xe8>)
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	f7f7 f9e3 	bl	80005f8 <__aeabi_dmul>
 8009232:	e7cb      	b.n	80091cc <scalbn+0x4c>
 8009234:	a10a      	add	r1, pc, #40	; (adr r1, 8009260 <scalbn+0xe0>)
 8009236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0b8      	beq.n	80091b0 <scalbn+0x30>
 800923e:	a10e      	add	r1, pc, #56	; (adr r1, 8009278 <scalbn+0xf8>)
 8009240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009244:	e7b4      	b.n	80091b0 <scalbn+0x30>
 8009246:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800924a:	3236      	adds	r2, #54	; 0x36
 800924c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009250:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009254:	4620      	mov	r0, r4
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <scalbn+0x108>)
 8009258:	2200      	movs	r2, #0
 800925a:	e7e8      	b.n	800922e <scalbn+0xae>
 800925c:	f3af 8000 	nop.w
 8009260:	c2f8f359 	.word	0xc2f8f359
 8009264:	01a56e1f 	.word	0x01a56e1f
 8009268:	8800759c 	.word	0x8800759c
 800926c:	7e37e43c 	.word	0x7e37e43c
 8009270:	8800759c 	.word	0x8800759c
 8009274:	fe37e43c 	.word	0xfe37e43c
 8009278:	c2f8f359 	.word	0xc2f8f359
 800927c:	81a56e1f 	.word	0x81a56e1f
 8009280:	43500000 	.word	0x43500000
 8009284:	ffff3cb0 	.word	0xffff3cb0
 8009288:	3c900000 	.word	0x3c900000

0800928c <_kill>:
 800928c:	4b02      	ldr	r3, [pc, #8]	; (8009298 <_kill+0xc>)
 800928e:	2258      	movs	r2, #88	; 0x58
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	f04f 30ff 	mov.w	r0, #4294967295
 8009296:	4770      	bx	lr
 8009298:	200004a8 	.word	0x200004a8

0800929c <_exit>:
 800929c:	e7fe      	b.n	800929c <_exit>
	...

080092a0 <_init>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	bf00      	nop
 80092a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a6:	bc08      	pop	{r3}
 80092a8:	469e      	mov	lr, r3
 80092aa:	4770      	bx	lr

080092ac <_fini>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	bf00      	nop
 80092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b2:	bc08      	pop	{r3}
 80092b4:	469e      	mov	lr, r3
 80092b6:	4770      	bx	lr
