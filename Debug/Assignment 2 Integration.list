
Assignment 2 Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009290  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  08009420  08009420  00019420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c60  08009c60  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08009c60  08009c60  00019c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c68  08009c68  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c68  08009c68  00019c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c6c  08009c6c  00019c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08009c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000204  08009e74  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08009e74  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d35  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350a  00000000  00000000  00036f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  0003a478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  0003bad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002beb8  00000000  00000000  0003cf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b3e  00000000  00000000  00068e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104950  00000000  00000000  00080976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001852c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007270  00000000  00000000  00185318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0018c588  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  0018c5ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009408 	.word	0x08009408

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	08009408 	.word	0x08009408

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:

static void RF_GPIO_Init();
static void RF_SPI3_Init();

int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    HAL_Init();
 8000ef0:	f003 f804 	bl	8003efc <HAL_Init>
    UART1_Init();
 8000ef4:	f000 f842 	bl	8000f7c <UART1_Init>

    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ef8:	2101      	movs	r1, #1
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 fcae 	bl	800185c <BSP_PB_Init>
    BSP_LED_Init(LED2);
 8000f00:	2000      	movs	r0, #0
 8000f02:	f000 fc7b 	bl	80017fc <BSP_LED_Init>

    // must init this for I2C to configure the sensors
    SENSOR_IO_Init();
 8000f06:	f000 fd85 	bl	8001a14 <SENSOR_IO_Init>
    // HTS221_HumTempInit(&h0_lsb, &h1_lsb, &h0_rh, &h1_rh, &t0_lsb, &t1_lsb, &t0_degc, &t1_degc);
    // BSP_MAGNETO_Init();
    // BSP_PSENSOR_Init();

    // init for rf
    RF_GPIO_Init();
 8000f0a:	f000 f8e7 	bl	80010dc <RF_GPIO_Init>
    RF_SPI3_Init();
 8000f0e:	f000 f969 	bl	80011e4 <RF_SPI3_Init>

    SPSGRF_Init();
 8000f12:	f000 f999 	bl	8001248 <SPSGRF_Init>
    SpiritPktBasicSetDestinationAddress(0x44);
 8000f16:	2044      	movs	r0, #68	; 0x44
 8000f18:	f001 fbc4 	bl	80026a4 <SpiritPktCommonSetDestinationAddress>

    // print Entering STANDBY MODE when going to STANDBY_MODE
    sprintf(uart_buffer, "Entering STANDBY MODE\r\n");
 8000f1c:	4912      	ldr	r1, [pc, #72]	; (8000f68 <main+0x7c>)
 8000f1e:	4813      	ldr	r0, [pc, #76]	; (8000f6c <main+0x80>)
 8000f20:	f006 f952 	bl	80071c8 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8000f24:	4811      	ldr	r0, [pc, #68]	; (8000f6c <main+0x80>)
 8000f26:	f7ff f953 	bl	80001d0 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f32:	490e      	ldr	r1, [pc, #56]	; (8000f6c <main+0x80>)
 8000f34:	480e      	ldr	r0, [pc, #56]	; (8000f70 <main+0x84>)
 8000f36:	f004 fc1d 	bl	8005774 <HAL_UART_Transmit>

    while (1) {
#ifdef APPLICATION_TRANSMITTER
        // Send the payload
        xTxDoneFlag = S_RESET;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <main+0x88>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
        SPSGRF_StartTx(payload, strlen(payload));
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <main+0x8c>)
 8000f42:	f7ff f945 	bl	80001d0 <strlen>
 8000f46:	4603      	mov	r3, r0
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480a      	ldr	r0, [pc, #40]	; (8000f78 <main+0x8c>)
 8000f4e:	f000 fa2d 	bl	80013ac <SPSGRF_StartTx>
        while (!xTxDoneFlag)
 8000f52:	bf00      	nop
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <main+0x88>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0fa      	beq.n	8000f54 <main+0x68>
            ;

        HAL_Delay(2000); // Block for 2000 ms
 8000f5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f62:	f003 f83b 	bl	8003fdc <HAL_Delay>
        xTxDoneFlag = S_RESET;
 8000f66:	e7e8      	b.n	8000f3a <main+0x4e>
 8000f68:	08009420 	.word	0x08009420
 8000f6c:	20000228 	.word	0x20000228
 8000f70:	200002a8 	.word	0x200002a8
 8000f74:	20000329 	.word	0x20000329
 8000f78:	20000004 	.word	0x20000004

08000f7c <UART1_Init>:
        single_press = BOOL_CLR;
    }
}

static void UART1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
    /* Pin configuration for UART. BSP_COM_Init() can do this automatically */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <UART1_Init+0xa0>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a25      	ldr	r2, [pc, #148]	; (800101c <UART1_Init+0xa0>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <UART1_Init+0xa0>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 8000fac:	23c0      	movs	r3, #192	; 0xc0
 8000fae:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4817      	ldr	r0, [pc, #92]	; (8001020 <UART1_Init+0xa4>)
 8000fc2:	f003 f971 	bl	80042a8 <HAL_GPIO_Init>

    /* Configuring UART1 */
    huart1.Instance = USART1;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <UART1_Init+0xa8>)
 8000fc8:	4a17      	ldr	r2, [pc, #92]	; (8001028 <UART1_Init+0xac>)
 8000fca:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <UART1_Init+0xa8>)
 8000fce:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd2:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <UART1_Init+0xa8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <UART1_Init+0xa8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <UART1_Init+0xa8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <UART1_Init+0xa8>)
 8000fe8:	220c      	movs	r2, #12
 8000fea:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <UART1_Init+0xa8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <UART1_Init+0xa8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <UART1_Init+0xa8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <UART1_Init+0xa8>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <UART1_Init+0xa8>)
 8001006:	f004 fb67 	bl	80056d8 <HAL_UART_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d000      	beq.n	8001012 <UART1_Init+0x96>
        while (1) { }
 8001010:	e7fe      	b.n	8001010 <UART1_Init+0x94>
    }
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	48000400 	.word	0x48000400
 8001024:	200002a8 	.word	0x200002a8
 8001028:	40013800 	.word	0x40013800

0800102c <HAL_GPIO_EXTI_Callback>:
 * @brief ISR for GPIO
 * @param uint16_t GPIO_Pin
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
    // button
    if (GPIO_Pin == USER_BUTTON_PIN) {
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800103c:	d107      	bne.n	800104e <HAL_GPIO_EXTI_Callback+0x22>
        button_press_tick = HAL_GetTick();
 800103e:	f002 ffc1 	bl	8003fc4 <HAL_GetTick>
 8001042:	4603      	mov	r3, r0
 8001044:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001046:	6013      	str	r3, [r2, #0]
        button_flag = BOOL_SET;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
    }

    // EXTI from LSM6DSL, flag to read Accel Data, Gyro Data and LSM6DSL_ACC_GYRO_D6D_SRC
    if (GPIO_Pin == GPIO_PIN_11) {
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001054:	d102      	bne.n	800105c <HAL_GPIO_EXTI_Callback+0x30>
        acc_gyro_d6d_ready = BOOL_SET;
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <HAL_GPIO_EXTI_Callback+0xa0>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
    }

    // EXTI from HTS221, flag to read Humidity and Temperature
    if (GPIO_Pin == GPIO_PIN_15) {
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001062:	d102      	bne.n	800106a <HAL_GPIO_EXTI_Callback+0x3e>
        hum_temp_ready = BOOL_SET;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
    }

    // rf
    SpiritIrqs xIrqStatus;

    SpiritIrqGetStatus(&xIrqStatus);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fe8e 	bl	8001d90 <SpiritIrqGetStatus>
    if (xIrqStatus.IRQ_TX_DATA_SENT) {
 8001074:	7b3b      	ldrb	r3, [r7, #12]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <HAL_GPIO_EXTI_Callback+0x5a>
        xTxDoneFlag = S_SET;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
    }
    if (xIrqStatus.IRQ_RX_DATA_READY) {
 8001086:	7b3b      	ldrb	r3, [r7, #12]
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <HAL_GPIO_EXTI_Callback+0x6c>
        xRxDoneFlag = S_SET;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_GPIO_EXTI_Callback+0xac>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
    }
    if (xIrqStatus.IRQ_RX_DATA_DISC || xIrqStatus.IRQ_RX_TIMEOUT) {
 8001098:	7b3b      	ldrb	r3, [r7, #12]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d105      	bne.n	80010b0 <HAL_GPIO_EXTI_Callback+0x84>
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <HAL_GPIO_EXTI_Callback+0x8e>
        SpiritCmdStrobeRx();
 80010b0:	f001 f8b2 	bl	8002218 <SpiritManagementWaCmdStrobeRx>
 80010b4:	2061      	movs	r0, #97	; 0x61
 80010b6:	f000 fd9d 	bl	8001bf4 <SpiritCmdStrobeCommand>
    }
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000220 	.word	0x20000220
 80010c8:	20000224 	.word	0x20000224
 80010cc:	20000328 	.word	0x20000328
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000329 	.word	0x20000329
 80010d8:	2000032a 	.word	0x2000032a

080010dc <RF_GPIO_Init>:
    *p_t0_lsb = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
    *p_t1_lsb = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
}

static void RF_GPIO_Init()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <RF_GPIO_Init+0xf8>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a37      	ldr	r2, [pc, #220]	; (80011d4 <RF_GPIO_Init+0xf8>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <RF_GPIO_Init+0xf8>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800110a:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <RF_GPIO_Init+0xf8>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a31      	ldr	r2, [pc, #196]	; (80011d4 <RF_GPIO_Init+0xf8>)
 8001110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <RF_GPIO_Init+0xf8>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <RF_GPIO_Init+0xf8>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a2b      	ldr	r2, [pc, #172]	; (80011d4 <RF_GPIO_Init+0xf8>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <RF_GPIO_Init+0xf8>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <RF_GPIO_Init+0xf8>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a25      	ldr	r2, [pc, #148]	; (80011d4 <RF_GPIO_Init+0xf8>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <RF_GPIO_Init+0xf8>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SPSGRF_915_SDN_GPIO_Port, SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001158:	481f      	ldr	r0, [pc, #124]	; (80011d8 <RF_GPIO_Init+0xfc>)
 800115a:	f003 fa4f 	bl	80045fc <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2120      	movs	r1, #32
 8001162:	481d      	ldr	r0, [pc, #116]	; (80011d8 <RF_GPIO_Init+0xfc>)
 8001164:	f003 fa4a 	bl	80045fc <HAL_GPIO_WritePin>

    /*Configure GPIO pins : Shutdown Pin on SPSGRF SDN */
    GPIO_InitStruct.Pin = SPSGRF_915_SDN_Pin;
 8001168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SPSGRF_915_SDN_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4815      	ldr	r0, [pc, #84]	; (80011d8 <RF_GPIO_Init+0xfc>)
 8001182:	f003 f891 	bl	80042a8 <HAL_GPIO_Init>

    /*Configure GPIO pin : SPSGRF CS */
    GPIO_InitStruct.Pin = SPSGRF_915_SPI3_CSN_Pin;
 8001186:	2320      	movs	r3, #32
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SPSGRF_915_SPI3_CSN_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	480e      	ldr	r0, [pc, #56]	; (80011d8 <RF_GPIO_Init+0xfc>)
 800119e:	f003 f883 	bl	80042a8 <HAL_GPIO_Init>

    /*Configure GPIO pin : SPSGRF GPIO3 for EXTI */
    GPIO_InitStruct.Pin = SPSGRF_915_GPIO3_EXTI5_Pin;
 80011a2:	2320      	movs	r3, #32
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <RF_GPIO_Init+0x100>)
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	480a      	ldr	r0, [pc, #40]	; (80011e0 <RF_GPIO_Init+0x104>)
 80011b6:	f003 f877 	bl	80042a8 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2017      	movs	r0, #23
 80011c0:	f003 f82d 	bl	800421e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011c4:	2017      	movs	r0, #23
 80011c6:	f003 f846 	bl	8004256 <HAL_NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000400 	.word	0x48000400
 80011dc:	10210000 	.word	0x10210000
 80011e0:	48001000 	.word	0x48001000

080011e4 <RF_SPI3_Init>:

static void RF_SPI3_Init()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
    spi3.Instance = SPI3;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <RF_SPI3_Init+0x5c>)
 80011ea:	4a16      	ldr	r2, [pc, #88]	; (8001244 <RF_SPI3_Init+0x60>)
 80011ec:	601a      	str	r2, [r3, #0]
    spi3.Init.Mode = SPI_MODE_MASTER;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <RF_SPI3_Init+0x5c>)
 80011f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f4:	605a      	str	r2, [r3, #4]
    spi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <RF_SPI3_Init+0x5c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
    spi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <RF_SPI3_Init+0x5c>)
 80011fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001202:	60da      	str	r2, [r3, #12]
    spi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <RF_SPI3_Init+0x5c>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
    spi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <RF_SPI3_Init+0x5c>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
    spi3.Init.NSS = SPI_NSS_SOFT;
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <RF_SPI3_Init+0x5c>)
 8001212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001216:	619a      	str	r2, [r3, #24]
    spi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <RF_SPI3_Init+0x5c>)
 800121a:	2208      	movs	r2, #8
 800121c:	61da      	str	r2, [r3, #28]
    spi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <RF_SPI3_Init+0x5c>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
    spi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <RF_SPI3_Init+0x5c>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
    spi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <RF_SPI3_Init+0x5c>)
 800122c:	2200      	movs	r2, #0
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
    spi3.Init.CRCPolynomial = 10;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <RF_SPI3_Init+0x5c>)
 8001232:	220a      	movs	r2, #10
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_SPI_Init(&spi3);
 8001236:	4802      	ldr	r0, [pc, #8]	; (8001240 <RF_SPI3_Init+0x5c>)
 8001238:	f003 fbae 	bl	8004998 <HAL_SPI_Init>
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000032c 	.word	0x2000032c
 8001244:	40003c00 	.word	0x40003c00

08001248 <SPSGRF_Init>:
* @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
* @param  None
* @retval None
*/
void SPSGRF_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b090      	sub	sp, #64	; 0x40
 800124c:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 800124e:	f002 fd11 	bl	8003c74 <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 8001252:	f002 fe37 	bl	8003ec4 <RadioEnterShutdown>
  SpiritExitShutdown();
 8001256:	f002 fe41 	bl	8003edc <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 800125a:	f001 f80d 	bl	8002278 <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 800125e:	2300      	movs	r3, #0
 8001260:	71fb      	strb	r3, [r7, #7]
 8001262:	e004      	b.n	800126e <SPSGRF_Init+0x26>
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	71fb      	strb	r3, [r7, #7]
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2bff      	cmp	r3, #255	; 0xff
 8001274:	d1f6      	bne.n	8001264 <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 8001276:	f002 fcdb 	bl	8003c30 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <SPSGRF_Init+0x150>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b03      	cmp	r3, #3
 8001286:	d1ea      	bne.n	800125e <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 8001288:	2300      	movs	r3, #0
 800128a:	84bb      	strh	r3, [r7, #36]	; 0x24
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 800128c:	4b43      	ldr	r3, [pc, #268]	; (800139c <SPSGRF_Init+0x154>)
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 8001290:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <SPSGRF_Init+0x158>)
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8001294:	2300      	movs	r3, #0
 8001296:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 800129a:	2300      	movs	r3, #0
 800129c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  xRadioInit.lDatarate = DATARATE;
 80012a0:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 80012a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80012aa:	63bb      	str	r3, [r7, #56]	; 0x38
  xRadioInit.lBandwidth = BANDWIDTH;
 80012ac:	4b3c      	ldr	r3, [pc, #240]	; (80013a0 <SPSGRF_Init+0x158>)
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 80012b0:	483c      	ldr	r0, [pc, #240]	; (80013a4 <SPSGRF_Init+0x15c>)
 80012b2:	f002 fc4b 	bl	8003b4c <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 fa98 	bl	80027f0 <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 80012c0:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80013a8 <SPSGRF_Init+0x160>
 80012c4:	2007      	movs	r0, #7
 80012c6:	f002 fadd 	bl	8003884 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 80012ca:	2007      	movs	r0, #7
 80012cc:	f002 fb30 	bl	8003930 <SpiritRadioSetPALevelMaxIndex>

  // Configure packet handler to use the Basic packet format
  xBasicInit.xPreambleLength = PREAMBLE_LENGTH;
 80012d0:	2318      	movs	r3, #24
 80012d2:	753b      	strb	r3, [r7, #20]
  xBasicInit.xSyncLength = SYNC_LENGTH;
 80012d4:	2306      	movs	r3, #6
 80012d6:	757b      	strb	r3, [r7, #21]
  xBasicInit.lSyncWords = SYNC_WORD;
 80012d8:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 80012dc:	61bb      	str	r3, [r7, #24]
  xBasicInit.xFixVarLength = LENGTH_TYPE;
 80012de:	2301      	movs	r3, #1
 80012e0:	773b      	strb	r3, [r7, #28]
  xBasicInit.cPktLengthWidth = LENGTH_WIDTH;
 80012e2:	2307      	movs	r3, #7
 80012e4:	777b      	strb	r3, [r7, #29]
  xBasicInit.xCrcMode = CRC_MODE;
 80012e6:	2320      	movs	r3, #32
 80012e8:	77bb      	strb	r3, [r7, #30]
  xBasicInit.xControlLength = CONTROL_LENGTH;
 80012ea:	2300      	movs	r3, #0
 80012ec:	77fb      	strb	r3, [r7, #31]
  xBasicInit.xAddressField = EN_ADDRESS;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f887 3020 	strb.w	r3, [r7, #32]
  xBasicInit.xFec = EN_FEC;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  xBasicInit.xDataWhitening = EN_WHITENING;
 80012fa:	2301      	movs	r3, #1
 80012fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  SpiritPktBasicInit(&xBasicInit);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4618      	mov	r0, r3
 8001306:	f000 ffdd 	bl	80022c4 <SpiritPktBasicInit>

  // Configure destination address criteria for automatic packet filtering
  xBasicAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 800130a:	2301      	movs	r3, #1
 800130c:	733b      	strb	r3, [r7, #12]
  xBasicAddress.cMyAddress = MY_ADDRESS;
 800130e:	2344      	movs	r3, #68	; 0x44
 8001310:	737b      	strb	r3, [r7, #13]
  xBasicAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8001312:	2301      	movs	r3, #1
 8001314:	73bb      	strb	r3, [r7, #14]
  xBasicAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8001316:	23ee      	movs	r3, #238	; 0xee
 8001318:	73fb      	strb	r3, [r7, #15]
  xBasicAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 800131a:	2301      	movs	r3, #1
 800131c:	743b      	strb	r3, [r7, #16]
  xBasicAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 800131e:	23ff      	movs	r3, #255	; 0xff
 8001320:	747b      	strb	r3, [r7, #17]
  SpiritPktBasicAddressesInit(&xBasicAddress);
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4618      	mov	r0, r3
 8001328:	f001 f8a2 	bl	8002470 <SpiritPktBasicAddressesInit>

  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 800132c:	2302      	movs	r3, #2
 800132e:	723b      	strb	r3, [r7, #8]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 8001330:	2302      	movs	r3, #2
 8001332:	727b      	strb	r3, [r7, #9]
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 8001334:	2300      	movs	r3, #0
 8001336:	72bb      	strb	r3, [r7, #10]
  SpiritGpioInit(&xGpioInit);
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fc71 	bl	8001c24 <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 8001342:	2000      	movs	r0, #0
 8001344:	f000 fc92 	bl	8001c6c <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 8001348:	2101      	movs	r1, #1
 800134a:	2004      	movs	r0, #4
 800134c:	f000 fcba 	bl	8001cc4 <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 8001350:	2101      	movs	r1, #1
 8001352:	2001      	movs	r0, #1
 8001354:	f000 fcb6 	bl	8001cc4 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 8001358:	2101      	movs	r1, #1
 800135a:	2002      	movs	r0, #2
 800135c:	f000 fcb2 	bl	8001cc4 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 8001360:	2101      	movs	r1, #1
 8001362:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001366:	f000 fcad 	bl	8001cc4 <SpiritIrq>
  SpiritIrqClearStatus();
 800136a:	f000 fd43 	bl	8001df4 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 800136e:	2000      	movs	r0, #0
 8001370:	f001 f9ea 	bl	8002748 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 8001374:	2001      	movs	r0, #1
 8001376:	f001 f9af 	bl	80026d8 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 800137a:	f06f 0077 	mvn.w	r0, #119	; 0x77
 800137e:	f001 fa17 	bl	80027b0 <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(2000.0);
#else
  SET_INFINITE_RX_TIMEOUT();
 8001382:	2000      	movs	r0, #0
 8001384:	f002 fbf2 	bl	8003b6c <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 8001388:	2002      	movs	r0, #2
 800138a:	f002 fc09 	bl	8003ba0 <SpiritTimerSetRxTimeoutStopCondition>
}
 800138e:	bf00      	nop
 8001390:	3740      	adds	r7, #64	; 0x40
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200003e8 	.word	0x200003e8
 800139c:	3689cac0 	.word	0x3689cac0
 80013a0:	000186a0 	.word	0x000186a0
 80013a4:	02faf080 	.word	0x02faf080
 80013a8:	4139999a 	.word	0x4139999a

080013ac <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 80013b8:	2072      	movs	r0, #114	; 0x72
 80013ba:	f000 fc1b 	bl	8001bf4 <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	2b60      	cmp	r3, #96	; 0x60
 80013c2:	bf28      	it	cs
 80013c4:	2360      	movcs	r3, #96	; 0x60
 80013c6:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 fd31 	bl	8003e34 <RadioSpiWriteFifo>
  SpiritPktBasicSetPayloadLength(txLen);
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f001 f8d8 	bl	800258c <SpiritPktBasicSetPayloadLength>
  SpiritCmdStrobeTx();
 80013dc:	f000 fee4 	bl	80021a8 <SpiritManagementWaCmdStrobeTx>
 80013e0:	2060      	movs	r0, #96	; 0x60
 80013e2:	f000 fc07 	bl	8001bf4 <SpiritCmdStrobeCommand>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_MspInit+0x44>)
 80013f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_MspInit+0x44>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6613      	str	r3, [r2, #96]	; 0x60
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_MspInit+0x44>)
 8001404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_MspInit+0x44>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_MspInit+0x44>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6593      	str	r3, [r2, #88]	; 0x58
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_MspInit+0x44>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_I2C_MspInit+0x7c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d128      	bne.n	80014ac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_I2C_MspInit+0x80>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <HAL_I2C_MspInit+0x80>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_I2C_MspInit+0x80>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001472:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001478:	2312      	movs	r3, #18
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001484:	2304      	movs	r3, #4
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	480b      	ldr	r0, [pc, #44]	; (80014bc <HAL_I2C_MspInit+0x84>)
 8001490:	f002 ff0a 	bl	80042a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_I2C_MspInit+0x80>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_I2C_MspInit+0x80>)
 800149a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800149e:	6593      	str	r3, [r2, #88]	; 0x58
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_I2C_MspInit+0x80>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40005800 	.word	0x40005800
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48000400 	.word	0x48000400

080014c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_SPI_MspInit+0x7c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d128      	bne.n	8001534 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_SPI_MspInit+0x80>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	4a16      	ldr	r2, [pc, #88]	; (8001540 <HAL_SPI_MspInit+0x80>)
 80014e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ec:	6593      	str	r3, [r2, #88]	; 0x58
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_SPI_MspInit+0x80>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_SPI_MspInit+0x80>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a10      	ldr	r2, [pc, #64]	; (8001540 <HAL_SPI_MspInit+0x80>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_SPI_MspInit+0x80>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001512:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001524:	2306      	movs	r3, #6
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <HAL_SPI_MspInit+0x84>)
 8001530:	f002 feba 	bl	80042a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001534:	bf00      	nop
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40003c00 	.word	0x40003c00
 8001540:	40021000 	.word	0x40021000
 8001544:	48000800 	.word	0x48000800

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08c      	sub	sp, #48	; 0x30
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2e      	ldr	r2, [pc, #184]	; (8001620 <HAL_UART_MspInit+0xd8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d128      	bne.n	80015bc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156a:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <HAL_UART_MspInit+0xdc>)
 800156c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156e:	4a2d      	ldr	r2, [pc, #180]	; (8001624 <HAL_UART_MspInit+0xdc>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001574:	6613      	str	r3, [r2, #96]	; 0x60
 8001576:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <HAL_UART_MspInit+0xdc>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <HAL_UART_MspInit+0xdc>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	4a27      	ldr	r2, [pc, #156]	; (8001624 <HAL_UART_MspInit+0xdc>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <HAL_UART_MspInit+0xdc>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800159a:	23c0      	movs	r3, #192	; 0xc0
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015aa:	2307      	movs	r3, #7
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4619      	mov	r1, r3
 80015b4:	481c      	ldr	r0, [pc, #112]	; (8001628 <HAL_UART_MspInit+0xe0>)
 80015b6:	f002 fe77 	bl	80042a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015ba:	e02d      	b.n	8001618 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1a      	ldr	r2, [pc, #104]	; (800162c <HAL_UART_MspInit+0xe4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d128      	bne.n	8001618 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_UART_MspInit+0xdc>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	4a16      	ldr	r2, [pc, #88]	; (8001624 <HAL_UART_MspInit+0xdc>)
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d0:	6593      	str	r3, [r2, #88]	; 0x58
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <HAL_UART_MspInit+0xdc>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_UART_MspInit+0xdc>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <HAL_UART_MspInit+0xdc>)
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_UART_MspInit+0xdc>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80015f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001608:	2307      	movs	r3, #7
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4807      	ldr	r0, [pc, #28]	; (8001630 <HAL_UART_MspInit+0xe8>)
 8001614:	f002 fe48 	bl	80042a8 <HAL_GPIO_Init>
}
 8001618:	bf00      	nop
 800161a:	3730      	adds	r7, #48	; 0x30
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40013800 	.word	0x40013800
 8001624:	40021000 	.word	0x40021000
 8001628:	48000400 	.word	0x48000400
 800162c:	40004800 	.word	0x40004800
 8001630:	48000c00 	.word	0x48000c00

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f002 fc8a 	bl	8003fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001694:	2020      	movs	r0, #32
 8001696:	f002 ffc9 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800169a:	2040      	movs	r0, #64	; 0x40
 800169c:	f002 ffc6 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80016a0:	2080      	movs	r0, #128	; 0x80
 80016a2:	f002 ffc3 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80016a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016aa:	f002 ffbf 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80016b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016ba:	f002 ffb7 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80016be:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016c2:	f002 ffb3 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016c6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016ca:	f002 ffaf 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80016ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016d2:	f002 ffab 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80016d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016da:	f002 ffa7 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x50>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x16>
		heap_end = &end;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <_sbrk+0x50>)
 80016f6:	4a10      	ldr	r2, [pc, #64]	; (8001738 <_sbrk+0x54>)
 80016f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <_sbrk+0x50>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <_sbrk+0x50>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	466a      	mov	r2, sp
 800170a:	4293      	cmp	r3, r2
 800170c:	d907      	bls.n	800171e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800170e:	f004 ff13 	bl	8006538 <__errno>
 8001712:	4603      	mov	r3, r0
 8001714:	220c      	movs	r2, #12
 8001716:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
 800171c:	e006      	b.n	800172c <_sbrk+0x48>
	}

	heap_end += incr;
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <_sbrk+0x50>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	4a03      	ldr	r2, [pc, #12]	; (8001734 <_sbrk+0x50>)
 8001728:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000390 	.word	0x20000390
 8001738:	200004a0 	.word	0x200004a0

0800173c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <SystemInit+0x64>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <SystemInit+0x64>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <SystemInit+0x68>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <SystemInit+0x68>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <SystemInit+0x68>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <SystemInit+0x68>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <SystemInit+0x68>)
 8001768:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800176c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001770:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <SystemInit+0x68>)
 8001774:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001778:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <SystemInit+0x68>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <SystemInit+0x68>)
 8001780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001784:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <SystemInit+0x68>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SystemInit+0x64>)
 800178e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001792:	609a      	str	r2, [r3, #8]
#endif
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	40021000 	.word	0x40021000

080017a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017ae:	e003      	b.n	80017b8 <LoopCopyDataInit>

080017b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017b6:	3104      	adds	r1, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80017bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017c0:	d3f6      	bcc.n	80017b0 <CopyDataInit>
	ldr	r2, =_sbss
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017c4:	e002      	b.n	80017cc <LoopFillZerobss>

080017c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017c8:	f842 3b04 	str.w	r3, [r2], #4

080017cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <LoopForever+0x16>)
	cmp	r2, r3
 80017ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017d0:	d3f9      	bcc.n	80017c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017d2:	f7ff ffb3 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f004 ffab 	bl	8006730 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017da:	f7ff fb87 	bl	8000eec <main>

080017de <LoopForever>:

LoopForever:
    b LoopForever
 80017de:	e7fe      	b.n	80017de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017e0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80017e4:	08009c70 	.word	0x08009c70
	ldr	r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017ec:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 80017f0:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 80017f4:	200004a0 	.word	0x200004a0

080017f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC1_2_IRQHandler>
	...

080017fc <BSP_LED_Init>:
  * @param  Led: LED to be configured. 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10b      	bne.n	8001824 <BSP_LED_Init+0x28>
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <BSP_LED_Init+0x58>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001810:	4a10      	ldr	r2, [pc, #64]	; (8001854 <BSP_LED_Init+0x58>)
 8001812:	f043 0302 	orr.w	r3, r3, #2
 8001816:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <BSP_LED_Init+0x58>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8001824:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001828:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001832:	2302      	movs	r3, #2
 8001834:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <BSP_LED_Init+0x5c>)
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	f107 020c 	add.w	r2, r7, #12
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fd2f 	bl	80042a8 <HAL_GPIO_Init>
}
 800184a:	bf00      	nop
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	2000001c 	.word	0x2000001c

0800185c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	460a      	mov	r2, r1
 8001866:	71fb      	strb	r3, [r7, #7]
 8001868:	4613      	mov	r3, r2
 800186a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <BSP_PB_Init+0xa0>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001870:	4a22      	ldr	r2, [pc, #136]	; (80018fc <BSP_PB_Init+0xa0>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001878:	4b20      	ldr	r3, [pc, #128]	; (80018fc <BSP_PB_Init+0xa0>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001884:	79bb      	ldrb	r3, [r7, #6]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d112      	bne.n	80018b0 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800188a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001894:	2301      	movs	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001898:	2302      	movs	r3, #2
 800189a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	4a18      	ldr	r2, [pc, #96]	; (8001900 <BSP_PB_Init+0xa4>)
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	f107 020c 	add.w	r2, r7, #12
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 fcfc 	bl	80042a8 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d11e      	bne.n	80018f4 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80018b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ba:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80018bc:	2301      	movs	r3, #1
 80018be:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <BSP_PB_Init+0xa8>)
 80018c6:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <BSP_PB_Init+0xa4>)
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	f107 020c 	add.w	r2, r7, #12
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fce6 	bl	80042a8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80018dc:	2328      	movs	r3, #40	; 0x28
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	2200      	movs	r2, #0
 80018e2:	210f      	movs	r1, #15
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 fc9a 	bl	800421e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80018ea:	2328      	movs	r3, #40	; 0x28
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 fcb1 	bl	8004256 <HAL_NVIC_EnableIRQ>
  }
}
 80018f4:	bf00      	nop
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000
 8001900:	20000020 	.word	0x20000020
 8001904:	10110000 	.word	0x10110000

08001908 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <I2Cx_MspInit+0xa8>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001914:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <I2Cx_MspInit+0xa8>)
 8001916:	f043 0302 	orr.w	r3, r3, #2
 800191a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <I2Cx_MspInit+0xa8>)
 800191e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001928:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800192c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800192e:	2312      	movs	r3, #18
 8001930:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001932:	2301      	movs	r3, #1
 8001934:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800193a:	2304      	movs	r3, #4
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	481b      	ldr	r0, [pc, #108]	; (80019b4 <I2Cx_MspInit+0xac>)
 8001946:	f002 fcaf 	bl	80042a8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4818      	ldr	r0, [pc, #96]	; (80019b4 <I2Cx_MspInit+0xac>)
 8001952:	f002 fca9 	bl	80042a8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <I2Cx_MspInit+0xa8>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <I2Cx_MspInit+0xa8>)
 800195c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001960:	6593      	str	r3, [r2, #88]	; 0x58
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <I2Cx_MspInit+0xa8>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <I2Cx_MspInit+0xa8>)
 8001970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001972:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <I2Cx_MspInit+0xa8>)
 8001974:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001978:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <I2Cx_MspInit+0xa8>)
 800197c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197e:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <I2Cx_MspInit+0xa8>)
 8001980:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001984:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	210f      	movs	r1, #15
 800198a:	2021      	movs	r0, #33	; 0x21
 800198c:	f002 fc47 	bl	800421e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001990:	2021      	movs	r0, #33	; 0x21
 8001992:	f002 fc60 	bl	8004256 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	210f      	movs	r1, #15
 800199a:	2022      	movs	r0, #34	; 0x22
 800199c:	f002 fc3f 	bl	800421e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80019a0:	2022      	movs	r0, #34	; 0x22
 80019a2:	f002 fc58 	bl	8004256 <HAL_NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	48000400 	.word	0x48000400

080019b8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <I2Cx_Init+0x54>)
 80019c4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <I2Cx_Init+0x58>)
 80019ca:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff89 	bl	8001908 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f002 fe30 	bl	800465c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80019fc:	2100      	movs	r1, #0
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f002 febb 	bl	800477a <HAL_I2CEx_ConfigAnalogFilter>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40005800 	.word	0x40005800
 8001a10:	00702681 	.word	0x00702681

08001a14 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <SENSOR_IO_Init+0x10>)
 8001a1a:	f7ff ffcd 	bl	80019b8 <I2Cx_Init>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000394 	.word	0x20000394

08001a28 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001a32:	f107 030f 	add.w	r3, r7, #15
 8001a36:	461a      	mov	r2, r3
 8001a38:	2101      	movs	r1, #1
 8001a3a:	2050      	movs	r0, #80	; 0x50
 8001a3c:	f002 f96e 	bl	8003d1c <RadioSpiReadRegisters>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <SpiritCalibrationVco+0x6c>)
 8001a44:	b212      	sxth	r2, r2
 8001a46:	4611      	mov	r1, r2
 8001a48:	7019      	strb	r1, [r3, #0]
 8001a4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001a4e:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d105      	bne.n	8001a62 <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	e004      	b.n	8001a6c <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	f023 0302 	bic.w	r3, r3, #2
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001a6c:	f107 030f 	add.w	r3, r7, #15
 8001a70:	461a      	mov	r2, r3
 8001a72:	2101      	movs	r1, #1
 8001a74:	2050      	movs	r0, #80	; 0x50
 8001a76:	f002 f905 	bl	8003c84 <RadioSpiWriteRegisters>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <SpiritCalibrationVco+0x6c>)
 8001a7e:	b212      	sxth	r2, r2
 8001a80:	4611      	mov	r1, r2
 8001a82:	7019      	strb	r1, [r3, #0]
 8001a84:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001a88:	705a      	strb	r2, [r3, #1]

}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200003e8 	.word	0x200003e8

08001a98 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001a9e:	1dfb      	adds	r3, r7, #7
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	20e5      	movs	r0, #229	; 0xe5
 8001aa6:	f002 f939 	bl	8003d1c <RadioSpiReadRegisters>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <SpiritCalibrationGetVcoCalData+0x34>)
 8001aae:	b212      	sxth	r2, r2
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	7019      	strb	r1, [r3, #0]
 8001ab4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ab8:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ac0:	b2db      	uxtb	r3, r3

}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200003e8 	.word	0x200003e8

08001ad0 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001ada:	f107 030f 	add.w	r3, r7, #15
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	206e      	movs	r0, #110	; 0x6e
 8001ae4:	f002 f91a 	bl	8003d1c <RadioSpiReadRegisters>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001aec:	b212      	sxth	r2, r2
 8001aee:	4611      	mov	r1, r2
 8001af0:	7019      	strb	r1, [r3, #0]
 8001af2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001af6:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001b0c:	f107 030f 	add.w	r3, r7, #15
 8001b10:	461a      	mov	r2, r3
 8001b12:	2101      	movs	r1, #1
 8001b14:	206e      	movs	r0, #110	; 0x6e
 8001b16:	f002 f8b5 	bl	8003c84 <RadioSpiWriteRegisters>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001b1e:	b212      	sxth	r2, r2
 8001b20:	4611      	mov	r1, r2
 8001b22:	7019      	strb	r1, [r3, #0]
 8001b24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b28:	705a      	strb	r2, [r3, #1]

}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200003e8 	.word	0x200003e8

08001b38 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001b42:	f107 030f 	add.w	r3, r7, #15
 8001b46:	461a      	mov	r2, r3
 8001b48:	2101      	movs	r1, #1
 8001b4a:	206f      	movs	r0, #111	; 0x6f
 8001b4c:	f002 f8e6 	bl	8003d1c <RadioSpiReadRegisters>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001b54:	b212      	sxth	r2, r2
 8001b56:	4611      	mov	r1, r2
 8001b58:	7019      	strb	r1, [r3, #0]
 8001b5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b5e:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001b6a:	7bfa      	ldrb	r2, [r7, #15]
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001b74:	f107 030f 	add.w	r3, r7, #15
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	206f      	movs	r0, #111	; 0x6f
 8001b7e:	f002 f881 	bl	8003c84 <RadioSpiWriteRegisters>
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001b86:	b212      	sxth	r2, r2
 8001b88:	4611      	mov	r1, r2
 8001b8a:	7019      	strb	r1, [r3, #0]
 8001b8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b90:	705a      	strb	r2, [r3, #1]

}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200003e8 	.word	0x200003e8

08001ba0 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001baa:	f107 030f 	add.w	r3, r7, #15
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	209e      	movs	r0, #158	; 0x9e
 8001bb4:	f002 f8b2 	bl	8003d1c <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	f023 0306 	bic.w	r3, r3, #6
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e004      	b.n	8001bde <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001bde:	f107 030f 	add.w	r3, r7, #15
 8001be2:	461a      	mov	r2, r3
 8001be4:	2101      	movs	r1, #1
 8001be6:	209e      	movs	r0, #158	; 0x9e
 8001be8:	f002 f84c 	bl	8003c84 <RadioSpiWriteRegisters>
  
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f002 f8d7 	bl	8003db4 <RadioSpiCommandStrobes>
 8001c06:	4602      	mov	r2, r0
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <SpiritCmdStrobeCommand+0x2c>)
 8001c0a:	b212      	sxth	r2, r2
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	7019      	strb	r1, [r3, #0]
 8001c10:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c14:	705a      	strb	r2, [r3, #1]
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200003e8 	.word	0x200003e8

08001c24 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	785a      	ldrb	r2, [r3, #1]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	789b      	ldrb	r3, [r3, #2]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	f107 020f 	add.w	r2, r7, #15
 8001c46:	2101      	movs	r1, #1
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 f81b 	bl	8003c84 <RadioSpiWriteRegisters>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <SpiritGpioInit+0x44>)
 8001c52:	b212      	sxth	r2, r2
 8001c54:	4611      	mov	r1, r2
 8001c56:	7019      	strb	r1, [r3, #0]
 8001c58:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c5c:	705a      	strb	r2, [r3, #1]

}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200003e8 	.word	0x200003e8

08001c6c <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00c      	beq.n	8001c98 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8001c7e:	f107 0308 	add.w	r3, r7, #8
 8001c82:	2204      	movs	r2, #4
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 fd87 	bl	800679a <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f107 0308 	add.w	r3, r7, #8
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2104      	movs	r1, #4
 8001ca0:	2090      	movs	r0, #144	; 0x90
 8001ca2:	f001 ffef 	bl	8003c84 <RadioSpiWriteRegisters>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <SpiritIrqDeInit+0x54>)
 8001caa:	b212      	sxth	r2, r2
 8001cac:	4611      	mov	r1, r2
 8001cae:	7019      	strb	r1, [r3, #0]
 8001cb0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cb4:	705a      	strb	r2, [r3, #1]
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200003e8 	.word	0x200003e8

08001cc4 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	461a      	mov	r2, r3
 8001cda:	2104      	movs	r1, #4
 8001cdc:	2090      	movs	r0, #144	; 0x90
 8001cde:	f002 f81d 	bl	8003d1c <RadioSpiReadRegisters>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <SpiritIrq+0xc8>)
 8001ce6:	b212      	sxth	r2, r2
 8001ce8:	4611      	mov	r1, r2
 8001cea:	7019      	strb	r1, [r3, #0]
 8001cec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cf0:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	74fb      	strb	r3, [r7, #19]
 8001cf6:	e011      	b.n	8001d1c <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8001cf8:	7cfb      	ldrb	r3, [r7, #19]
 8001cfa:	3318      	adds	r3, #24
 8001cfc:	443b      	add	r3, r7
 8001cfe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001d02:	461a      	mov	r2, r3
 8001d04:	7cfb      	ldrb	r3, [r7, #19]
 8001d06:	f1c3 0303 	rsb	r3, r3, #3
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4413      	add	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001d16:	7cfb      	ldrb	r3, [r7, #19]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	74fb      	strb	r3, [r7, #19]
 8001d1c:	7cfb      	ldrb	r3, [r7, #19]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d9ea      	bls.n	8001cf8 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e003      	b.n	8001d3c <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	74bb      	strb	r3, [r7, #18]
 8001d40:	e00e      	b.n	8001d60 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8001d42:	7cbb      	ldrb	r3, [r7, #18]
 8001d44:	f1c3 0303 	rsb	r3, r3, #3
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	40da      	lsrs	r2, r3
 8001d4e:	7cbb      	ldrb	r3, [r7, #18]
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	3318      	adds	r3, #24
 8001d54:	443b      	add	r3, r7
 8001d56:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8001d5a:	7cbb      	ldrb	r3, [r7, #18]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	74bb      	strb	r3, [r7, #18]
 8001d60:	7cbb      	ldrb	r3, [r7, #18]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d9ed      	bls.n	8001d42 <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	2090      	movs	r0, #144	; 0x90
 8001d70:	f001 ff88 	bl	8003c84 <RadioSpiWriteRegisters>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <SpiritIrq+0xc8>)
 8001d78:	b212      	sxth	r2, r2
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	7019      	strb	r1, [r3, #0]
 8001d7e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d82:	705a      	strb	r2, [r3, #1]

}
 8001d84:	bf00      	nop
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200003e8 	.word	0x200003e8

08001d90 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	461a      	mov	r2, r3
 8001da2:	2104      	movs	r1, #4
 8001da4:	20fa      	movs	r0, #250	; 0xfa
 8001da6:	f001 ffb9 	bl	8003d1c <RadioSpiReadRegisters>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <SpiritIrqGetStatus+0x60>)
 8001dae:	b212      	sxth	r2, r2
 8001db0:	4611      	mov	r1, r2
 8001db2:	7019      	strb	r1, [r3, #0]
 8001db4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001db8:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	74fb      	strb	r3, [r7, #19]
 8001dbe:	e00e      	b.n	8001dde <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8001dc0:	7cfb      	ldrb	r3, [r7, #19]
 8001dc2:	f1c3 0303 	rsb	r3, r3, #3
 8001dc6:	3318      	adds	r3, #24
 8001dc8:	443b      	add	r3, r7
 8001dca:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001dd8:	7cfb      	ldrb	r3, [r7, #19]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	74fb      	strb	r3, [r7, #19]
 8001dde:	7cfb      	ldrb	r3, [r7, #19]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d9ed      	bls.n	8001dc0 <SpiritIrqGetStatus+0x30>
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200003e8 	.word	0x200003e8

08001df4 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2104      	movs	r1, #4
 8001e00:	20fa      	movs	r0, #250	; 0xfa
 8001e02:	f001 ff8b 	bl	8003d1c <RadioSpiReadRegisters>
 8001e06:	4602      	mov	r2, r0
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <SpiritIrqClearStatus+0x2c>)
 8001e0a:	b212      	sxth	r2, r2
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	7019      	strb	r1, [r3, #0]
 8001e10:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e14:	705a      	strb	r2, [r3, #1]

}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200003e8 	.word	0x200003e8

08001e24 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8001e24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e28:	b08a      	sub	sp, #40	; 0x28
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a70      	ldr	r2, [pc, #448]	; (8001ff4 <SpiritManagementSetFrequencyBase+0x1d0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d307      	bcc.n	8001e46 <SpiritManagementSetFrequencyBase+0x22>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a6f      	ldr	r2, [pc, #444]	; (8001ff8 <SpiritManagementSetFrequencyBase+0x1d4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d803      	bhi.n	8001e46 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e44:	e01a      	b.n	8001e7c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a6c      	ldr	r2, [pc, #432]	; (8001ffc <SpiritManagementSetFrequencyBase+0x1d8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d907      	bls.n	8001e5e <SpiritManagementSetFrequencyBase+0x3a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a6b      	ldr	r2, [pc, #428]	; (8002000 <SpiritManagementSetFrequencyBase+0x1dc>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d803      	bhi.n	8001e5e <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e5c:	e00e      	b.n	8001e7c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a68      	ldr	r2, [pc, #416]	; (8002004 <SpiritManagementSetFrequencyBase+0x1e0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d907      	bls.n	8001e76 <SpiritManagementSetFrequencyBase+0x52>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a67      	ldr	r2, [pc, #412]	; (8002008 <SpiritManagementSetFrequencyBase+0x1e4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d803      	bhi.n	8001e76 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e74:	e002      	b.n	8001e7c <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8001e76:	2303      	movs	r3, #3
 8001e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8001e7c:	f000 fff6 	bl	8002e6c <SpiritRadioGetFrequencyOffset>
 8001e80:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8001e82:	f000 ffd3 	bl	8002e2c <SpiritRadioGetChannelSpace>
 8001e86:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8001e88:	f000 ffb8 	bl	8002dfc <SpiritRadioGetChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8001e90:	6a3a      	ldr	r2, [r7, #32]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	441a      	add	r2, r3
 8001e96:	7efb      	ldrb	r3, [r7, #27]
 8001e98:	69f9      	ldr	r1, [r7, #28]
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8001ea2:	f001 fdd3 	bl	8003a4c <SpiritRadioGetRefDiv>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 8001eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d83a      	bhi.n	8001f2a <SpiritManagementSetFrequencyBase+0x106>
 8001eb4:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <SpiritManagementSetFrequencyBase+0x98>)
 8001eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eba:	bf00      	nop
 8001ebc:	08001f15 	.word	0x08001f15
 8001ec0:	08001efd 	.word	0x08001efd
 8001ec4:	08001ee5 	.word	0x08001ee5
 8001ec8:	08001ecd 	.word	0x08001ecd
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	4a4f      	ldr	r2, [pc, #316]	; (800200c <SpiritManagementSetFrequencyBase+0x1e8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d803      	bhi.n	8001edc <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff fe63 	bl	8001ba0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001eda:	e026      	b.n	8001f2a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7ff fe5f 	bl	8001ba0 <SpiritCalibrationSelectVco>
    break;
 8001ee2:	e022      	b.n	8001f2a <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	4a4a      	ldr	r2, [pc, #296]	; (8002010 <SpiritManagementSetFrequencyBase+0x1ec>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d803      	bhi.n	8001ef4 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff fe57 	bl	8001ba0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001ef2:	e01a      	b.n	8001f2a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f7ff fe53 	bl	8001ba0 <SpiritCalibrationSelectVco>
    break;
 8001efa:	e016      	b.n	8001f2a <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	4a45      	ldr	r2, [pc, #276]	; (8002014 <SpiritManagementSetFrequencyBase+0x1f0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d803      	bhi.n	8001f0c <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff fe4b 	bl	8001ba0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001f0a:	e00e      	b.n	8001f2a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f7ff fe47 	bl	8001ba0 <SpiritCalibrationSelectVco>
    break;
 8001f12:	e00a      	b.n	8001f2a <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	4a40      	ldr	r2, [pc, #256]	; (8002018 <SpiritManagementSetFrequencyBase+0x1f4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d803      	bhi.n	8001f24 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff fe3f 	bl	8001ba0 <SpiritCalibrationSelectVco>
 8001f22:	e002      	b.n	8001f2a <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7ff fe3b 	bl	8001ba0 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f000 fe7e 	bl	8002c2c <SpiritRadioSearchWCP>
 8001f30:	4603      	mov	r3, r0
 8001f32:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7fe fae5 	bl	8000504 <__aeabi_ui2d>
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	460d      	mov	r5, r1
 8001f3e:	7cfb      	ldrb	r3, [r7, #19]
 8001f40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f44:	4935      	ldr	r1, [pc, #212]	; (800201c <SpiritManagementSetFrequencyBase+0x1f8>)
 8001f46:	5c8a      	ldrb	r2, [r1, r2]
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	049b      	lsls	r3, r3, #18
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fae8 	bl	8000524 <__aeabi_i2d>
 8001f54:	4680      	mov	r8, r0
 8001f56:	4689      	mov	r9, r1
 8001f58:	f001 fdec 	bl	8003b34 <SpiritRadioGetXtalFrequency>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fad0 	bl	8000504 <__aeabi_ui2d>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4640      	mov	r0, r8
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	f7fe fc6e 	bl	800084c <__aeabi_ddiv>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4620      	mov	r0, r4
 8001f76:	4629      	mov	r1, r5
 8001f78:	f7fe fb3e 	bl	80005f8 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fe10 	bl	8000ba8 <__aeabi_d2uiz>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	0d5b      	lsrs	r3, r3, #21
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	7cbb      	ldrb	r3, [r7, #18]
 8001f9a:	015b      	lsls	r3, r3, #5
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	0b5b      	lsrs	r3, r3, #13
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fc0:	4917      	ldr	r1, [pc, #92]	; (8002020 <SpiritManagementSetFrequencyBase+0x1fc>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8001fca:	f107 0308 	add.w	r3, r7, #8
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	2008      	movs	r0, #8
 8001fd4:	f001 fe56 	bl	8003c84 <RadioSpiWriteRegisters>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <SpiritManagementSetFrequencyBase+0x200>)
 8001fdc:	b212      	sxth	r2, r2
 8001fde:	4611      	mov	r1, r2
 8001fe0:	7019      	strb	r1, [r3, #0]
 8001fe2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fe6:	705a      	strb	r2, [r3, #1]
}
 8001fe8:	bf00      	nop
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2e5f5680 	.word	0x2e5f5680
 8001ff8:	390c2fe0 	.word	0x390c2fe0
 8001ffc:	1701e47f 	.word	0x1701e47f
 8002000:	1c146a60 	.word	0x1c146a60
 8002004:	11d260bf 	.word	0x11d260bf
 8002008:	14ced7e0 	.word	0x14ced7e0
 800200c:	099cf4e1 	.word	0x099cf4e1
 8002010:	1339e9c3 	.word	0x1339e9c3
 8002014:	19a28d05 	.word	0x19a28d05
 8002018:	33451a0a 	.word	0x33451a0a
 800201c:	08009730 	.word	0x08009730
 8002020:	0800972c 	.word	0x0800972c
 8002024:	200003e8 	.word	0x200003e8

08002028 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8002036:	f001 fd7d 	bl	8003b34 <SpiritRadioGetXtalFrequency>
 800203a:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 800203c:	2300      	movs	r3, #0
 800203e:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4a57      	ldr	r2, [pc, #348]	; (80021a0 <SpiritManagementWaVcoCalibration+0x178>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d90f      	bls.n	8002068 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002048:	f001 fd00 	bl	8003a4c <SpiritRadioGetRefDiv>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8002052:	2301      	movs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 8002056:	f001 f86b 	bl	8003130 <SpiritRadioGetFrequencyBase>
 800205a:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 800205c:	2001      	movs	r0, #1
 800205e:	f001 fcc5 	bl	80039ec <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fede 	bl	8001e24 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002068:	f001 f862 	bl	8003130 <SpiritRadioGetFrequencyBase>
 800206c:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 800206e:	2325      	movs	r3, #37	; 0x25
 8002070:	707b      	strb	r3, [r7, #1]
 8002072:	1c7b      	adds	r3, r7, #1
 8002074:	461a      	mov	r2, r3
 8002076:	2101      	movs	r1, #1
 8002078:	20a1      	movs	r0, #161	; 0xa1
 800207a:	f001 fe03 	bl	8003c84 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 800207e:	2001      	movs	r0, #1
 8002080:	f7ff fcd2 	bl	8001a28 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8002084:	f001 fdd4 	bl	8003c30 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8002088:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <SpiritManagementWaVcoCalibration+0x17c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b40      	cmp	r3, #64	; 0x40
 8002094:	d10d      	bne.n	80020b2 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 8002096:	2301      	movs	r3, #1
 8002098:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 800209a:	2062      	movs	r0, #98	; 0x62
 800209c:	f7ff fdaa 	bl	8001bf4 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 80020a0:	f001 fdc6 	bl	8003c30 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80020a4:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <SpiritManagementWaVcoCalibration+0x17c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d1f6      	bne.n	80020a0 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80020b2:	2066      	movs	r0, #102	; 0x66
 80020b4:	f7ff fd9e 	bl	8001bf4 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80020bc:	f001 fdb8 	bl	8003c30 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80020c0:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <SpiritManagementWaVcoCalibration+0x17c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b13      	cmp	r3, #19
 80020cc:	d106      	bne.n	80020dc <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80020ce:	7b7b      	ldrb	r3, [r7, #13]
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	737a      	strb	r2, [r7, #13]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d101      	bne.n	80020dc <SpiritManagementWaVcoCalibration+0xb4>
 80020d8:	2301      	movs	r3, #1
 80020da:	e05d      	b.n	8002198 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80020dc:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <SpiritManagementWaVcoCalibration+0x17c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	d1e8      	bne.n	80020bc <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80020ea:	f7ff fcd5 	bl	8001a98 <SpiritCalibrationGetVcoCalData>
 80020ee:	4603      	mov	r3, r0
 80020f0:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 80020f2:	2062      	movs	r0, #98	; 0x62
 80020f4:	f7ff fd7e 	bl	8001bf4 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80020f8:	f001 fd9a 	bl	8003c30 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80020fc:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <SpiritManagementWaVcoCalibration+0x17c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b03      	cmp	r3, #3
 8002108:	d1f6      	bne.n	80020f8 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 800210a:	2065      	movs	r0, #101	; 0x65
 800210c:	f7ff fd72 	bl	8001bf4 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002110:	2300      	movs	r3, #0
 8002112:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002114:	f001 fd8c 	bl	8003c30 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <SpiritManagementWaVcoCalibration+0x17c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b13      	cmp	r3, #19
 8002124:	d106      	bne.n	8002134 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 8002126:	7b7b      	ldrb	r3, [r7, #13]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	737a      	strb	r2, [r7, #13]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d101      	bne.n	8002134 <SpiritManagementWaVcoCalibration+0x10c>
 8002130:	2301      	movs	r3, #1
 8002132:	e031      	b.n	8002198 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <SpiritManagementWaVcoCalibration+0x17c>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b0f      	cmp	r3, #15
 8002140:	d1e8      	bne.n	8002114 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8002142:	f7ff fca9 	bl	8001a98 <SpiritCalibrationGetVcoCalData>
 8002146:	4603      	mov	r3, r0
 8002148:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 800214a:	2062      	movs	r0, #98	; 0x62
 800214c:	f7ff fd52 	bl	8001bf4 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002150:	f001 fd6e 	bl	8003c30 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <SpiritManagementWaVcoCalibration+0x17c>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b03      	cmp	r3, #3
 8002160:	d1f6      	bne.n	8002150 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8002162:	7bbb      	ldrb	r3, [r7, #14]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d102      	bne.n	800216e <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002168:	2063      	movs	r0, #99	; 0x63
 800216a:	f7ff fd43 	bl	8001bf4 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 800216e:	2000      	movs	r0, #0
 8002170:	f7ff fc5a 	bl	8001a28 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 800217a:	2000      	movs	r0, #0
 800217c:	f001 fc36 	bl	80039ec <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff fe4f 	bl	8001e24 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fca1 	bl	8001ad0 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 800218e:	78bb      	ldrb	r3, [r7, #2]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fcd1 	bl	8001b38 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	01c9c380 	.word	0x01c9c380
 80021a4:	200003e8 	.word	0x200003e8

080021a8 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <SpiritManagementWaCmdStrobeTx+0x60>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d023      	beq.n	8002200 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <SpiritManagementWaCmdStrobeTx+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a14      	ldr	r2, [pc, #80]	; (8002210 <SpiritManagementWaCmdStrobeTx+0x68>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d908      	bls.n	80021d4 <SpiritManagementWaCmdStrobeTx+0x2c>
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <SpiritManagementWaCmdStrobeTx+0x64>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a13      	ldr	r2, [pc, #76]	; (8002214 <SpiritManagementWaCmdStrobeTx+0x6c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d803      	bhi.n	80021d4 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80021cc:	20c0      	movs	r0, #192	; 0xc0
 80021ce:	f001 fb83 	bl	80038d8 <SpiritRadioSetPACwc>
 80021d2:	e002      	b.n	80021da <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f001 fb7f 	bl	80038d8 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80021da:	2311      	movs	r3, #17
 80021dc:	71fb      	strb	r3, [r7, #7]
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	461a      	mov	r2, r3
 80021e2:	2101      	movs	r1, #1
 80021e4:	20a9      	movs	r0, #169	; 0xa9
 80021e6:	f001 fd4d 	bl	8003c84 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80021ea:	2320      	movs	r3, #32
 80021ec:	71fb      	strb	r3, [r7, #7]
 80021ee:	1dfb      	adds	r3, r7, #7
 80021f0:	461a      	mov	r2, r3
 80021f2:	2101      	movs	r1, #1
 80021f4:	20a5      	movs	r0, #165	; 0xa5
 80021f6:	f001 fd45 	bl	8003c84 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 80021fa:	4b03      	ldr	r3, [pc, #12]	; (8002208 <SpiritManagementWaCmdStrobeTx+0x60>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
  }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000024 	.word	0x20000024
 800220c:	200003e0 	.word	0x200003e0
 8002210:	08f0d17f 	.word	0x08f0d17f
 8002214:	1c03a180 	.word	0x1c03a180

08002218 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d00d      	beq.n	8002244 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002228:	2398      	movs	r3, #152	; 0x98
 800222a:	71fb      	strb	r3, [r7, #7]
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	461a      	mov	r2, r3
 8002230:	2101      	movs	r1, #1
 8002232:	20a5      	movs	r0, #165	; 0xa5
 8002234:	f001 fd26 	bl	8003c84 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002238:	2000      	movs	r0, #0
 800223a:	f001 fb4d 	bl	80038d8 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 800223e:	4b03      	ldr	r3, [pc, #12]	; (800224c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
  }
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000024 	.word	0x20000024

08002250 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <SpiritManagementWaTRxFcMem+0x20>)
 800225a:	2202      	movs	r2, #2
 800225c:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <SpiritManagementWaTRxFcMem+0x24>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	20000024 	.word	0x20000024
 8002274:	200003e0 	.word	0x200003e0

08002278 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 800227e:	23ca      	movs	r3, #202	; 0xca
 8002280:	71fb      	strb	r3, [r7, #7]
 8002282:	1dfb      	adds	r3, r7, #7
 8002284:	461a      	mov	r2, r3
 8002286:	2101      	movs	r1, #1
 8002288:	20b2      	movs	r0, #178	; 0xb2
 800228a:	f001 fcfb 	bl	8003c84 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 800228e:	2304      	movs	r3, #4
 8002290:	71fb      	strb	r3, [r7, #7]
 8002292:	1dfb      	adds	r3, r7, #7
 8002294:	461a      	mov	r2, r3
 8002296:	2101      	movs	r1, #1
 8002298:	20a8      	movs	r0, #168	; 0xa8
 800229a:	f001 fcf3 	bl	8003c84 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 800229e:	1dfb      	adds	r3, r7, #7
 80022a0:	461a      	mov	r2, r3
 80022a2:	2101      	movs	r1, #1
 80022a4:	20a8      	movs	r0, #168	; 0xa8
 80022a6:	f001 fd39 	bl	8003d1c <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80022aa:	2300      	movs	r3, #0
 80022ac:	71fb      	strb	r3, [r7, #7]
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	461a      	mov	r2, r3
 80022b2:	2101      	movs	r1, #1
 80022b4:	20a8      	movs	r0, #168	; 0xa8
 80022b6:	f001 fce5 	bl	8003c84 <RadioSpiWriteRegisters>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	461a      	mov	r2, r3
 80022d2:	2101      	movs	r1, #1
 80022d4:	2051      	movs	r0, #81	; 0x51
 80022d6:	f001 fd21 	bl	8003d1c <RadioSpiReadRegisters>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b63      	ldr	r3, [pc, #396]	; (800246c <SpiritPktBasicInit+0x1a8>)
 80022de:	b212      	sxth	r2, r2
 80022e0:	4611      	mov	r1, r2
 80022e2:	7019      	strb	r1, [r3, #0]
 80022e4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022e8:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 80022ea:	7a3b      	ldrb	r3, [r7, #8]
 80022ec:	f023 0320 	bic.w	r3, r3, #32
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	723b      	strb	r3, [r7, #8]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 80022f4:	7a3b      	ldrb	r3, [r7, #8]
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	461a      	mov	r2, r3
 8002304:	2101      	movs	r1, #1
 8002306:	2051      	movs	r0, #81	; 0x51
 8002308:	f001 fcbc 	bl	8003c84 <RadioSpiWriteRegisters>
 800230c:	4602      	mov	r2, r0
 800230e:	4b57      	ldr	r3, [pc, #348]	; (800246c <SpiritPktBasicInit+0x1a8>)
 8002310:	b212      	sxth	r2, r2
 8002312:	4611      	mov	r1, r2
 8002314:	7019      	strb	r1, [r3, #0]
 8002316:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800231a:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800231c:	f107 0308 	add.w	r3, r7, #8
 8002320:	461a      	mov	r2, r3
 8002322:	2101      	movs	r1, #1
 8002324:	204f      	movs	r0, #79	; 0x4f
 8002326:	f001 fcf9 	bl	8003d1c <RadioSpiReadRegisters>
 800232a:	4602      	mov	r2, r0
 800232c:	4b4f      	ldr	r3, [pc, #316]	; (800246c <SpiritPktBasicInit+0x1a8>)
 800232e:	b212      	sxth	r2, r2
 8002330:	4611      	mov	r1, r2
 8002332:	7019      	strb	r1, [r3, #0]
 8002334:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002338:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 800233a:	7a3b      	ldrb	r3, [r7, #8]
 800233c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002340:	b2db      	uxtb	r3, r3
 8002342:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002344:	f107 0308 	add.w	r3, r7, #8
 8002348:	461a      	mov	r2, r3
 800234a:	2101      	movs	r1, #1
 800234c:	204f      	movs	r0, #79	; 0x4f
 800234e:	f001 fc99 	bl	8003c84 <RadioSpiWriteRegisters>
 8002352:	4602      	mov	r2, r0
 8002354:	4b45      	ldr	r3, [pc, #276]	; (800246c <SpiritPktBasicInit+0x1a8>)
 8002356:	b212      	sxth	r2, r2
 8002358:	4611      	mov	r1, r2
 800235a:	7019      	strb	r1, [r3, #0]
 800235c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002360:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7b1b      	ldrb	r3, [r3, #12]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d102      	bne.n	8002370 <SpiritPktBasicInit+0xac>
  {
    tempRegValue[0]=0x08;
 800236a:	2308      	movs	r3, #8
 800236c:	723b      	strb	r3, [r7, #8]
 800236e:	e001      	b.n	8002374 <SpiritPktBasicInit+0xb0>
  }
  else
  {
    tempRegValue[0]=0x00;
 8002370:	2300      	movs	r3, #0
 8002372:	723b      	strb	r3, [r7, #8]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 8002374:	7a3a      	ldrb	r2, [r7, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7adb      	ldrb	r3, [r3, #11]
 800237a:	4313      	orrs	r3, r2
 800237c:	b2db      	uxtb	r3, r3
 800237e:	723b      	strb	r3, [r7, #8]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7a5b      	ldrb	r3, [r3, #9]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <SpiritPktBasicInit+0xca>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7a5b      	ldrb	r3, [r3, #9]
 8002392:	3b01      	subs	r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7a9b      	ldrb	r3, [r3, #10]
 80023b2:	72fb      	strb	r3, [r7, #11]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7b9b      	ldrb	r3, [r3, #14]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d104      	bne.n	80023c6 <SpiritPktBasicInit+0x102>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 80023bc:	7afb      	ldrb	r3, [r7, #11]
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7b5b      	ldrb	r3, [r3, #13]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d104      	bne.n	80023d8 <SpiritPktBasicInit+0x114>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 80023ce:	7afb      	ldrb	r3, [r7, #11]
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	72fb      	strb	r3, [r7, #11]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 80023d8:	f107 0308 	add.w	r3, r7, #8
 80023dc:	461a      	mov	r2, r3
 80023de:	2104      	movs	r1, #4
 80023e0:	2030      	movs	r0, #48	; 0x30
 80023e2:	f001 fc4f 	bl	8003c84 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	e01d      	b.n	8002428 <SpiritPktBasicInit+0x164>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	785b      	ldrb	r3, [r3, #1]
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f1c3 0303 	rsb	r3, r3, #3
 80023fa:	429a      	cmp	r2, r3
 80023fc:	da06      	bge.n	800240c <SpiritPktBasicInit+0x148>
    {
      tempRegValue[i]=0;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	3310      	adds	r3, #16
 8002402:	443b      	add	r3, r7
 8002404:	2200      	movs	r2, #0
 8002406:	f803 2c08 	strb.w	r2, [r3, #-8]
 800240a:	e00a      	b.n	8002422 <SpiritPktBasicInit+0x15e>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	40da      	lsrs	r2, r3
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	3310      	adds	r3, #16
 800241c:	443b      	add	r3, r7
 800241e:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	3301      	adds	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d9de      	bls.n	80023ec <SpiritPktBasicInit+0x128>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7a9b      	ldrb	r3, [r3, #10]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <SpiritPktBasicInit+0x17a>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 8002436:	2000      	movs	r0, #0
 8002438:	f000 f8fc 	bl	8002634 <SpiritPktCommonFilterOnCrc>
 800243c:	e002      	b.n	8002444 <SpiritPktBasicInit+0x180>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 800243e:	2001      	movs	r0, #1
 8002440:	f000 f8f8 	bl	8002634 <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	461a      	mov	r2, r3
 800244a:	2104      	movs	r1, #4
 800244c:	2036      	movs	r0, #54	; 0x36
 800244e:	f001 fc19 	bl	8003c84 <RadioSpiWriteRegisters>
 8002452:	4602      	mov	r2, r0
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <SpiritPktBasicInit+0x1a8>)
 8002456:	b212      	sxth	r2, r2
 8002458:	4611      	mov	r1, r2
 800245a:	7019      	strb	r1, [r3, #0]
 800245c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002460:	705a      	strb	r2, [r3, #1]

}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200003e8 	.word	0x200003e8

08002470 <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	461a      	mov	r2, r3
 800247e:	2101      	movs	r1, #1
 8002480:	204f      	movs	r0, #79	; 0x4f
 8002482:	f001 fc4b 	bl	8003d1c <RadioSpiReadRegisters>
 8002486:	4602      	mov	r2, r0
 8002488:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <SpiritPktBasicAddressesInit+0xd8>)
 800248a:	b212      	sxth	r2, r2
 800248c:	4611      	mov	r1, r2
 800248e:	7019      	strb	r1, [r3, #0]
 8002490:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002494:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d105      	bne.n	80024aa <SpiritPktBasicAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 800249e:	7b3b      	ldrb	r3, [r7, #12]
 80024a0:	f043 0308 	orr.w	r3, r3, #8
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	733b      	strb	r3, [r7, #12]
 80024a8:	e004      	b.n	80024b4 <SpiritPktBasicAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80024aa:	7b3b      	ldrb	r3, [r7, #12]
 80024ac:	f023 0308 	bic.w	r3, r3, #8
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	789b      	ldrb	r3, [r3, #2]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d105      	bne.n	80024c8 <SpiritPktBasicAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80024bc:	7b3b      	ldrb	r3, [r7, #12]
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	733b      	strb	r3, [r7, #12]
 80024c6:	e004      	b.n	80024d2 <SpiritPktBasicAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80024c8:	7b3b      	ldrb	r3, [r7, #12]
 80024ca:	f023 0304 	bic.w	r3, r3, #4
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d105      	bne.n	80024e6 <SpiritPktBasicAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 80024da:	7b3b      	ldrb	r3, [r7, #12]
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	733b      	strb	r3, [r7, #12]
 80024e4:	e004      	b.n	80024f0 <SpiritPktBasicAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 80024e6:	7b3b      	ldrb	r3, [r7, #12]
 80024e8:	f023 0302 	bic.w	r3, r3, #2
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	461a      	mov	r2, r3
 80024f6:	2101      	movs	r1, #1
 80024f8:	204f      	movs	r0, #79	; 0x4f
 80024fa:	f001 fbc3 	bl	8003c84 <RadioSpiWriteRegisters>
 80024fe:	4602      	mov	r2, r0
 8002500:	4b11      	ldr	r3, [pc, #68]	; (8002548 <SpiritPktBasicAddressesInit+0xd8>)
 8002502:	b212      	sxth	r2, r2
 8002504:	4611      	mov	r1, r2
 8002506:	7019      	strb	r1, [r3, #0]
 8002508:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800250c:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	795b      	ldrb	r3, [r3, #5]
 8002512:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	78db      	ldrb	r3, [r3, #3]
 8002518:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	73bb      	strb	r3, [r7, #14]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	461a      	mov	r2, r3
 8002526:	2103      	movs	r1, #3
 8002528:	204c      	movs	r0, #76	; 0x4c
 800252a:	f001 fbab 	bl	8003c84 <RadioSpiWriteRegisters>
 800252e:	4602      	mov	r2, r0
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <SpiritPktBasicAddressesInit+0xd8>)
 8002532:	b212      	sxth	r2, r2
 8002534:	4611      	mov	r1, r2
 8002536:	7019      	strb	r1, [r3, #0]
 8002538:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800253c:	705a      	strb	r2, [r3, #1]
  
  
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200003e8 	.word	0x200003e8

0800254c <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002552:	1dfb      	adds	r3, r7, #7
 8002554:	461a      	mov	r2, r3
 8002556:	2101      	movs	r1, #1
 8002558:	2030      	movs	r0, #48	; 0x30
 800255a:	f001 fbdf 	bl	8003d1c <RadioSpiReadRegisters>
 800255e:	4602      	mov	r2, r0
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <SpiritPktBasicGetAddressField+0x3c>)
 8002562:	b212      	sxth	r2, r2
 8002564:	4611      	mov	r1, r2
 8002566:	7019      	strb	r1, [r3, #0]
 8002568:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800256c:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	f003 0318 	and.w	r3, r3, #24
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 800257c:	2300      	movs	r3, #0
  }

}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200003e8 	.word	0x200003e8

0800258c <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 8002596:	2300      	movs	r3, #0
 8002598:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 800259a:	f7ff ffd7 	bl	800254c <SpiritPktBasicGetAddressField>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 80025a4:	2301      	movs	r3, #1
 80025a6:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 80025a8:	f000 f828 	bl	80025fc <SpiritPktCommonGetControlLength>
 80025ac:	4603      	mov	r3, r0
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	89fb      	ldrh	r3, [r7, #14]
 80025b2:	4413      	add	r3, r2
 80025b4:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	89fb      	ldrh	r3, [r7, #14]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	4413      	add	r3, r2
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 80025c4:	88fa      	ldrh	r2, [r7, #6]
 80025c6:	89fb      	ldrh	r3, [r7, #14]
 80025c8:	4413      	add	r3, r2
 80025ca:	121b      	asrs	r3, r3, #8
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 80025d0:	f107 030c 	add.w	r3, r7, #12
 80025d4:	461a      	mov	r2, r3
 80025d6:	2102      	movs	r1, #2
 80025d8:	2034      	movs	r0, #52	; 0x34
 80025da:	f001 fb53 	bl	8003c84 <RadioSpiWriteRegisters>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <SpiritPktBasicSetPayloadLength+0x6c>)
 80025e2:	b212      	sxth	r2, r2
 80025e4:	4611      	mov	r1, r2
 80025e6:	7019      	strb	r1, [r3, #0]
 80025e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025ec:	705a      	strb	r2, [r3, #1]

}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200003e8 	.word	0x200003e8

080025fc <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002602:	1dfb      	adds	r3, r7, #7
 8002604:	461a      	mov	r2, r3
 8002606:	2101      	movs	r1, #1
 8002608:	2030      	movs	r0, #48	; 0x30
 800260a:	f001 fb87 	bl	8003d1c <RadioSpiReadRegisters>
 800260e:	4602      	mov	r2, r0
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <SpiritPktCommonGetControlLength+0x34>)
 8002612:	b212      	sxth	r2, r2
 8002614:	4611      	mov	r1, r2
 8002616:	7019      	strb	r1, [r3, #0]
 8002618:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800261c:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	b2db      	uxtb	r3, r3

}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200003e8 	.word	0x200003e8

08002634 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 800263e:	f107 030f 	add.w	r3, r7, #15
 8002642:	461a      	mov	r2, r3
 8002644:	2101      	movs	r1, #1
 8002646:	204f      	movs	r0, #79	; 0x4f
 8002648:	f001 fb68 	bl	8003d1c <RadioSpiReadRegisters>
 800264c:	4602      	mov	r2, r0
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002650:	b212      	sxth	r2, r2
 8002652:	4611      	mov	r1, r2
 8002654:	7019      	strb	r1, [r3, #0]
 8002656:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800265a:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d105      	bne.n	800266e <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	e004      	b.n	8002678 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002678:	f107 030f 	add.w	r3, r7, #15
 800267c:	461a      	mov	r2, r3
 800267e:	2101      	movs	r1, #1
 8002680:	204f      	movs	r0, #79	; 0x4f
 8002682:	f001 faff 	bl	8003c84 <RadioSpiWriteRegisters>
 8002686:	4602      	mov	r2, r0
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <SpiritPktCommonFilterOnCrc+0x6c>)
 800268a:	b212      	sxth	r2, r2
 800268c:	4611      	mov	r1, r2
 800268e:	7019      	strb	r1, [r3, #0]
 8002690:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002694:	705a      	strb	r2, [r3, #1]

}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200003e8 	.word	0x200003e8

080026a4 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 80026ae:	1dfb      	adds	r3, r7, #7
 80026b0:	461a      	mov	r2, r3
 80026b2:	2101      	movs	r1, #1
 80026b4:	204b      	movs	r0, #75	; 0x4b
 80026b6:	f001 fae5 	bl	8003c84 <RadioSpiWriteRegisters>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <SpiritPktCommonSetDestinationAddress+0x30>)
 80026be:	b212      	sxth	r2, r2
 80026c0:	4611      	mov	r1, r2
 80026c2:	7019      	strb	r1, [r3, #0]
 80026c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026c8:	705a      	strb	r2, [r3, #1]

}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200003e8 	.word	0x200003e8

080026d8 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 80026e2:	f107 030f 	add.w	r3, r7, #15
 80026e6:	461a      	mov	r2, r3
 80026e8:	2101      	movs	r1, #1
 80026ea:	203a      	movs	r0, #58	; 0x3a
 80026ec:	f001 fb16 	bl	8003d1c <RadioSpiReadRegisters>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b14      	ldr	r3, [pc, #80]	; (8002744 <SpiritQiSqiCheck+0x6c>)
 80026f4:	b212      	sxth	r2, r2
 80026f6:	4611      	mov	r1, r2
 80026f8:	7019      	strb	r1, [r3, #0]
 80026fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026fe:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d105      	bne.n	8002712 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	b2db      	uxtb	r3, r3
 800270e:	73fb      	strb	r3, [r7, #15]
 8002710:	e004      	b.n	800271c <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	f023 0302 	bic.w	r3, r3, #2
 8002718:	b2db      	uxtb	r3, r3
 800271a:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 800271c:	f107 030f 	add.w	r3, r7, #15
 8002720:	461a      	mov	r2, r3
 8002722:	2101      	movs	r1, #1
 8002724:	203a      	movs	r0, #58	; 0x3a
 8002726:	f001 faad 	bl	8003c84 <RadioSpiWriteRegisters>
 800272a:	4602      	mov	r2, r0
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <SpiritQiSqiCheck+0x6c>)
 800272e:	b212      	sxth	r2, r2
 8002730:	4611      	mov	r1, r2
 8002732:	7019      	strb	r1, [r3, #0]
 8002734:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002738:	705a      	strb	r2, [r3, #1]

}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200003e8 	.word	0x200003e8

08002748 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002752:	f107 030f 	add.w	r3, r7, #15
 8002756:	461a      	mov	r2, r3
 8002758:	2101      	movs	r1, #1
 800275a:	203a      	movs	r0, #58	; 0x3a
 800275c:	f001 fade 	bl	8003d1c <RadioSpiReadRegisters>
 8002760:	4602      	mov	r2, r0
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <SpiritQiSetSqiThreshold+0x64>)
 8002764:	b212      	sxth	r2, r2
 8002766:	4611      	mov	r1, r2
 8002768:	7019      	strb	r1, [r3, #0]
 800276a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800276e:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002776:	b2db      	uxtb	r3, r3
 8002778:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	4313      	orrs	r3, r2
 8002780:	b2db      	uxtb	r3, r3
 8002782:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002784:	f107 030f 	add.w	r3, r7, #15
 8002788:	461a      	mov	r2, r3
 800278a:	2101      	movs	r1, #1
 800278c:	203a      	movs	r0, #58	; 0x3a
 800278e:	f001 fa79 	bl	8003c84 <RadioSpiWriteRegisters>
 8002792:	4602      	mov	r2, r0
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <SpiritQiSetSqiThreshold+0x64>)
 8002796:	b212      	sxth	r2, r2
 8002798:	4611      	mov	r1, r2
 800279a:	7019      	strb	r1, [r3, #0]
 800279c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027a0:	705a      	strb	r2, [r3, #1]

}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200003e8 	.word	0x200003e8

080027b0 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3382      	adds	r3, #130	; 0x82
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 80027c4:	f107 030f 	add.w	r3, r7, #15
 80027c8:	461a      	mov	r2, r3
 80027ca:	2101      	movs	r1, #1
 80027cc:	2022      	movs	r0, #34	; 0x22
 80027ce:	f001 fa59 	bl	8003c84 <RadioSpiWriteRegisters>
 80027d2:	4602      	mov	r2, r0
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <SpiritQiSetRssiThresholddBm+0x3c>)
 80027d6:	b212      	sxth	r2, r2
 80027d8:	4611      	mov	r1, r2
 80027da:	7019      	strb	r1, [r3, #0]
 80027dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027e0:	705a      	strb	r2, [r3, #1]

}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200003e8 	.word	0x200003e8

080027f0 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	; 0x30
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 80027f8:	23a0      	movs	r3, #160	; 0xa0
 80027fa:	747b      	strb	r3, [r7, #17]
 80027fc:	f107 0311 	add.w	r3, r7, #17
 8002800:	461a      	mov	r2, r3
 8002802:	2101      	movs	r1, #1
 8002804:	209f      	movs	r0, #159	; 0x9f
 8002806:	f001 fa3d 	bl	8003c84 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	ee07 3a90 	vmov	s15, r3
 8002820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002828:	eddf 6aae 	vldr	s13, [pc, #696]	; 8002ae4 <SpiritRadioInit+0x2f4>
 800282c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002834:	ee17 3a90 	vmov	r3, s15
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 800283a:	2063      	movs	r0, #99	; 0x63
 800283c:	f001 faba 	bl	8003db4 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002840:	2300      	movs	r3, #0
 8002842:	73bb      	strb	r3, [r7, #14]
 8002844:	e004      	b.n	8002850 <SpiritRadioInit+0x60>
 8002846:	7bbb      	ldrb	r3, [r7, #14]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3301      	adds	r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	73bb      	strb	r3, [r7, #14]
 8002850:	7bbb      	ldrb	r3, [r7, #14]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2bff      	cmp	r3, #255	; 0xff
 8002856:	d1f6      	bne.n	8002846 <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002858:	f001 f9ea 	bl	8003c30 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 800285c:	4ba2      	ldr	r3, [pc, #648]	; (8002ae8 <SpiritRadioInit+0x2f8>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b40      	cmp	r3, #64	; 0x40
 8002868:	d1ea      	bne.n	8002840 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 800286a:	4ba0      	ldr	r3, [pc, #640]	; (8002aec <SpiritRadioInit+0x2fc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4aa0      	ldr	r2, [pc, #640]	; (8002af0 <SpiritRadioInit+0x300>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d803      	bhi.n	800287c <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002874:	2000      	movs	r0, #0
 8002876:	f001 f90b 	bl	8003a90 <SpiritRadioSetDigDiv>
 800287a:	e002      	b.n	8002882 <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 800287c:	2001      	movs	r0, #1
 800287e:	f001 f907 	bl	8003a90 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002882:	2062      	movs	r0, #98	; 0x62
 8002884:	f001 fa96 	bl	8003db4 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002888:	2300      	movs	r3, #0
 800288a:	737b      	strb	r3, [r7, #13]
 800288c:	e004      	b.n	8002898 <SpiritRadioInit+0xa8>
 800288e:	7b7b      	ldrb	r3, [r7, #13]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	3301      	adds	r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	737b      	strb	r3, [r7, #13]
 8002898:	7b7b      	ldrb	r3, [r7, #13]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2bff      	cmp	r3, #255	; 0xff
 800289e:	d1f6      	bne.n	800288e <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80028a0:	f001 f9c6 	bl	8003c30 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 80028a4:	4b90      	ldr	r3, [pc, #576]	; (8002ae8 <SpiritRadioInit+0x2f8>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d1ea      	bne.n	8002888 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028bc:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8002af4 <SpiritRadioInit+0x304>
 80028c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80028c4:	4b89      	ldr	r3, [pc, #548]	; (8002aec <SpiritRadioInit+0x2fc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d8:	ee17 3a90 	vmov	r3, s15
 80028dc:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 80028de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 80028ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	025a      	lsls	r2, r3, #9
 80028fa:	4b7c      	ldr	r3, [pc, #496]	; (8002aec <SpiritRadioInit+0x2fc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	099b      	lsrs	r3, r3, #6
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	3301      	adds	r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fc9d 	bl	8002250 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002916:	f107 0310 	add.w	r3, r7, #16
 800291a:	461a      	mov	r2, r3
 800291c:	2101      	movs	r1, #1
 800291e:	20a3      	movs	r0, #163	; 0xa3
 8002920:	f001 f9fc 	bl	8003d1c <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002924:	7c3b      	ldrb	r3, [r7, #16]
 8002926:	f023 0302 	bic.w	r3, r3, #2
 800292a:	b2db      	uxtb	r3, r3
 800292c:	743b      	strb	r3, [r7, #16]
 800292e:	f107 0310 	add.w	r3, r7, #16
 8002932:	461a      	mov	r2, r3
 8002934:	2101      	movs	r1, #1
 8002936:	20a3      	movs	r0, #163	; 0xa3
 8002938:	f001 f9a4 	bl	8003c84 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f107 0216 	add.w	r2, r7, #22
 8002944:	f107 0117 	add.w	r1, r7, #23
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fc3d 	bl	80031c8 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7b5a      	ldrb	r2, [r3, #13]
 8002956:	7dbb      	ldrb	r3, [r7, #22]
 8002958:	4313      	orrs	r3, r2
 800295a:	b2db      	uxtb	r3, r3
 800295c:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 800295e:	f107 0310 	add.w	r3, r7, #16
 8002962:	461a      	mov	r2, r3
 8002964:	2101      	movs	r1, #1
 8002966:	201c      	movs	r0, #28
 8002968:	f001 f9d8 	bl	8003d1c <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f107 0214 	add.w	r2, r7, #20
 8002974:	f107 0115 	add.w	r1, r7, #21
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fdbd 	bl	80034f8 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 800297e:	7d3b      	ldrb	r3, [r7, #20]
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	b25a      	sxtb	r2, r3
 8002984:	7c3b      	ldrb	r3, [r7, #16]
 8002986:	b25b      	sxtb	r3, r3
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	b25b      	sxtb	r3, r3
 800298e:	4313      	orrs	r3, r2
 8002990:	b25a      	sxtb	r2, r3
 8002992:	7d7b      	ldrb	r3, [r7, #21]
 8002994:	b25b      	sxtb	r3, r3
 8002996:	4313      	orrs	r3, r2
 8002998:	b25b      	sxtb	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f107 0212 	add.w	r2, r7, #18
 80029a6:	f107 0113 	add.w	r1, r7, #19
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fcbe 	bl	800332c <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	b25a      	sxtb	r2, r3
 80029b6:	7cbb      	ldrb	r3, [r7, #18]
 80029b8:	b25b      	sxtb	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b25b      	sxtb	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 80029c2:	4b4a      	ldr	r3, [pc, #296]	; (8002aec <SpiritRadioInit+0x2fc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0b1b      	lsrs	r3, r3, #12
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029d0:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002af8 <SpiritRadioInit+0x308>
 80029d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029d8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002afc <SpiritRadioInit+0x30c>
 80029dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 80029e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80029f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a04:	dd09      	ble.n	8002a1a <SpiritRadioInit+0x22a>
 8002a06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a0e:	edc7 7a00 	vstr	s15, [r7]
 8002a12:	783b      	ldrb	r3, [r7, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	e006      	b.n	8002a28 <SpiritRadioInit+0x238>
 8002a1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a22:	edc7 7a00 	vstr	s15, [r7]
 8002a26:	783b      	ldrb	r3, [r7, #0]
 8002a28:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002a2a:	4b30      	ldr	r3, [pc, #192]	; (8002aec <SpiritRadioInit+0x2fc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a30      	ldr	r2, [pc, #192]	; (8002af0 <SpiritRadioInit+0x300>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d802      	bhi.n	8002a3a <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	777b      	strb	r3, [r7, #29]
 8002a38:	e033      	b.n	8002aa2 <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002a3a:	4b2c      	ldr	r3, [pc, #176]	; (8002aec <SpiritRadioInit+0x2fc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0b5b      	lsrs	r3, r3, #13
 8002a40:	ee07 3a90 	vmov	s15, r3
 8002a44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a48:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002af8 <SpiritRadioInit+0x308>
 8002a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a50:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002afc <SpiritRadioInit+0x30c>
 8002a54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002a5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a68:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7c:	dd09      	ble.n	8002a92 <SpiritRadioInit+0x2a2>
 8002a7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a86:	edc7 7a00 	vstr	s15, [r7]
 8002a8a:	783b      	ldrb	r3, [r7, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	e006      	b.n	8002aa0 <SpiritRadioInit+0x2b0>
 8002a92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a9a:	edc7 7a00 	vstr	s15, [r7]
 8002a9e:	783b      	ldrb	r3, [r7, #0]
 8002aa0:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002aa2:	f107 030f 	add.w	r3, r7, #15
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	2007      	movs	r0, #7
 8002aac:	f001 f8ea 	bl	8003c84 <RadioSpiWriteRegisters>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <SpiritRadioInit+0x2f8>)
 8002ab4:	b212      	sxth	r2, r2
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	7019      	strb	r1, [r3, #0]
 8002aba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002abe:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <SpiritRadioInit+0x2fc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <SpiritRadioInit+0x310>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d91e      	bls.n	8002b08 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <SpiritRadioInit+0x2fc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <SpiritRadioInit+0x314>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	bf8c      	ite	hi
 8002ad4:	2301      	movhi	r3, #1
 8002ad6:	2300      	movls	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f86c 	bl	8002bb8 <SpiritRadioSetXtalFlag>
 8002ae0:	e01d      	b.n	8002b1e <SpiritRadioInit+0x32e>
 8002ae2:	bf00      	nop
 8002ae4:	49742400 	.word	0x49742400
 8002ae8:	200003e8 	.word	0x200003e8
 8002aec:	200003e4 	.word	0x200003e4
 8002af0:	01c9c37f 	.word	0x01c9c37f
 8002af4:	48800000 	.word	0x48800000
 8002af8:	49afd520 	.word	0x49afd520
 8002afc:	42800000 	.word	0x42800000
 8002b00:	01c9c380 	.word	0x01c9c380
 8002b04:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002b08:	4b28      	ldr	r3, [pc, #160]	; (8002bac <SpiritRadioInit+0x3bc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a28      	ldr	r2, [pc, #160]	; (8002bb0 <SpiritRadioInit+0x3c0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	bf8c      	ite	hi
 8002b12:	2301      	movhi	r3, #1
 8002b14:	2300      	movls	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 f84d 	bl	8002bb8 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	330c      	adds	r3, #12
 8002b22:	461a      	mov	r2, r3
 8002b24:	2101      	movs	r1, #1
 8002b26:	206c      	movs	r0, #108	; 0x6c
 8002b28:	f001 f8ac 	bl	8003c84 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002b2c:	f107 031c 	add.w	r3, r7, #28
 8002b30:	461a      	mov	r2, r3
 8002b32:	2104      	movs	r1, #4
 8002b34:	200c      	movs	r0, #12
 8002b36:	f001 f8a5 	bl	8003c84 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002b3a:	f107 0318 	add.w	r3, r7, #24
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2104      	movs	r1, #4
 8002b42:	201a      	movs	r0, #26
 8002b44:	f001 f89e 	bl	8003c84 <RadioSpiWriteRegisters>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <SpiritRadioInit+0x3c4>)
 8002b4c:	b212      	sxth	r2, r2
 8002b4e:	4611      	mov	r1, r2
 8002b50:	7019      	strb	r1, [r3, #0]
 8002b52:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b56:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f000 ff15 	bl	8003988 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002b62:	23e3      	movs	r3, #227	; 0xe3
 8002b64:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002b66:	f107 031c 	add.w	r3, r7, #28
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	2099      	movs	r0, #153	; 0x99
 8002b70:	f001 f888 	bl	8003c84 <RadioSpiWriteRegisters>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <SpiritRadioInit+0x3c4>)
 8002b78:	b212      	sxth	r2, r2
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	7019      	strb	r1, [r3, #0]
 8002b7e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b82:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002b84:	2322      	movs	r3, #34	; 0x22
 8002b86:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002b88:	f107 031c 	add.w	r3, r7, #28
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2101      	movs	r1, #1
 8002b90:	20bc      	movs	r0, #188	; 0xbc
 8002b92:	f001 f877 	bl	8003c84 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 f9aa 	bl	8002ef4 <SpiritRadioSetFrequencyBase>
 8002ba0:	4603      	mov	r3, r0
  
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3730      	adds	r7, #48	; 0x30
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200003e4 	.word	0x200003e4
 8002bb0:	017d783f 	.word	0x017d783f
 8002bb4:	200003e8 	.word	0x200003e8

08002bb8 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002bc6:	f107 030f 	add.w	r3, r7, #15
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2101      	movs	r1, #1
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f001 f8a4 	bl	8003d1c <RadioSpiReadRegisters>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <SpiritRadioSetXtalFlag+0x70>)
 8002bd8:	b212      	sxth	r2, r2
 8002bda:	4611      	mov	r1, r2
 8002bdc:	7019      	strb	r1, [r3, #0]
 8002bde:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002be2:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	73fb      	strb	r3, [r7, #15]
 8002bf4:	e004      	b.n	8002c00 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002c00:	f107 030f 	add.w	r3, r7, #15
 8002c04:	461a      	mov	r2, r3
 8002c06:	2101      	movs	r1, #1
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f001 f83b 	bl	8003c84 <RadioSpiWriteRegisters>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <SpiritRadioSetXtalFlag+0x70>)
 8002c12:	b212      	sxth	r2, r2
 8002c14:	4611      	mov	r1, r2
 8002c16:	7019      	strb	r1, [r3, #0]
 8002c18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c1c:	705a      	strb	r2, [r3, #1]
  
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200003e8 	.word	0x200003e8

08002c2c <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a3a      	ldr	r2, [pc, #232]	; (8002d2c <SpiritRadioSearchWCP+0x100>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d306      	bcc.n	8002c56 <SpiritRadioSearchWCP+0x2a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a39      	ldr	r2, [pc, #228]	; (8002d30 <SpiritRadioSearchWCP+0x104>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d802      	bhi.n	8002c56 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002c50:	2306      	movs	r3, #6
 8002c52:	73bb      	strb	r3, [r7, #14]
 8002c54:	e01f      	b.n	8002c96 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a36      	ldr	r2, [pc, #216]	; (8002d34 <SpiritRadioSearchWCP+0x108>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d906      	bls.n	8002c6c <SpiritRadioSearchWCP+0x40>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a35      	ldr	r2, [pc, #212]	; (8002d38 <SpiritRadioSearchWCP+0x10c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d802      	bhi.n	8002c6c <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8002c66:	230c      	movs	r3, #12
 8002c68:	73bb      	strb	r3, [r7, #14]
 8002c6a:	e014      	b.n	8002c96 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a33      	ldr	r2, [pc, #204]	; (8002d3c <SpiritRadioSearchWCP+0x110>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d906      	bls.n	8002c82 <SpiritRadioSearchWCP+0x56>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a32      	ldr	r2, [pc, #200]	; (8002d40 <SpiritRadioSearchWCP+0x114>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d802      	bhi.n	8002c82 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	73bb      	strb	r3, [r7, #14]
 8002c80:	e009      	b.n	8002c96 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2f      	ldr	r2, [pc, #188]	; (8002d44 <SpiritRadioSearchWCP+0x118>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d905      	bls.n	8002c96 <SpiritRadioSearchWCP+0x6a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2e      	ldr	r2, [pc, #184]	; (8002d48 <SpiritRadioSearchWCP+0x11c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d801      	bhi.n	8002c96 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8002c92:	2320      	movs	r3, #32
 8002c94:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a2c      	ldr	r2, [pc, #176]	; (8002d4c <SpiritRadioSearchWCP+0x120>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	099b      	lsrs	r3, r3, #6
 8002ca0:	7bba      	ldrb	r2, [r7, #14]
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8002ca8:	f241 631f 	movw	r3, #5663	; 0x161f
 8002cac:	461a      	mov	r2, r3
 8002cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d302      	bcc.n	8002cc2 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8002cbc:	230f      	movs	r3, #15
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	e023      	b.n	8002d0a <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
 8002cc6:	e005      	b.n	8002cd4 <SpiritRadioSearchWCP+0xa8>
 8002cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd8:	2b0e      	cmp	r3, #14
 8002cda:	dc0c      	bgt.n	8002cf6 <SpiritRadioSearchWCP+0xca>
 8002cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <SpiritRadioSearchWCP+0x124>)
 8002ce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cec:	fb02 f303 	mul.w	r3, r2, r3
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d8e8      	bhi.n	8002cc8 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8002cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <SpiritRadioSearchWCP+0xde>
      i--;
 8002cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8002d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0e:	425a      	negs	r2, r3
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	f002 0207 	and.w	r2, r2, #7
 8002d18:	bf58      	it	pl
 8002d1a:	4253      	negpl	r3, r2
 8002d1c:	b25b      	sxtb	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
  
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	2e5f5680 	.word	0x2e5f5680
 8002d30:	390c2fe0 	.word	0x390c2fe0
 8002d34:	1701e47f 	.word	0x1701e47f
 8002d38:	1c146a60 	.word	0x1c146a60
 8002d3c:	11d260bf 	.word	0x11d260bf
 8002d40:	14ced7e0 	.word	0x14ced7e0
 8002d44:	08e18f3f 	.word	0x08e18f3f
 8002d48:	0a6fd060 	.word	0x0a6fd060
 8002d4c:	10624dd3 	.word	0x10624dd3
 8002d50:	080097f0 	.word	0x080097f0

08002d54 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2104      	movs	r1, #4
 8002d60:	2008      	movs	r0, #8
 8002d62:	f000 ffdb 	bl	8003d1c <RadioSpiReadRegisters>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <SpiritRadioGetSynthWord+0x48>)
 8002d6a:	b212      	sxth	r2, r2
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	7019      	strb	r1, [r3, #0]
 8002d70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d74:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002d76:	793b      	ldrb	r3, [r7, #4]
 8002d78:	055b      	lsls	r3, r3, #21
 8002d7a:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 8002d7e:	797b      	ldrb	r3, [r7, #5]
 8002d80:	035b      	lsls	r3, r3, #13
 8002d82:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002d84:	79bb      	ldrb	r3, [r7, #6]
 8002d86:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002d88:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002d8a:	79fa      	ldrb	r2, [r7, #7]
 8002d8c:	08d2      	lsrs	r2, r2, #3
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	4413      	add	r3, r2
  
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200003e8 	.word	0x200003e8

08002da0 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8002da6:	1dfb      	adds	r3, r7, #7
 8002da8:	461a      	mov	r2, r3
 8002daa:	2101      	movs	r1, #1
 8002dac:	200b      	movs	r0, #11
 8002dae:	f000 ffb5 	bl	8003d1c <RadioSpiReadRegisters>
 8002db2:	4602      	mov	r2, r0
 8002db4:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <SpiritRadioGetBand+0x58>)
 8002db6:	b212      	sxth	r2, r2
 8002db8:	4611      	mov	r1, r2
 8002dba:	7019      	strb	r1, [r3, #0]
 8002dbc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002dc0:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e00e      	b.n	8002dee <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d101      	bne.n	8002dde <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e007      	b.n	8002dee <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d101      	bne.n	8002dec <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8002de8:	2302      	movs	r3, #2
 8002dea:	e000      	b.n	8002dee <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8002dec:	2303      	movs	r3, #3
  }
  
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200003e8 	.word	0x200003e8

08002dfc <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8002e02:	1dfb      	adds	r3, r7, #7
 8002e04:	461a      	mov	r2, r3
 8002e06:	2101      	movs	r1, #1
 8002e08:	206c      	movs	r0, #108	; 0x6c
 8002e0a:	f000 ff87 	bl	8003d1c <RadioSpiReadRegisters>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <SpiritRadioGetChannel+0x2c>)
 8002e12:	b212      	sxth	r2, r2
 8002e14:	4611      	mov	r1, r2
 8002e16:	7019      	strb	r1, [r3, #0]
 8002e18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e1c:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
  
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	200003e8 	.word	0x200003e8

08002e2c <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8002e32:	1dfb      	adds	r3, r7, #7
 8002e34:	461a      	mov	r2, r3
 8002e36:	2101      	movs	r1, #1
 8002e38:	200c      	movs	r0, #12
 8002e3a:	f000 ff6f 	bl	8003d1c <RadioSpiReadRegisters>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <SpiritRadioGetChannelSpace+0x38>)
 8002e42:	b212      	sxth	r2, r2
 8002e44:	4611      	mov	r1, r2
 8002e46:	7019      	strb	r1, [r3, #0]
 8002e48:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e4c:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <SpiritRadioGetChannelSpace+0x3c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	0bdb      	lsrs	r3, r3, #15
  
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200003e8 	.word	0x200003e8
 8002e68:	200003e4 	.word	0x200003e4

08002e6c <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	461a      	mov	r2, r3
 8002e76:	2102      	movs	r1, #2
 8002e78:	200e      	movs	r0, #14
 8002e7a:	f000 ff4f 	bl	8003d1c <RadioSpiReadRegisters>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <SpiritRadioGetFrequencyOffset+0x80>)
 8002e82:	b212      	sxth	r2, r2
 8002e84:	4611      	mov	r1, r2
 8002e86:	7019      	strb	r1, [r3, #0]
 8002e88:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e8c:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 8002e8e:	793b      	ldrb	r3, [r7, #4]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	797b      	ldrb	r3, [r7, #5]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8002ea0:	887b      	ldrh	r3, [r7, #2]
 8002ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 8002eaa:	887b      	ldrh	r3, [r7, #2]
 8002eac:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002eb0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	e004      	b.n	8002ec4 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8002ec4:	1cbb      	adds	r3, r7, #2
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8002eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ece:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <SpiritRadioGetFrequencyOffset+0x84>)
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	da03      	bge.n	8002ee2 <SpiritRadioGetFrequencyOffset+0x76>
 8002eda:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8002ede:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002ee2:	149b      	asrs	r3, r3, #18
  
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200003e8 	.word	0x200003e8
 8002ef0:	200003e4 	.word	0x200003e4

08002ef4 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8002ef4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ef8:	b08a      	sub	sp, #40	; 0x28
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a79      	ldr	r2, [pc, #484]	; (80030ec <SpiritRadioSetFrequencyBase+0x1f8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d307      	bcc.n	8002f1c <SpiritRadioSetFrequencyBase+0x28>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a78      	ldr	r2, [pc, #480]	; (80030f0 <SpiritRadioSetFrequencyBase+0x1fc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d803      	bhi.n	8002f1c <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f1a:	e022      	b.n	8002f62 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a75      	ldr	r2, [pc, #468]	; (80030f4 <SpiritRadioSetFrequencyBase+0x200>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d907      	bls.n	8002f34 <SpiritRadioSetFrequencyBase+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a74      	ldr	r2, [pc, #464]	; (80030f8 <SpiritRadioSetFrequencyBase+0x204>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d803      	bhi.n	8002f34 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f32:	e016      	b.n	8002f62 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a71      	ldr	r2, [pc, #452]	; (80030fc <SpiritRadioSetFrequencyBase+0x208>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d907      	bls.n	8002f4c <SpiritRadioSetFrequencyBase+0x58>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a70      	ldr	r2, [pc, #448]	; (8003100 <SpiritRadioSetFrequencyBase+0x20c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d803      	bhi.n	8002f4c <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8002f44:	2302      	movs	r3, #2
 8002f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f4a:	e00a      	b.n	8002f62 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a6d      	ldr	r2, [pc, #436]	; (8003104 <SpiritRadioSetFrequencyBase+0x210>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d906      	bls.n	8002f62 <SpiritRadioSetFrequencyBase+0x6e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a6c      	ldr	r2, [pc, #432]	; (8003108 <SpiritRadioSetFrequencyBase+0x214>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d802      	bhi.n	8002f62 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002f62:	f7ff ff83 	bl	8002e6c <SpiritRadioGetFrequencyOffset>
 8002f66:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002f68:	f7ff ff60 	bl	8002e2c <SpiritRadioGetChannelSpace>
 8002f6c:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002f6e:	f7ff ff45 	bl	8002dfc <SpiritRadioGetChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002f76:	6a3a      	ldr	r2, [r7, #32]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	441a      	add	r2, r3
 8002f7c:	7efb      	ldrb	r3, [r7, #27]
 8002f7e:	69f9      	ldr	r1, [r7, #28]
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8002f88:	f000 fd60 	bl	8003a4c <SpiritRadioGetRefDiv>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	3301      	adds	r3, #1
 8002f90:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8002f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d839      	bhi.n	800300e <SpiritRadioSetFrequencyBase+0x11a>
 8002f9a:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <SpiritRadioSetFrequencyBase+0xac>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	08002ff9 	.word	0x08002ff9
 8002fa4:	08002fe1 	.word	0x08002fe1
 8002fa8:	08002fc9 	.word	0x08002fc9
 8002fac:	08002fb1 	.word	0x08002fb1
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	4a56      	ldr	r2, [pc, #344]	; (800310c <SpiritRadioSetFrequencyBase+0x218>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d803      	bhi.n	8002fc0 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7fe fdf1 	bl	8001ba0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002fbe:	e026      	b.n	800300e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f7fe fded 	bl	8001ba0 <SpiritCalibrationSelectVco>
    break;
 8002fc6:	e022      	b.n	800300e <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	4a51      	ldr	r2, [pc, #324]	; (8003110 <SpiritRadioSetFrequencyBase+0x21c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d803      	bhi.n	8002fd8 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7fe fde5 	bl	8001ba0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002fd6:	e01a      	b.n	800300e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002fd8:	2001      	movs	r0, #1
 8002fda:	f7fe fde1 	bl	8001ba0 <SpiritCalibrationSelectVco>
    break;
 8002fde:	e016      	b.n	800300e <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	4a4c      	ldr	r2, [pc, #304]	; (8003114 <SpiritRadioSetFrequencyBase+0x220>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d803      	bhi.n	8002ff0 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fe fdd9 	bl	8001ba0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002fee:	e00e      	b.n	800300e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	f7fe fdd5 	bl	8001ba0 <SpiritCalibrationSelectVco>
    break;
 8002ff6:	e00a      	b.n	800300e <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	4a47      	ldr	r2, [pc, #284]	; (8003118 <SpiritRadioSetFrequencyBase+0x224>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d803      	bhi.n	8003008 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003000:	2000      	movs	r0, #0
 8003002:	f7fe fdcd 	bl	8001ba0 <SpiritCalibrationSelectVco>
 8003006:	e002      	b.n	800300e <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003008:	2001      	movs	r0, #1
 800300a:	f7fe fdc9 	bl	8001ba0 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800300e:	6978      	ldr	r0, [r7, #20]
 8003010:	f7ff fe0c 	bl	8002c2c <SpiritRadioSearchWCP>
 8003014:	4603      	mov	r3, r0
 8003016:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800301c:	4a3f      	ldr	r2, [pc, #252]	; (800311c <SpiritRadioSetFrequencyBase+0x228>)
 800301e:	5cd3      	ldrb	r3, [r2, r3]
 8003020:	461a      	mov	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd fa6b 	bl	8000504 <__aeabi_ui2d>
 800302e:	4604      	mov	r4, r0
 8003030:	460d      	mov	r5, r1
 8003032:	7cfb      	ldrb	r3, [r7, #19]
 8003034:	049b      	lsls	r3, r3, #18
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fa74 	bl	8000524 <__aeabi_i2d>
 800303c:	4680      	mov	r8, r0
 800303e:	4689      	mov	r9, r1
 8003040:	4b37      	ldr	r3, [pc, #220]	; (8003120 <SpiritRadioSetFrequencyBase+0x22c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd fa5d 	bl	8000504 <__aeabi_ui2d>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4640      	mov	r0, r8
 8003050:	4649      	mov	r1, r9
 8003052:	f7fd fbfb 	bl	800084c <__aeabi_ddiv>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4620      	mov	r0, r4
 800305c:	4629      	mov	r1, r5
 800305e:	f7fd facb 	bl	80005f8 <__aeabi_dmul>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	f7fd fd9d 	bl	8000ba8 <__aeabi_d2uiz>
 800306e:	4603      	mov	r3, r0
 8003070:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	0d5b      	lsrs	r3, r3, #21
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	b2da      	uxtb	r2, r3
 800307e:	7cbb      	ldrb	r3, [r7, #18]
 8003080:	015b      	lsls	r3, r3, #5
 8003082:	b2db      	uxtb	r3, r3
 8003084:	4313      	orrs	r3, r2
 8003086:	b2db      	uxtb	r3, r3
 8003088:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0b5b      	lsrs	r3, r3, #13
 800308e:	b2db      	uxtb	r3, r3
 8003090:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	b2db      	uxtb	r3, r3
 8003098:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030a6:	491f      	ldr	r1, [pc, #124]	; (8003124 <SpiritRadioSetFrequencyBase+0x230>)
 80030a8:	5ccb      	ldrb	r3, [r1, r3]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80030b0:	f107 0308 	add.w	r3, r7, #8
 80030b4:	461a      	mov	r2, r3
 80030b6:	2104      	movs	r1, #4
 80030b8:	2008      	movs	r0, #8
 80030ba:	f000 fde3 	bl	8003c84 <RadioSpiWriteRegisters>
 80030be:	4602      	mov	r2, r0
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <SpiritRadioSetFrequencyBase+0x234>)
 80030c2:	b212      	sxth	r2, r2
 80030c4:	4611      	mov	r1, r2
 80030c6:	7019      	strb	r1, [r3, #0]
 80030c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030cc:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 80030ce:	4b17      	ldr	r3, [pc, #92]	; (800312c <SpiritRadioSetFrequencyBase+0x238>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d103      	bne.n	80030de <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 80030d6:	f7fe ffa7 	bl	8002028 <SpiritManagementWaVcoCalibration>
 80030da:	4603      	mov	r3, r0
 80030dc:	e000      	b.n	80030e0 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3728      	adds	r7, #40	; 0x28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030ea:	bf00      	nop
 80030ec:	2e5f5680 	.word	0x2e5f5680
 80030f0:	390c2fe0 	.word	0x390c2fe0
 80030f4:	1701e47f 	.word	0x1701e47f
 80030f8:	1c146a60 	.word	0x1c146a60
 80030fc:	11d260bf 	.word	0x11d260bf
 8003100:	14ced7e0 	.word	0x14ced7e0
 8003104:	08e18f3f 	.word	0x08e18f3f
 8003108:	0a6fd060 	.word	0x0a6fd060
 800310c:	099cf4e1 	.word	0x099cf4e1
 8003110:	1339e9c3 	.word	0x1339e9c3
 8003114:	19a28d05 	.word	0x19a28d05
 8003118:	33451a0a 	.word	0x33451a0a
 800311c:	08009734 	.word	0x08009734
 8003120:	200003e4 	.word	0x200003e4
 8003124:	08009738 	.word	0x08009738
 8003128:	200003e8 	.word	0x200003e8
 800312c:	20000025 	.word	0x20000025

08003130 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003130:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003138:	f7ff fe0c 	bl	8002d54 <SpiritRadioGetSynthWord>
 800313c:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 800313e:	f7ff fe2f 	bl	8002da0 <SpiritRadioGetBand>
 8003142:	4603      	mov	r3, r0
 8003144:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8003146:	f000 fc81 	bl	8003a4c <SpiritRadioGetRefDiv>
 800314a:	4603      	mov	r3, r0
 800314c:	3301      	adds	r3, #1
 800314e:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7fd f9d7 	bl	8000504 <__aeabi_ui2d>
 8003156:	4604      	mov	r4, r0
 8003158:	460d      	mov	r5, r1
 800315a:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <SpiritRadioGetFrequencyBase+0x90>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd f9d0 	bl	8000504 <__aeabi_ui2d>
 8003164:	4680      	mov	r8, r0
 8003166:	4689      	mov	r9, r1
 8003168:	78bb      	ldrb	r3, [r7, #2]
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	4915      	ldr	r1, [pc, #84]	; (80031c4 <SpiritRadioGetFrequencyBase+0x94>)
 800316e:	5c8a      	ldrb	r2, [r1, r2]
 8003170:	fb02 f303 	mul.w	r3, r2, r3
 8003174:	049b      	lsls	r3, r3, #18
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd f9d4 	bl	8000524 <__aeabi_i2d>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4640      	mov	r0, r8
 8003182:	4649      	mov	r1, r9
 8003184:	f7fd fb62 	bl	800084c <__aeabi_ddiv>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4620      	mov	r0, r4
 800318e:	4629      	mov	r1, r5
 8003190:	f7fd fa32 	bl	80005f8 <__aeabi_dmul>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	ec43 2b17 	vmov	d7, r2, r3
 800319c:	eeb0 0a47 	vmov.f32	s0, s14
 80031a0:	eef0 0a67 	vmov.f32	s1, s15
 80031a4:	f006 f8e0 	bl	8009368 <round>
 80031a8:	ec53 2b10 	vmov	r2, r3, d0
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	f7fd fcfa 	bl	8000ba8 <__aeabi_d2uiz>
 80031b4:	4603      	mov	r3, r0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031c0:	200003e4 	.word	0x200003e4
 80031c4:	08009734 	.word	0x08009734

080031c8 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 80031d8:	230f      	movs	r3, #15
 80031da:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 80031e0:	f000 fc86 	bl	8003af0 <SpiritRadioGetDigDiv>
 80031e4:	4603      	mov	r3, r0
 80031e6:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 80031e8:	e015      	b.n	8003216 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 80031ea:	4b4f      	ldr	r3, [pc, #316]	; (8003328 <SpiritRadioSearchDatarateME+0x160>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031f2:	f1c3 0114 	rsb	r1, r3, #20
 80031f6:	7ebb      	ldrb	r3, [r7, #26]
 80031f8:	440b      	add	r3, r1
 80031fa:	fa22 f303 	lsr.w	r3, r2, r3
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	429a      	cmp	r2, r3
 8003202:	d302      	bcc.n	800320a <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8003204:	2301      	movs	r3, #1
 8003206:	763b      	strb	r3, [r7, #24]
 8003208:	e005      	b.n	8003216 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 800320a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8003216:	7e3b      	ldrb	r3, [r7, #24]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d103      	bne.n	8003226 <SpiritRadioSearchDatarateME+0x5e>
 800321e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003222:	2b00      	cmp	r3, #0
 8003224:	dae1      	bge.n	80031ea <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 8003226:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800322a:	2b00      	cmp	r3, #0
 800322c:	da01      	bge.n	8003232 <SpiritRadioSearchDatarateME+0x6a>
 800322e:	2300      	movs	r3, #0
 8003230:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 8003232:	7ffa      	ldrb	r2, [r7, #31]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003238:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800323c:	f1c3 0317 	rsb	r3, r3, #23
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	409a      	lsls	r2, r3
 8003244:	4b38      	ldr	r3, [pc, #224]	; (8003328 <SpiritRadioSearchDatarateME+0x160>)
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	7ebb      	ldrb	r3, [r7, #26]
 800324a:	3305      	adds	r3, #5
 800324c:	fa21 f303 	lsr.w	r3, r1, r3
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8003256:	2300      	movs	r3, #0
 8003258:	77bb      	strb	r3, [r7, #30]
 800325a:	e031      	b.n	80032c0 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 800325c:	7e7a      	ldrb	r2, [r7, #25]
 800325e:	7fbb      	ldrb	r3, [r7, #30]
 8003260:	4413      	add	r3, r2
 8003262:	2b01      	cmp	r3, #1
 8003264:	d021      	beq.n	80032aa <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	b29a      	uxth	r2, r3
 800326a:	7e7b      	ldrb	r3, [r7, #25]
 800326c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8003270:	7fbb      	ldrb	r3, [r7, #30]
 8003272:	440b      	add	r3, r1
 8003274:	3b01      	subs	r3, #1
 8003276:	4618      	mov	r0, r3
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <SpiritRadioSearchDatarateME+0x160>)
 800327a:	6819      	ldr	r1, [r3, #0]
 800327c:	7ebb      	ldrb	r3, [r7, #26]
 800327e:	3305      	adds	r3, #5
 8003280:	fa21 f303 	lsr.w	r3, r1, r3
 8003284:	fb03 f100 	mul.w	r1, r3, r0
 8003288:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800328c:	f1c3 0317 	rsb	r3, r3, #23
 8003290:	fa21 f303 	lsr.w	r3, r1, r3
 8003294:	b29b      	uxth	r3, r3
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	b29a      	uxth	r2, r3
 800329a:	7fbb      	ldrb	r3, [r7, #30]
 800329c:	b212      	sxth	r2, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	3320      	adds	r3, #32
 80032a2:	443b      	add	r3, r7
 80032a4:	f823 2c10 	strh.w	r2, [r3, #-16]
 80032a8:	e007      	b.n	80032ba <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 80032aa:	7fbb      	ldrb	r3, [r7, #30]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	3320      	adds	r3, #32
 80032b0:	443b      	add	r3, r7
 80032b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80032b6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 80032ba:	7fbb      	ldrb	r3, [r7, #30]
 80032bc:	3301      	adds	r3, #1
 80032be:	77bb      	strb	r3, [r7, #30]
 80032c0:	7fbb      	ldrb	r3, [r7, #30]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d9ca      	bls.n	800325c <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 80032c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032ca:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	76fb      	strb	r3, [r7, #27]
 80032d0:	e021      	b.n	8003316 <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 80032d2:	7efb      	ldrb	r3, [r7, #27]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	3320      	adds	r3, #32
 80032d8:	443b      	add	r3, r7
 80032da:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bfb8      	it	lt
 80032e2:	425b      	neglt	r3, r3
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	8bba      	ldrh	r2, [r7, #28]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d911      	bls.n	8003310 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 80032ec:	7efb      	ldrb	r3, [r7, #27]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	3320      	adds	r3, #32
 80032f2:	443b      	add	r3, r7
 80032f4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bfb8      	it	lt
 80032fc:	425b      	neglt	r3, r3
 80032fe:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003300:	7e7a      	ldrb	r2, [r7, #25]
 8003302:	7efb      	ldrb	r3, [r7, #27]
 8003304:	4413      	add	r3, r2
 8003306:	b2db      	uxtb	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b2da      	uxtb	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003310:	7efb      	ldrb	r3, [r7, #27]
 8003312:	3301      	adds	r3, #1
 8003314:	76fb      	strb	r3, [r7, #27]
 8003316:	7efb      	ldrb	r3, [r7, #27]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d9da      	bls.n	80032d2 <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	200003e4 	.word	0x200003e4

0800332c <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	; 0x28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 800333e:	f000 fbd7 	bl	8003af0 <SpiritRadioGetDigDiv>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003348:	2302      	movs	r3, #2
 800334a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800334e:	e002      	b.n	8003356 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003350:	2301      	movs	r3, #1
 8003352:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003356:	4b63      	ldr	r3, [pc, #396]	; (80034e4 <SpiritRadioSearchChannelBwME+0x1b8>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003362:	4a61      	ldr	r2, [pc, #388]	; (80034e8 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 800336c:	2300      	movs	r3, #0
 800336e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003372:	e006      	b.n	8003382 <SpiritRadioSearchChannelBwME+0x56>
 8003374:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003378:	b2db      	uxtb	r3, r3
 800337a:	3301      	adds	r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003382:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003386:	2b59      	cmp	r3, #89	; 0x59
 8003388:	dc0f      	bgt.n	80033aa <SpiritRadioSearchChannelBwME+0x7e>
 800338a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800338e:	4a57      	ldr	r2, [pc, #348]	; (80034ec <SpiritRadioSearchChannelBwME+0x1c0>)
 8003390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003394:	461a      	mov	r2, r3
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fb02 f303 	mul.w	r3, r2, r3
 800339c:	4a54      	ldr	r2, [pc, #336]	; (80034f0 <SpiritRadioSearchChannelBwME+0x1c4>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	0adb      	lsrs	r3, r3, #11
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d3e4      	bcc.n	8003374 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 80033aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d077      	beq.n	80034a2 <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80033b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033b6:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 80033b8:	2300      	movs	r3, #0
 80033ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80033be:	e03a      	b.n	8003436 <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 80033c0:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80033c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80033c8:	4413      	add	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	dc06      	bgt.n	80033dc <SpiritRadioSearchChannelBwME+0xb0>
 80033ce:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80033d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80033d6:	4413      	add	r3, r2
 80033d8:	2b5a      	cmp	r3, #90	; 0x5a
 80033da:	dc1e      	bgt.n	800341a <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	b29a      	uxth	r2, r3
 80033e0:	f997 101b 	ldrsb.w	r1, [r7, #27]
 80033e4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80033e8:	440b      	add	r3, r1
 80033ea:	3b01      	subs	r3, #1
 80033ec:	493f      	ldr	r1, [pc, #252]	; (80034ec <SpiritRadioSearchChannelBwME+0x1c0>)
 80033ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80033f2:	4619      	mov	r1, r3
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	493d      	ldr	r1, [pc, #244]	; (80034f0 <SpiritRadioSearchChannelBwME+0x1c4>)
 80033fc:	fba1 1303 	umull	r1, r3, r1, r3
 8003400:	0adb      	lsrs	r3, r3, #11
 8003402:	b29b      	uxth	r3, r3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	b29a      	uxth	r2, r3
 8003408:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800340c:	b212      	sxth	r2, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	3328      	adds	r3, #40	; 0x28
 8003412:	443b      	add	r3, r7
 8003414:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003418:	e008      	b.n	800342c <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 800341a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	3328      	adds	r3, #40	; 0x28
 8003422:	443b      	add	r3, r7
 8003424:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003428:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 800342c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003430:	3301      	adds	r3, #1
 8003432:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003436:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800343a:	2b02      	cmp	r3, #2
 800343c:	d9c0      	bls.n	80033c0 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 800343e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003442:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003444:	2300      	movs	r3, #0
 8003446:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800344a:	e026      	b.n	800349a <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 800344c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	3328      	adds	r3, #40	; 0x28
 8003454:	443b      	add	r3, r7
 8003456:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	bfb8      	it	lt
 800345e:	425b      	neglt	r3, r3
 8003460:	b29b      	uxth	r3, r3
 8003462:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003464:	429a      	cmp	r2, r3
 8003466:	d913      	bls.n	8003490 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003468:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	3328      	adds	r3, #40	; 0x28
 8003470:	443b      	add	r3, r7
 8003472:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	bfb8      	it	lt
 800347a:	425b      	neglt	r3, r3
 800347c:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 800347e:	7efa      	ldrb	r2, [r7, #27]
 8003480:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003484:	4413      	add	r3, r2
 8003486:	b2db      	uxtb	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8003490:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003494:	3301      	adds	r3, #1
 8003496:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800349a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d9d4      	bls.n	800344c <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 80034a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80034a6:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <SpiritRadioSearchChannelBwME+0x1c8>)
 80034a8:	fb82 1203 	smull	r1, r2, r2, r3
 80034ac:	1052      	asrs	r2, r2, #1
 80034ae:	17db      	asrs	r3, r3, #31
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	b25b      	sxtb	r3, r3
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 80034ba:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <SpiritRadioSearchChannelBwME+0x1c8>)
 80034c0:	fb83 1302 	smull	r1, r3, r3, r2
 80034c4:	1059      	asrs	r1, r3, #1
 80034c6:	17d3      	asrs	r3, r2, #31
 80034c8:	1ac9      	subs	r1, r1, r3
 80034ca:	460b      	mov	r3, r1
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	b25b      	sxtb	r3, r3
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	701a      	strb	r2, [r3, #0]
  
}
 80034da:	bf00      	nop
 80034dc:	3728      	adds	r7, #40	; 0x28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200003e4 	.word	0x200003e4
 80034e8:	51eb851f 	.word	0x51eb851f
 80034ec:	0800973c 	.word	0x0800973c
 80034f0:	c9a633fd 	.word	0xc9a633fd
 80034f4:	38e38e39 	.word	0x38e38e39

080034f8 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	b08a      	sub	sp, #40	; 0x28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003508:	4b53      	ldr	r3, [pc, #332]	; (8003658 <SpiritRadioSearchFreqDevME+0x160>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	ee07 3a90 	vmov	s15, r3
 8003510:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003514:	eddf 6a51 	vldr	s13, [pc, #324]	; 800365c <SpiritRadioSearchFreqDevME+0x164>
 8003518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800351c:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003520:	2300      	movs	r3, #0
 8003522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003526:	e028      	b.n	800357a <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800352c:	2201      	movs	r2, #1
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	4618      	mov	r0, r3
 8003534:	f7fc fff6 	bl	8000524 <__aeabi_i2d>
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	4b48      	ldr	r3, [pc, #288]	; (8003660 <SpiritRadioSearchFreqDevME+0x168>)
 800353e:	f7fd f85b 	bl	80005f8 <__aeabi_dmul>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4610      	mov	r0, r2
 8003548:	4619      	mov	r1, r3
 800354a:	f7fd fb2d 	bl	8000ba8 <__aeabi_d2uiz>
 800354e:	ee07 0a90 	vmov	s15, r0
 8003552:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003556:	edd7 7a06 	vldr	s15, [r7, #24]
 800355a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003562:	ee17 3a90 	vmov	r3, s15
 8003566:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	d309      	bcc.n	8003584 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003574:	3301      	adds	r3, #1
 8003576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800357a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800357e:	2b09      	cmp	r3, #9
 8003580:	d9d2      	bls.n	8003528 <SpiritRadioSearchFreqDevME+0x30>
 8003582:	e000      	b.n	8003586 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003584:	bf00      	nop
  }
  (*pcE) = i;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800358c:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 800358e:	2300      	movs	r3, #0
 8003590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003594:	e043      	b.n	800361e <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 800359a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fc ffc0 	bl	8000524 <__aeabi_i2d>
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	4b2e      	ldr	r3, [pc, #184]	; (8003664 <SpiritRadioSearchFreqDevME+0x16c>)
 80035aa:	f7fc fe6f 	bl	800028c <__adddf3>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4610      	mov	r0, r2
 80035b4:	4619      	mov	r1, r3
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035be:	f7fd f945 	bl	800084c <__aeabi_ddiv>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4614      	mov	r4, r2
 80035c8:	461d      	mov	r5, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	2301      	movs	r3, #1
 80035d2:	4093      	lsls	r3, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ffa5 	bl	8000524 <__aeabi_i2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4620      	mov	r0, r4
 80035e0:	4629      	mov	r1, r5
 80035e2:	f7fd f809 	bl	80005f8 <__aeabi_dmul>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd fadb 	bl	8000ba8 <__aeabi_d2uiz>
 80035f2:	ee07 0a90 	vmov	s15, r0
 80035f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80035fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003606:	ee17 3a90 	vmov	r3, s15
 800360a:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	429a      	cmp	r2, r3
 8003612:	d309      	bcc.n	8003628 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003618:	3301      	adds	r3, #1
 800361a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800361e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003622:	2b07      	cmp	r3, #7
 8003624:	d9b7      	bls.n	8003596 <SpiritRadioSearchFreqDevME+0x9e>
 8003626:	e000      	b.n	800362a <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003628:	bf00      	nop
  }
  
  (*pcM)=i;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003630:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	1ad2      	subs	r2, r2, r3
 8003638:	69f9      	ldr	r1, [r7, #28]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1acb      	subs	r3, r1, r3
 800363e:	429a      	cmp	r2, r3
 8003640:	d205      	bcs.n	800364e <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	3b01      	subs	r3, #1
 8003648:	b2da      	uxtb	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	701a      	strb	r2, [r3, #0]
  
}
 800364e:	bf00      	nop
 8003650:	3728      	adds	r7, #40	; 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bdb0      	pop	{r4, r5, r7, pc}
 8003656:	bf00      	nop
 8003658:	200003e4 	.word	0x200003e4
 800365c:	48800000 	.word	0x48800000
 8003660:	401e0000 	.word	0x401e0000
 8003664:	40200000 	.word	0x40200000

08003668 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003674:	2300      	movs	r3, #0
 8003676:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003678:	2300      	movs	r3, #0
 800367a:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4a74      	ldr	r2, [pc, #464]	; (8003850 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d30c      	bcc.n	800369e <SpiritRadioGetdBm2Reg+0x36>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a73      	ldr	r2, [pc, #460]	; (8003854 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d808      	bhi.n	800369e <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 800368c:	2300      	movs	r3, #0
 800368e:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a71      	ldr	r2, [pc, #452]	; (8003858 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d822      	bhi.n	80036de <SpiritRadioGetdBm2Reg+0x76>
 8003698:	2301      	movs	r3, #1
 800369a:	75fb      	strb	r3, [r7, #23]
 800369c:	e01f      	b.n	80036de <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4a6e      	ldr	r2, [pc, #440]	; (800385c <SpiritRadioGetdBm2Reg+0x1f4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d906      	bls.n	80036b4 <SpiritRadioGetdBm2Reg+0x4c>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4a6d      	ldr	r2, [pc, #436]	; (8003860 <SpiritRadioGetdBm2Reg+0x1f8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d802      	bhi.n	80036b4 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 80036ae:	2302      	movs	r3, #2
 80036b0:	75fb      	strb	r3, [r7, #23]
 80036b2:	e014      	b.n	80036de <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a6b      	ldr	r2, [pc, #428]	; (8003864 <SpiritRadioGetdBm2Reg+0x1fc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d906      	bls.n	80036ca <SpiritRadioGetdBm2Reg+0x62>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a6a      	ldr	r2, [pc, #424]	; (8003868 <SpiritRadioGetdBm2Reg+0x200>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d802      	bhi.n	80036ca <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 80036c4:	2303      	movs	r3, #3
 80036c6:	75fb      	strb	r3, [r7, #23]
 80036c8:	e009      	b.n	80036de <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a67      	ldr	r2, [pc, #412]	; (800386c <SpiritRadioGetdBm2Reg+0x204>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d905      	bls.n	80036de <SpiritRadioGetdBm2Reg+0x76>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4a66      	ldr	r2, [pc, #408]	; (8003870 <SpiritRadioGetdBm2Reg+0x208>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d801      	bhi.n	80036de <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 80036da:	2304      	movs	r3, #4
 80036dc:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 80036de:	2301      	movs	r3, #1
 80036e0:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 80036e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80036e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ee:	dd2f      	ble.n	8003750 <SpiritRadioGetdBm2Reg+0xe8>
 80036f0:	7dfa      	ldrb	r2, [r7, #23]
 80036f2:	4960      	ldr	r1, [pc, #384]	; (8003874 <SpiritRadioGetdBm2Reg+0x20c>)
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	3308      	adds	r3, #8
 8003700:	edd3 7a00 	vldr	s15, [r3]
 8003704:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8003708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370c:	7dfa      	ldrb	r2, [r7, #23]
 800370e:	4959      	ldr	r1, [pc, #356]	; (8003874 <SpiritRadioGetdBm2Reg+0x20c>)
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	440b      	add	r3, r1
 800371a:	330c      	adds	r3, #12
 800371c:	ed93 6a00 	vldr	s12, [r3]
 8003720:	7dfa      	ldrb	r2, [r7, #23]
 8003722:	4954      	ldr	r1, [pc, #336]	; (8003874 <SpiritRadioGetdBm2Reg+0x20c>)
 8003724:	4613      	mov	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	440b      	add	r3, r1
 800372e:	3308      	adds	r3, #8
 8003730:	edd3 6a00 	vldr	s13, [r3]
 8003734:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800373c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003748:	dd02      	ble.n	8003750 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 800374a:	2300      	movs	r3, #0
 800374c:	75bb      	strb	r3, [r7, #22]
 800374e:	e035      	b.n	80037bc <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003750:	edd7 7a02 	vldr	s15, [r7, #8]
 8003754:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375c:	d82e      	bhi.n	80037bc <SpiritRadioGetdBm2Reg+0x154>
 800375e:	7dfa      	ldrb	r2, [r7, #23]
 8003760:	4944      	ldr	r1, [pc, #272]	; (8003874 <SpiritRadioGetdBm2Reg+0x20c>)
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	440b      	add	r3, r1
 800376c:	3308      	adds	r3, #8
 800376e:	edd3 7a00 	vldr	s15, [r3]
 8003772:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003878 <SpiritRadioGetdBm2Reg+0x210>
 8003776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800377a:	7dfa      	ldrb	r2, [r7, #23]
 800377c:	493d      	ldr	r1, [pc, #244]	; (8003874 <SpiritRadioGetdBm2Reg+0x20c>)
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	440b      	add	r3, r1
 8003788:	330c      	adds	r3, #12
 800378a:	ed93 6a00 	vldr	s12, [r3]
 800378e:	7dfa      	ldrb	r2, [r7, #23]
 8003790:	4938      	ldr	r1, [pc, #224]	; (8003874 <SpiritRadioGetdBm2Reg+0x20c>)
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	440b      	add	r3, r1
 800379c:	3308      	adds	r3, #8
 800379e:	edd3 6a00 	vldr	s13, [r3]
 80037a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80037a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80037ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b6:	d501      	bpl.n	80037bc <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 80037b8:	2302      	movs	r3, #2
 80037ba:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 80037bc:	7dfa      	ldrb	r2, [r7, #23]
 80037be:	7dbb      	ldrb	r3, [r7, #22]
 80037c0:	0059      	lsls	r1, r3, #1
 80037c2:	482c      	ldr	r0, [pc, #176]	; (8003874 <SpiritRadioGetdBm2Reg+0x20c>)
 80037c4:	4613      	mov	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	440b      	add	r3, r1
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4403      	add	r3, r0
 80037d2:	ed93 7a00 	vldr	s14, [r3]
 80037d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037de:	7dfa      	ldrb	r2, [r7, #23]
 80037e0:	7dbb      	ldrb	r3, [r7, #22]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	1c59      	adds	r1, r3, #1
 80037e6:	4823      	ldr	r0, [pc, #140]	; (8003874 <SpiritRadioGetdBm2Reg+0x20c>)
 80037e8:	4613      	mov	r3, r2
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4413      	add	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	440b      	add	r3, r1
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4403      	add	r3, r0
 80037f6:	edd3 7a00 	vldr	s15, [r3]
 80037fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037fe:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003802:	edd7 7a04 	vldr	s15, [r7, #16]
 8003806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800380a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	d503      	bpl.n	800381c <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8003814:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	e00a      	b.n	8003832 <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 800381c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003820:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800387c <SpiritRadioGetdBm2Reg+0x214>
 8003824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382c:	dd01      	ble.n	8003832 <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 800382e:	4b14      	ldr	r3, [pc, #80]	; (8003880 <SpiritRadioGetdBm2Reg+0x218>)
 8003830:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8003832:	edd7 7a04 	vldr	s15, [r7, #16]
 8003836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800383a:	edc7 7a01 	vstr	s15, [r7, #4]
 800383e:	793b      	ldrb	r3, [r7, #4]
 8003840:	b2db      	uxtb	r3, r3
}
 8003842:	4618      	mov	r0, r3
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	2e5f5680 	.word	0x2e5f5680
 8003854:	390c2fe0 	.word	0x390c2fe0
 8003858:	35a4e8ff 	.word	0x35a4e8ff
 800385c:	1701e47f 	.word	0x1701e47f
 8003860:	1c146a60 	.word	0x1c146a60
 8003864:	11d260bf 	.word	0x11d260bf
 8003868:	14ced7e0 	.word	0x14ced7e0
 800386c:	08e18f3f 	.word	0x08e18f3f
 8003870:	0a6fd060 	.word	0x0a6fd060
 8003874:	08009810 	.word	0x08009810
 8003878:	42200000 	.word	0x42200000
 800387c:	42b40000 	.word	0x42b40000
 8003880:	42b40000 	.word	0x42b40000

08003884 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	ed87 0a00 	vstr	s0, [r7]
 8003890:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003892:	f7ff fc4d 	bl	8003130 <SpiritRadioGetFrequencyBase>
 8003896:	4603      	mov	r3, r0
 8003898:	ed97 0a00 	vldr	s0, [r7]
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fee3 	bl	8003668 <SpiritRadioGetdBm2Reg>
 80038a2:	4603      	mov	r3, r0
 80038a4:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	f1c3 0317 	rsb	r3, r3, #23
 80038ac:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 80038ae:	f107 020e 	add.w	r2, r7, #14
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	2101      	movs	r1, #1
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f9e4 	bl	8003c84 <RadioSpiWriteRegisters>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <SpiritRadioSetPALeveldBm+0x50>)
 80038c0:	b212      	sxth	r2, r2
 80038c2:	4611      	mov	r1, r2
 80038c4:	7019      	strb	r1, [r3, #0]
 80038c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80038ca:	705a      	strb	r2, [r3, #1]
  
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	200003e8 	.word	0x200003e8

080038d8 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80038e2:	f107 030f 	add.w	r3, r7, #15
 80038e6:	461a      	mov	r2, r3
 80038e8:	2101      	movs	r1, #1
 80038ea:	2018      	movs	r0, #24
 80038ec:	f000 fa16 	bl	8003d1c <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 80038fa:	7bfa      	ldrb	r2, [r7, #15]
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	4313      	orrs	r3, r2
 8003900:	b2db      	uxtb	r3, r3
 8003902:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003904:	f107 030f 	add.w	r3, r7, #15
 8003908:	461a      	mov	r2, r3
 800390a:	2101      	movs	r1, #1
 800390c:	2018      	movs	r0, #24
 800390e:	f000 f9b9 	bl	8003c84 <RadioSpiWriteRegisters>
 8003912:	4602      	mov	r2, r0
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <SpiritRadioSetPACwc+0x54>)
 8003916:	b212      	sxth	r2, r2
 8003918:	4611      	mov	r1, r2
 800391a:	7019      	strb	r1, [r3, #0]
 800391c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003920:	705a      	strb	r2, [r3, #1]
  
}
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	200003e8 	.word	0x200003e8

08003930 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800393a:	f107 030f 	add.w	r3, r7, #15
 800393e:	461a      	mov	r2, r3
 8003940:	2101      	movs	r1, #1
 8003942:	2018      	movs	r0, #24
 8003944:	f000 f9ea 	bl	8003d1c <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	f023 0307 	bic.w	r3, r3, #7
 800394e:	b2db      	uxtb	r3, r3
 8003950:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	4313      	orrs	r3, r2
 8003958:	b2db      	uxtb	r3, r3
 800395a:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800395c:	f107 030f 	add.w	r3, r7, #15
 8003960:	461a      	mov	r2, r3
 8003962:	2101      	movs	r1, #1
 8003964:	2018      	movs	r0, #24
 8003966:	f000 f98d 	bl	8003c84 <RadioSpiWriteRegisters>
 800396a:	4602      	mov	r2, r0
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <SpiritRadioSetPALevelMaxIndex+0x54>)
 800396e:	b212      	sxth	r2, r2
 8003970:	4611      	mov	r1, r2
 8003972:	7019      	strb	r1, [r3, #0]
 8003974:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003978:	705a      	strb	r2, [r3, #1]
  
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200003e8 	.word	0x200003e8

08003988 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003996:	f107 030f 	add.w	r3, r7, #15
 800399a:	461a      	mov	r2, r3
 800399c:	2101      	movs	r1, #1
 800399e:	201e      	movs	r0, #30
 80039a0:	f000 f9bc 	bl	8003d1c <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d105      	bne.n	80039b6 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	e004      	b.n	80039c0 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 80039c0:	f107 030f 	add.w	r3, r7, #15
 80039c4:	461a      	mov	r2, r3
 80039c6:	2101      	movs	r1, #1
 80039c8:	201e      	movs	r0, #30
 80039ca:	f000 f95b 	bl	8003c84 <RadioSpiWriteRegisters>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <SpiritRadioAFCFreezeOnSync+0x60>)
 80039d2:	b212      	sxth	r2, r2
 80039d4:	4611      	mov	r1, r2
 80039d6:	7019      	strb	r1, [r3, #0]
 80039d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80039dc:	705a      	strb	r2, [r3, #1]
  
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200003e8 	.word	0x200003e8

080039ec <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80039f6:	f107 030f 	add.w	r3, r7, #15
 80039fa:	461a      	mov	r2, r3
 80039fc:	2101      	movs	r1, #1
 80039fe:	209e      	movs	r0, #158	; 0x9e
 8003a00:	f000 f98c 	bl	8003d1c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d105      	bne.n	8003a16 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	73fb      	strb	r3, [r7, #15]
 8003a14:	e004      	b.n	8003a20 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003a20:	f107 030f 	add.w	r3, r7, #15
 8003a24:	461a      	mov	r2, r3
 8003a26:	2101      	movs	r1, #1
 8003a28:	209e      	movs	r0, #158	; 0x9e
 8003a2a:	f000 f92b 	bl	8003c84 <RadioSpiWriteRegisters>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <SpiritRadioSetRefDiv+0x5c>)
 8003a32:	b212      	sxth	r2, r2
 8003a34:	4611      	mov	r1, r2
 8003a36:	7019      	strb	r1, [r3, #0]
 8003a38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a3c:	705a      	strb	r2, [r3, #1]
  
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200003e8 	.word	0x200003e8

08003a4c <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003a52:	1dfb      	adds	r3, r7, #7
 8003a54:	461a      	mov	r2, r3
 8003a56:	2101      	movs	r1, #1
 8003a58:	209e      	movs	r0, #158	; 0x9e
 8003a5a:	f000 f95f 	bl	8003d1c <RadioSpiReadRegisters>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <SpiritRadioGetRefDiv+0x40>)
 8003a62:	b212      	sxth	r2, r2
 8003a64:	4611      	mov	r1, r2
 8003a66:	7019      	strb	r1, [r3, #0]
 8003a68:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a6c:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	09db      	lsrs	r3, r3, #7
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003a80:	2300      	movs	r3, #0
  }
  
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200003e8 	.word	0x200003e8

08003a90 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003a9a:	f107 030f 	add.w	r3, r7, #15
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	20b4      	movs	r0, #180	; 0xb4
 8003aa4:	f000 f93a 	bl	8003d1c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d105      	bne.n	8003aba <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	f023 0308 	bic.w	r3, r3, #8
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	e004      	b.n	8003ac4 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	f043 0308 	orr.w	r3, r3, #8
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003ac4:	f107 030f 	add.w	r3, r7, #15
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2101      	movs	r1, #1
 8003acc:	20b4      	movs	r0, #180	; 0xb4
 8003ace:	f000 f8d9 	bl	8003c84 <RadioSpiWriteRegisters>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <SpiritRadioSetDigDiv+0x5c>)
 8003ad6:	b212      	sxth	r2, r2
 8003ad8:	4611      	mov	r1, r2
 8003ada:	7019      	strb	r1, [r3, #0]
 8003adc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ae0:	705a      	strb	r2, [r3, #1]
  
}
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	200003e8 	.word	0x200003e8

08003af0 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003af6:	1dfb      	adds	r3, r7, #7
 8003af8:	461a      	mov	r2, r3
 8003afa:	2101      	movs	r1, #1
 8003afc:	20b4      	movs	r0, #180	; 0xb4
 8003afe:	f000 f90d 	bl	8003d1c <RadioSpiReadRegisters>
 8003b02:	4602      	mov	r2, r0
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <SpiritRadioGetDigDiv+0x40>)
 8003b06:	b212      	sxth	r2, r2
 8003b08:	4611      	mov	r1, r2
 8003b0a:	7019      	strb	r1, [r3, #0]
 8003b0c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b10:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	08db      	lsrs	r3, r3, #3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003b24:	2301      	movs	r3, #1
  }
  
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200003e8 	.word	0x200003e8

08003b34 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003b38:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <SpiritRadioGetXtalFrequency+0x14>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	200003e4 	.word	0x200003e4

08003b4c <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003b54:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <SpiritRadioSetXtalFrequency+0x1c>)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6013      	str	r3, [r2, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	200003e4 	.word	0x200003e4

08003b6c <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 8003b76:	1dfb      	adds	r3, r7, #7
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	2054      	movs	r0, #84	; 0x54
 8003b7e:	f000 f881 	bl	8003c84 <RadioSpiWriteRegisters>
 8003b82:	4602      	mov	r2, r0
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <SpiritTimerSetRxTimeoutCounter+0x30>)
 8003b86:	b212      	sxth	r2, r2
 8003b88:	4611      	mov	r1, r2
 8003b8a:	7019      	strb	r1, [r3, #0]
 8003b8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b90:	705a      	strb	r2, [r3, #1]

}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200003e8 	.word	0x200003e8

08003ba0 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003baa:	f107 030c 	add.w	r3, r7, #12
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2102      	movs	r1, #2
 8003bb2:	204f      	movs	r0, #79	; 0x4f
 8003bb4:	f000 f8b2 	bl	8003d1c <RadioSpiReadRegisters>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b1c      	ldr	r3, [pc, #112]	; (8003c2c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003bbc:	b212      	sxth	r2, r2
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	7019      	strb	r1, [r3, #0]
 8003bc2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003bc6:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8003bc8:	7b3b      	ldrb	r3, [r7, #12]
 8003bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8003bd2:	7b3b      	ldrb	r3, [r7, #12]
 8003bd4:	b25a      	sxtb	r2, r3
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	b25b      	sxtb	r3, r3
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	b25b      	sxtb	r3, r3
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b25b      	sxtb	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8003bea:	7b7b      	ldrb	r3, [r7, #13]
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8003bf4:	7b7b      	ldrb	r3, [r7, #13]
 8003bf6:	b25a      	sxtb	r2, r3
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	015b      	lsls	r3, r3, #5
 8003bfc:	b25b      	sxtb	r3, r3
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	b25b      	sxtb	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003c06:	f107 030c 	add.w	r3, r7, #12
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	204f      	movs	r0, #79	; 0x4f
 8003c10:	f000 f838 	bl	8003c84 <RadioSpiWriteRegisters>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003c18:	b212      	sxth	r2, r2
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	7019      	strb	r1, [r3, #0]
 8003c1e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c22:	705a      	strb	r2, [r3, #1]

}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	200003e8 	.word	0x200003e8

08003c30 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8003c36:	1d3b      	adds	r3, r7, #4
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	20c0      	movs	r0, #192	; 0xc0
 8003c3e:	f000 f86d 	bl	8003d1c <RadioSpiReadRegisters>
 8003c42:	4603      	mov	r3, r0
 8003c44:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <SpiritRefreshStatus+0x3c>)
 8003c46:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <SpiritRefreshStatus+0x3c>)
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d1f1      	bne.n	8003c36 <SpiritRefreshStatus+0x6>
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <SpiritRefreshStatus+0x40>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d1ea      	bne.n	8003c36 <SpiritRefreshStatus+0x6>

}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200003e8 	.word	0x200003e8
 8003c70:	200003e9 	.word	0x200003e9

08003c74 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
//   if (radioSpi->State == HAL_SPI_STATE_RESET)
//   {
//     Error_Handler();
//   }
}
 8003c78:	bf00      	nop
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	603a      	str	r2, [r7, #0]
 8003c8e:	71fb      	strb	r3, [r7, #7]
 8003c90:	460b      	mov	r3, r1
 8003c92:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8003c94:	2300      	movs	r3, #0
 8003c96:	743b      	strb	r3, [r7, #16]
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003c9c:	2017      	movs	r0, #23
 8003c9e:	f000 fae8 	bl	8004272 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2120      	movs	r1, #32
 8003ca6:	481b      	ldr	r0, [pc, #108]	; (8003d14 <RadioSpiWriteRegisters+0x90>)
 8003ca8:	f000 fca8 	bl	80045fc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003cac:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <RadioSpiWriteRegisters+0x94>)
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	f107 020c 	add.w	r2, r7, #12
 8003cb4:	f107 0110 	add.w	r1, r7, #16
 8003cb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	f001 f982 	bl	8004fc8 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <RadioSpiWriteRegisters+0x94>)
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	79bb      	ldrb	r3, [r7, #6]
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cd0:	6839      	ldr	r1, [r7, #0]
 8003cd2:	f000 feeb 	bl	8004aac <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	2120      	movs	r1, #32
 8003cda:	480e      	ldr	r0, [pc, #56]	; (8003d14 <RadioSpiWriteRegisters+0x90>)
 8003cdc:	f000 fc8e 	bl	80045fc <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003ce0:	2017      	movs	r0, #23
 8003ce2:	f000 fab8 	bl	8004256 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	3301      	adds	r3, #1
 8003cec:	7b3a      	ldrb	r2, [r7, #12]
 8003cee:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003cf0:	f107 0308 	add.w	r3, r7, #8
 8003cf4:	7b7a      	ldrb	r2, [r7, #13]
 8003cf6:	701a      	strb	r2, [r3, #0]

  return status;
 8003cf8:	893b      	ldrh	r3, [r7, #8]
 8003cfa:	82bb      	strh	r3, [r7, #20]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	7d3a      	ldrb	r2, [r7, #20]
 8003d00:	f362 0307 	bfi	r3, r2, #0, #8
 8003d04:	7d7a      	ldrb	r2, [r7, #21]
 8003d06:	f362 230f 	bfi	r3, r2, #8, #8

}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	48000400 	.word	0x48000400
 8003d18:	20000028 	.word	0x20000028

08003d1c <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	4603      	mov	r3, r0
 8003d24:	603a      	str	r2, [r7, #0]
 8003d26:	71fb      	strb	r3, [r7, #7]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	743b      	strb	r3, [r7, #16]
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003d34:	2017      	movs	r0, #23
 8003d36:	f000 fa9c 	bl	8004272 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2120      	movs	r1, #32
 8003d3e:	481b      	ldr	r0, [pc, #108]	; (8003dac <RadioSpiReadRegisters+0x90>)
 8003d40:	f000 fc5c 	bl	80045fc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <RadioSpiReadRegisters+0x94>)
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	f107 020c 	add.w	r2, r7, #12
 8003d4c:	f107 0110 	add.w	r1, r7, #16
 8003d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2302      	movs	r3, #2
 8003d58:	f001 f936 	bl	8004fc8 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <RadioSpiReadRegisters+0x94>)
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	79bb      	ldrb	r3, [r7, #6]
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d68:	6839      	ldr	r1, [r7, #0]
 8003d6a:	f001 f805 	bl	8004d78 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003d6e:	2201      	movs	r2, #1
 8003d70:	2120      	movs	r1, #32
 8003d72:	480e      	ldr	r0, [pc, #56]	; (8003dac <RadioSpiReadRegisters+0x90>)
 8003d74:	f000 fc42 	bl	80045fc <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003d78:	2017      	movs	r0, #23
 8003d7a:	f000 fa6c 	bl	8004256 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003d7e:	f107 0308 	add.w	r3, r7, #8
 8003d82:	3301      	adds	r3, #1
 8003d84:	7b3a      	ldrb	r2, [r7, #12]
 8003d86:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003d88:	f107 0308 	add.w	r3, r7, #8
 8003d8c:	7b7a      	ldrb	r2, [r7, #13]
 8003d8e:	701a      	strb	r2, [r3, #0]

  return status;
 8003d90:	893b      	ldrh	r3, [r7, #8]
 8003d92:	82bb      	strh	r3, [r7, #20]
 8003d94:	2300      	movs	r3, #0
 8003d96:	7d3a      	ldrb	r2, [r7, #20]
 8003d98:	f362 0307 	bfi	r3, r2, #0, #8
 8003d9c:	7d7a      	ldrb	r2, [r7, #21]
 8003d9e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	48000400 	.word	0x48000400
 8003db0:	20000028 	.word	0x20000028

08003db4 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	743b      	strb	r3, [r7, #16]
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003dc6:	2017      	movs	r0, #23
 8003dc8:	f000 fa53 	bl	8004272 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2120      	movs	r1, #32
 8003dd0:	4816      	ldr	r0, [pc, #88]	; (8003e2c <RadioSpiCommandStrobes+0x78>)
 8003dd2:	f000 fc13 	bl	80045fc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003dd6:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <RadioSpiCommandStrobes+0x7c>)
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	f107 020c 	add.w	r2, r7, #12
 8003dde:	f107 0110 	add.w	r1, r7, #16
 8003de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2302      	movs	r3, #2
 8003dea:	f001 f8ed 	bl	8004fc8 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003dee:	2201      	movs	r2, #1
 8003df0:	2120      	movs	r1, #32
 8003df2:	480e      	ldr	r0, [pc, #56]	; (8003e2c <RadioSpiCommandStrobes+0x78>)
 8003df4:	f000 fc02 	bl	80045fc <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003df8:	2017      	movs	r0, #23
 8003dfa:	f000 fa2c 	bl	8004256 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003dfe:	f107 0308 	add.w	r3, r7, #8
 8003e02:	3301      	adds	r3, #1
 8003e04:	7b3a      	ldrb	r2, [r7, #12]
 8003e06:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003e08:	f107 0308 	add.w	r3, r7, #8
 8003e0c:	7b7a      	ldrb	r2, [r7, #13]
 8003e0e:	701a      	strb	r2, [r3, #0]

  return status;
 8003e10:	893b      	ldrh	r3, [r7, #8]
 8003e12:	82bb      	strh	r3, [r7, #20]
 8003e14:	2300      	movs	r3, #0
 8003e16:	7d3a      	ldrb	r2, [r7, #20]
 8003e18:	f362 0307 	bfi	r3, r2, #0, #8
 8003e1c:	7d7a      	ldrb	r2, [r7, #21]
 8003e1e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	48000400 	.word	0x48000400
 8003e30:	20000028 	.word	0x20000028

08003e34 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8003e40:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003e44:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003e46:	2017      	movs	r0, #23
 8003e48:	f000 fa13 	bl	8004272 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2120      	movs	r1, #32
 8003e50:	481a      	ldr	r0, [pc, #104]	; (8003ebc <RadioSpiWriteFifo+0x88>)
 8003e52:	f000 fbd3 	bl	80045fc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003e56:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <RadioSpiWriteFifo+0x8c>)
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	f107 020c 	add.w	r2, r7, #12
 8003e5e:	f107 0110 	add.w	r1, r7, #16
 8003e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2302      	movs	r3, #2
 8003e6a:	f001 f8ad 	bl	8004fc8 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003e6e:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <RadioSpiWriteFifo+0x8c>)
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e7a:	6839      	ldr	r1, [r7, #0]
 8003e7c:	f000 fe16 	bl	8004aac <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003e80:	2201      	movs	r2, #1
 8003e82:	2120      	movs	r1, #32
 8003e84:	480d      	ldr	r0, [pc, #52]	; (8003ebc <RadioSpiWriteFifo+0x88>)
 8003e86:	f000 fbb9 	bl	80045fc <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003e8a:	2017      	movs	r0, #23
 8003e8c:	f000 f9e3 	bl	8004256 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003e90:	f107 0308 	add.w	r3, r7, #8
 8003e94:	3301      	adds	r3, #1
 8003e96:	7b3a      	ldrb	r2, [r7, #12]
 8003e98:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003e9a:	f107 0308 	add.w	r3, r7, #8
 8003e9e:	7b7a      	ldrb	r2, [r7, #13]
 8003ea0:	701a      	strb	r2, [r3, #0]

  return status;
 8003ea2:	893b      	ldrh	r3, [r7, #8]
 8003ea4:	82bb      	strh	r3, [r7, #20]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	7d3a      	ldrb	r2, [r7, #20]
 8003eaa:	f362 0307 	bfi	r3, r2, #0, #8
 8003eae:	7d7a      	ldrb	r2, [r7, #21]
 8003eb0:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	48000400 	.word	0x48000400
 8003ec0:	20000028 	.word	0x20000028

08003ec4 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ece:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <RadioEnterShutdown+0x14>)
 8003ed0:	f000 fb94 	bl	80045fc <HAL_GPIO_WritePin>
}
 8003ed4:	bf00      	nop
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	48000400 	.word	0x48000400

08003edc <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ee6:	4804      	ldr	r0, [pc, #16]	; (8003ef8 <RadioExitShutdown+0x1c>)
 8003ee8:	f000 fb88 	bl	80045fc <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 8003eec:	2001      	movs	r0, #1
 8003eee:	f000 f875 	bl	8003fdc <HAL_Delay>
}
 8003ef2:	bf00      	nop
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	48000400 	.word	0x48000400

08003efc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f06:	2003      	movs	r0, #3
 8003f08:	f000 f97e 	bl	8004208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f000 f80d 	bl	8003f2c <HAL_InitTick>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	71fb      	strb	r3, [r7, #7]
 8003f1c:	e001      	b.n	8003f22 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f1e:	f7fd fa67 	bl	80013f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f22:	79fb      	ldrb	r3, [r7, #7]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003f38:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <HAL_InitTick+0x68>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d022      	beq.n	8003f86 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f40:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <HAL_InitTick+0x6c>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_InitTick+0x68>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 f99a 	bl	800428e <HAL_SYSTICK_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10f      	bne.n	8003f80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b0f      	cmp	r3, #15
 8003f64:	d809      	bhi.n	8003f7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f66:	2200      	movs	r2, #0
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6e:	f000 f956 	bl	800421e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f72:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <HAL_InitTick+0x70>)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	e007      	b.n	8003f8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
 8003f7e:	e004      	b.n	8003f8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	e001      	b.n	8003f8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000030 	.word	0x20000030
 8003f98:	20000018 	.word	0x20000018
 8003f9c:	2000002c 	.word	0x2000002c

08003fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_IncTick+0x1c>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_IncTick+0x20>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4413      	add	r3, r2
 8003fae:	4a03      	ldr	r2, [pc, #12]	; (8003fbc <HAL_IncTick+0x1c>)
 8003fb0:	6013      	str	r3, [r2, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	200003ec 	.word	0x200003ec
 8003fc0:	20000030 	.word	0x20000030

08003fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <HAL_GetTick+0x14>)
 8003fca:	681b      	ldr	r3, [r3, #0]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	200003ec 	.word	0x200003ec

08003fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fe4:	f7ff ffee 	bl	8003fc4 <HAL_GetTick>
 8003fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d004      	beq.n	8004000 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_Delay+0x40>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004000:	bf00      	nop
 8004002:	f7ff ffdf 	bl	8003fc4 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	429a      	cmp	r2, r3
 8004010:	d8f7      	bhi.n	8004002 <HAL_Delay+0x26>
  {
  }
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000030 	.word	0x20000030

08004020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <__NVIC_SetPriorityGrouping+0x44>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800403c:	4013      	ands	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800404c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004052:	4a04      	ldr	r2, [pc, #16]	; (8004064 <__NVIC_SetPriorityGrouping+0x44>)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	60d3      	str	r3, [r2, #12]
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <__NVIC_GetPriorityGrouping+0x18>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	f003 0307 	and.w	r3, r3, #7
}
 8004076:	4618      	mov	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	2b00      	cmp	r3, #0
 8004094:	db0b      	blt.n	80040ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	f003 021f 	and.w	r2, r3, #31
 800409c:	4907      	ldr	r1, [pc, #28]	; (80040bc <__NVIC_EnableIRQ+0x38>)
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2001      	movs	r0, #1
 80040a6:	fa00 f202 	lsl.w	r2, r0, r2
 80040aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	e000e100 	.word	0xe000e100

080040c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	db12      	blt.n	80040f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	f003 021f 	and.w	r2, r3, #31
 80040d8:	490a      	ldr	r1, [pc, #40]	; (8004104 <__NVIC_DisableIRQ+0x44>)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2001      	movs	r0, #1
 80040e2:	fa00 f202 	lsl.w	r2, r0, r2
 80040e6:	3320      	adds	r3, #32
 80040e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80040ec:	f3bf 8f4f 	dsb	sy
}
 80040f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040f2:	f3bf 8f6f 	isb	sy
}
 80040f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	e000e100 	.word	0xe000e100

08004108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	6039      	str	r1, [r7, #0]
 8004112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004118:	2b00      	cmp	r3, #0
 800411a:	db0a      	blt.n	8004132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	490c      	ldr	r1, [pc, #48]	; (8004154 <__NVIC_SetPriority+0x4c>)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	0112      	lsls	r2, r2, #4
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	440b      	add	r3, r1
 800412c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004130:	e00a      	b.n	8004148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	b2da      	uxtb	r2, r3
 8004136:	4908      	ldr	r1, [pc, #32]	; (8004158 <__NVIC_SetPriority+0x50>)
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	3b04      	subs	r3, #4
 8004140:	0112      	lsls	r2, r2, #4
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	440b      	add	r3, r1
 8004146:	761a      	strb	r2, [r3, #24]
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	e000e100 	.word	0xe000e100
 8004158:	e000ed00 	.word	0xe000ed00

0800415c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800415c:	b480      	push	{r7}
 800415e:	b089      	sub	sp, #36	; 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f1c3 0307 	rsb	r3, r3, #7
 8004176:	2b04      	cmp	r3, #4
 8004178:	bf28      	it	cs
 800417a:	2304      	movcs	r3, #4
 800417c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3304      	adds	r3, #4
 8004182:	2b06      	cmp	r3, #6
 8004184:	d902      	bls.n	800418c <NVIC_EncodePriority+0x30>
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	3b03      	subs	r3, #3
 800418a:	e000      	b.n	800418e <NVIC_EncodePriority+0x32>
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004190:	f04f 32ff 	mov.w	r2, #4294967295
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43da      	mvns	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	401a      	ands	r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041a4:	f04f 31ff 	mov.w	r1, #4294967295
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	fa01 f303 	lsl.w	r3, r1, r3
 80041ae:	43d9      	mvns	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b4:	4313      	orrs	r3, r2
         );
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3724      	adds	r7, #36	; 0x24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041d4:	d301      	bcc.n	80041da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041d6:	2301      	movs	r3, #1
 80041d8:	e00f      	b.n	80041fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041da:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <SysTick_Config+0x40>)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041e2:	210f      	movs	r1, #15
 80041e4:	f04f 30ff 	mov.w	r0, #4294967295
 80041e8:	f7ff ff8e 	bl	8004108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <SysTick_Config+0x40>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041f2:	4b04      	ldr	r3, [pc, #16]	; (8004204 <SysTick_Config+0x40>)
 80041f4:	2207      	movs	r2, #7
 80041f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	e000e010 	.word	0xe000e010

08004208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff05 	bl	8004020 <__NVIC_SetPriorityGrouping>
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b086      	sub	sp, #24
 8004222:	af00      	add	r7, sp, #0
 8004224:	4603      	mov	r3, r0
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
 800422a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004230:	f7ff ff1a 	bl	8004068 <__NVIC_GetPriorityGrouping>
 8004234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	6978      	ldr	r0, [r7, #20]
 800423c:	f7ff ff8e 	bl	800415c <NVIC_EncodePriority>
 8004240:	4602      	mov	r2, r0
 8004242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff ff5d 	bl	8004108 <__NVIC_SetPriority>
}
 800424e:	bf00      	nop
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	4603      	mov	r3, r0
 800425e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ff0d 	bl	8004084 <__NVIC_EnableIRQ>
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	4603      	mov	r3, r0
 800427a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800427c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ff1d 	bl	80040c0 <__NVIC_DisableIRQ>
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ff94 	bl	80041c4 <SysTick_Config>
 800429c:	4603      	mov	r3, r0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042b6:	e17f      	b.n	80045b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	2101      	movs	r1, #1
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	4013      	ands	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8171 	beq.w	80045b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d00b      	beq.n	80042f0 <HAL_GPIO_Init+0x48>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d007      	beq.n	80042f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042e4:	2b11      	cmp	r3, #17
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b12      	cmp	r3, #18
 80042ee:	d130      	bne.n	8004352 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	2203      	movs	r2, #3
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4013      	ands	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004326:	2201      	movs	r2, #1
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43db      	mvns	r3, r3
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4013      	ands	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	f003 0201 	and.w	r2, r3, #1
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b03      	cmp	r3, #3
 800435c:	d118      	bne.n	8004390 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004364:	2201      	movs	r2, #1
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4013      	ands	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	08db      	lsrs	r3, r3, #3
 800437a:	f003 0201 	and.w	r2, r3, #1
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	2203      	movs	r2, #3
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4013      	ands	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d003      	beq.n	80043d0 <HAL_GPIO_Init+0x128>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b12      	cmp	r3, #18
 80043ce:	d123      	bne.n	8004418 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	08da      	lsrs	r2, r3, #3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3208      	adds	r2, #8
 80043d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	220f      	movs	r2, #15
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4013      	ands	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	08da      	lsrs	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3208      	adds	r2, #8
 8004412:	6939      	ldr	r1, [r7, #16]
 8004414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	2203      	movs	r2, #3
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0203 	and.w	r2, r3, #3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80ac 	beq.w	80045b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445a:	4b5f      	ldr	r3, [pc, #380]	; (80045d8 <HAL_GPIO_Init+0x330>)
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	4a5e      	ldr	r2, [pc, #376]	; (80045d8 <HAL_GPIO_Init+0x330>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6613      	str	r3, [r2, #96]	; 0x60
 8004466:	4b5c      	ldr	r3, [pc, #368]	; (80045d8 <HAL_GPIO_Init+0x330>)
 8004468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004472:	4a5a      	ldr	r2, [pc, #360]	; (80045dc <HAL_GPIO_Init+0x334>)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	089b      	lsrs	r3, r3, #2
 8004478:	3302      	adds	r3, #2
 800447a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	220f      	movs	r2, #15
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800449c:	d025      	beq.n	80044ea <HAL_GPIO_Init+0x242>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a4f      	ldr	r2, [pc, #316]	; (80045e0 <HAL_GPIO_Init+0x338>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01f      	beq.n	80044e6 <HAL_GPIO_Init+0x23e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a4e      	ldr	r2, [pc, #312]	; (80045e4 <HAL_GPIO_Init+0x33c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d019      	beq.n	80044e2 <HAL_GPIO_Init+0x23a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a4d      	ldr	r2, [pc, #308]	; (80045e8 <HAL_GPIO_Init+0x340>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_GPIO_Init+0x236>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a4c      	ldr	r2, [pc, #304]	; (80045ec <HAL_GPIO_Init+0x344>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00d      	beq.n	80044da <HAL_GPIO_Init+0x232>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4b      	ldr	r2, [pc, #300]	; (80045f0 <HAL_GPIO_Init+0x348>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <HAL_GPIO_Init+0x22e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a4a      	ldr	r2, [pc, #296]	; (80045f4 <HAL_GPIO_Init+0x34c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <HAL_GPIO_Init+0x22a>
 80044ce:	2306      	movs	r3, #6
 80044d0:	e00c      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044d2:	2307      	movs	r3, #7
 80044d4:	e00a      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044d6:	2305      	movs	r3, #5
 80044d8:	e008      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044da:	2304      	movs	r3, #4
 80044dc:	e006      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044de:	2303      	movs	r3, #3
 80044e0:	e004      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e002      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044ea:	2300      	movs	r3, #0
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	f002 0203 	and.w	r2, r2, #3
 80044f2:	0092      	lsls	r2, r2, #2
 80044f4:	4093      	lsls	r3, r2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044fc:	4937      	ldr	r1, [pc, #220]	; (80045dc <HAL_GPIO_Init+0x334>)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	089b      	lsrs	r3, r3, #2
 8004502:	3302      	adds	r3, #2
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800450a:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <HAL_GPIO_Init+0x350>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	43db      	mvns	r3, r3
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4013      	ands	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800452e:	4a32      	ldr	r2, [pc, #200]	; (80045f8 <HAL_GPIO_Init+0x350>)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004534:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <HAL_GPIO_Init+0x350>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	43db      	mvns	r3, r3
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4013      	ands	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004558:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <HAL_GPIO_Init+0x350>)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800455e:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <HAL_GPIO_Init+0x350>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	43db      	mvns	r3, r3
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4013      	ands	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004582:	4a1d      	ldr	r2, [pc, #116]	; (80045f8 <HAL_GPIO_Init+0x350>)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004588:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <HAL_GPIO_Init+0x350>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	43db      	mvns	r3, r3
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045ac:	4a12      	ldr	r2, [pc, #72]	; (80045f8 <HAL_GPIO_Init+0x350>)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	3301      	adds	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	fa22 f303 	lsr.w	r3, r2, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f47f ae78 	bne.w	80042b8 <HAL_GPIO_Init+0x10>
  }
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40010000 	.word	0x40010000
 80045e0:	48000400 	.word	0x48000400
 80045e4:	48000800 	.word	0x48000800
 80045e8:	48000c00 	.word	0x48000c00
 80045ec:	48001000 	.word	0x48001000
 80045f0:	48001400 	.word	0x48001400
 80045f4:	48001800 	.word	0x48001800
 80045f8:	40010400 	.word	0x40010400

080045fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]
 8004608:	4613      	mov	r3, r2
 800460a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800460c:	787b      	ldrb	r3, [r7, #1]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004612:	887a      	ldrh	r2, [r7, #2]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004618:	e002      	b.n	8004620 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	4013      	ands	r3, r2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d006      	beq.n	8004650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004642:	4a05      	ldr	r2, [pc, #20]	; (8004658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fc fcee 	bl	800102c <HAL_GPIO_EXTI_Callback>
  }
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40010400 	.word	0x40010400

0800465c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e081      	b.n	8004772 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc fed8 	bl	8001438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	; 0x24
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d107      	bne.n	80046d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	e006      	b.n	80046e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d104      	bne.n	80046f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004708:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004718:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	ea42 0103 	orr.w	r1, r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	021a      	lsls	r2, r3, #8
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69d9      	ldr	r1, [r3, #28]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b20      	cmp	r3, #32
 800478e:	d138      	bne.n	8004802 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800479a:	2302      	movs	r3, #2
 800479c:	e032      	b.n	8004804 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2224      	movs	r2, #36	; 0x24
 80047aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6819      	ldr	r1, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	e000      	b.n	8004804 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004802:	2302      	movs	r3, #2
  }
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	; 0x24
 8004814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800481e:	4b3e      	ldr	r3, [pc, #248]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004828:	4b3b      	ldr	r3, [pc, #236]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0x34>
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b0c      	cmp	r3, #12
 800483c:	d121      	bne.n	8004882 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d11e      	bne.n	8004882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004844:	4b34      	ldr	r3, [pc, #208]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d107      	bne.n	8004860 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004850:	4b31      	ldr	r3, [pc, #196]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 8004852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	e005      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004860:	4b2d      	ldr	r3, [pc, #180]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800486c:	4a2b      	ldr	r2, [pc, #172]	; (800491c <HAL_RCC_GetSysClockFreq+0x10c>)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004874:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10d      	bne.n	8004898 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004880:	e00a      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b04      	cmp	r3, #4
 8004886:	d102      	bne.n	800488e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004888:	4b25      	ldr	r3, [pc, #148]	; (8004920 <HAL_RCC_GetSysClockFreq+0x110>)
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	e004      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d101      	bne.n	8004898 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004894:	4b23      	ldr	r3, [pc, #140]	; (8004924 <HAL_RCC_GetSysClockFreq+0x114>)
 8004896:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	2b0c      	cmp	r3, #12
 800489c:	d134      	bne.n	8004908 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800489e:	4b1e      	ldr	r3, [pc, #120]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d003      	beq.n	80048b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d003      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0xac>
 80048b4:	e005      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048b6:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <HAL_RCC_GetSysClockFreq+0x110>)
 80048b8:	617b      	str	r3, [r7, #20]
      break;
 80048ba:	e005      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048bc:	4b19      	ldr	r3, [pc, #100]	; (8004924 <HAL_RCC_GetSysClockFreq+0x114>)
 80048be:	617b      	str	r3, [r7, #20]
      break;
 80048c0:	e002      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	617b      	str	r3, [r7, #20]
      break;
 80048c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048c8:	4b13      	ldr	r3, [pc, #76]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	3301      	adds	r3, #1
 80048d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	fb03 f202 	mul.w	r2, r3, r2
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	0e5b      	lsrs	r3, r3, #25
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	3301      	adds	r3, #1
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	fbb2 f3f3 	udiv	r3, r2, r3
 8004906:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004908:	69bb      	ldr	r3, [r7, #24]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3724      	adds	r7, #36	; 0x24
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40021000 	.word	0x40021000
 800491c:	080096fc 	.word	0x080096fc
 8004920:	00f42400 	.word	0x00f42400
 8004924:	007a1200 	.word	0x007a1200

08004928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <HAL_RCC_GetHCLKFreq+0x14>)
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20000018 	.word	0x20000018

08004940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004944:	f7ff fff0 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	0a1b      	lsrs	r3, r3, #8
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4904      	ldr	r1, [pc, #16]	; (8004968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40021000 	.word	0x40021000
 8004968:	080096f4 	.word	0x080096f4

0800496c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004970:	f7ff ffda 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004974:	4602      	mov	r2, r0
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	0adb      	lsrs	r3, r3, #11
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	4904      	ldr	r1, [pc, #16]	; (8004994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004982:	5ccb      	ldrb	r3, [r1, r3]
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	080096f4 	.word	0x080096f4

08004998 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e07c      	b.n	8004aa4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d106      	bne.n	80049ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7fc fd7b 	bl	80014c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049ea:	d902      	bls.n	80049f2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e002      	b.n	80049f8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a00:	d007      	beq.n	8004a12 <HAL_SPI_Init+0x7a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a0a:	d002      	beq.n	8004a12 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a22:	d903      	bls.n	8004a2c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30
 8004a2a:	e002      	b.n	8004a32 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	ea42 0103 	orr.w	r1, r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	f003 0204 	and.w	r2, r3, #4
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	ea42 0103 	orr.w	r1, r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_SPI_Transmit+0x22>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e150      	b.n	8004d70 <HAL_SPI_Transmit+0x2c4>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ad6:	f7ff fa75 	bl	8003fc4 <HAL_GetTick>
 8004ada:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d002      	beq.n	8004af2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
 8004aee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004af0:	e135      	b.n	8004d5e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_SPI_Transmit+0x52>
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b02:	e12c      	b.n	8004d5e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2203      	movs	r2, #3
 8004b08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	88fa      	ldrh	r2, [r7, #6]
 8004b1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	88fa      	ldrh	r2, [r7, #6]
 8004b22:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4e:	d107      	bne.n	8004b60 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d007      	beq.n	8004b7e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b86:	d94b      	bls.n	8004c20 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_SPI_Transmit+0xea>
 8004b90:	8afb      	ldrh	r3, [r7, #22]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d13e      	bne.n	8004c14 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	881a      	ldrh	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	1c9a      	adds	r2, r3, #2
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bba:	e02b      	b.n	8004c14 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d112      	bne.n	8004bf0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	881a      	ldrh	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	1c9a      	adds	r2, r3, #2
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bee:	e011      	b.n	8004c14 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bf0:	f7ff f9e8 	bl	8003fc4 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d803      	bhi.n	8004c08 <HAL_SPI_Transmit+0x15c>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d102      	bne.n	8004c0e <HAL_SPI_Transmit+0x162>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d102      	bne.n	8004c14 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c12:	e0a4      	b.n	8004d5e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1ce      	bne.n	8004bbc <HAL_SPI_Transmit+0x110>
 8004c1e:	e07c      	b.n	8004d1a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_SPI_Transmit+0x182>
 8004c28:	8afb      	ldrh	r3, [r7, #22]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d170      	bne.n	8004d10 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d912      	bls.n	8004c5e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	881a      	ldrh	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	1c9a      	adds	r2, r3, #2
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b02      	subs	r3, #2
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c5c:	e058      	b.n	8004d10 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	330c      	adds	r3, #12
 8004c68:	7812      	ldrb	r2, [r2, #0]
 8004c6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c84:	e044      	b.n	8004d10 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d12b      	bne.n	8004cec <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d912      	bls.n	8004cc4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	881a      	ldrh	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	1c9a      	adds	r2, r3, #2
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b02      	subs	r3, #2
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cc2:	e025      	b.n	8004d10 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	7812      	ldrb	r2, [r2, #0]
 8004cd0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cea:	e011      	b.n	8004d10 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cec:	f7ff f96a 	bl	8003fc4 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d803      	bhi.n	8004d04 <HAL_SPI_Transmit+0x258>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d102      	bne.n	8004d0a <HAL_SPI_Transmit+0x25e>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d102      	bne.n	8004d10 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d0e:	e026      	b.n	8004d5e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1b5      	bne.n	8004c86 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	6839      	ldr	r1, [r7, #0]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 fc94 	bl	800564c <SPI_EndRxTxTransaction>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e000      	b.n	8004d5e <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004d5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d94:	d112      	bne.n	8004dbc <HAL_SPI_Receive+0x44>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10e      	bne.n	8004dbc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2204      	movs	r2, #4
 8004da2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004da6:	88fa      	ldrh	r2, [r7, #6]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	4613      	mov	r3, r2
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f908 	bl	8004fc8 <HAL_SPI_TransmitReceive>
 8004db8:	4603      	mov	r3, r0
 8004dba:	e101      	b.n	8004fc0 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_SPI_Receive+0x52>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e0fa      	b.n	8004fc0 <HAL_SPI_Receive+0x248>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dd2:	f7ff f8f7 	bl	8003fc4 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d002      	beq.n	8004dea <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004de4:	2302      	movs	r3, #2
 8004de6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004de8:	e0e1      	b.n	8004fae <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_SPI_Receive+0x7e>
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d102      	bne.n	8004dfc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dfa:	e0d8      	b.n	8004fae <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2204      	movs	r2, #4
 8004e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	88fa      	ldrh	r2, [r7, #6]
 8004e1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e46:	d908      	bls.n	8004e5a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e56:	605a      	str	r2, [r3, #4]
 8004e58:	e007      	b.n	8004e6a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e68:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e72:	d107      	bne.n	8004e84 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e82:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	d007      	beq.n	8004ea2 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eaa:	d867      	bhi.n	8004f7c <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004eac:	e030      	b.n	8004f10 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d117      	bne.n	8004eec <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f103 020c 	add.w	r2, r3, #12
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	7812      	ldrb	r2, [r2, #0]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004eea:	e011      	b.n	8004f10 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eec:	f7ff f86a 	bl	8003fc4 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d803      	bhi.n	8004f04 <HAL_SPI_Receive+0x18c>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f02:	d102      	bne.n	8004f0a <HAL_SPI_Receive+0x192>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f0e:	e04e      	b.n	8004fae <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1c8      	bne.n	8004eae <HAL_SPI_Receive+0x136>
 8004f1c:	e034      	b.n	8004f88 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d115      	bne.n	8004f58 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	b292      	uxth	r2, r2
 8004f38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	1c9a      	adds	r2, r3, #2
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004f56:	e011      	b.n	8004f7c <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f58:	f7ff f834 	bl	8003fc4 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d803      	bhi.n	8004f70 <HAL_SPI_Receive+0x1f8>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6e:	d102      	bne.n	8004f76 <HAL_SPI_Receive+0x1fe>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f7a:	e018      	b.n	8004fae <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1ca      	bne.n	8004f1e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 fb05 	bl	800559c <SPI_EndRxTransaction>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	75fb      	strb	r3, [r7, #23]
 8004faa:	e000      	b.n	8004fae <HAL_SPI_Receive+0x236>
  }

error :
 8004fac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_SPI_TransmitReceive+0x26>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e1fb      	b.n	80053e6 <HAL_SPI_TransmitReceive+0x41e>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ff6:	f7fe ffe5 	bl	8003fc4 <HAL_GetTick>
 8004ffa:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005002:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800500a:	887b      	ldrh	r3, [r7, #2]
 800500c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800500e:	887b      	ldrh	r3, [r7, #2]
 8005010:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005012:	7efb      	ldrb	r3, [r7, #27]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d00e      	beq.n	8005036 <HAL_SPI_TransmitReceive+0x6e>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800501e:	d106      	bne.n	800502e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <HAL_SPI_TransmitReceive+0x66>
 8005028:	7efb      	ldrb	r3, [r7, #27]
 800502a:	2b04      	cmp	r3, #4
 800502c:	d003      	beq.n	8005036 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800502e:	2302      	movs	r3, #2
 8005030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005034:	e1cd      	b.n	80053d2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x80>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x80>
 8005042:	887b      	ldrh	r3, [r7, #2]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d103      	bne.n	8005050 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800504e:	e1c0      	b.n	80053d2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b04      	cmp	r3, #4
 800505a:	d003      	beq.n	8005064 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2205      	movs	r2, #5
 8005060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	887a      	ldrh	r2, [r7, #2]
 8005074:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	887a      	ldrh	r2, [r7, #2]
 800507c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	887a      	ldrh	r2, [r7, #2]
 800508a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	887a      	ldrh	r2, [r7, #2]
 8005090:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050a6:	d802      	bhi.n	80050ae <HAL_SPI_TransmitReceive+0xe6>
 80050a8:	8a3b      	ldrh	r3, [r7, #16]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d908      	bls.n	80050c0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050bc:	605a      	str	r2, [r3, #4]
 80050be:	e007      	b.n	80050d0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050ce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	d007      	beq.n	80050ee <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050f6:	d97c      	bls.n	80051f2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_SPI_TransmitReceive+0x13e>
 8005100:	8a7b      	ldrh	r3, [r7, #18]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d169      	bne.n	80051da <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	881a      	ldrh	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	1c9a      	adds	r2, r3, #2
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800512a:	e056      	b.n	80051da <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b02      	cmp	r3, #2
 8005138:	d11b      	bne.n	8005172 <HAL_SPI_TransmitReceive+0x1aa>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d016      	beq.n	8005172 <HAL_SPI_TransmitReceive+0x1aa>
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	2b01      	cmp	r3, #1
 8005148:	d113      	bne.n	8005172 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	881a      	ldrh	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	1c9a      	adds	r2, r3, #2
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d11c      	bne.n	80051ba <HAL_SPI_TransmitReceive+0x1f2>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d016      	beq.n	80051ba <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	b292      	uxth	r2, r2
 8005198:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	1c9a      	adds	r2, r3, #2
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051b6:	2301      	movs	r3, #1
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051ba:	f7fe ff03 	bl	8003fc4 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d807      	bhi.n	80051da <HAL_SPI_TransmitReceive+0x212>
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d003      	beq.n	80051da <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80051d8:	e0fb      	b.n	80053d2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1a3      	bne.n	800512c <HAL_SPI_TransmitReceive+0x164>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d19d      	bne.n	800512c <HAL_SPI_TransmitReceive+0x164>
 80051f0:	e0df      	b.n	80053b2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_SPI_TransmitReceive+0x23a>
 80051fa:	8a7b      	ldrh	r3, [r7, #18]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	f040 80cb 	bne.w	8005398 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	d912      	bls.n	8005232 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	881a      	ldrh	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	1c9a      	adds	r2, r3, #2
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b02      	subs	r3, #2
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005230:	e0b2      	b.n	8005398 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	330c      	adds	r3, #12
 800523c:	7812      	ldrb	r2, [r2, #0]
 800523e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005258:	e09e      	b.n	8005398 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b02      	cmp	r3, #2
 8005266:	d134      	bne.n	80052d2 <HAL_SPI_TransmitReceive+0x30a>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d02f      	beq.n	80052d2 <HAL_SPI_TransmitReceive+0x30a>
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	2b01      	cmp	r3, #1
 8005276:	d12c      	bne.n	80052d2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b01      	cmp	r3, #1
 8005280:	d912      	bls.n	80052a8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	881a      	ldrh	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	1c9a      	adds	r2, r3, #2
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b02      	subs	r3, #2
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052a6:	e012      	b.n	80052ce <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	330c      	adds	r3, #12
 80052b2:	7812      	ldrb	r2, [r2, #0]
 80052b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d148      	bne.n	8005372 <HAL_SPI_TransmitReceive+0x3aa>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d042      	beq.n	8005372 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d923      	bls.n	8005340 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	b292      	uxth	r2, r2
 8005304:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	1c9a      	adds	r2, r3, #2
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b02      	subs	r3, #2
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b01      	cmp	r3, #1
 800532c:	d81f      	bhi.n	800536e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800533c:	605a      	str	r2, [r3, #4]
 800533e:	e016      	b.n	800536e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f103 020c 	add.w	r2, r3, #12
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	7812      	ldrb	r2, [r2, #0]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800536e:	2301      	movs	r3, #1
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005372:	f7fe fe27 	bl	8003fc4 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537e:	429a      	cmp	r2, r3
 8005380:	d803      	bhi.n	800538a <HAL_SPI_TransmitReceive+0x3c2>
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005388:	d102      	bne.n	8005390 <HAL_SPI_TransmitReceive+0x3c8>
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005396:	e01c      	b.n	80053d2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f47f af5b 	bne.w	800525a <HAL_SPI_TransmitReceive+0x292>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f47f af54 	bne.w	800525a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f948 	bl	800564c <SPI_EndRxTxTransaction>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	661a      	str	r2, [r3, #96]	; 0x60
 80053ce:	e000      	b.n	80053d2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80053d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80053e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3728      	adds	r7, #40	; 0x28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	603b      	str	r3, [r7, #0]
 80053fa:	4613      	mov	r3, r2
 80053fc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053fe:	e04c      	b.n	800549a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d048      	beq.n	800549a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005408:	f7fe fddc 	bl	8003fc4 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d902      	bls.n	800541e <SPI_WaitFlagStateUntilTimeout+0x30>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d13d      	bne.n	800549a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800542c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005436:	d111      	bne.n	800545c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005440:	d004      	beq.n	800544c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544a:	d107      	bne.n	800545c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800545a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005464:	d10f      	bne.n	8005486 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005484:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e00f      	b.n	80054ba <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4013      	ands	r3, r2
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	bf0c      	ite	eq
 80054aa:	2301      	moveq	r3, #1
 80054ac:	2300      	movne	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d1a3      	bne.n	8005400 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	607a      	str	r2, [r7, #4]
 80054ce:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80054d0:	e057      	b.n	8005582 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054d8:	d106      	bne.n	80054e8 <SPI_WaitFifoStateUntilTimeout+0x26>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d103      	bne.n	80054e8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	330c      	adds	r3, #12
 80054e6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ee:	d048      	beq.n	8005582 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80054f0:	f7fe fd68 	bl	8003fc4 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d902      	bls.n	8005506 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d13d      	bne.n	8005582 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005514:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800551e:	d111      	bne.n	8005544 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005528:	d004      	beq.n	8005534 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005532:	d107      	bne.n	8005544 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005542:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554c:	d10f      	bne.n	800556e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800556c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e008      	b.n	8005594 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4013      	ands	r3, r2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	429a      	cmp	r2, r3
 8005590:	d19f      	bne.n	80054d2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b0:	d111      	bne.n	80055d6 <SPI_EndRxTransaction+0x3a>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ba:	d004      	beq.n	80055c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c4:	d107      	bne.n	80055d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2200      	movs	r2, #0
 80055de:	2180      	movs	r1, #128	; 0x80
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff ff04 	bl	80053ee <SPI_WaitFlagStateUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d007      	beq.n	80055fc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f0:	f043 0220 	orr.w	r2, r3, #32
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e023      	b.n	8005644 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005604:	d11d      	bne.n	8005642 <SPI_EndRxTransaction+0xa6>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560e:	d004      	beq.n	800561a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005618:	d113      	bne.n	8005642 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2200      	movs	r2, #0
 8005622:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7ff ff4b 	bl	80054c2 <SPI_WaitFifoStateUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005636:	f043 0220 	orr.w	r2, r3, #32
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e000      	b.n	8005644 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af02      	add	r7, sp, #8
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2200      	movs	r2, #0
 8005660:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f7ff ff2c 	bl	80054c2 <SPI_WaitFifoStateUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d007      	beq.n	8005680 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005674:	f043 0220 	orr.w	r2, r3, #32
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e027      	b.n	80056d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2200      	movs	r2, #0
 8005688:	2180      	movs	r1, #128	; 0x80
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f7ff feaf 	bl	80053ee <SPI_WaitFlagStateUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569a:	f043 0220 	orr.w	r2, r3, #32
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e014      	b.n	80056d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7ff ff05 	bl	80054c2 <SPI_WaitFifoStateUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d007      	beq.n	80056ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c2:	f043 0220 	orr.w	r2, r3, #32
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e000      	b.n	80056d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e040      	b.n	800576c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fb ff24 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2224      	movs	r2, #36	; 0x24
 8005704:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0201 	bic.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f8c0 	bl	800589c <UART_SetConfig>
 800571c:	4603      	mov	r3, r0
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e022      	b.n	800576c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fc54 	bl	8005fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fcdb 	bl	8006120 <UART_CheckIdleState>
 800576a:	4603      	mov	r3, r0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af02      	add	r7, sp, #8
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	4613      	mov	r3, r2
 8005782:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005788:	2b20      	cmp	r3, #32
 800578a:	f040 8081 	bne.w	8005890 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <HAL_UART_Transmit+0x26>
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e079      	b.n	8005892 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_UART_Transmit+0x38>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e072      	b.n	8005892 <HAL_UART_Transmit+0x11e>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2221      	movs	r2, #33	; 0x21
 80057be:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80057c0:	f7fe fc00 	bl	8003fc4 <HAL_GetTick>
 80057c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	88fa      	ldrh	r2, [r7, #6]
 80057ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	88fa      	ldrh	r2, [r7, #6]
 80057d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057de:	d108      	bne.n	80057f2 <HAL_UART_Transmit+0x7e>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	61bb      	str	r3, [r7, #24]
 80057f0:	e003      	b.n	80057fa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005802:	e02d      	b.n	8005860 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2200      	movs	r2, #0
 800580c:	2180      	movs	r1, #128	; 0x80
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fccb 	bl	80061aa <UART_WaitOnFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e039      	b.n	8005892 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10b      	bne.n	800583c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	881a      	ldrh	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005830:	b292      	uxth	r2, r2
 8005832:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	3302      	adds	r3, #2
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e008      	b.n	800584e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	781a      	ldrb	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	b292      	uxth	r2, r2
 8005846:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	3301      	adds	r3, #1
 800584c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1cb      	bne.n	8005804 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2200      	movs	r2, #0
 8005874:	2140      	movs	r1, #64	; 0x40
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 fc97 	bl	80061aa <UART_WaitOnFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e005      	b.n	8005892 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	e000      	b.n	8005892 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005890:	2302      	movs	r3, #2
  }
}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800589c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a0:	b0a0      	sub	sp, #128	; 0x80
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	431a      	orrs	r2, r3
 80058be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	49a4      	ldr	r1, [pc, #656]	; (8005b64 <UART_SetConfig+0x2c8>)
 80058d4:	4019      	ands	r1, r3
 80058d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058dc:	430b      	orrs	r3, r1
 80058de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ec:	68d9      	ldr	r1, [r3, #12]
 80058ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	ea40 0301 	orr.w	r3, r0, r1
 80058f6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	4b99      	ldr	r3, [pc, #612]	; (8005b68 <UART_SetConfig+0x2cc>)
 8005904:	429a      	cmp	r2, r3
 8005906:	d004      	beq.n	8005912 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800590a:	6a1a      	ldr	r2, [r3, #32]
 800590c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800590e:	4313      	orrs	r3, r2
 8005910:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800591c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005922:	430b      	orrs	r3, r1
 8005924:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b90      	ldr	r3, [pc, #576]	; (8005b6c <UART_SetConfig+0x2d0>)
 800592c:	429a      	cmp	r2, r3
 800592e:	d125      	bne.n	800597c <UART_SetConfig+0xe0>
 8005930:	4b8f      	ldr	r3, [pc, #572]	; (8005b70 <UART_SetConfig+0x2d4>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b03      	cmp	r3, #3
 800593c:	d81a      	bhi.n	8005974 <UART_SetConfig+0xd8>
 800593e:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <UART_SetConfig+0xa8>)
 8005940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005944:	08005955 	.word	0x08005955
 8005948:	08005965 	.word	0x08005965
 800594c:	0800595d 	.word	0x0800595d
 8005950:	0800596d 	.word	0x0800596d
 8005954:	2301      	movs	r3, #1
 8005956:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800595a:	e116      	b.n	8005b8a <UART_SetConfig+0x2ee>
 800595c:	2302      	movs	r3, #2
 800595e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005962:	e112      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005964:	2304      	movs	r3, #4
 8005966:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800596a:	e10e      	b.n	8005b8a <UART_SetConfig+0x2ee>
 800596c:	2308      	movs	r3, #8
 800596e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005972:	e10a      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005974:	2310      	movs	r3, #16
 8005976:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800597a:	e106      	b.n	8005b8a <UART_SetConfig+0x2ee>
 800597c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4b7c      	ldr	r3, [pc, #496]	; (8005b74 <UART_SetConfig+0x2d8>)
 8005982:	429a      	cmp	r2, r3
 8005984:	d138      	bne.n	80059f8 <UART_SetConfig+0x15c>
 8005986:	4b7a      	ldr	r3, [pc, #488]	; (8005b70 <UART_SetConfig+0x2d4>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598c:	f003 030c 	and.w	r3, r3, #12
 8005990:	2b0c      	cmp	r3, #12
 8005992:	d82d      	bhi.n	80059f0 <UART_SetConfig+0x154>
 8005994:	a201      	add	r2, pc, #4	; (adr r2, 800599c <UART_SetConfig+0x100>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	080059d1 	.word	0x080059d1
 80059a0:	080059f1 	.word	0x080059f1
 80059a4:	080059f1 	.word	0x080059f1
 80059a8:	080059f1 	.word	0x080059f1
 80059ac:	080059e1 	.word	0x080059e1
 80059b0:	080059f1 	.word	0x080059f1
 80059b4:	080059f1 	.word	0x080059f1
 80059b8:	080059f1 	.word	0x080059f1
 80059bc:	080059d9 	.word	0x080059d9
 80059c0:	080059f1 	.word	0x080059f1
 80059c4:	080059f1 	.word	0x080059f1
 80059c8:	080059f1 	.word	0x080059f1
 80059cc:	080059e9 	.word	0x080059e9
 80059d0:	2300      	movs	r3, #0
 80059d2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80059d6:	e0d8      	b.n	8005b8a <UART_SetConfig+0x2ee>
 80059d8:	2302      	movs	r3, #2
 80059da:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80059de:	e0d4      	b.n	8005b8a <UART_SetConfig+0x2ee>
 80059e0:	2304      	movs	r3, #4
 80059e2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80059e6:	e0d0      	b.n	8005b8a <UART_SetConfig+0x2ee>
 80059e8:	2308      	movs	r3, #8
 80059ea:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80059ee:	e0cc      	b.n	8005b8a <UART_SetConfig+0x2ee>
 80059f0:	2310      	movs	r3, #16
 80059f2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80059f6:	e0c8      	b.n	8005b8a <UART_SetConfig+0x2ee>
 80059f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4b5e      	ldr	r3, [pc, #376]	; (8005b78 <UART_SetConfig+0x2dc>)
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d125      	bne.n	8005a4e <UART_SetConfig+0x1b2>
 8005a02:	4b5b      	ldr	r3, [pc, #364]	; (8005b70 <UART_SetConfig+0x2d4>)
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a0c:	2b30      	cmp	r3, #48	; 0x30
 8005a0e:	d016      	beq.n	8005a3e <UART_SetConfig+0x1a2>
 8005a10:	2b30      	cmp	r3, #48	; 0x30
 8005a12:	d818      	bhi.n	8005a46 <UART_SetConfig+0x1aa>
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d00a      	beq.n	8005a2e <UART_SetConfig+0x192>
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d814      	bhi.n	8005a46 <UART_SetConfig+0x1aa>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <UART_SetConfig+0x18a>
 8005a20:	2b10      	cmp	r3, #16
 8005a22:	d008      	beq.n	8005a36 <UART_SetConfig+0x19a>
 8005a24:	e00f      	b.n	8005a46 <UART_SetConfig+0x1aa>
 8005a26:	2300      	movs	r3, #0
 8005a28:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005a2c:	e0ad      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005a34:	e0a9      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005a36:	2304      	movs	r3, #4
 8005a38:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005a3c:	e0a5      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005a3e:	2308      	movs	r3, #8
 8005a40:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005a44:	e0a1      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005a46:	2310      	movs	r3, #16
 8005a48:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005a4c:	e09d      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b4a      	ldr	r3, [pc, #296]	; (8005b7c <UART_SetConfig+0x2e0>)
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d125      	bne.n	8005aa4 <UART_SetConfig+0x208>
 8005a58:	4b45      	ldr	r3, [pc, #276]	; (8005b70 <UART_SetConfig+0x2d4>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a62:	2bc0      	cmp	r3, #192	; 0xc0
 8005a64:	d016      	beq.n	8005a94 <UART_SetConfig+0x1f8>
 8005a66:	2bc0      	cmp	r3, #192	; 0xc0
 8005a68:	d818      	bhi.n	8005a9c <UART_SetConfig+0x200>
 8005a6a:	2b80      	cmp	r3, #128	; 0x80
 8005a6c:	d00a      	beq.n	8005a84 <UART_SetConfig+0x1e8>
 8005a6e:	2b80      	cmp	r3, #128	; 0x80
 8005a70:	d814      	bhi.n	8005a9c <UART_SetConfig+0x200>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <UART_SetConfig+0x1e0>
 8005a76:	2b40      	cmp	r3, #64	; 0x40
 8005a78:	d008      	beq.n	8005a8c <UART_SetConfig+0x1f0>
 8005a7a:	e00f      	b.n	8005a9c <UART_SetConfig+0x200>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005a82:	e082      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005a84:	2302      	movs	r3, #2
 8005a86:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005a8a:	e07e      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005a8c:	2304      	movs	r3, #4
 8005a8e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005a92:	e07a      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005a94:	2308      	movs	r3, #8
 8005a96:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005a9a:	e076      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005aa2:	e072      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	4b35      	ldr	r3, [pc, #212]	; (8005b80 <UART_SetConfig+0x2e4>)
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d12a      	bne.n	8005b04 <UART_SetConfig+0x268>
 8005aae:	4b30      	ldr	r3, [pc, #192]	; (8005b70 <UART_SetConfig+0x2d4>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005abc:	d01a      	beq.n	8005af4 <UART_SetConfig+0x258>
 8005abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac2:	d81b      	bhi.n	8005afc <UART_SetConfig+0x260>
 8005ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac8:	d00c      	beq.n	8005ae4 <UART_SetConfig+0x248>
 8005aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ace:	d815      	bhi.n	8005afc <UART_SetConfig+0x260>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <UART_SetConfig+0x240>
 8005ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad8:	d008      	beq.n	8005aec <UART_SetConfig+0x250>
 8005ada:	e00f      	b.n	8005afc <UART_SetConfig+0x260>
 8005adc:	2300      	movs	r3, #0
 8005ade:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005ae2:	e052      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005aea:	e04e      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005aec:	2304      	movs	r3, #4
 8005aee:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005af2:	e04a      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005af4:	2308      	movs	r3, #8
 8005af6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005afa:	e046      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005afc:	2310      	movs	r3, #16
 8005afe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005b02:	e042      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	4b17      	ldr	r3, [pc, #92]	; (8005b68 <UART_SetConfig+0x2cc>)
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d13a      	bne.n	8005b84 <UART_SetConfig+0x2e8>
 8005b0e:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <UART_SetConfig+0x2d4>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b1c:	d01a      	beq.n	8005b54 <UART_SetConfig+0x2b8>
 8005b1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b22:	d81b      	bhi.n	8005b5c <UART_SetConfig+0x2c0>
 8005b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b28:	d00c      	beq.n	8005b44 <UART_SetConfig+0x2a8>
 8005b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b2e:	d815      	bhi.n	8005b5c <UART_SetConfig+0x2c0>
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <UART_SetConfig+0x2a0>
 8005b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b38:	d008      	beq.n	8005b4c <UART_SetConfig+0x2b0>
 8005b3a:	e00f      	b.n	8005b5c <UART_SetConfig+0x2c0>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005b42:	e022      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005b44:	2302      	movs	r3, #2
 8005b46:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005b4a:	e01e      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005b52:	e01a      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005b54:	2308      	movs	r3, #8
 8005b56:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005b5a:	e016      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005b62:	e012      	b.n	8005b8a <UART_SetConfig+0x2ee>
 8005b64:	efff69f3 	.word	0xefff69f3
 8005b68:	40008000 	.word	0x40008000
 8005b6c:	40013800 	.word	0x40013800
 8005b70:	40021000 	.word	0x40021000
 8005b74:	40004400 	.word	0x40004400
 8005b78:	40004800 	.word	0x40004800
 8005b7c:	40004c00 	.word	0x40004c00
 8005b80:	40005000 	.word	0x40005000
 8005b84:	2310      	movs	r3, #16
 8005b86:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4bb6      	ldr	r3, [pc, #728]	; (8005e68 <UART_SetConfig+0x5cc>)
 8005b90:	429a      	cmp	r2, r3
 8005b92:	f040 810c 	bne.w	8005dae <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b96:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d823      	bhi.n	8005be6 <UART_SetConfig+0x34a>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <UART_SetConfig+0x308>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bc9 	.word	0x08005bc9
 8005ba8:	08005be7 	.word	0x08005be7
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005be7 	.word	0x08005be7
 8005bb4:	08005bd7 	.word	0x08005bd7
 8005bb8:	08005be7 	.word	0x08005be7
 8005bbc:	08005be7 	.word	0x08005be7
 8005bc0:	08005be7 	.word	0x08005be7
 8005bc4:	08005bdf 	.word	0x08005bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005bc8:	f7fe feba 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 8005bcc:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bce:	e00e      	b.n	8005bee <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005bd0:	4ba6      	ldr	r3, [pc, #664]	; (8005e6c <UART_SetConfig+0x5d0>)
 8005bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bd4:	e00b      	b.n	8005bee <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005bd6:	f7fe fe1b 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8005bda:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bdc:	e007      	b.n	8005bee <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005be2:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8005be4:	e003      	b.n	8005bee <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8005bec:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 81e5 	beq.w	8005fc0 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	441a      	add	r2, r3
 8005c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d305      	bcc.n	8005c12 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d903      	bls.n	8005c1a <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8005c18:	e1d2      	b.n	8005fc0 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 8005c1a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	f200 80b0 	bhi.w	8005d84 <UART_SetConfig+0x4e8>
 8005c24:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <UART_SetConfig+0x390>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005d85 	.word	0x08005d85
 8005c34:	08005cb1 	.word	0x08005cb1
 8005c38:	08005d85 	.word	0x08005d85
 8005c3c:	08005cf1 	.word	0x08005cf1
 8005c40:	08005d85 	.word	0x08005d85
 8005c44:	08005d85 	.word	0x08005d85
 8005c48:	08005d85 	.word	0x08005d85
 8005c4c:	08005d4d 	.word	0x08005d4d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005c50:	f7fe fe76 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 8005c54:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4698      	mov	r8, r3
 8005c5c:	4691      	mov	r9, r2
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8005c6a:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8005c6e:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8005c72:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005c74:	6849      	ldr	r1, [r1, #4]
 8005c76:	0849      	lsrs	r1, r1, #1
 8005c78:	2000      	movs	r0, #0
 8005c7a:	6539      	str	r1, [r7, #80]	; 0x50
 8005c7c:	6578      	str	r0, [r7, #84]	; 0x54
 8005c7e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8005c82:	4621      	mov	r1, r4
 8005c84:	1851      	adds	r1, r2, r1
 8005c86:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c88:	4629      	mov	r1, r5
 8005c8a:	eb43 0101 	adc.w	r1, r3, r1
 8005c8e:	64f9      	str	r1, [r7, #76]	; 0x4c
 8005c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	643b      	str	r3, [r7, #64]	; 0x40
 8005c98:	647a      	str	r2, [r7, #68]	; 0x44
 8005c9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ca2:	f7fa ffa1 	bl	8000be8 <__aeabi_uldivmod>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4613      	mov	r3, r2
 8005cac:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8005cae:	e06d      	b.n	8005d8c <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cba:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005cbc:	4b6c      	ldr	r3, [pc, #432]	; (8005e70 <UART_SetConfig+0x5d4>)
 8005cbe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	18d3      	adds	r3, r2, r3
 8005cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005cc8:	460b      	mov	r3, r1
 8005cca:	f143 0300 	adc.w	r3, r3, #0
 8005cce:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cde:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005ce2:	f7fa ff81 	bl	8000be8 <__aeabi_uldivmod>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4613      	mov	r3, r2
 8005cec:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8005cee:	e04d      	b.n	8005d8c <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005cf0:	f7fe fd8e 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8005cf4:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005cf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	461c      	mov	r4, r3
 8005cfc:	4615      	mov	r5, r2
 8005cfe:	f04f 0200 	mov.w	r2, #0
 8005d02:	f04f 0300 	mov.w	r3, #0
 8005d06:	022b      	lsls	r3, r5, #8
 8005d08:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d0c:	0222      	lsls	r2, r4, #8
 8005d0e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005d10:	6849      	ldr	r1, [r1, #4]
 8005d12:	0849      	lsrs	r1, r1, #1
 8005d14:	2000      	movs	r0, #0
 8005d16:	6239      	str	r1, [r7, #32]
 8005d18:	6278      	str	r0, [r7, #36]	; 0x24
 8005d1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005d1e:	4621      	mov	r1, r4
 8005d20:	1851      	adds	r1, r2, r1
 8005d22:	61b9      	str	r1, [r7, #24]
 8005d24:	4629      	mov	r1, r5
 8005d26:	eb43 0101 	adc.w	r1, r3, r1
 8005d2a:	61f9      	str	r1, [r7, #28]
 8005d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	613b      	str	r3, [r7, #16]
 8005d34:	617a      	str	r2, [r7, #20]
 8005d36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005d3e:	f7fa ff53 	bl	8000be8 <__aeabi_uldivmod>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4613      	mov	r3, r2
 8005d48:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8005d4a:	e01f      	b.n	8005d8c <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	2200      	movs	r2, #0
 8005d54:	469a      	mov	sl, r3
 8005d56:	4693      	mov	fp, r2
 8005d58:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	f14b 0300 	adc.w	r3, fp, #0
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	607a      	str	r2, [r7, #4]
 8005d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d76:	f7fa ff37 	bl	8000be8 <__aeabi_uldivmod>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4613      	mov	r3, r2
 8005d80:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8005d82:	e003      	b.n	8005d8c <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 8005d8a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d92:	d308      	bcc.n	8005da6 <UART_SetConfig+0x50a>
 8005d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d9a:	d204      	bcs.n	8005da6 <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 8005d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005da2:	60da      	str	r2, [r3, #12]
 8005da4:	e10c      	b.n	8005fc0 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8005dac:	e108      	b.n	8005fc0 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db6:	f040 808f 	bne.w	8005ed8 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 8005dba:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d864      	bhi.n	8005e8c <UART_SetConfig+0x5f0>
 8005dc2:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <UART_SetConfig+0x52c>)
 8005dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc8:	08005ded 	.word	0x08005ded
 8005dcc:	08005e0d 	.word	0x08005e0d
 8005dd0:	08005e2d 	.word	0x08005e2d
 8005dd4:	08005e8d 	.word	0x08005e8d
 8005dd8:	08005e49 	.word	0x08005e49
 8005ddc:	08005e8d 	.word	0x08005e8d
 8005de0:	08005e8d 	.word	0x08005e8d
 8005de4:	08005e8d 	.word	0x08005e8d
 8005de8:	08005e75 	.word	0x08005e75
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dec:	f7fe fda8 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 8005df0:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005df4:	005a      	lsls	r2, r3, #1
 8005df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	085b      	lsrs	r3, r3, #1
 8005dfc:	441a      	add	r2, r3
 8005dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e0a:	e043      	b.n	8005e94 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e0c:	f7fe fdae 	bl	800496c <HAL_RCC_GetPCLK2Freq>
 8005e10:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e14:	005a      	lsls	r2, r3, #1
 8005e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	441a      	add	r2, r3
 8005e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e2a:	e033      	b.n	8005e94 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	085b      	lsrs	r3, r3, #1
 8005e32:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005e36:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005e3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e3c:	6852      	ldr	r2, [r2, #4]
 8005e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e46:	e025      	b.n	8005e94 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e48:	f7fe fce2 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8005e4c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e50:	005a      	lsls	r2, r3, #1
 8005e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	085b      	lsrs	r3, r3, #1
 8005e58:	441a      	add	r2, r3
 8005e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e66:	e015      	b.n	8005e94 <UART_SetConfig+0x5f8>
 8005e68:	40008000 	.word	0x40008000
 8005e6c:	00f42400 	.word	0x00f42400
 8005e70:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	085b      	lsrs	r3, r3, #1
 8005e7a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e8a:	e003      	b.n	8005e94 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8005e92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e96:	2b0f      	cmp	r3, #15
 8005e98:	d91a      	bls.n	8005ed0 <UART_SetConfig+0x634>
 8005e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea0:	d216      	bcs.n	8005ed0 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f023 030f 	bic.w	r3, r3, #15
 8005eaa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb0:	085b      	lsrs	r3, r3, #1
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 8005ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005ecc:	60da      	str	r2, [r3, #12]
 8005ece:	e077      	b.n	8005fc0 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8005ed6:	e073      	b.n	8005fc0 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8005ed8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d85c      	bhi.n	8005f9a <UART_SetConfig+0x6fe>
 8005ee0:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <UART_SetConfig+0x64c>)
 8005ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee6:	bf00      	nop
 8005ee8:	08005f0d 	.word	0x08005f0d
 8005eec:	08005f2b 	.word	0x08005f2b
 8005ef0:	08005f49 	.word	0x08005f49
 8005ef4:	08005f9b 	.word	0x08005f9b
 8005ef8:	08005f65 	.word	0x08005f65
 8005efc:	08005f9b 	.word	0x08005f9b
 8005f00:	08005f9b 	.word	0x08005f9b
 8005f04:	08005f9b 	.word	0x08005f9b
 8005f08:	08005f83 	.word	0x08005f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f0c:	f7fe fd18 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 8005f10:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	085a      	lsrs	r2, r3, #1
 8005f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f1a:	441a      	add	r2, r3
 8005f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f28:	e03b      	b.n	8005fa2 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f2a:	f7fe fd1f 	bl	800496c <HAL_RCC_GetPCLK2Freq>
 8005f2e:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	085a      	lsrs	r2, r3, #1
 8005f36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f38:	441a      	add	r2, r3
 8005f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f46:	e02c      	b.n	8005fa2 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	085b      	lsrs	r3, r3, #1
 8005f4e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005f52:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005f56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f58:	6852      	ldr	r2, [r2, #4]
 8005f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f62:	e01e      	b.n	8005fa2 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f64:	f7fe fc54 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8005f68:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	085a      	lsrs	r2, r3, #1
 8005f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f72:	441a      	add	r2, r3
 8005f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f80:	e00f      	b.n	8005fa2 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f98:	e003      	b.n	8005fa2 <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8005fa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa4:	2b0f      	cmp	r3, #15
 8005fa6:	d908      	bls.n	8005fba <UART_SetConfig+0x71e>
 8005fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fae:	d204      	bcs.n	8005fba <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 8005fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005fb6:	60da      	str	r2, [r3, #12]
 8005fb8:	e002      	b.n	8005fc0 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc8:	2200      	movs	r2, #0
 8005fca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005fcc:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3780      	adds	r7, #128	; 0x80
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fda:	bf00      	nop

08005fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01a      	beq.n	80060f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060da:	d10a      	bne.n	80060f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	605a      	str	r2, [r3, #4]
  }
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af02      	add	r7, sp, #8
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800612e:	f7fd ff49 	bl	8003fc4 <HAL_GetTick>
 8006132:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	2b08      	cmp	r3, #8
 8006140:	d10e      	bne.n	8006160 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006142:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f82a 	bl	80061aa <UART_WaitOnFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e020      	b.n	80061a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b04      	cmp	r3, #4
 800616c:	d10e      	bne.n	800618c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800616e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f814 	bl	80061aa <UART_WaitOnFlagUntilTimeout>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e00a      	b.n	80061a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	4613      	mov	r3, r2
 80061b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ba:	e05d      	b.n	8006278 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c2:	d059      	beq.n	8006278 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c4:	f7fd fefe 	bl	8003fc4 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d302      	bcc.n	80061da <UART_WaitOnFlagUntilTimeout+0x30>
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d11b      	bne.n	8006212 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 0201 	bic.w	r2, r2, #1
 80061f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2220      	movs	r2, #32
 8006204:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e042      	b.n	8006298 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d02b      	beq.n	8006278 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800622a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622e:	d123      	bne.n	8006278 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006238:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006248:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0201 	bic.w	r2, r2, #1
 8006258:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2220      	movs	r2, #32
 800625e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e00f      	b.n	8006298 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	69da      	ldr	r2, [r3, #28]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4013      	ands	r3, r2
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	429a      	cmp	r2, r3
 8006286:	bf0c      	ite	eq
 8006288:	2301      	moveq	r3, #1
 800628a:	2300      	movne	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	461a      	mov	r2, r3
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	429a      	cmp	r2, r3
 8006294:	d092      	beq.n	80061bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <findslot>:
 80062a0:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <findslot+0x2c>)
 80062a2:	b510      	push	{r4, lr}
 80062a4:	4604      	mov	r4, r0
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	b118      	cbz	r0, 80062b2 <findslot+0x12>
 80062aa:	6983      	ldr	r3, [r0, #24]
 80062ac:	b90b      	cbnz	r3, 80062b2 <findslot+0x12>
 80062ae:	f000 f9a1 	bl	80065f4 <__sinit>
 80062b2:	2c13      	cmp	r4, #19
 80062b4:	d807      	bhi.n	80062c6 <findslot+0x26>
 80062b6:	4806      	ldr	r0, [pc, #24]	; (80062d0 <findslot+0x30>)
 80062b8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80062bc:	3201      	adds	r2, #1
 80062be:	d002      	beq.n	80062c6 <findslot+0x26>
 80062c0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80062c4:	bd10      	pop	{r4, pc}
 80062c6:	2000      	movs	r0, #0
 80062c8:	e7fc      	b.n	80062c4 <findslot+0x24>
 80062ca:	bf00      	nop
 80062cc:	20000034 	.word	0x20000034
 80062d0:	200003f0 	.word	0x200003f0

080062d4 <error>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	4604      	mov	r4, r0
 80062d8:	f000 f92e 	bl	8006538 <__errno>
 80062dc:	2613      	movs	r6, #19
 80062de:	4605      	mov	r5, r0
 80062e0:	2700      	movs	r7, #0
 80062e2:	4630      	mov	r0, r6
 80062e4:	4639      	mov	r1, r7
 80062e6:	beab      	bkpt	0x00ab
 80062e8:	4606      	mov	r6, r0
 80062ea:	602e      	str	r6, [r5, #0]
 80062ec:	4620      	mov	r0, r4
 80062ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062f0 <checkerror>:
 80062f0:	1c43      	adds	r3, r0, #1
 80062f2:	d101      	bne.n	80062f8 <checkerror+0x8>
 80062f4:	f7ff bfee 	b.w	80062d4 <error>
 80062f8:	4770      	bx	lr

080062fa <_swiread>:
 80062fa:	b530      	push	{r4, r5, lr}
 80062fc:	b085      	sub	sp, #20
 80062fe:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006302:	9203      	str	r2, [sp, #12]
 8006304:	2406      	movs	r4, #6
 8006306:	ad01      	add	r5, sp, #4
 8006308:	4620      	mov	r0, r4
 800630a:	4629      	mov	r1, r5
 800630c:	beab      	bkpt	0x00ab
 800630e:	4604      	mov	r4, r0
 8006310:	4620      	mov	r0, r4
 8006312:	f7ff ffed 	bl	80062f0 <checkerror>
 8006316:	b005      	add	sp, #20
 8006318:	bd30      	pop	{r4, r5, pc}

0800631a <_read>:
 800631a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800631c:	4615      	mov	r5, r2
 800631e:	9101      	str	r1, [sp, #4]
 8006320:	f7ff ffbe 	bl	80062a0 <findslot>
 8006324:	9901      	ldr	r1, [sp, #4]
 8006326:	4604      	mov	r4, r0
 8006328:	b938      	cbnz	r0, 800633a <_read+0x20>
 800632a:	f000 f905 	bl	8006538 <__errno>
 800632e:	2309      	movs	r3, #9
 8006330:	6003      	str	r3, [r0, #0]
 8006332:	f04f 30ff 	mov.w	r0, #4294967295
 8006336:	b003      	add	sp, #12
 8006338:	bd30      	pop	{r4, r5, pc}
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	462a      	mov	r2, r5
 800633e:	f7ff ffdc 	bl	80062fa <_swiread>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d0f7      	beq.n	8006336 <_read+0x1c>
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	1a2a      	subs	r2, r5, r0
 800634a:	4413      	add	r3, r2
 800634c:	6063      	str	r3, [r4, #4]
 800634e:	4610      	mov	r0, r2
 8006350:	e7f1      	b.n	8006336 <_read+0x1c>

08006352 <_swilseek>:
 8006352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006354:	460c      	mov	r4, r1
 8006356:	4616      	mov	r6, r2
 8006358:	f7ff ffa2 	bl	80062a0 <findslot>
 800635c:	4605      	mov	r5, r0
 800635e:	b940      	cbnz	r0, 8006372 <_swilseek+0x20>
 8006360:	f000 f8ea 	bl	8006538 <__errno>
 8006364:	2309      	movs	r3, #9
 8006366:	6003      	str	r3, [r0, #0]
 8006368:	f04f 34ff 	mov.w	r4, #4294967295
 800636c:	4620      	mov	r0, r4
 800636e:	b003      	add	sp, #12
 8006370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006372:	2e02      	cmp	r6, #2
 8006374:	d903      	bls.n	800637e <_swilseek+0x2c>
 8006376:	f000 f8df 	bl	8006538 <__errno>
 800637a:	2316      	movs	r3, #22
 800637c:	e7f3      	b.n	8006366 <_swilseek+0x14>
 800637e:	2e01      	cmp	r6, #1
 8006380:	d112      	bne.n	80063a8 <_swilseek+0x56>
 8006382:	6843      	ldr	r3, [r0, #4]
 8006384:	18e4      	adds	r4, r4, r3
 8006386:	d4f6      	bmi.n	8006376 <_swilseek+0x24>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	260a      	movs	r6, #10
 800638c:	e9cd 3400 	strd	r3, r4, [sp]
 8006390:	466f      	mov	r7, sp
 8006392:	4630      	mov	r0, r6
 8006394:	4639      	mov	r1, r7
 8006396:	beab      	bkpt	0x00ab
 8006398:	4606      	mov	r6, r0
 800639a:	4630      	mov	r0, r6
 800639c:	f7ff ffa8 	bl	80062f0 <checkerror>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	dbe1      	blt.n	8006368 <_swilseek+0x16>
 80063a4:	606c      	str	r4, [r5, #4]
 80063a6:	e7e1      	b.n	800636c <_swilseek+0x1a>
 80063a8:	2e02      	cmp	r6, #2
 80063aa:	d1ed      	bne.n	8006388 <_swilseek+0x36>
 80063ac:	6803      	ldr	r3, [r0, #0]
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	260c      	movs	r6, #12
 80063b2:	466f      	mov	r7, sp
 80063b4:	4630      	mov	r0, r6
 80063b6:	4639      	mov	r1, r7
 80063b8:	beab      	bkpt	0x00ab
 80063ba:	4606      	mov	r6, r0
 80063bc:	4630      	mov	r0, r6
 80063be:	f7ff ff97 	bl	80062f0 <checkerror>
 80063c2:	1c43      	adds	r3, r0, #1
 80063c4:	d0d0      	beq.n	8006368 <_swilseek+0x16>
 80063c6:	4404      	add	r4, r0
 80063c8:	e7de      	b.n	8006388 <_swilseek+0x36>

080063ca <_lseek>:
 80063ca:	f7ff bfc2 	b.w	8006352 <_swilseek>

080063ce <_swiwrite>:
 80063ce:	b530      	push	{r4, r5, lr}
 80063d0:	b085      	sub	sp, #20
 80063d2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80063d6:	9203      	str	r2, [sp, #12]
 80063d8:	2405      	movs	r4, #5
 80063da:	ad01      	add	r5, sp, #4
 80063dc:	4620      	mov	r0, r4
 80063de:	4629      	mov	r1, r5
 80063e0:	beab      	bkpt	0x00ab
 80063e2:	4604      	mov	r4, r0
 80063e4:	4620      	mov	r0, r4
 80063e6:	f7ff ff83 	bl	80062f0 <checkerror>
 80063ea:	b005      	add	sp, #20
 80063ec:	bd30      	pop	{r4, r5, pc}

080063ee <_write>:
 80063ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063f0:	4615      	mov	r5, r2
 80063f2:	9101      	str	r1, [sp, #4]
 80063f4:	f7ff ff54 	bl	80062a0 <findslot>
 80063f8:	9901      	ldr	r1, [sp, #4]
 80063fa:	4604      	mov	r4, r0
 80063fc:	b930      	cbnz	r0, 800640c <_write+0x1e>
 80063fe:	f000 f89b 	bl	8006538 <__errno>
 8006402:	2309      	movs	r3, #9
 8006404:	6003      	str	r3, [r0, #0]
 8006406:	f04f 30ff 	mov.w	r0, #4294967295
 800640a:	e012      	b.n	8006432 <_write+0x44>
 800640c:	6800      	ldr	r0, [r0, #0]
 800640e:	462a      	mov	r2, r5
 8006410:	f7ff ffdd 	bl	80063ce <_swiwrite>
 8006414:	2800      	cmp	r0, #0
 8006416:	dbf6      	blt.n	8006406 <_write+0x18>
 8006418:	6862      	ldr	r2, [r4, #4]
 800641a:	1a2b      	subs	r3, r5, r0
 800641c:	441a      	add	r2, r3
 800641e:	42a8      	cmp	r0, r5
 8006420:	6062      	str	r2, [r4, #4]
 8006422:	d105      	bne.n	8006430 <_write+0x42>
 8006424:	2000      	movs	r0, #0
 8006426:	b003      	add	sp, #12
 8006428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800642c:	f7ff bf52 	b.w	80062d4 <error>
 8006430:	4618      	mov	r0, r3
 8006432:	b003      	add	sp, #12
 8006434:	bd30      	pop	{r4, r5, pc}

08006436 <_swiclose>:
 8006436:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006438:	2402      	movs	r4, #2
 800643a:	9001      	str	r0, [sp, #4]
 800643c:	ad01      	add	r5, sp, #4
 800643e:	4620      	mov	r0, r4
 8006440:	4629      	mov	r1, r5
 8006442:	beab      	bkpt	0x00ab
 8006444:	4604      	mov	r4, r0
 8006446:	4620      	mov	r0, r4
 8006448:	f7ff ff52 	bl	80062f0 <checkerror>
 800644c:	b003      	add	sp, #12
 800644e:	bd30      	pop	{r4, r5, pc}

08006450 <_close>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4605      	mov	r5, r0
 8006454:	f7ff ff24 	bl	80062a0 <findslot>
 8006458:	4604      	mov	r4, r0
 800645a:	b930      	cbnz	r0, 800646a <_close+0x1a>
 800645c:	f000 f86c 	bl	8006538 <__errno>
 8006460:	2309      	movs	r3, #9
 8006462:	6003      	str	r3, [r0, #0]
 8006464:	f04f 30ff 	mov.w	r0, #4294967295
 8006468:	bd38      	pop	{r3, r4, r5, pc}
 800646a:	3d01      	subs	r5, #1
 800646c:	2d01      	cmp	r5, #1
 800646e:	d809      	bhi.n	8006484 <_close+0x34>
 8006470:	4b09      	ldr	r3, [pc, #36]	; (8006498 <_close+0x48>)
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	429a      	cmp	r2, r3
 8006478:	d104      	bne.n	8006484 <_close+0x34>
 800647a:	f04f 33ff 	mov.w	r3, #4294967295
 800647e:	6003      	str	r3, [r0, #0]
 8006480:	2000      	movs	r0, #0
 8006482:	e7f1      	b.n	8006468 <_close+0x18>
 8006484:	6820      	ldr	r0, [r4, #0]
 8006486:	f7ff ffd6 	bl	8006436 <_swiclose>
 800648a:	2800      	cmp	r0, #0
 800648c:	d1ec      	bne.n	8006468 <_close+0x18>
 800648e:	f04f 33ff 	mov.w	r3, #4294967295
 8006492:	6023      	str	r3, [r4, #0]
 8006494:	e7e8      	b.n	8006468 <_close+0x18>
 8006496:	bf00      	nop
 8006498:	200003f0 	.word	0x200003f0

0800649c <_getpid>:
 800649c:	2001      	movs	r0, #1
 800649e:	4770      	bx	lr

080064a0 <_swistat>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	460c      	mov	r4, r1
 80064a4:	f7ff fefc 	bl	80062a0 <findslot>
 80064a8:	4605      	mov	r5, r0
 80064aa:	b930      	cbnz	r0, 80064ba <_swistat+0x1a>
 80064ac:	f000 f844 	bl	8006538 <__errno>
 80064b0:	2309      	movs	r3, #9
 80064b2:	6003      	str	r3, [r0, #0]
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	bd70      	pop	{r4, r5, r6, pc}
 80064ba:	6863      	ldr	r3, [r4, #4]
 80064bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80064c0:	6063      	str	r3, [r4, #4]
 80064c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064c6:	64a3      	str	r3, [r4, #72]	; 0x48
 80064c8:	260c      	movs	r6, #12
 80064ca:	4630      	mov	r0, r6
 80064cc:	4629      	mov	r1, r5
 80064ce:	beab      	bkpt	0x00ab
 80064d0:	4605      	mov	r5, r0
 80064d2:	4628      	mov	r0, r5
 80064d4:	f7ff ff0c 	bl	80062f0 <checkerror>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	bf1c      	itt	ne
 80064dc:	6120      	strne	r0, [r4, #16]
 80064de:	2000      	movne	r0, #0
 80064e0:	e7ea      	b.n	80064b8 <_swistat+0x18>

080064e2 <_fstat>:
 80064e2:	460b      	mov	r3, r1
 80064e4:	b510      	push	{r4, lr}
 80064e6:	2100      	movs	r1, #0
 80064e8:	4604      	mov	r4, r0
 80064ea:	2258      	movs	r2, #88	; 0x58
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 f954 	bl	800679a <memset>
 80064f2:	4601      	mov	r1, r0
 80064f4:	4620      	mov	r0, r4
 80064f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064fa:	f7ff bfd1 	b.w	80064a0 <_swistat>

080064fe <_isatty>:
 80064fe:	b570      	push	{r4, r5, r6, lr}
 8006500:	f7ff fece 	bl	80062a0 <findslot>
 8006504:	2509      	movs	r5, #9
 8006506:	4604      	mov	r4, r0
 8006508:	b920      	cbnz	r0, 8006514 <_isatty+0x16>
 800650a:	f000 f815 	bl	8006538 <__errno>
 800650e:	6005      	str	r5, [r0, #0]
 8006510:	4620      	mov	r0, r4
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	4628      	mov	r0, r5
 8006516:	4621      	mov	r1, r4
 8006518:	beab      	bkpt	0x00ab
 800651a:	4604      	mov	r4, r0
 800651c:	2c01      	cmp	r4, #1
 800651e:	d0f7      	beq.n	8006510 <_isatty+0x12>
 8006520:	f000 f80a 	bl	8006538 <__errno>
 8006524:	2400      	movs	r4, #0
 8006526:	4605      	mov	r5, r0
 8006528:	2613      	movs	r6, #19
 800652a:	4630      	mov	r0, r6
 800652c:	4621      	mov	r1, r4
 800652e:	beab      	bkpt	0x00ab
 8006530:	4606      	mov	r6, r0
 8006532:	602e      	str	r6, [r5, #0]
 8006534:	e7ec      	b.n	8006510 <_isatty+0x12>
	...

08006538 <__errno>:
 8006538:	4b01      	ldr	r3, [pc, #4]	; (8006540 <__errno+0x8>)
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20000034 	.word	0x20000034

08006544 <std>:
 8006544:	2300      	movs	r3, #0
 8006546:	b510      	push	{r4, lr}
 8006548:	4604      	mov	r4, r0
 800654a:	e9c0 3300 	strd	r3, r3, [r0]
 800654e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006552:	6083      	str	r3, [r0, #8]
 8006554:	8181      	strh	r1, [r0, #12]
 8006556:	6643      	str	r3, [r0, #100]	; 0x64
 8006558:	81c2      	strh	r2, [r0, #14]
 800655a:	6183      	str	r3, [r0, #24]
 800655c:	4619      	mov	r1, r3
 800655e:	2208      	movs	r2, #8
 8006560:	305c      	adds	r0, #92	; 0x5c
 8006562:	f000 f91a 	bl	800679a <memset>
 8006566:	4b05      	ldr	r3, [pc, #20]	; (800657c <std+0x38>)
 8006568:	6263      	str	r3, [r4, #36]	; 0x24
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <std+0x3c>)
 800656c:	62a3      	str	r3, [r4, #40]	; 0x28
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <std+0x40>)
 8006570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006572:	4b05      	ldr	r3, [pc, #20]	; (8006588 <std+0x44>)
 8006574:	6224      	str	r4, [r4, #32]
 8006576:	6323      	str	r3, [r4, #48]	; 0x30
 8006578:	bd10      	pop	{r4, pc}
 800657a:	bf00      	nop
 800657c:	08007209 	.word	0x08007209
 8006580:	0800722b 	.word	0x0800722b
 8006584:	08007263 	.word	0x08007263
 8006588:	08007287 	.word	0x08007287

0800658c <_cleanup_r>:
 800658c:	4901      	ldr	r1, [pc, #4]	; (8006594 <_cleanup_r+0x8>)
 800658e:	f000 b8af 	b.w	80066f0 <_fwalk_reent>
 8006592:	bf00      	nop
 8006594:	08008291 	.word	0x08008291

08006598 <__sfmoreglue>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	2268      	movs	r2, #104	; 0x68
 800659c:	1e4d      	subs	r5, r1, #1
 800659e:	4355      	muls	r5, r2
 80065a0:	460e      	mov	r6, r1
 80065a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065a6:	f000 f921 	bl	80067ec <_malloc_r>
 80065aa:	4604      	mov	r4, r0
 80065ac:	b140      	cbz	r0, 80065c0 <__sfmoreglue+0x28>
 80065ae:	2100      	movs	r1, #0
 80065b0:	e9c0 1600 	strd	r1, r6, [r0]
 80065b4:	300c      	adds	r0, #12
 80065b6:	60a0      	str	r0, [r4, #8]
 80065b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80065bc:	f000 f8ed 	bl	800679a <memset>
 80065c0:	4620      	mov	r0, r4
 80065c2:	bd70      	pop	{r4, r5, r6, pc}

080065c4 <__sfp_lock_acquire>:
 80065c4:	4801      	ldr	r0, [pc, #4]	; (80065cc <__sfp_lock_acquire+0x8>)
 80065c6:	f000 b8d8 	b.w	800677a <__retarget_lock_acquire_recursive>
 80065ca:	bf00      	nop
 80065cc:	20000491 	.word	0x20000491

080065d0 <__sfp_lock_release>:
 80065d0:	4801      	ldr	r0, [pc, #4]	; (80065d8 <__sfp_lock_release+0x8>)
 80065d2:	f000 b8d3 	b.w	800677c <__retarget_lock_release_recursive>
 80065d6:	bf00      	nop
 80065d8:	20000491 	.word	0x20000491

080065dc <__sinit_lock_acquire>:
 80065dc:	4801      	ldr	r0, [pc, #4]	; (80065e4 <__sinit_lock_acquire+0x8>)
 80065de:	f000 b8cc 	b.w	800677a <__retarget_lock_acquire_recursive>
 80065e2:	bf00      	nop
 80065e4:	20000492 	.word	0x20000492

080065e8 <__sinit_lock_release>:
 80065e8:	4801      	ldr	r0, [pc, #4]	; (80065f0 <__sinit_lock_release+0x8>)
 80065ea:	f000 b8c7 	b.w	800677c <__retarget_lock_release_recursive>
 80065ee:	bf00      	nop
 80065f0:	20000492 	.word	0x20000492

080065f4 <__sinit>:
 80065f4:	b510      	push	{r4, lr}
 80065f6:	4604      	mov	r4, r0
 80065f8:	f7ff fff0 	bl	80065dc <__sinit_lock_acquire>
 80065fc:	69a3      	ldr	r3, [r4, #24]
 80065fe:	b11b      	cbz	r3, 8006608 <__sinit+0x14>
 8006600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006604:	f7ff bff0 	b.w	80065e8 <__sinit_lock_release>
 8006608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800660c:	6523      	str	r3, [r4, #80]	; 0x50
 800660e:	4b13      	ldr	r3, [pc, #76]	; (800665c <__sinit+0x68>)
 8006610:	4a13      	ldr	r2, [pc, #76]	; (8006660 <__sinit+0x6c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	62a2      	str	r2, [r4, #40]	; 0x28
 8006616:	42a3      	cmp	r3, r4
 8006618:	bf04      	itt	eq
 800661a:	2301      	moveq	r3, #1
 800661c:	61a3      	streq	r3, [r4, #24]
 800661e:	4620      	mov	r0, r4
 8006620:	f000 f820 	bl	8006664 <__sfp>
 8006624:	6060      	str	r0, [r4, #4]
 8006626:	4620      	mov	r0, r4
 8006628:	f000 f81c 	bl	8006664 <__sfp>
 800662c:	60a0      	str	r0, [r4, #8]
 800662e:	4620      	mov	r0, r4
 8006630:	f000 f818 	bl	8006664 <__sfp>
 8006634:	2200      	movs	r2, #0
 8006636:	60e0      	str	r0, [r4, #12]
 8006638:	2104      	movs	r1, #4
 800663a:	6860      	ldr	r0, [r4, #4]
 800663c:	f7ff ff82 	bl	8006544 <std>
 8006640:	68a0      	ldr	r0, [r4, #8]
 8006642:	2201      	movs	r2, #1
 8006644:	2109      	movs	r1, #9
 8006646:	f7ff ff7d 	bl	8006544 <std>
 800664a:	68e0      	ldr	r0, [r4, #12]
 800664c:	2202      	movs	r2, #2
 800664e:	2112      	movs	r1, #18
 8006650:	f7ff ff78 	bl	8006544 <std>
 8006654:	2301      	movs	r3, #1
 8006656:	61a3      	str	r3, [r4, #24]
 8006658:	e7d2      	b.n	8006600 <__sinit+0xc>
 800665a:	bf00      	nop
 800665c:	080098e8 	.word	0x080098e8
 8006660:	0800658d 	.word	0x0800658d

08006664 <__sfp>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	4607      	mov	r7, r0
 8006668:	f7ff ffac 	bl	80065c4 <__sfp_lock_acquire>
 800666c:	4b1e      	ldr	r3, [pc, #120]	; (80066e8 <__sfp+0x84>)
 800666e:	681e      	ldr	r6, [r3, #0]
 8006670:	69b3      	ldr	r3, [r6, #24]
 8006672:	b913      	cbnz	r3, 800667a <__sfp+0x16>
 8006674:	4630      	mov	r0, r6
 8006676:	f7ff ffbd 	bl	80065f4 <__sinit>
 800667a:	3648      	adds	r6, #72	; 0x48
 800667c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006680:	3b01      	subs	r3, #1
 8006682:	d503      	bpl.n	800668c <__sfp+0x28>
 8006684:	6833      	ldr	r3, [r6, #0]
 8006686:	b30b      	cbz	r3, 80066cc <__sfp+0x68>
 8006688:	6836      	ldr	r6, [r6, #0]
 800668a:	e7f7      	b.n	800667c <__sfp+0x18>
 800668c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006690:	b9d5      	cbnz	r5, 80066c8 <__sfp+0x64>
 8006692:	4b16      	ldr	r3, [pc, #88]	; (80066ec <__sfp+0x88>)
 8006694:	60e3      	str	r3, [r4, #12]
 8006696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800669a:	6665      	str	r5, [r4, #100]	; 0x64
 800669c:	f000 f86c 	bl	8006778 <__retarget_lock_init_recursive>
 80066a0:	f7ff ff96 	bl	80065d0 <__sfp_lock_release>
 80066a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80066a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80066ac:	6025      	str	r5, [r4, #0]
 80066ae:	61a5      	str	r5, [r4, #24]
 80066b0:	2208      	movs	r2, #8
 80066b2:	4629      	mov	r1, r5
 80066b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066b8:	f000 f86f 	bl	800679a <memset>
 80066bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80066c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80066c4:	4620      	mov	r0, r4
 80066c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066c8:	3468      	adds	r4, #104	; 0x68
 80066ca:	e7d9      	b.n	8006680 <__sfp+0x1c>
 80066cc:	2104      	movs	r1, #4
 80066ce:	4638      	mov	r0, r7
 80066d0:	f7ff ff62 	bl	8006598 <__sfmoreglue>
 80066d4:	4604      	mov	r4, r0
 80066d6:	6030      	str	r0, [r6, #0]
 80066d8:	2800      	cmp	r0, #0
 80066da:	d1d5      	bne.n	8006688 <__sfp+0x24>
 80066dc:	f7ff ff78 	bl	80065d0 <__sfp_lock_release>
 80066e0:	230c      	movs	r3, #12
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	e7ee      	b.n	80066c4 <__sfp+0x60>
 80066e6:	bf00      	nop
 80066e8:	080098e8 	.word	0x080098e8
 80066ec:	ffff0001 	.word	0xffff0001

080066f0 <_fwalk_reent>:
 80066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	4606      	mov	r6, r0
 80066f6:	4688      	mov	r8, r1
 80066f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066fc:	2700      	movs	r7, #0
 80066fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006702:	f1b9 0901 	subs.w	r9, r9, #1
 8006706:	d505      	bpl.n	8006714 <_fwalk_reent+0x24>
 8006708:	6824      	ldr	r4, [r4, #0]
 800670a:	2c00      	cmp	r4, #0
 800670c:	d1f7      	bne.n	80066fe <_fwalk_reent+0xe>
 800670e:	4638      	mov	r0, r7
 8006710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006714:	89ab      	ldrh	r3, [r5, #12]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d907      	bls.n	800672a <_fwalk_reent+0x3a>
 800671a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800671e:	3301      	adds	r3, #1
 8006720:	d003      	beq.n	800672a <_fwalk_reent+0x3a>
 8006722:	4629      	mov	r1, r5
 8006724:	4630      	mov	r0, r6
 8006726:	47c0      	blx	r8
 8006728:	4307      	orrs	r7, r0
 800672a:	3568      	adds	r5, #104	; 0x68
 800672c:	e7e9      	b.n	8006702 <_fwalk_reent+0x12>
	...

08006730 <__libc_init_array>:
 8006730:	b570      	push	{r4, r5, r6, lr}
 8006732:	4d0d      	ldr	r5, [pc, #52]	; (8006768 <__libc_init_array+0x38>)
 8006734:	4c0d      	ldr	r4, [pc, #52]	; (800676c <__libc_init_array+0x3c>)
 8006736:	1b64      	subs	r4, r4, r5
 8006738:	10a4      	asrs	r4, r4, #2
 800673a:	2600      	movs	r6, #0
 800673c:	42a6      	cmp	r6, r4
 800673e:	d109      	bne.n	8006754 <__libc_init_array+0x24>
 8006740:	4d0b      	ldr	r5, [pc, #44]	; (8006770 <__libc_init_array+0x40>)
 8006742:	4c0c      	ldr	r4, [pc, #48]	; (8006774 <__libc_init_array+0x44>)
 8006744:	f002 fe60 	bl	8009408 <_init>
 8006748:	1b64      	subs	r4, r4, r5
 800674a:	10a4      	asrs	r4, r4, #2
 800674c:	2600      	movs	r6, #0
 800674e:	42a6      	cmp	r6, r4
 8006750:	d105      	bne.n	800675e <__libc_init_array+0x2e>
 8006752:	bd70      	pop	{r4, r5, r6, pc}
 8006754:	f855 3b04 	ldr.w	r3, [r5], #4
 8006758:	4798      	blx	r3
 800675a:	3601      	adds	r6, #1
 800675c:	e7ee      	b.n	800673c <__libc_init_array+0xc>
 800675e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006762:	4798      	blx	r3
 8006764:	3601      	adds	r6, #1
 8006766:	e7f2      	b.n	800674e <__libc_init_array+0x1e>
 8006768:	08009c68 	.word	0x08009c68
 800676c:	08009c68 	.word	0x08009c68
 8006770:	08009c68 	.word	0x08009c68
 8006774:	08009c6c 	.word	0x08009c6c

08006778 <__retarget_lock_init_recursive>:
 8006778:	4770      	bx	lr

0800677a <__retarget_lock_acquire_recursive>:
 800677a:	4770      	bx	lr

0800677c <__retarget_lock_release_recursive>:
 800677c:	4770      	bx	lr

0800677e <memcpy>:
 800677e:	440a      	add	r2, r1
 8006780:	4291      	cmp	r1, r2
 8006782:	f100 33ff 	add.w	r3, r0, #4294967295
 8006786:	d100      	bne.n	800678a <memcpy+0xc>
 8006788:	4770      	bx	lr
 800678a:	b510      	push	{r4, lr}
 800678c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006790:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006794:	4291      	cmp	r1, r2
 8006796:	d1f9      	bne.n	800678c <memcpy+0xe>
 8006798:	bd10      	pop	{r4, pc}

0800679a <memset>:
 800679a:	4402      	add	r2, r0
 800679c:	4603      	mov	r3, r0
 800679e:	4293      	cmp	r3, r2
 80067a0:	d100      	bne.n	80067a4 <memset+0xa>
 80067a2:	4770      	bx	lr
 80067a4:	f803 1b01 	strb.w	r1, [r3], #1
 80067a8:	e7f9      	b.n	800679e <memset+0x4>
	...

080067ac <sbrk_aligned>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4e0e      	ldr	r6, [pc, #56]	; (80067e8 <sbrk_aligned+0x3c>)
 80067b0:	460c      	mov	r4, r1
 80067b2:	6831      	ldr	r1, [r6, #0]
 80067b4:	4605      	mov	r5, r0
 80067b6:	b911      	cbnz	r1, 80067be <sbrk_aligned+0x12>
 80067b8:	f000 fcf6 	bl	80071a8 <_sbrk_r>
 80067bc:	6030      	str	r0, [r6, #0]
 80067be:	4621      	mov	r1, r4
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 fcf1 	bl	80071a8 <_sbrk_r>
 80067c6:	1c43      	adds	r3, r0, #1
 80067c8:	d00a      	beq.n	80067e0 <sbrk_aligned+0x34>
 80067ca:	1cc4      	adds	r4, r0, #3
 80067cc:	f024 0403 	bic.w	r4, r4, #3
 80067d0:	42a0      	cmp	r0, r4
 80067d2:	d007      	beq.n	80067e4 <sbrk_aligned+0x38>
 80067d4:	1a21      	subs	r1, r4, r0
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 fce6 	bl	80071a8 <_sbrk_r>
 80067dc:	3001      	adds	r0, #1
 80067de:	d101      	bne.n	80067e4 <sbrk_aligned+0x38>
 80067e0:	f04f 34ff 	mov.w	r4, #4294967295
 80067e4:	4620      	mov	r0, r4
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	20000498 	.word	0x20000498

080067ec <_malloc_r>:
 80067ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f0:	1ccd      	adds	r5, r1, #3
 80067f2:	f025 0503 	bic.w	r5, r5, #3
 80067f6:	3508      	adds	r5, #8
 80067f8:	2d0c      	cmp	r5, #12
 80067fa:	bf38      	it	cc
 80067fc:	250c      	movcc	r5, #12
 80067fe:	2d00      	cmp	r5, #0
 8006800:	4607      	mov	r7, r0
 8006802:	db01      	blt.n	8006808 <_malloc_r+0x1c>
 8006804:	42a9      	cmp	r1, r5
 8006806:	d905      	bls.n	8006814 <_malloc_r+0x28>
 8006808:	230c      	movs	r3, #12
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	2600      	movs	r6, #0
 800680e:	4630      	mov	r0, r6
 8006810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006814:	4e2e      	ldr	r6, [pc, #184]	; (80068d0 <_malloc_r+0xe4>)
 8006816:	f001 fe0d 	bl	8008434 <__malloc_lock>
 800681a:	6833      	ldr	r3, [r6, #0]
 800681c:	461c      	mov	r4, r3
 800681e:	bb34      	cbnz	r4, 800686e <_malloc_r+0x82>
 8006820:	4629      	mov	r1, r5
 8006822:	4638      	mov	r0, r7
 8006824:	f7ff ffc2 	bl	80067ac <sbrk_aligned>
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	4604      	mov	r4, r0
 800682c:	d14d      	bne.n	80068ca <_malloc_r+0xde>
 800682e:	6834      	ldr	r4, [r6, #0]
 8006830:	4626      	mov	r6, r4
 8006832:	2e00      	cmp	r6, #0
 8006834:	d140      	bne.n	80068b8 <_malloc_r+0xcc>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	4631      	mov	r1, r6
 800683a:	4638      	mov	r0, r7
 800683c:	eb04 0803 	add.w	r8, r4, r3
 8006840:	f000 fcb2 	bl	80071a8 <_sbrk_r>
 8006844:	4580      	cmp	r8, r0
 8006846:	d13a      	bne.n	80068be <_malloc_r+0xd2>
 8006848:	6821      	ldr	r1, [r4, #0]
 800684a:	3503      	adds	r5, #3
 800684c:	1a6d      	subs	r5, r5, r1
 800684e:	f025 0503 	bic.w	r5, r5, #3
 8006852:	3508      	adds	r5, #8
 8006854:	2d0c      	cmp	r5, #12
 8006856:	bf38      	it	cc
 8006858:	250c      	movcc	r5, #12
 800685a:	4629      	mov	r1, r5
 800685c:	4638      	mov	r0, r7
 800685e:	f7ff ffa5 	bl	80067ac <sbrk_aligned>
 8006862:	3001      	adds	r0, #1
 8006864:	d02b      	beq.n	80068be <_malloc_r+0xd2>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	442b      	add	r3, r5
 800686a:	6023      	str	r3, [r4, #0]
 800686c:	e00e      	b.n	800688c <_malloc_r+0xa0>
 800686e:	6822      	ldr	r2, [r4, #0]
 8006870:	1b52      	subs	r2, r2, r5
 8006872:	d41e      	bmi.n	80068b2 <_malloc_r+0xc6>
 8006874:	2a0b      	cmp	r2, #11
 8006876:	d916      	bls.n	80068a6 <_malloc_r+0xba>
 8006878:	1961      	adds	r1, r4, r5
 800687a:	42a3      	cmp	r3, r4
 800687c:	6025      	str	r5, [r4, #0]
 800687e:	bf18      	it	ne
 8006880:	6059      	strne	r1, [r3, #4]
 8006882:	6863      	ldr	r3, [r4, #4]
 8006884:	bf08      	it	eq
 8006886:	6031      	streq	r1, [r6, #0]
 8006888:	5162      	str	r2, [r4, r5]
 800688a:	604b      	str	r3, [r1, #4]
 800688c:	4638      	mov	r0, r7
 800688e:	f104 060b 	add.w	r6, r4, #11
 8006892:	f001 fdd5 	bl	8008440 <__malloc_unlock>
 8006896:	f026 0607 	bic.w	r6, r6, #7
 800689a:	1d23      	adds	r3, r4, #4
 800689c:	1af2      	subs	r2, r6, r3
 800689e:	d0b6      	beq.n	800680e <_malloc_r+0x22>
 80068a0:	1b9b      	subs	r3, r3, r6
 80068a2:	50a3      	str	r3, [r4, r2]
 80068a4:	e7b3      	b.n	800680e <_malloc_r+0x22>
 80068a6:	6862      	ldr	r2, [r4, #4]
 80068a8:	42a3      	cmp	r3, r4
 80068aa:	bf0c      	ite	eq
 80068ac:	6032      	streq	r2, [r6, #0]
 80068ae:	605a      	strne	r2, [r3, #4]
 80068b0:	e7ec      	b.n	800688c <_malloc_r+0xa0>
 80068b2:	4623      	mov	r3, r4
 80068b4:	6864      	ldr	r4, [r4, #4]
 80068b6:	e7b2      	b.n	800681e <_malloc_r+0x32>
 80068b8:	4634      	mov	r4, r6
 80068ba:	6876      	ldr	r6, [r6, #4]
 80068bc:	e7b9      	b.n	8006832 <_malloc_r+0x46>
 80068be:	230c      	movs	r3, #12
 80068c0:	603b      	str	r3, [r7, #0]
 80068c2:	4638      	mov	r0, r7
 80068c4:	f001 fdbc 	bl	8008440 <__malloc_unlock>
 80068c8:	e7a1      	b.n	800680e <_malloc_r+0x22>
 80068ca:	6025      	str	r5, [r4, #0]
 80068cc:	e7de      	b.n	800688c <_malloc_r+0xa0>
 80068ce:	bf00      	nop
 80068d0:	20000494 	.word	0x20000494

080068d4 <__cvt>:
 80068d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068d8:	ec55 4b10 	vmov	r4, r5, d0
 80068dc:	2d00      	cmp	r5, #0
 80068de:	460e      	mov	r6, r1
 80068e0:	4619      	mov	r1, r3
 80068e2:	462b      	mov	r3, r5
 80068e4:	bfbb      	ittet	lt
 80068e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80068ea:	461d      	movlt	r5, r3
 80068ec:	2300      	movge	r3, #0
 80068ee:	232d      	movlt	r3, #45	; 0x2d
 80068f0:	700b      	strb	r3, [r1, #0]
 80068f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80068f8:	4691      	mov	r9, r2
 80068fa:	f023 0820 	bic.w	r8, r3, #32
 80068fe:	bfbc      	itt	lt
 8006900:	4622      	movlt	r2, r4
 8006902:	4614      	movlt	r4, r2
 8006904:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006908:	d005      	beq.n	8006916 <__cvt+0x42>
 800690a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800690e:	d100      	bne.n	8006912 <__cvt+0x3e>
 8006910:	3601      	adds	r6, #1
 8006912:	2102      	movs	r1, #2
 8006914:	e000      	b.n	8006918 <__cvt+0x44>
 8006916:	2103      	movs	r1, #3
 8006918:	ab03      	add	r3, sp, #12
 800691a:	9301      	str	r3, [sp, #4]
 800691c:	ab02      	add	r3, sp, #8
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	ec45 4b10 	vmov	d0, r4, r5
 8006924:	4653      	mov	r3, sl
 8006926:	4632      	mov	r2, r6
 8006928:	f000 fe3e 	bl	80075a8 <_dtoa_r>
 800692c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006930:	4607      	mov	r7, r0
 8006932:	d102      	bne.n	800693a <__cvt+0x66>
 8006934:	f019 0f01 	tst.w	r9, #1
 8006938:	d022      	beq.n	8006980 <__cvt+0xac>
 800693a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800693e:	eb07 0906 	add.w	r9, r7, r6
 8006942:	d110      	bne.n	8006966 <__cvt+0x92>
 8006944:	783b      	ldrb	r3, [r7, #0]
 8006946:	2b30      	cmp	r3, #48	; 0x30
 8006948:	d10a      	bne.n	8006960 <__cvt+0x8c>
 800694a:	2200      	movs	r2, #0
 800694c:	2300      	movs	r3, #0
 800694e:	4620      	mov	r0, r4
 8006950:	4629      	mov	r1, r5
 8006952:	f7fa f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006956:	b918      	cbnz	r0, 8006960 <__cvt+0x8c>
 8006958:	f1c6 0601 	rsb	r6, r6, #1
 800695c:	f8ca 6000 	str.w	r6, [sl]
 8006960:	f8da 3000 	ldr.w	r3, [sl]
 8006964:	4499      	add	r9, r3
 8006966:	2200      	movs	r2, #0
 8006968:	2300      	movs	r3, #0
 800696a:	4620      	mov	r0, r4
 800696c:	4629      	mov	r1, r5
 800696e:	f7fa f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8006972:	b108      	cbz	r0, 8006978 <__cvt+0xa4>
 8006974:	f8cd 900c 	str.w	r9, [sp, #12]
 8006978:	2230      	movs	r2, #48	; 0x30
 800697a:	9b03      	ldr	r3, [sp, #12]
 800697c:	454b      	cmp	r3, r9
 800697e:	d307      	bcc.n	8006990 <__cvt+0xbc>
 8006980:	9b03      	ldr	r3, [sp, #12]
 8006982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006984:	1bdb      	subs	r3, r3, r7
 8006986:	4638      	mov	r0, r7
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	b004      	add	sp, #16
 800698c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006990:	1c59      	adds	r1, r3, #1
 8006992:	9103      	str	r1, [sp, #12]
 8006994:	701a      	strb	r2, [r3, #0]
 8006996:	e7f0      	b.n	800697a <__cvt+0xa6>

08006998 <__exponent>:
 8006998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800699a:	4603      	mov	r3, r0
 800699c:	2900      	cmp	r1, #0
 800699e:	bfb8      	it	lt
 80069a0:	4249      	neglt	r1, r1
 80069a2:	f803 2b02 	strb.w	r2, [r3], #2
 80069a6:	bfb4      	ite	lt
 80069a8:	222d      	movlt	r2, #45	; 0x2d
 80069aa:	222b      	movge	r2, #43	; 0x2b
 80069ac:	2909      	cmp	r1, #9
 80069ae:	7042      	strb	r2, [r0, #1]
 80069b0:	dd2a      	ble.n	8006a08 <__exponent+0x70>
 80069b2:	f10d 0407 	add.w	r4, sp, #7
 80069b6:	46a4      	mov	ip, r4
 80069b8:	270a      	movs	r7, #10
 80069ba:	46a6      	mov	lr, r4
 80069bc:	460a      	mov	r2, r1
 80069be:	fb91 f6f7 	sdiv	r6, r1, r7
 80069c2:	fb07 1516 	mls	r5, r7, r6, r1
 80069c6:	3530      	adds	r5, #48	; 0x30
 80069c8:	2a63      	cmp	r2, #99	; 0x63
 80069ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80069ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80069d2:	4631      	mov	r1, r6
 80069d4:	dcf1      	bgt.n	80069ba <__exponent+0x22>
 80069d6:	3130      	adds	r1, #48	; 0x30
 80069d8:	f1ae 0502 	sub.w	r5, lr, #2
 80069dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80069e0:	1c44      	adds	r4, r0, #1
 80069e2:	4629      	mov	r1, r5
 80069e4:	4561      	cmp	r1, ip
 80069e6:	d30a      	bcc.n	80069fe <__exponent+0x66>
 80069e8:	f10d 0209 	add.w	r2, sp, #9
 80069ec:	eba2 020e 	sub.w	r2, r2, lr
 80069f0:	4565      	cmp	r5, ip
 80069f2:	bf88      	it	hi
 80069f4:	2200      	movhi	r2, #0
 80069f6:	4413      	add	r3, r2
 80069f8:	1a18      	subs	r0, r3, r0
 80069fa:	b003      	add	sp, #12
 80069fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a06:	e7ed      	b.n	80069e4 <__exponent+0x4c>
 8006a08:	2330      	movs	r3, #48	; 0x30
 8006a0a:	3130      	adds	r1, #48	; 0x30
 8006a0c:	7083      	strb	r3, [r0, #2]
 8006a0e:	70c1      	strb	r1, [r0, #3]
 8006a10:	1d03      	adds	r3, r0, #4
 8006a12:	e7f1      	b.n	80069f8 <__exponent+0x60>

08006a14 <_printf_float>:
 8006a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a18:	ed2d 8b02 	vpush	{d8}
 8006a1c:	b08d      	sub	sp, #52	; 0x34
 8006a1e:	460c      	mov	r4, r1
 8006a20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a24:	4616      	mov	r6, r2
 8006a26:	461f      	mov	r7, r3
 8006a28:	4605      	mov	r5, r0
 8006a2a:	f001 fc7f 	bl	800832c <_localeconv_r>
 8006a2e:	f8d0 a000 	ldr.w	sl, [r0]
 8006a32:	4650      	mov	r0, sl
 8006a34:	f7f9 fbcc 	bl	80001d0 <strlen>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	9305      	str	r3, [sp, #20]
 8006a40:	f8d8 3000 	ldr.w	r3, [r8]
 8006a44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a48:	3307      	adds	r3, #7
 8006a4a:	f023 0307 	bic.w	r3, r3, #7
 8006a4e:	f103 0208 	add.w	r2, r3, #8
 8006a52:	f8c8 2000 	str.w	r2, [r8]
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006a62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a66:	9307      	str	r3, [sp, #28]
 8006a68:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a6c:	ee08 0a10 	vmov	s16, r0
 8006a70:	4b9f      	ldr	r3, [pc, #636]	; (8006cf0 <_printf_float+0x2dc>)
 8006a72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a76:	f04f 32ff 	mov.w	r2, #4294967295
 8006a7a:	f7fa f857 	bl	8000b2c <__aeabi_dcmpun>
 8006a7e:	bb88      	cbnz	r0, 8006ae4 <_printf_float+0xd0>
 8006a80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a84:	4b9a      	ldr	r3, [pc, #616]	; (8006cf0 <_printf_float+0x2dc>)
 8006a86:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8a:	f7fa f831 	bl	8000af0 <__aeabi_dcmple>
 8006a8e:	bb48      	cbnz	r0, 8006ae4 <_printf_float+0xd0>
 8006a90:	2200      	movs	r2, #0
 8006a92:	2300      	movs	r3, #0
 8006a94:	4640      	mov	r0, r8
 8006a96:	4649      	mov	r1, r9
 8006a98:	f7fa f820 	bl	8000adc <__aeabi_dcmplt>
 8006a9c:	b110      	cbz	r0, 8006aa4 <_printf_float+0x90>
 8006a9e:	232d      	movs	r3, #45	; 0x2d
 8006aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa4:	4b93      	ldr	r3, [pc, #588]	; (8006cf4 <_printf_float+0x2e0>)
 8006aa6:	4894      	ldr	r0, [pc, #592]	; (8006cf8 <_printf_float+0x2e4>)
 8006aa8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006aac:	bf94      	ite	ls
 8006aae:	4698      	movls	r8, r3
 8006ab0:	4680      	movhi	r8, r0
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	6123      	str	r3, [r4, #16]
 8006ab6:	9b05      	ldr	r3, [sp, #20]
 8006ab8:	f023 0204 	bic.w	r2, r3, #4
 8006abc:	6022      	str	r2, [r4, #0]
 8006abe:	f04f 0900 	mov.w	r9, #0
 8006ac2:	9700      	str	r7, [sp, #0]
 8006ac4:	4633      	mov	r3, r6
 8006ac6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ac8:	4621      	mov	r1, r4
 8006aca:	4628      	mov	r0, r5
 8006acc:	f000 f9d8 	bl	8006e80 <_printf_common>
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	f040 8090 	bne.w	8006bf6 <_printf_float+0x1e2>
 8006ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8006ada:	b00d      	add	sp, #52	; 0x34
 8006adc:	ecbd 8b02 	vpop	{d8}
 8006ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae4:	4642      	mov	r2, r8
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	4640      	mov	r0, r8
 8006aea:	4649      	mov	r1, r9
 8006aec:	f7fa f81e 	bl	8000b2c <__aeabi_dcmpun>
 8006af0:	b140      	cbz	r0, 8006b04 <_printf_float+0xf0>
 8006af2:	464b      	mov	r3, r9
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	bfbc      	itt	lt
 8006af8:	232d      	movlt	r3, #45	; 0x2d
 8006afa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006afe:	487f      	ldr	r0, [pc, #508]	; (8006cfc <_printf_float+0x2e8>)
 8006b00:	4b7f      	ldr	r3, [pc, #508]	; (8006d00 <_printf_float+0x2ec>)
 8006b02:	e7d1      	b.n	8006aa8 <_printf_float+0x94>
 8006b04:	6863      	ldr	r3, [r4, #4]
 8006b06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b0a:	9206      	str	r2, [sp, #24]
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	d13f      	bne.n	8006b90 <_printf_float+0x17c>
 8006b10:	2306      	movs	r3, #6
 8006b12:	6063      	str	r3, [r4, #4]
 8006b14:	9b05      	ldr	r3, [sp, #20]
 8006b16:	6861      	ldr	r1, [r4, #4]
 8006b18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	9303      	str	r3, [sp, #12]
 8006b20:	ab0a      	add	r3, sp, #40	; 0x28
 8006b22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006b26:	ab09      	add	r3, sp, #36	; 0x24
 8006b28:	ec49 8b10 	vmov	d0, r8, r9
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	6022      	str	r2, [r4, #0]
 8006b30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b34:	4628      	mov	r0, r5
 8006b36:	f7ff fecd 	bl	80068d4 <__cvt>
 8006b3a:	9b06      	ldr	r3, [sp, #24]
 8006b3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b3e:	2b47      	cmp	r3, #71	; 0x47
 8006b40:	4680      	mov	r8, r0
 8006b42:	d108      	bne.n	8006b56 <_printf_float+0x142>
 8006b44:	1cc8      	adds	r0, r1, #3
 8006b46:	db02      	blt.n	8006b4e <_printf_float+0x13a>
 8006b48:	6863      	ldr	r3, [r4, #4]
 8006b4a:	4299      	cmp	r1, r3
 8006b4c:	dd41      	ble.n	8006bd2 <_printf_float+0x1be>
 8006b4e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006b52:	fa5f fb8b 	uxtb.w	fp, fp
 8006b56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b5a:	d820      	bhi.n	8006b9e <_printf_float+0x18a>
 8006b5c:	3901      	subs	r1, #1
 8006b5e:	465a      	mov	r2, fp
 8006b60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b64:	9109      	str	r1, [sp, #36]	; 0x24
 8006b66:	f7ff ff17 	bl	8006998 <__exponent>
 8006b6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b6c:	1813      	adds	r3, r2, r0
 8006b6e:	2a01      	cmp	r2, #1
 8006b70:	4681      	mov	r9, r0
 8006b72:	6123      	str	r3, [r4, #16]
 8006b74:	dc02      	bgt.n	8006b7c <_printf_float+0x168>
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	07d2      	lsls	r2, r2, #31
 8006b7a:	d501      	bpl.n	8006b80 <_printf_float+0x16c>
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	6123      	str	r3, [r4, #16]
 8006b80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d09c      	beq.n	8006ac2 <_printf_float+0xae>
 8006b88:	232d      	movs	r3, #45	; 0x2d
 8006b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b8e:	e798      	b.n	8006ac2 <_printf_float+0xae>
 8006b90:	9a06      	ldr	r2, [sp, #24]
 8006b92:	2a47      	cmp	r2, #71	; 0x47
 8006b94:	d1be      	bne.n	8006b14 <_printf_float+0x100>
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1bc      	bne.n	8006b14 <_printf_float+0x100>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e7b9      	b.n	8006b12 <_printf_float+0xfe>
 8006b9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ba2:	d118      	bne.n	8006bd6 <_printf_float+0x1c2>
 8006ba4:	2900      	cmp	r1, #0
 8006ba6:	6863      	ldr	r3, [r4, #4]
 8006ba8:	dd0b      	ble.n	8006bc2 <_printf_float+0x1ae>
 8006baa:	6121      	str	r1, [r4, #16]
 8006bac:	b913      	cbnz	r3, 8006bb4 <_printf_float+0x1a0>
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	07d0      	lsls	r0, r2, #31
 8006bb2:	d502      	bpl.n	8006bba <_printf_float+0x1a6>
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	440b      	add	r3, r1
 8006bb8:	6123      	str	r3, [r4, #16]
 8006bba:	65a1      	str	r1, [r4, #88]	; 0x58
 8006bbc:	f04f 0900 	mov.w	r9, #0
 8006bc0:	e7de      	b.n	8006b80 <_printf_float+0x16c>
 8006bc2:	b913      	cbnz	r3, 8006bca <_printf_float+0x1b6>
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	07d2      	lsls	r2, r2, #31
 8006bc8:	d501      	bpl.n	8006bce <_printf_float+0x1ba>
 8006bca:	3302      	adds	r3, #2
 8006bcc:	e7f4      	b.n	8006bb8 <_printf_float+0x1a4>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e7f2      	b.n	8006bb8 <_printf_float+0x1a4>
 8006bd2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd8:	4299      	cmp	r1, r3
 8006bda:	db05      	blt.n	8006be8 <_printf_float+0x1d4>
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	6121      	str	r1, [r4, #16]
 8006be0:	07d8      	lsls	r0, r3, #31
 8006be2:	d5ea      	bpl.n	8006bba <_printf_float+0x1a6>
 8006be4:	1c4b      	adds	r3, r1, #1
 8006be6:	e7e7      	b.n	8006bb8 <_printf_float+0x1a4>
 8006be8:	2900      	cmp	r1, #0
 8006bea:	bfd4      	ite	le
 8006bec:	f1c1 0202 	rsble	r2, r1, #2
 8006bf0:	2201      	movgt	r2, #1
 8006bf2:	4413      	add	r3, r2
 8006bf4:	e7e0      	b.n	8006bb8 <_printf_float+0x1a4>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	055a      	lsls	r2, r3, #21
 8006bfa:	d407      	bmi.n	8006c0c <_printf_float+0x1f8>
 8006bfc:	6923      	ldr	r3, [r4, #16]
 8006bfe:	4642      	mov	r2, r8
 8006c00:	4631      	mov	r1, r6
 8006c02:	4628      	mov	r0, r5
 8006c04:	47b8      	blx	r7
 8006c06:	3001      	adds	r0, #1
 8006c08:	d12c      	bne.n	8006c64 <_printf_float+0x250>
 8006c0a:	e764      	b.n	8006ad6 <_printf_float+0xc2>
 8006c0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c10:	f240 80e0 	bls.w	8006dd4 <_printf_float+0x3c0>
 8006c14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f7f9 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d034      	beq.n	8006c8e <_printf_float+0x27a>
 8006c24:	4a37      	ldr	r2, [pc, #220]	; (8006d04 <_printf_float+0x2f0>)
 8006c26:	2301      	movs	r3, #1
 8006c28:	4631      	mov	r1, r6
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	47b8      	blx	r7
 8006c2e:	3001      	adds	r0, #1
 8006c30:	f43f af51 	beq.w	8006ad6 <_printf_float+0xc2>
 8006c34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	db02      	blt.n	8006c42 <_printf_float+0x22e>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	07d8      	lsls	r0, r3, #31
 8006c40:	d510      	bpl.n	8006c64 <_printf_float+0x250>
 8006c42:	ee18 3a10 	vmov	r3, s16
 8006c46:	4652      	mov	r2, sl
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	47b8      	blx	r7
 8006c4e:	3001      	adds	r0, #1
 8006c50:	f43f af41 	beq.w	8006ad6 <_printf_float+0xc2>
 8006c54:	f04f 0800 	mov.w	r8, #0
 8006c58:	f104 091a 	add.w	r9, r4, #26
 8006c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	4543      	cmp	r3, r8
 8006c62:	dc09      	bgt.n	8006c78 <_printf_float+0x264>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	079b      	lsls	r3, r3, #30
 8006c68:	f100 8105 	bmi.w	8006e76 <_printf_float+0x462>
 8006c6c:	68e0      	ldr	r0, [r4, #12]
 8006c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c70:	4298      	cmp	r0, r3
 8006c72:	bfb8      	it	lt
 8006c74:	4618      	movlt	r0, r3
 8006c76:	e730      	b.n	8006ada <_printf_float+0xc6>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	464a      	mov	r2, r9
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4628      	mov	r0, r5
 8006c80:	47b8      	blx	r7
 8006c82:	3001      	adds	r0, #1
 8006c84:	f43f af27 	beq.w	8006ad6 <_printf_float+0xc2>
 8006c88:	f108 0801 	add.w	r8, r8, #1
 8006c8c:	e7e6      	b.n	8006c5c <_printf_float+0x248>
 8006c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dc39      	bgt.n	8006d08 <_printf_float+0x2f4>
 8006c94:	4a1b      	ldr	r2, [pc, #108]	; (8006d04 <_printf_float+0x2f0>)
 8006c96:	2301      	movs	r3, #1
 8006c98:	4631      	mov	r1, r6
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	47b8      	blx	r7
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	f43f af19 	beq.w	8006ad6 <_printf_float+0xc2>
 8006ca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	d102      	bne.n	8006cb2 <_printf_float+0x29e>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	07d9      	lsls	r1, r3, #31
 8006cb0:	d5d8      	bpl.n	8006c64 <_printf_float+0x250>
 8006cb2:	ee18 3a10 	vmov	r3, s16
 8006cb6:	4652      	mov	r2, sl
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4628      	mov	r0, r5
 8006cbc:	47b8      	blx	r7
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	f43f af09 	beq.w	8006ad6 <_printf_float+0xc2>
 8006cc4:	f04f 0900 	mov.w	r9, #0
 8006cc8:	f104 0a1a 	add.w	sl, r4, #26
 8006ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cce:	425b      	negs	r3, r3
 8006cd0:	454b      	cmp	r3, r9
 8006cd2:	dc01      	bgt.n	8006cd8 <_printf_float+0x2c4>
 8006cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd6:	e792      	b.n	8006bfe <_printf_float+0x1ea>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4652      	mov	r2, sl
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4628      	mov	r0, r5
 8006ce0:	47b8      	blx	r7
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	f43f aef7 	beq.w	8006ad6 <_printf_float+0xc2>
 8006ce8:	f109 0901 	add.w	r9, r9, #1
 8006cec:	e7ee      	b.n	8006ccc <_printf_float+0x2b8>
 8006cee:	bf00      	nop
 8006cf0:	7fefffff 	.word	0x7fefffff
 8006cf4:	080098ec 	.word	0x080098ec
 8006cf8:	080098f0 	.word	0x080098f0
 8006cfc:	080098f8 	.word	0x080098f8
 8006d00:	080098f4 	.word	0x080098f4
 8006d04:	080098fc 	.word	0x080098fc
 8006d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	bfa8      	it	ge
 8006d10:	461a      	movge	r2, r3
 8006d12:	2a00      	cmp	r2, #0
 8006d14:	4691      	mov	r9, r2
 8006d16:	dc37      	bgt.n	8006d88 <_printf_float+0x374>
 8006d18:	f04f 0b00 	mov.w	fp, #0
 8006d1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d20:	f104 021a 	add.w	r2, r4, #26
 8006d24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d26:	9305      	str	r3, [sp, #20]
 8006d28:	eba3 0309 	sub.w	r3, r3, r9
 8006d2c:	455b      	cmp	r3, fp
 8006d2e:	dc33      	bgt.n	8006d98 <_printf_float+0x384>
 8006d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d34:	429a      	cmp	r2, r3
 8006d36:	db3b      	blt.n	8006db0 <_printf_float+0x39c>
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	07da      	lsls	r2, r3, #31
 8006d3c:	d438      	bmi.n	8006db0 <_printf_float+0x39c>
 8006d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d40:	9a05      	ldr	r2, [sp, #20]
 8006d42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d44:	1a9a      	subs	r2, r3, r2
 8006d46:	eba3 0901 	sub.w	r9, r3, r1
 8006d4a:	4591      	cmp	r9, r2
 8006d4c:	bfa8      	it	ge
 8006d4e:	4691      	movge	r9, r2
 8006d50:	f1b9 0f00 	cmp.w	r9, #0
 8006d54:	dc35      	bgt.n	8006dc2 <_printf_float+0x3ae>
 8006d56:	f04f 0800 	mov.w	r8, #0
 8006d5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d5e:	f104 0a1a 	add.w	sl, r4, #26
 8006d62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d66:	1a9b      	subs	r3, r3, r2
 8006d68:	eba3 0309 	sub.w	r3, r3, r9
 8006d6c:	4543      	cmp	r3, r8
 8006d6e:	f77f af79 	ble.w	8006c64 <_printf_float+0x250>
 8006d72:	2301      	movs	r3, #1
 8006d74:	4652      	mov	r2, sl
 8006d76:	4631      	mov	r1, r6
 8006d78:	4628      	mov	r0, r5
 8006d7a:	47b8      	blx	r7
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	f43f aeaa 	beq.w	8006ad6 <_printf_float+0xc2>
 8006d82:	f108 0801 	add.w	r8, r8, #1
 8006d86:	e7ec      	b.n	8006d62 <_printf_float+0x34e>
 8006d88:	4613      	mov	r3, r2
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	4642      	mov	r2, r8
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b8      	blx	r7
 8006d92:	3001      	adds	r0, #1
 8006d94:	d1c0      	bne.n	8006d18 <_printf_float+0x304>
 8006d96:	e69e      	b.n	8006ad6 <_printf_float+0xc2>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	9205      	str	r2, [sp, #20]
 8006da0:	47b8      	blx	r7
 8006da2:	3001      	adds	r0, #1
 8006da4:	f43f ae97 	beq.w	8006ad6 <_printf_float+0xc2>
 8006da8:	9a05      	ldr	r2, [sp, #20]
 8006daa:	f10b 0b01 	add.w	fp, fp, #1
 8006dae:	e7b9      	b.n	8006d24 <_printf_float+0x310>
 8006db0:	ee18 3a10 	vmov	r3, s16
 8006db4:	4652      	mov	r2, sl
 8006db6:	4631      	mov	r1, r6
 8006db8:	4628      	mov	r0, r5
 8006dba:	47b8      	blx	r7
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d1be      	bne.n	8006d3e <_printf_float+0x32a>
 8006dc0:	e689      	b.n	8006ad6 <_printf_float+0xc2>
 8006dc2:	9a05      	ldr	r2, [sp, #20]
 8006dc4:	464b      	mov	r3, r9
 8006dc6:	4442      	add	r2, r8
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b8      	blx	r7
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d1c1      	bne.n	8006d56 <_printf_float+0x342>
 8006dd2:	e680      	b.n	8006ad6 <_printf_float+0xc2>
 8006dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dd6:	2a01      	cmp	r2, #1
 8006dd8:	dc01      	bgt.n	8006dde <_printf_float+0x3ca>
 8006dda:	07db      	lsls	r3, r3, #31
 8006ddc:	d538      	bpl.n	8006e50 <_printf_float+0x43c>
 8006dde:	2301      	movs	r3, #1
 8006de0:	4642      	mov	r2, r8
 8006de2:	4631      	mov	r1, r6
 8006de4:	4628      	mov	r0, r5
 8006de6:	47b8      	blx	r7
 8006de8:	3001      	adds	r0, #1
 8006dea:	f43f ae74 	beq.w	8006ad6 <_printf_float+0xc2>
 8006dee:	ee18 3a10 	vmov	r3, s16
 8006df2:	4652      	mov	r2, sl
 8006df4:	4631      	mov	r1, r6
 8006df6:	4628      	mov	r0, r5
 8006df8:	47b8      	blx	r7
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	f43f ae6b 	beq.w	8006ad6 <_printf_float+0xc2>
 8006e00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e04:	2200      	movs	r2, #0
 8006e06:	2300      	movs	r3, #0
 8006e08:	f7f9 fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e0c:	b9d8      	cbnz	r0, 8006e46 <_printf_float+0x432>
 8006e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e10:	f108 0201 	add.w	r2, r8, #1
 8006e14:	3b01      	subs	r3, #1
 8006e16:	4631      	mov	r1, r6
 8006e18:	4628      	mov	r0, r5
 8006e1a:	47b8      	blx	r7
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d10e      	bne.n	8006e3e <_printf_float+0x42a>
 8006e20:	e659      	b.n	8006ad6 <_printf_float+0xc2>
 8006e22:	2301      	movs	r3, #1
 8006e24:	4652      	mov	r2, sl
 8006e26:	4631      	mov	r1, r6
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b8      	blx	r7
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	f43f ae52 	beq.w	8006ad6 <_printf_float+0xc2>
 8006e32:	f108 0801 	add.w	r8, r8, #1
 8006e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	4543      	cmp	r3, r8
 8006e3c:	dcf1      	bgt.n	8006e22 <_printf_float+0x40e>
 8006e3e:	464b      	mov	r3, r9
 8006e40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e44:	e6dc      	b.n	8006c00 <_printf_float+0x1ec>
 8006e46:	f04f 0800 	mov.w	r8, #0
 8006e4a:	f104 0a1a 	add.w	sl, r4, #26
 8006e4e:	e7f2      	b.n	8006e36 <_printf_float+0x422>
 8006e50:	2301      	movs	r3, #1
 8006e52:	4642      	mov	r2, r8
 8006e54:	e7df      	b.n	8006e16 <_printf_float+0x402>
 8006e56:	2301      	movs	r3, #1
 8006e58:	464a      	mov	r2, r9
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b8      	blx	r7
 8006e60:	3001      	adds	r0, #1
 8006e62:	f43f ae38 	beq.w	8006ad6 <_printf_float+0xc2>
 8006e66:	f108 0801 	add.w	r8, r8, #1
 8006e6a:	68e3      	ldr	r3, [r4, #12]
 8006e6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e6e:	1a5b      	subs	r3, r3, r1
 8006e70:	4543      	cmp	r3, r8
 8006e72:	dcf0      	bgt.n	8006e56 <_printf_float+0x442>
 8006e74:	e6fa      	b.n	8006c6c <_printf_float+0x258>
 8006e76:	f04f 0800 	mov.w	r8, #0
 8006e7a:	f104 0919 	add.w	r9, r4, #25
 8006e7e:	e7f4      	b.n	8006e6a <_printf_float+0x456>

08006e80 <_printf_common>:
 8006e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e84:	4616      	mov	r6, r2
 8006e86:	4699      	mov	r9, r3
 8006e88:	688a      	ldr	r2, [r1, #8]
 8006e8a:	690b      	ldr	r3, [r1, #16]
 8006e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e90:	4293      	cmp	r3, r2
 8006e92:	bfb8      	it	lt
 8006e94:	4613      	movlt	r3, r2
 8006e96:	6033      	str	r3, [r6, #0]
 8006e98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e9c:	4607      	mov	r7, r0
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	b10a      	cbz	r2, 8006ea6 <_printf_common+0x26>
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	6033      	str	r3, [r6, #0]
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	0699      	lsls	r1, r3, #26
 8006eaa:	bf42      	ittt	mi
 8006eac:	6833      	ldrmi	r3, [r6, #0]
 8006eae:	3302      	addmi	r3, #2
 8006eb0:	6033      	strmi	r3, [r6, #0]
 8006eb2:	6825      	ldr	r5, [r4, #0]
 8006eb4:	f015 0506 	ands.w	r5, r5, #6
 8006eb8:	d106      	bne.n	8006ec8 <_printf_common+0x48>
 8006eba:	f104 0a19 	add.w	sl, r4, #25
 8006ebe:	68e3      	ldr	r3, [r4, #12]
 8006ec0:	6832      	ldr	r2, [r6, #0]
 8006ec2:	1a9b      	subs	r3, r3, r2
 8006ec4:	42ab      	cmp	r3, r5
 8006ec6:	dc26      	bgt.n	8006f16 <_printf_common+0x96>
 8006ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ecc:	1e13      	subs	r3, r2, #0
 8006ece:	6822      	ldr	r2, [r4, #0]
 8006ed0:	bf18      	it	ne
 8006ed2:	2301      	movne	r3, #1
 8006ed4:	0692      	lsls	r2, r2, #26
 8006ed6:	d42b      	bmi.n	8006f30 <_printf_common+0xb0>
 8006ed8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006edc:	4649      	mov	r1, r9
 8006ede:	4638      	mov	r0, r7
 8006ee0:	47c0      	blx	r8
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	d01e      	beq.n	8006f24 <_printf_common+0xa4>
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	68e5      	ldr	r5, [r4, #12]
 8006eea:	6832      	ldr	r2, [r6, #0]
 8006eec:	f003 0306 	and.w	r3, r3, #6
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	bf08      	it	eq
 8006ef4:	1aad      	subeq	r5, r5, r2
 8006ef6:	68a3      	ldr	r3, [r4, #8]
 8006ef8:	6922      	ldr	r2, [r4, #16]
 8006efa:	bf0c      	ite	eq
 8006efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f00:	2500      	movne	r5, #0
 8006f02:	4293      	cmp	r3, r2
 8006f04:	bfc4      	itt	gt
 8006f06:	1a9b      	subgt	r3, r3, r2
 8006f08:	18ed      	addgt	r5, r5, r3
 8006f0a:	2600      	movs	r6, #0
 8006f0c:	341a      	adds	r4, #26
 8006f0e:	42b5      	cmp	r5, r6
 8006f10:	d11a      	bne.n	8006f48 <_printf_common+0xc8>
 8006f12:	2000      	movs	r0, #0
 8006f14:	e008      	b.n	8006f28 <_printf_common+0xa8>
 8006f16:	2301      	movs	r3, #1
 8006f18:	4652      	mov	r2, sl
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	47c0      	blx	r8
 8006f20:	3001      	adds	r0, #1
 8006f22:	d103      	bne.n	8006f2c <_printf_common+0xac>
 8006f24:	f04f 30ff 	mov.w	r0, #4294967295
 8006f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f2c:	3501      	adds	r5, #1
 8006f2e:	e7c6      	b.n	8006ebe <_printf_common+0x3e>
 8006f30:	18e1      	adds	r1, r4, r3
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	2030      	movs	r0, #48	; 0x30
 8006f36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f3a:	4422      	add	r2, r4
 8006f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f44:	3302      	adds	r3, #2
 8006f46:	e7c7      	b.n	8006ed8 <_printf_common+0x58>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	4638      	mov	r0, r7
 8006f50:	47c0      	blx	r8
 8006f52:	3001      	adds	r0, #1
 8006f54:	d0e6      	beq.n	8006f24 <_printf_common+0xa4>
 8006f56:	3601      	adds	r6, #1
 8006f58:	e7d9      	b.n	8006f0e <_printf_common+0x8e>
	...

08006f5c <_printf_i>:
 8006f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f60:	7e0f      	ldrb	r7, [r1, #24]
 8006f62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f64:	2f78      	cmp	r7, #120	; 0x78
 8006f66:	4691      	mov	r9, r2
 8006f68:	4680      	mov	r8, r0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	469a      	mov	sl, r3
 8006f6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f72:	d807      	bhi.n	8006f84 <_printf_i+0x28>
 8006f74:	2f62      	cmp	r7, #98	; 0x62
 8006f76:	d80a      	bhi.n	8006f8e <_printf_i+0x32>
 8006f78:	2f00      	cmp	r7, #0
 8006f7a:	f000 80d8 	beq.w	800712e <_printf_i+0x1d2>
 8006f7e:	2f58      	cmp	r7, #88	; 0x58
 8006f80:	f000 80a3 	beq.w	80070ca <_printf_i+0x16e>
 8006f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f8c:	e03a      	b.n	8007004 <_printf_i+0xa8>
 8006f8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f92:	2b15      	cmp	r3, #21
 8006f94:	d8f6      	bhi.n	8006f84 <_printf_i+0x28>
 8006f96:	a101      	add	r1, pc, #4	; (adr r1, 8006f9c <_printf_i+0x40>)
 8006f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f9c:	08006ff5 	.word	0x08006ff5
 8006fa0:	08007009 	.word	0x08007009
 8006fa4:	08006f85 	.word	0x08006f85
 8006fa8:	08006f85 	.word	0x08006f85
 8006fac:	08006f85 	.word	0x08006f85
 8006fb0:	08006f85 	.word	0x08006f85
 8006fb4:	08007009 	.word	0x08007009
 8006fb8:	08006f85 	.word	0x08006f85
 8006fbc:	08006f85 	.word	0x08006f85
 8006fc0:	08006f85 	.word	0x08006f85
 8006fc4:	08006f85 	.word	0x08006f85
 8006fc8:	08007115 	.word	0x08007115
 8006fcc:	08007039 	.word	0x08007039
 8006fd0:	080070f7 	.word	0x080070f7
 8006fd4:	08006f85 	.word	0x08006f85
 8006fd8:	08006f85 	.word	0x08006f85
 8006fdc:	08007137 	.word	0x08007137
 8006fe0:	08006f85 	.word	0x08006f85
 8006fe4:	08007039 	.word	0x08007039
 8006fe8:	08006f85 	.word	0x08006f85
 8006fec:	08006f85 	.word	0x08006f85
 8006ff0:	080070ff 	.word	0x080070ff
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	1d1a      	adds	r2, r3, #4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	602a      	str	r2, [r5, #0]
 8006ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007004:	2301      	movs	r3, #1
 8007006:	e0a3      	b.n	8007150 <_printf_i+0x1f4>
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	6829      	ldr	r1, [r5, #0]
 800700c:	0606      	lsls	r6, r0, #24
 800700e:	f101 0304 	add.w	r3, r1, #4
 8007012:	d50a      	bpl.n	800702a <_printf_i+0xce>
 8007014:	680e      	ldr	r6, [r1, #0]
 8007016:	602b      	str	r3, [r5, #0]
 8007018:	2e00      	cmp	r6, #0
 800701a:	da03      	bge.n	8007024 <_printf_i+0xc8>
 800701c:	232d      	movs	r3, #45	; 0x2d
 800701e:	4276      	negs	r6, r6
 8007020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007024:	485e      	ldr	r0, [pc, #376]	; (80071a0 <_printf_i+0x244>)
 8007026:	230a      	movs	r3, #10
 8007028:	e019      	b.n	800705e <_printf_i+0x102>
 800702a:	680e      	ldr	r6, [r1, #0]
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007032:	bf18      	it	ne
 8007034:	b236      	sxthne	r6, r6
 8007036:	e7ef      	b.n	8007018 <_printf_i+0xbc>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	6820      	ldr	r0, [r4, #0]
 800703c:	1d19      	adds	r1, r3, #4
 800703e:	6029      	str	r1, [r5, #0]
 8007040:	0601      	lsls	r1, r0, #24
 8007042:	d501      	bpl.n	8007048 <_printf_i+0xec>
 8007044:	681e      	ldr	r6, [r3, #0]
 8007046:	e002      	b.n	800704e <_printf_i+0xf2>
 8007048:	0646      	lsls	r6, r0, #25
 800704a:	d5fb      	bpl.n	8007044 <_printf_i+0xe8>
 800704c:	881e      	ldrh	r6, [r3, #0]
 800704e:	4854      	ldr	r0, [pc, #336]	; (80071a0 <_printf_i+0x244>)
 8007050:	2f6f      	cmp	r7, #111	; 0x6f
 8007052:	bf0c      	ite	eq
 8007054:	2308      	moveq	r3, #8
 8007056:	230a      	movne	r3, #10
 8007058:	2100      	movs	r1, #0
 800705a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800705e:	6865      	ldr	r5, [r4, #4]
 8007060:	60a5      	str	r5, [r4, #8]
 8007062:	2d00      	cmp	r5, #0
 8007064:	bfa2      	ittt	ge
 8007066:	6821      	ldrge	r1, [r4, #0]
 8007068:	f021 0104 	bicge.w	r1, r1, #4
 800706c:	6021      	strge	r1, [r4, #0]
 800706e:	b90e      	cbnz	r6, 8007074 <_printf_i+0x118>
 8007070:	2d00      	cmp	r5, #0
 8007072:	d04d      	beq.n	8007110 <_printf_i+0x1b4>
 8007074:	4615      	mov	r5, r2
 8007076:	fbb6 f1f3 	udiv	r1, r6, r3
 800707a:	fb03 6711 	mls	r7, r3, r1, r6
 800707e:	5dc7      	ldrb	r7, [r0, r7]
 8007080:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007084:	4637      	mov	r7, r6
 8007086:	42bb      	cmp	r3, r7
 8007088:	460e      	mov	r6, r1
 800708a:	d9f4      	bls.n	8007076 <_printf_i+0x11a>
 800708c:	2b08      	cmp	r3, #8
 800708e:	d10b      	bne.n	80070a8 <_printf_i+0x14c>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	07de      	lsls	r6, r3, #31
 8007094:	d508      	bpl.n	80070a8 <_printf_i+0x14c>
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	6861      	ldr	r1, [r4, #4]
 800709a:	4299      	cmp	r1, r3
 800709c:	bfde      	ittt	le
 800709e:	2330      	movle	r3, #48	; 0x30
 80070a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070a8:	1b52      	subs	r2, r2, r5
 80070aa:	6122      	str	r2, [r4, #16]
 80070ac:	f8cd a000 	str.w	sl, [sp]
 80070b0:	464b      	mov	r3, r9
 80070b2:	aa03      	add	r2, sp, #12
 80070b4:	4621      	mov	r1, r4
 80070b6:	4640      	mov	r0, r8
 80070b8:	f7ff fee2 	bl	8006e80 <_printf_common>
 80070bc:	3001      	adds	r0, #1
 80070be:	d14c      	bne.n	800715a <_printf_i+0x1fe>
 80070c0:	f04f 30ff 	mov.w	r0, #4294967295
 80070c4:	b004      	add	sp, #16
 80070c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ca:	4835      	ldr	r0, [pc, #212]	; (80071a0 <_printf_i+0x244>)
 80070cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070d0:	6829      	ldr	r1, [r5, #0]
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80070d8:	6029      	str	r1, [r5, #0]
 80070da:	061d      	lsls	r5, r3, #24
 80070dc:	d514      	bpl.n	8007108 <_printf_i+0x1ac>
 80070de:	07df      	lsls	r7, r3, #31
 80070e0:	bf44      	itt	mi
 80070e2:	f043 0320 	orrmi.w	r3, r3, #32
 80070e6:	6023      	strmi	r3, [r4, #0]
 80070e8:	b91e      	cbnz	r6, 80070f2 <_printf_i+0x196>
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	f023 0320 	bic.w	r3, r3, #32
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	2310      	movs	r3, #16
 80070f4:	e7b0      	b.n	8007058 <_printf_i+0xfc>
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	f043 0320 	orr.w	r3, r3, #32
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	2378      	movs	r3, #120	; 0x78
 8007100:	4828      	ldr	r0, [pc, #160]	; (80071a4 <_printf_i+0x248>)
 8007102:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007106:	e7e3      	b.n	80070d0 <_printf_i+0x174>
 8007108:	0659      	lsls	r1, r3, #25
 800710a:	bf48      	it	mi
 800710c:	b2b6      	uxthmi	r6, r6
 800710e:	e7e6      	b.n	80070de <_printf_i+0x182>
 8007110:	4615      	mov	r5, r2
 8007112:	e7bb      	b.n	800708c <_printf_i+0x130>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	6826      	ldr	r6, [r4, #0]
 8007118:	6961      	ldr	r1, [r4, #20]
 800711a:	1d18      	adds	r0, r3, #4
 800711c:	6028      	str	r0, [r5, #0]
 800711e:	0635      	lsls	r5, r6, #24
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	d501      	bpl.n	8007128 <_printf_i+0x1cc>
 8007124:	6019      	str	r1, [r3, #0]
 8007126:	e002      	b.n	800712e <_printf_i+0x1d2>
 8007128:	0670      	lsls	r0, r6, #25
 800712a:	d5fb      	bpl.n	8007124 <_printf_i+0x1c8>
 800712c:	8019      	strh	r1, [r3, #0]
 800712e:	2300      	movs	r3, #0
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	4615      	mov	r5, r2
 8007134:	e7ba      	b.n	80070ac <_printf_i+0x150>
 8007136:	682b      	ldr	r3, [r5, #0]
 8007138:	1d1a      	adds	r2, r3, #4
 800713a:	602a      	str	r2, [r5, #0]
 800713c:	681d      	ldr	r5, [r3, #0]
 800713e:	6862      	ldr	r2, [r4, #4]
 8007140:	2100      	movs	r1, #0
 8007142:	4628      	mov	r0, r5
 8007144:	f7f9 f84c 	bl	80001e0 <memchr>
 8007148:	b108      	cbz	r0, 800714e <_printf_i+0x1f2>
 800714a:	1b40      	subs	r0, r0, r5
 800714c:	6060      	str	r0, [r4, #4]
 800714e:	6863      	ldr	r3, [r4, #4]
 8007150:	6123      	str	r3, [r4, #16]
 8007152:	2300      	movs	r3, #0
 8007154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007158:	e7a8      	b.n	80070ac <_printf_i+0x150>
 800715a:	6923      	ldr	r3, [r4, #16]
 800715c:	462a      	mov	r2, r5
 800715e:	4649      	mov	r1, r9
 8007160:	4640      	mov	r0, r8
 8007162:	47d0      	blx	sl
 8007164:	3001      	adds	r0, #1
 8007166:	d0ab      	beq.n	80070c0 <_printf_i+0x164>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	079b      	lsls	r3, r3, #30
 800716c:	d413      	bmi.n	8007196 <_printf_i+0x23a>
 800716e:	68e0      	ldr	r0, [r4, #12]
 8007170:	9b03      	ldr	r3, [sp, #12]
 8007172:	4298      	cmp	r0, r3
 8007174:	bfb8      	it	lt
 8007176:	4618      	movlt	r0, r3
 8007178:	e7a4      	b.n	80070c4 <_printf_i+0x168>
 800717a:	2301      	movs	r3, #1
 800717c:	4632      	mov	r2, r6
 800717e:	4649      	mov	r1, r9
 8007180:	4640      	mov	r0, r8
 8007182:	47d0      	blx	sl
 8007184:	3001      	adds	r0, #1
 8007186:	d09b      	beq.n	80070c0 <_printf_i+0x164>
 8007188:	3501      	adds	r5, #1
 800718a:	68e3      	ldr	r3, [r4, #12]
 800718c:	9903      	ldr	r1, [sp, #12]
 800718e:	1a5b      	subs	r3, r3, r1
 8007190:	42ab      	cmp	r3, r5
 8007192:	dcf2      	bgt.n	800717a <_printf_i+0x21e>
 8007194:	e7eb      	b.n	800716e <_printf_i+0x212>
 8007196:	2500      	movs	r5, #0
 8007198:	f104 0619 	add.w	r6, r4, #25
 800719c:	e7f5      	b.n	800718a <_printf_i+0x22e>
 800719e:	bf00      	nop
 80071a0:	080098fe 	.word	0x080098fe
 80071a4:	0800990f 	.word	0x0800990f

080071a8 <_sbrk_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4d06      	ldr	r5, [pc, #24]	; (80071c4 <_sbrk_r+0x1c>)
 80071ac:	2300      	movs	r3, #0
 80071ae:	4604      	mov	r4, r0
 80071b0:	4608      	mov	r0, r1
 80071b2:	602b      	str	r3, [r5, #0]
 80071b4:	f7fa fa96 	bl	80016e4 <_sbrk>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d102      	bne.n	80071c2 <_sbrk_r+0x1a>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	b103      	cbz	r3, 80071c2 <_sbrk_r+0x1a>
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	2000049c 	.word	0x2000049c

080071c8 <siprintf>:
 80071c8:	b40e      	push	{r1, r2, r3}
 80071ca:	b500      	push	{lr}
 80071cc:	b09c      	sub	sp, #112	; 0x70
 80071ce:	ab1d      	add	r3, sp, #116	; 0x74
 80071d0:	9002      	str	r0, [sp, #8]
 80071d2:	9006      	str	r0, [sp, #24]
 80071d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071d8:	4809      	ldr	r0, [pc, #36]	; (8007200 <siprintf+0x38>)
 80071da:	9107      	str	r1, [sp, #28]
 80071dc:	9104      	str	r1, [sp, #16]
 80071de:	4909      	ldr	r1, [pc, #36]	; (8007204 <siprintf+0x3c>)
 80071e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80071e4:	9105      	str	r1, [sp, #20]
 80071e6:	6800      	ldr	r0, [r0, #0]
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	a902      	add	r1, sp, #8
 80071ec:	f001 fd70 	bl	8008cd0 <_svfiprintf_r>
 80071f0:	9b02      	ldr	r3, [sp, #8]
 80071f2:	2200      	movs	r2, #0
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	b01c      	add	sp, #112	; 0x70
 80071f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071fc:	b003      	add	sp, #12
 80071fe:	4770      	bx	lr
 8007200:	20000034 	.word	0x20000034
 8007204:	ffff0208 	.word	0xffff0208

08007208 <__sread>:
 8007208:	b510      	push	{r4, lr}
 800720a:	460c      	mov	r4, r1
 800720c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007210:	f001 ffb8 	bl	8009184 <_read_r>
 8007214:	2800      	cmp	r0, #0
 8007216:	bfab      	itete	ge
 8007218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800721a:	89a3      	ldrhlt	r3, [r4, #12]
 800721c:	181b      	addge	r3, r3, r0
 800721e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007222:	bfac      	ite	ge
 8007224:	6563      	strge	r3, [r4, #84]	; 0x54
 8007226:	81a3      	strhlt	r3, [r4, #12]
 8007228:	bd10      	pop	{r4, pc}

0800722a <__swrite>:
 800722a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722e:	461f      	mov	r7, r3
 8007230:	898b      	ldrh	r3, [r1, #12]
 8007232:	05db      	lsls	r3, r3, #23
 8007234:	4605      	mov	r5, r0
 8007236:	460c      	mov	r4, r1
 8007238:	4616      	mov	r6, r2
 800723a:	d505      	bpl.n	8007248 <__swrite+0x1e>
 800723c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007240:	2302      	movs	r3, #2
 8007242:	2200      	movs	r2, #0
 8007244:	f001 f876 	bl	8008334 <_lseek_r>
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800724e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007252:	81a3      	strh	r3, [r4, #12]
 8007254:	4632      	mov	r2, r6
 8007256:	463b      	mov	r3, r7
 8007258:	4628      	mov	r0, r5
 800725a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800725e:	f000 b869 	b.w	8007334 <_write_r>

08007262 <__sseek>:
 8007262:	b510      	push	{r4, lr}
 8007264:	460c      	mov	r4, r1
 8007266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726a:	f001 f863 	bl	8008334 <_lseek_r>
 800726e:	1c43      	adds	r3, r0, #1
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	bf15      	itete	ne
 8007274:	6560      	strne	r0, [r4, #84]	; 0x54
 8007276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800727a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800727e:	81a3      	strheq	r3, [r4, #12]
 8007280:	bf18      	it	ne
 8007282:	81a3      	strhne	r3, [r4, #12]
 8007284:	bd10      	pop	{r4, pc}

08007286 <__sclose>:
 8007286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728a:	f000 b8f1 	b.w	8007470 <_close_r>
	...

08007290 <__swbuf_r>:
 8007290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007292:	460e      	mov	r6, r1
 8007294:	4614      	mov	r4, r2
 8007296:	4605      	mov	r5, r0
 8007298:	b118      	cbz	r0, 80072a2 <__swbuf_r+0x12>
 800729a:	6983      	ldr	r3, [r0, #24]
 800729c:	b90b      	cbnz	r3, 80072a2 <__swbuf_r+0x12>
 800729e:	f7ff f9a9 	bl	80065f4 <__sinit>
 80072a2:	4b21      	ldr	r3, [pc, #132]	; (8007328 <__swbuf_r+0x98>)
 80072a4:	429c      	cmp	r4, r3
 80072a6:	d12b      	bne.n	8007300 <__swbuf_r+0x70>
 80072a8:	686c      	ldr	r4, [r5, #4]
 80072aa:	69a3      	ldr	r3, [r4, #24]
 80072ac:	60a3      	str	r3, [r4, #8]
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	071a      	lsls	r2, r3, #28
 80072b2:	d52f      	bpl.n	8007314 <__swbuf_r+0x84>
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	b36b      	cbz	r3, 8007314 <__swbuf_r+0x84>
 80072b8:	6923      	ldr	r3, [r4, #16]
 80072ba:	6820      	ldr	r0, [r4, #0]
 80072bc:	1ac0      	subs	r0, r0, r3
 80072be:	6963      	ldr	r3, [r4, #20]
 80072c0:	b2f6      	uxtb	r6, r6
 80072c2:	4283      	cmp	r3, r0
 80072c4:	4637      	mov	r7, r6
 80072c6:	dc04      	bgt.n	80072d2 <__swbuf_r+0x42>
 80072c8:	4621      	mov	r1, r4
 80072ca:	4628      	mov	r0, r5
 80072cc:	f000 ffe0 	bl	8008290 <_fflush_r>
 80072d0:	bb30      	cbnz	r0, 8007320 <__swbuf_r+0x90>
 80072d2:	68a3      	ldr	r3, [r4, #8]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	60a3      	str	r3, [r4, #8]
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	6022      	str	r2, [r4, #0]
 80072de:	701e      	strb	r6, [r3, #0]
 80072e0:	6963      	ldr	r3, [r4, #20]
 80072e2:	3001      	adds	r0, #1
 80072e4:	4283      	cmp	r3, r0
 80072e6:	d004      	beq.n	80072f2 <__swbuf_r+0x62>
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	07db      	lsls	r3, r3, #31
 80072ec:	d506      	bpl.n	80072fc <__swbuf_r+0x6c>
 80072ee:	2e0a      	cmp	r6, #10
 80072f0:	d104      	bne.n	80072fc <__swbuf_r+0x6c>
 80072f2:	4621      	mov	r1, r4
 80072f4:	4628      	mov	r0, r5
 80072f6:	f000 ffcb 	bl	8008290 <_fflush_r>
 80072fa:	b988      	cbnz	r0, 8007320 <__swbuf_r+0x90>
 80072fc:	4638      	mov	r0, r7
 80072fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007300:	4b0a      	ldr	r3, [pc, #40]	; (800732c <__swbuf_r+0x9c>)
 8007302:	429c      	cmp	r4, r3
 8007304:	d101      	bne.n	800730a <__swbuf_r+0x7a>
 8007306:	68ac      	ldr	r4, [r5, #8]
 8007308:	e7cf      	b.n	80072aa <__swbuf_r+0x1a>
 800730a:	4b09      	ldr	r3, [pc, #36]	; (8007330 <__swbuf_r+0xa0>)
 800730c:	429c      	cmp	r4, r3
 800730e:	bf08      	it	eq
 8007310:	68ec      	ldreq	r4, [r5, #12]
 8007312:	e7ca      	b.n	80072aa <__swbuf_r+0x1a>
 8007314:	4621      	mov	r1, r4
 8007316:	4628      	mov	r0, r5
 8007318:	f000 f81e 	bl	8007358 <__swsetup_r>
 800731c:	2800      	cmp	r0, #0
 800731e:	d0cb      	beq.n	80072b8 <__swbuf_r+0x28>
 8007320:	f04f 37ff 	mov.w	r7, #4294967295
 8007324:	e7ea      	b.n	80072fc <__swbuf_r+0x6c>
 8007326:	bf00      	nop
 8007328:	080098a8 	.word	0x080098a8
 800732c:	080098c8 	.word	0x080098c8
 8007330:	08009888 	.word	0x08009888

08007334 <_write_r>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	4d07      	ldr	r5, [pc, #28]	; (8007354 <_write_r+0x20>)
 8007338:	4604      	mov	r4, r0
 800733a:	4608      	mov	r0, r1
 800733c:	4611      	mov	r1, r2
 800733e:	2200      	movs	r2, #0
 8007340:	602a      	str	r2, [r5, #0]
 8007342:	461a      	mov	r2, r3
 8007344:	f7ff f853 	bl	80063ee <_write>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d102      	bne.n	8007352 <_write_r+0x1e>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	b103      	cbz	r3, 8007352 <_write_r+0x1e>
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	2000049c 	.word	0x2000049c

08007358 <__swsetup_r>:
 8007358:	4b32      	ldr	r3, [pc, #200]	; (8007424 <__swsetup_r+0xcc>)
 800735a:	b570      	push	{r4, r5, r6, lr}
 800735c:	681d      	ldr	r5, [r3, #0]
 800735e:	4606      	mov	r6, r0
 8007360:	460c      	mov	r4, r1
 8007362:	b125      	cbz	r5, 800736e <__swsetup_r+0x16>
 8007364:	69ab      	ldr	r3, [r5, #24]
 8007366:	b913      	cbnz	r3, 800736e <__swsetup_r+0x16>
 8007368:	4628      	mov	r0, r5
 800736a:	f7ff f943 	bl	80065f4 <__sinit>
 800736e:	4b2e      	ldr	r3, [pc, #184]	; (8007428 <__swsetup_r+0xd0>)
 8007370:	429c      	cmp	r4, r3
 8007372:	d10f      	bne.n	8007394 <__swsetup_r+0x3c>
 8007374:	686c      	ldr	r4, [r5, #4]
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800737c:	0719      	lsls	r1, r3, #28
 800737e:	d42c      	bmi.n	80073da <__swsetup_r+0x82>
 8007380:	06dd      	lsls	r5, r3, #27
 8007382:	d411      	bmi.n	80073a8 <__swsetup_r+0x50>
 8007384:	2309      	movs	r3, #9
 8007386:	6033      	str	r3, [r6, #0]
 8007388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800738c:	81a3      	strh	r3, [r4, #12]
 800738e:	f04f 30ff 	mov.w	r0, #4294967295
 8007392:	e03e      	b.n	8007412 <__swsetup_r+0xba>
 8007394:	4b25      	ldr	r3, [pc, #148]	; (800742c <__swsetup_r+0xd4>)
 8007396:	429c      	cmp	r4, r3
 8007398:	d101      	bne.n	800739e <__swsetup_r+0x46>
 800739a:	68ac      	ldr	r4, [r5, #8]
 800739c:	e7eb      	b.n	8007376 <__swsetup_r+0x1e>
 800739e:	4b24      	ldr	r3, [pc, #144]	; (8007430 <__swsetup_r+0xd8>)
 80073a0:	429c      	cmp	r4, r3
 80073a2:	bf08      	it	eq
 80073a4:	68ec      	ldreq	r4, [r5, #12]
 80073a6:	e7e6      	b.n	8007376 <__swsetup_r+0x1e>
 80073a8:	0758      	lsls	r0, r3, #29
 80073aa:	d512      	bpl.n	80073d2 <__swsetup_r+0x7a>
 80073ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ae:	b141      	cbz	r1, 80073c2 <__swsetup_r+0x6a>
 80073b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073b4:	4299      	cmp	r1, r3
 80073b6:	d002      	beq.n	80073be <__swsetup_r+0x66>
 80073b8:	4630      	mov	r0, r6
 80073ba:	f001 fbe1 	bl	8008b80 <_free_r>
 80073be:	2300      	movs	r3, #0
 80073c0:	6363      	str	r3, [r4, #52]	; 0x34
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073c8:	81a3      	strh	r3, [r4, #12]
 80073ca:	2300      	movs	r3, #0
 80073cc:	6063      	str	r3, [r4, #4]
 80073ce:	6923      	ldr	r3, [r4, #16]
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	f043 0308 	orr.w	r3, r3, #8
 80073d8:	81a3      	strh	r3, [r4, #12]
 80073da:	6923      	ldr	r3, [r4, #16]
 80073dc:	b94b      	cbnz	r3, 80073f2 <__swsetup_r+0x9a>
 80073de:	89a3      	ldrh	r3, [r4, #12]
 80073e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e8:	d003      	beq.n	80073f2 <__swsetup_r+0x9a>
 80073ea:	4621      	mov	r1, r4
 80073ec:	4630      	mov	r0, r6
 80073ee:	f000 ffd9 	bl	80083a4 <__smakebuf_r>
 80073f2:	89a0      	ldrh	r0, [r4, #12]
 80073f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f8:	f010 0301 	ands.w	r3, r0, #1
 80073fc:	d00a      	beq.n	8007414 <__swsetup_r+0xbc>
 80073fe:	2300      	movs	r3, #0
 8007400:	60a3      	str	r3, [r4, #8]
 8007402:	6963      	ldr	r3, [r4, #20]
 8007404:	425b      	negs	r3, r3
 8007406:	61a3      	str	r3, [r4, #24]
 8007408:	6923      	ldr	r3, [r4, #16]
 800740a:	b943      	cbnz	r3, 800741e <__swsetup_r+0xc6>
 800740c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007410:	d1ba      	bne.n	8007388 <__swsetup_r+0x30>
 8007412:	bd70      	pop	{r4, r5, r6, pc}
 8007414:	0781      	lsls	r1, r0, #30
 8007416:	bf58      	it	pl
 8007418:	6963      	ldrpl	r3, [r4, #20]
 800741a:	60a3      	str	r3, [r4, #8]
 800741c:	e7f4      	b.n	8007408 <__swsetup_r+0xb0>
 800741e:	2000      	movs	r0, #0
 8007420:	e7f7      	b.n	8007412 <__swsetup_r+0xba>
 8007422:	bf00      	nop
 8007424:	20000034 	.word	0x20000034
 8007428:	080098a8 	.word	0x080098a8
 800742c:	080098c8 	.word	0x080098c8
 8007430:	08009888 	.word	0x08009888

08007434 <__assert_func>:
 8007434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007436:	4614      	mov	r4, r2
 8007438:	461a      	mov	r2, r3
 800743a:	4b09      	ldr	r3, [pc, #36]	; (8007460 <__assert_func+0x2c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4605      	mov	r5, r0
 8007440:	68d8      	ldr	r0, [r3, #12]
 8007442:	b14c      	cbz	r4, 8007458 <__assert_func+0x24>
 8007444:	4b07      	ldr	r3, [pc, #28]	; (8007464 <__assert_func+0x30>)
 8007446:	9100      	str	r1, [sp, #0]
 8007448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800744c:	4906      	ldr	r1, [pc, #24]	; (8007468 <__assert_func+0x34>)
 800744e:	462b      	mov	r3, r5
 8007450:	f000 ff5a 	bl	8008308 <fiprintf>
 8007454:	f001 fea8 	bl	80091a8 <abort>
 8007458:	4b04      	ldr	r3, [pc, #16]	; (800746c <__assert_func+0x38>)
 800745a:	461c      	mov	r4, r3
 800745c:	e7f3      	b.n	8007446 <__assert_func+0x12>
 800745e:	bf00      	nop
 8007460:	20000034 	.word	0x20000034
 8007464:	08009920 	.word	0x08009920
 8007468:	0800992d 	.word	0x0800992d
 800746c:	0800995b 	.word	0x0800995b

08007470 <_close_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4d06      	ldr	r5, [pc, #24]	; (800748c <_close_r+0x1c>)
 8007474:	2300      	movs	r3, #0
 8007476:	4604      	mov	r4, r0
 8007478:	4608      	mov	r0, r1
 800747a:	602b      	str	r3, [r5, #0]
 800747c:	f7fe ffe8 	bl	8006450 <_close>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_close_r+0x1a>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_close_r+0x1a>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	2000049c 	.word	0x2000049c

08007490 <quorem>:
 8007490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	6903      	ldr	r3, [r0, #16]
 8007496:	690c      	ldr	r4, [r1, #16]
 8007498:	42a3      	cmp	r3, r4
 800749a:	4607      	mov	r7, r0
 800749c:	f2c0 8081 	blt.w	80075a2 <quorem+0x112>
 80074a0:	3c01      	subs	r4, #1
 80074a2:	f101 0814 	add.w	r8, r1, #20
 80074a6:	f100 0514 	add.w	r5, r0, #20
 80074aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074b8:	3301      	adds	r3, #1
 80074ba:	429a      	cmp	r2, r3
 80074bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80074c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80074c8:	d331      	bcc.n	800752e <quorem+0x9e>
 80074ca:	f04f 0e00 	mov.w	lr, #0
 80074ce:	4640      	mov	r0, r8
 80074d0:	46ac      	mov	ip, r5
 80074d2:	46f2      	mov	sl, lr
 80074d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80074d8:	b293      	uxth	r3, r2
 80074da:	fb06 e303 	mla	r3, r6, r3, lr
 80074de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	ebaa 0303 	sub.w	r3, sl, r3
 80074e8:	f8dc a000 	ldr.w	sl, [ip]
 80074ec:	0c12      	lsrs	r2, r2, #16
 80074ee:	fa13 f38a 	uxtah	r3, r3, sl
 80074f2:	fb06 e202 	mla	r2, r6, r2, lr
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	9b00      	ldr	r3, [sp, #0]
 80074fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80074fe:	b292      	uxth	r2, r2
 8007500:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007508:	f8bd 3000 	ldrh.w	r3, [sp]
 800750c:	4581      	cmp	r9, r0
 800750e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007512:	f84c 3b04 	str.w	r3, [ip], #4
 8007516:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800751a:	d2db      	bcs.n	80074d4 <quorem+0x44>
 800751c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007520:	b92b      	cbnz	r3, 800752e <quorem+0x9e>
 8007522:	9b01      	ldr	r3, [sp, #4]
 8007524:	3b04      	subs	r3, #4
 8007526:	429d      	cmp	r5, r3
 8007528:	461a      	mov	r2, r3
 800752a:	d32e      	bcc.n	800758a <quorem+0xfa>
 800752c:	613c      	str	r4, [r7, #16]
 800752e:	4638      	mov	r0, r7
 8007530:	f001 fa0e 	bl	8008950 <__mcmp>
 8007534:	2800      	cmp	r0, #0
 8007536:	db24      	blt.n	8007582 <quorem+0xf2>
 8007538:	3601      	adds	r6, #1
 800753a:	4628      	mov	r0, r5
 800753c:	f04f 0c00 	mov.w	ip, #0
 8007540:	f858 2b04 	ldr.w	r2, [r8], #4
 8007544:	f8d0 e000 	ldr.w	lr, [r0]
 8007548:	b293      	uxth	r3, r2
 800754a:	ebac 0303 	sub.w	r3, ip, r3
 800754e:	0c12      	lsrs	r2, r2, #16
 8007550:	fa13 f38e 	uxtah	r3, r3, lr
 8007554:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007558:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800755c:	b29b      	uxth	r3, r3
 800755e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007562:	45c1      	cmp	r9, r8
 8007564:	f840 3b04 	str.w	r3, [r0], #4
 8007568:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800756c:	d2e8      	bcs.n	8007540 <quorem+0xb0>
 800756e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007576:	b922      	cbnz	r2, 8007582 <quorem+0xf2>
 8007578:	3b04      	subs	r3, #4
 800757a:	429d      	cmp	r5, r3
 800757c:	461a      	mov	r2, r3
 800757e:	d30a      	bcc.n	8007596 <quorem+0x106>
 8007580:	613c      	str	r4, [r7, #16]
 8007582:	4630      	mov	r0, r6
 8007584:	b003      	add	sp, #12
 8007586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	3b04      	subs	r3, #4
 800758e:	2a00      	cmp	r2, #0
 8007590:	d1cc      	bne.n	800752c <quorem+0x9c>
 8007592:	3c01      	subs	r4, #1
 8007594:	e7c7      	b.n	8007526 <quorem+0x96>
 8007596:	6812      	ldr	r2, [r2, #0]
 8007598:	3b04      	subs	r3, #4
 800759a:	2a00      	cmp	r2, #0
 800759c:	d1f0      	bne.n	8007580 <quorem+0xf0>
 800759e:	3c01      	subs	r4, #1
 80075a0:	e7eb      	b.n	800757a <quorem+0xea>
 80075a2:	2000      	movs	r0, #0
 80075a4:	e7ee      	b.n	8007584 <quorem+0xf4>
	...

080075a8 <_dtoa_r>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	ed2d 8b04 	vpush	{d8-d9}
 80075b0:	ec57 6b10 	vmov	r6, r7, d0
 80075b4:	b093      	sub	sp, #76	; 0x4c
 80075b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80075bc:	9106      	str	r1, [sp, #24]
 80075be:	ee10 aa10 	vmov	sl, s0
 80075c2:	4604      	mov	r4, r0
 80075c4:	9209      	str	r2, [sp, #36]	; 0x24
 80075c6:	930c      	str	r3, [sp, #48]	; 0x30
 80075c8:	46bb      	mov	fp, r7
 80075ca:	b975      	cbnz	r5, 80075ea <_dtoa_r+0x42>
 80075cc:	2010      	movs	r0, #16
 80075ce:	f000 ff29 	bl	8008424 <malloc>
 80075d2:	4602      	mov	r2, r0
 80075d4:	6260      	str	r0, [r4, #36]	; 0x24
 80075d6:	b920      	cbnz	r0, 80075e2 <_dtoa_r+0x3a>
 80075d8:	4ba7      	ldr	r3, [pc, #668]	; (8007878 <_dtoa_r+0x2d0>)
 80075da:	21ea      	movs	r1, #234	; 0xea
 80075dc:	48a7      	ldr	r0, [pc, #668]	; (800787c <_dtoa_r+0x2d4>)
 80075de:	f7ff ff29 	bl	8007434 <__assert_func>
 80075e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075e6:	6005      	str	r5, [r0, #0]
 80075e8:	60c5      	str	r5, [r0, #12]
 80075ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ec:	6819      	ldr	r1, [r3, #0]
 80075ee:	b151      	cbz	r1, 8007606 <_dtoa_r+0x5e>
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	604a      	str	r2, [r1, #4]
 80075f4:	2301      	movs	r3, #1
 80075f6:	4093      	lsls	r3, r2
 80075f8:	608b      	str	r3, [r1, #8]
 80075fa:	4620      	mov	r0, r4
 80075fc:	f000 ff66 	bl	80084cc <_Bfree>
 8007600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	1e3b      	subs	r3, r7, #0
 8007608:	bfaa      	itet	ge
 800760a:	2300      	movge	r3, #0
 800760c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007610:	f8c8 3000 	strge.w	r3, [r8]
 8007614:	4b9a      	ldr	r3, [pc, #616]	; (8007880 <_dtoa_r+0x2d8>)
 8007616:	bfbc      	itt	lt
 8007618:	2201      	movlt	r2, #1
 800761a:	f8c8 2000 	strlt.w	r2, [r8]
 800761e:	ea33 030b 	bics.w	r3, r3, fp
 8007622:	d11b      	bne.n	800765c <_dtoa_r+0xb4>
 8007624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007626:	f242 730f 	movw	r3, #9999	; 0x270f
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007630:	4333      	orrs	r3, r6
 8007632:	f000 8592 	beq.w	800815a <_dtoa_r+0xbb2>
 8007636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007638:	b963      	cbnz	r3, 8007654 <_dtoa_r+0xac>
 800763a:	4b92      	ldr	r3, [pc, #584]	; (8007884 <_dtoa_r+0x2dc>)
 800763c:	e022      	b.n	8007684 <_dtoa_r+0xdc>
 800763e:	4b92      	ldr	r3, [pc, #584]	; (8007888 <_dtoa_r+0x2e0>)
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	3308      	adds	r3, #8
 8007644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	9801      	ldr	r0, [sp, #4]
 800764a:	b013      	add	sp, #76	; 0x4c
 800764c:	ecbd 8b04 	vpop	{d8-d9}
 8007650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007654:	4b8b      	ldr	r3, [pc, #556]	; (8007884 <_dtoa_r+0x2dc>)
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	3303      	adds	r3, #3
 800765a:	e7f3      	b.n	8007644 <_dtoa_r+0x9c>
 800765c:	2200      	movs	r2, #0
 800765e:	2300      	movs	r3, #0
 8007660:	4650      	mov	r0, sl
 8007662:	4659      	mov	r1, fp
 8007664:	f7f9 fa30 	bl	8000ac8 <__aeabi_dcmpeq>
 8007668:	ec4b ab19 	vmov	d9, sl, fp
 800766c:	4680      	mov	r8, r0
 800766e:	b158      	cbz	r0, 8007688 <_dtoa_r+0xe0>
 8007670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007672:	2301      	movs	r3, #1
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 856b 	beq.w	8008154 <_dtoa_r+0xbac>
 800767e:	4883      	ldr	r0, [pc, #524]	; (800788c <_dtoa_r+0x2e4>)
 8007680:	6018      	str	r0, [r3, #0]
 8007682:	1e43      	subs	r3, r0, #1
 8007684:	9301      	str	r3, [sp, #4]
 8007686:	e7df      	b.n	8007648 <_dtoa_r+0xa0>
 8007688:	ec4b ab10 	vmov	d0, sl, fp
 800768c:	aa10      	add	r2, sp, #64	; 0x40
 800768e:	a911      	add	r1, sp, #68	; 0x44
 8007690:	4620      	mov	r0, r4
 8007692:	f001 fa03 	bl	8008a9c <__d2b>
 8007696:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800769a:	ee08 0a10 	vmov	s16, r0
 800769e:	2d00      	cmp	r5, #0
 80076a0:	f000 8084 	beq.w	80077ac <_dtoa_r+0x204>
 80076a4:	ee19 3a90 	vmov	r3, s19
 80076a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80076b0:	4656      	mov	r6, sl
 80076b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80076b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80076ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80076be:	4b74      	ldr	r3, [pc, #464]	; (8007890 <_dtoa_r+0x2e8>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	4630      	mov	r0, r6
 80076c4:	4639      	mov	r1, r7
 80076c6:	f7f8 fddf 	bl	8000288 <__aeabi_dsub>
 80076ca:	a365      	add	r3, pc, #404	; (adr r3, 8007860 <_dtoa_r+0x2b8>)
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	f7f8 ff92 	bl	80005f8 <__aeabi_dmul>
 80076d4:	a364      	add	r3, pc, #400	; (adr r3, 8007868 <_dtoa_r+0x2c0>)
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f7f8 fdd7 	bl	800028c <__adddf3>
 80076de:	4606      	mov	r6, r0
 80076e0:	4628      	mov	r0, r5
 80076e2:	460f      	mov	r7, r1
 80076e4:	f7f8 ff1e 	bl	8000524 <__aeabi_i2d>
 80076e8:	a361      	add	r3, pc, #388	; (adr r3, 8007870 <_dtoa_r+0x2c8>)
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	f7f8 ff83 	bl	80005f8 <__aeabi_dmul>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4630      	mov	r0, r6
 80076f8:	4639      	mov	r1, r7
 80076fa:	f7f8 fdc7 	bl	800028c <__adddf3>
 80076fe:	4606      	mov	r6, r0
 8007700:	460f      	mov	r7, r1
 8007702:	f7f9 fa29 	bl	8000b58 <__aeabi_d2iz>
 8007706:	2200      	movs	r2, #0
 8007708:	9000      	str	r0, [sp, #0]
 800770a:	2300      	movs	r3, #0
 800770c:	4630      	mov	r0, r6
 800770e:	4639      	mov	r1, r7
 8007710:	f7f9 f9e4 	bl	8000adc <__aeabi_dcmplt>
 8007714:	b150      	cbz	r0, 800772c <_dtoa_r+0x184>
 8007716:	9800      	ldr	r0, [sp, #0]
 8007718:	f7f8 ff04 	bl	8000524 <__aeabi_i2d>
 800771c:	4632      	mov	r2, r6
 800771e:	463b      	mov	r3, r7
 8007720:	f7f9 f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007724:	b910      	cbnz	r0, 800772c <_dtoa_r+0x184>
 8007726:	9b00      	ldr	r3, [sp, #0]
 8007728:	3b01      	subs	r3, #1
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	9b00      	ldr	r3, [sp, #0]
 800772e:	2b16      	cmp	r3, #22
 8007730:	d85a      	bhi.n	80077e8 <_dtoa_r+0x240>
 8007732:	9a00      	ldr	r2, [sp, #0]
 8007734:	4b57      	ldr	r3, [pc, #348]	; (8007894 <_dtoa_r+0x2ec>)
 8007736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	ec51 0b19 	vmov	r0, r1, d9
 8007742:	f7f9 f9cb 	bl	8000adc <__aeabi_dcmplt>
 8007746:	2800      	cmp	r0, #0
 8007748:	d050      	beq.n	80077ec <_dtoa_r+0x244>
 800774a:	9b00      	ldr	r3, [sp, #0]
 800774c:	3b01      	subs	r3, #1
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	2300      	movs	r3, #0
 8007752:	930b      	str	r3, [sp, #44]	; 0x2c
 8007754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007756:	1b5d      	subs	r5, r3, r5
 8007758:	1e6b      	subs	r3, r5, #1
 800775a:	9305      	str	r3, [sp, #20]
 800775c:	bf45      	ittet	mi
 800775e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007762:	9304      	strmi	r3, [sp, #16]
 8007764:	2300      	movpl	r3, #0
 8007766:	2300      	movmi	r3, #0
 8007768:	bf4c      	ite	mi
 800776a:	9305      	strmi	r3, [sp, #20]
 800776c:	9304      	strpl	r3, [sp, #16]
 800776e:	9b00      	ldr	r3, [sp, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	db3d      	blt.n	80077f0 <_dtoa_r+0x248>
 8007774:	9b05      	ldr	r3, [sp, #20]
 8007776:	9a00      	ldr	r2, [sp, #0]
 8007778:	920a      	str	r2, [sp, #40]	; 0x28
 800777a:	4413      	add	r3, r2
 800777c:	9305      	str	r3, [sp, #20]
 800777e:	2300      	movs	r3, #0
 8007780:	9307      	str	r3, [sp, #28]
 8007782:	9b06      	ldr	r3, [sp, #24]
 8007784:	2b09      	cmp	r3, #9
 8007786:	f200 8089 	bhi.w	800789c <_dtoa_r+0x2f4>
 800778a:	2b05      	cmp	r3, #5
 800778c:	bfc4      	itt	gt
 800778e:	3b04      	subgt	r3, #4
 8007790:	9306      	strgt	r3, [sp, #24]
 8007792:	9b06      	ldr	r3, [sp, #24]
 8007794:	f1a3 0302 	sub.w	r3, r3, #2
 8007798:	bfcc      	ite	gt
 800779a:	2500      	movgt	r5, #0
 800779c:	2501      	movle	r5, #1
 800779e:	2b03      	cmp	r3, #3
 80077a0:	f200 8087 	bhi.w	80078b2 <_dtoa_r+0x30a>
 80077a4:	e8df f003 	tbb	[pc, r3]
 80077a8:	59383a2d 	.word	0x59383a2d
 80077ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80077b0:	441d      	add	r5, r3
 80077b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	bfc1      	itttt	gt
 80077ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80077be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80077c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80077c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80077ca:	bfda      	itte	le
 80077cc:	f1c3 0320 	rsble	r3, r3, #32
 80077d0:	fa06 f003 	lslle.w	r0, r6, r3
 80077d4:	4318      	orrgt	r0, r3
 80077d6:	f7f8 fe95 	bl	8000504 <__aeabi_ui2d>
 80077da:	2301      	movs	r3, #1
 80077dc:	4606      	mov	r6, r0
 80077de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80077e2:	3d01      	subs	r5, #1
 80077e4:	930e      	str	r3, [sp, #56]	; 0x38
 80077e6:	e76a      	b.n	80076be <_dtoa_r+0x116>
 80077e8:	2301      	movs	r3, #1
 80077ea:	e7b2      	b.n	8007752 <_dtoa_r+0x1aa>
 80077ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80077ee:	e7b1      	b.n	8007754 <_dtoa_r+0x1ac>
 80077f0:	9b04      	ldr	r3, [sp, #16]
 80077f2:	9a00      	ldr	r2, [sp, #0]
 80077f4:	1a9b      	subs	r3, r3, r2
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	4253      	negs	r3, r2
 80077fa:	9307      	str	r3, [sp, #28]
 80077fc:	2300      	movs	r3, #0
 80077fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007800:	e7bf      	b.n	8007782 <_dtoa_r+0x1da>
 8007802:	2300      	movs	r3, #0
 8007804:	9308      	str	r3, [sp, #32]
 8007806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	dc55      	bgt.n	80078b8 <_dtoa_r+0x310>
 800780c:	2301      	movs	r3, #1
 800780e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007812:	461a      	mov	r2, r3
 8007814:	9209      	str	r2, [sp, #36]	; 0x24
 8007816:	e00c      	b.n	8007832 <_dtoa_r+0x28a>
 8007818:	2301      	movs	r3, #1
 800781a:	e7f3      	b.n	8007804 <_dtoa_r+0x25c>
 800781c:	2300      	movs	r3, #0
 800781e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007820:	9308      	str	r3, [sp, #32]
 8007822:	9b00      	ldr	r3, [sp, #0]
 8007824:	4413      	add	r3, r2
 8007826:	9302      	str	r3, [sp, #8]
 8007828:	3301      	adds	r3, #1
 800782a:	2b01      	cmp	r3, #1
 800782c:	9303      	str	r3, [sp, #12]
 800782e:	bfb8      	it	lt
 8007830:	2301      	movlt	r3, #1
 8007832:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007834:	2200      	movs	r2, #0
 8007836:	6042      	str	r2, [r0, #4]
 8007838:	2204      	movs	r2, #4
 800783a:	f102 0614 	add.w	r6, r2, #20
 800783e:	429e      	cmp	r6, r3
 8007840:	6841      	ldr	r1, [r0, #4]
 8007842:	d93d      	bls.n	80078c0 <_dtoa_r+0x318>
 8007844:	4620      	mov	r0, r4
 8007846:	f000 fe01 	bl	800844c <_Balloc>
 800784a:	9001      	str	r0, [sp, #4]
 800784c:	2800      	cmp	r0, #0
 800784e:	d13b      	bne.n	80078c8 <_dtoa_r+0x320>
 8007850:	4b11      	ldr	r3, [pc, #68]	; (8007898 <_dtoa_r+0x2f0>)
 8007852:	4602      	mov	r2, r0
 8007854:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007858:	e6c0      	b.n	80075dc <_dtoa_r+0x34>
 800785a:	2301      	movs	r3, #1
 800785c:	e7df      	b.n	800781e <_dtoa_r+0x276>
 800785e:	bf00      	nop
 8007860:	636f4361 	.word	0x636f4361
 8007864:	3fd287a7 	.word	0x3fd287a7
 8007868:	8b60c8b3 	.word	0x8b60c8b3
 800786c:	3fc68a28 	.word	0x3fc68a28
 8007870:	509f79fb 	.word	0x509f79fb
 8007874:	3fd34413 	.word	0x3fd34413
 8007878:	08009969 	.word	0x08009969
 800787c:	08009980 	.word	0x08009980
 8007880:	7ff00000 	.word	0x7ff00000
 8007884:	08009965 	.word	0x08009965
 8007888:	0800995c 	.word	0x0800995c
 800788c:	080098fd 	.word	0x080098fd
 8007890:	3ff80000 	.word	0x3ff80000
 8007894:	08009a70 	.word	0x08009a70
 8007898:	080099db 	.word	0x080099db
 800789c:	2501      	movs	r5, #1
 800789e:	2300      	movs	r3, #0
 80078a0:	9306      	str	r3, [sp, #24]
 80078a2:	9508      	str	r5, [sp, #32]
 80078a4:	f04f 33ff 	mov.w	r3, #4294967295
 80078a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078ac:	2200      	movs	r2, #0
 80078ae:	2312      	movs	r3, #18
 80078b0:	e7b0      	b.n	8007814 <_dtoa_r+0x26c>
 80078b2:	2301      	movs	r3, #1
 80078b4:	9308      	str	r3, [sp, #32]
 80078b6:	e7f5      	b.n	80078a4 <_dtoa_r+0x2fc>
 80078b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078be:	e7b8      	b.n	8007832 <_dtoa_r+0x28a>
 80078c0:	3101      	adds	r1, #1
 80078c2:	6041      	str	r1, [r0, #4]
 80078c4:	0052      	lsls	r2, r2, #1
 80078c6:	e7b8      	b.n	800783a <_dtoa_r+0x292>
 80078c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078ca:	9a01      	ldr	r2, [sp, #4]
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	9b03      	ldr	r3, [sp, #12]
 80078d0:	2b0e      	cmp	r3, #14
 80078d2:	f200 809d 	bhi.w	8007a10 <_dtoa_r+0x468>
 80078d6:	2d00      	cmp	r5, #0
 80078d8:	f000 809a 	beq.w	8007a10 <_dtoa_r+0x468>
 80078dc:	9b00      	ldr	r3, [sp, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	dd32      	ble.n	8007948 <_dtoa_r+0x3a0>
 80078e2:	4ab7      	ldr	r2, [pc, #732]	; (8007bc0 <_dtoa_r+0x618>)
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078f0:	9b00      	ldr	r3, [sp, #0]
 80078f2:	05d8      	lsls	r0, r3, #23
 80078f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80078f8:	d516      	bpl.n	8007928 <_dtoa_r+0x380>
 80078fa:	4bb2      	ldr	r3, [pc, #712]	; (8007bc4 <_dtoa_r+0x61c>)
 80078fc:	ec51 0b19 	vmov	r0, r1, d9
 8007900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007904:	f7f8 ffa2 	bl	800084c <__aeabi_ddiv>
 8007908:	f007 070f 	and.w	r7, r7, #15
 800790c:	4682      	mov	sl, r0
 800790e:	468b      	mov	fp, r1
 8007910:	2503      	movs	r5, #3
 8007912:	4eac      	ldr	r6, [pc, #688]	; (8007bc4 <_dtoa_r+0x61c>)
 8007914:	b957      	cbnz	r7, 800792c <_dtoa_r+0x384>
 8007916:	4642      	mov	r2, r8
 8007918:	464b      	mov	r3, r9
 800791a:	4650      	mov	r0, sl
 800791c:	4659      	mov	r1, fp
 800791e:	f7f8 ff95 	bl	800084c <__aeabi_ddiv>
 8007922:	4682      	mov	sl, r0
 8007924:	468b      	mov	fp, r1
 8007926:	e028      	b.n	800797a <_dtoa_r+0x3d2>
 8007928:	2502      	movs	r5, #2
 800792a:	e7f2      	b.n	8007912 <_dtoa_r+0x36a>
 800792c:	07f9      	lsls	r1, r7, #31
 800792e:	d508      	bpl.n	8007942 <_dtoa_r+0x39a>
 8007930:	4640      	mov	r0, r8
 8007932:	4649      	mov	r1, r9
 8007934:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007938:	f7f8 fe5e 	bl	80005f8 <__aeabi_dmul>
 800793c:	3501      	adds	r5, #1
 800793e:	4680      	mov	r8, r0
 8007940:	4689      	mov	r9, r1
 8007942:	107f      	asrs	r7, r7, #1
 8007944:	3608      	adds	r6, #8
 8007946:	e7e5      	b.n	8007914 <_dtoa_r+0x36c>
 8007948:	f000 809b 	beq.w	8007a82 <_dtoa_r+0x4da>
 800794c:	9b00      	ldr	r3, [sp, #0]
 800794e:	4f9d      	ldr	r7, [pc, #628]	; (8007bc4 <_dtoa_r+0x61c>)
 8007950:	425e      	negs	r6, r3
 8007952:	4b9b      	ldr	r3, [pc, #620]	; (8007bc0 <_dtoa_r+0x618>)
 8007954:	f006 020f 	and.w	r2, r6, #15
 8007958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	ec51 0b19 	vmov	r0, r1, d9
 8007964:	f7f8 fe48 	bl	80005f8 <__aeabi_dmul>
 8007968:	1136      	asrs	r6, r6, #4
 800796a:	4682      	mov	sl, r0
 800796c:	468b      	mov	fp, r1
 800796e:	2300      	movs	r3, #0
 8007970:	2502      	movs	r5, #2
 8007972:	2e00      	cmp	r6, #0
 8007974:	d17a      	bne.n	8007a6c <_dtoa_r+0x4c4>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1d3      	bne.n	8007922 <_dtoa_r+0x37a>
 800797a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 8082 	beq.w	8007a86 <_dtoa_r+0x4de>
 8007982:	4b91      	ldr	r3, [pc, #580]	; (8007bc8 <_dtoa_r+0x620>)
 8007984:	2200      	movs	r2, #0
 8007986:	4650      	mov	r0, sl
 8007988:	4659      	mov	r1, fp
 800798a:	f7f9 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800798e:	2800      	cmp	r0, #0
 8007990:	d079      	beq.n	8007a86 <_dtoa_r+0x4de>
 8007992:	9b03      	ldr	r3, [sp, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d076      	beq.n	8007a86 <_dtoa_r+0x4de>
 8007998:	9b02      	ldr	r3, [sp, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	dd36      	ble.n	8007a0c <_dtoa_r+0x464>
 800799e:	9b00      	ldr	r3, [sp, #0]
 80079a0:	4650      	mov	r0, sl
 80079a2:	4659      	mov	r1, fp
 80079a4:	1e5f      	subs	r7, r3, #1
 80079a6:	2200      	movs	r2, #0
 80079a8:	4b88      	ldr	r3, [pc, #544]	; (8007bcc <_dtoa_r+0x624>)
 80079aa:	f7f8 fe25 	bl	80005f8 <__aeabi_dmul>
 80079ae:	9e02      	ldr	r6, [sp, #8]
 80079b0:	4682      	mov	sl, r0
 80079b2:	468b      	mov	fp, r1
 80079b4:	3501      	adds	r5, #1
 80079b6:	4628      	mov	r0, r5
 80079b8:	f7f8 fdb4 	bl	8000524 <__aeabi_i2d>
 80079bc:	4652      	mov	r2, sl
 80079be:	465b      	mov	r3, fp
 80079c0:	f7f8 fe1a 	bl	80005f8 <__aeabi_dmul>
 80079c4:	4b82      	ldr	r3, [pc, #520]	; (8007bd0 <_dtoa_r+0x628>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	f7f8 fc60 	bl	800028c <__adddf3>
 80079cc:	46d0      	mov	r8, sl
 80079ce:	46d9      	mov	r9, fp
 80079d0:	4682      	mov	sl, r0
 80079d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80079d6:	2e00      	cmp	r6, #0
 80079d8:	d158      	bne.n	8007a8c <_dtoa_r+0x4e4>
 80079da:	4b7e      	ldr	r3, [pc, #504]	; (8007bd4 <_dtoa_r+0x62c>)
 80079dc:	2200      	movs	r2, #0
 80079de:	4640      	mov	r0, r8
 80079e0:	4649      	mov	r1, r9
 80079e2:	f7f8 fc51 	bl	8000288 <__aeabi_dsub>
 80079e6:	4652      	mov	r2, sl
 80079e8:	465b      	mov	r3, fp
 80079ea:	4680      	mov	r8, r0
 80079ec:	4689      	mov	r9, r1
 80079ee:	f7f9 f893 	bl	8000b18 <__aeabi_dcmpgt>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	f040 8295 	bne.w	8007f22 <_dtoa_r+0x97a>
 80079f8:	4652      	mov	r2, sl
 80079fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80079fe:	4640      	mov	r0, r8
 8007a00:	4649      	mov	r1, r9
 8007a02:	f7f9 f86b 	bl	8000adc <__aeabi_dcmplt>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	f040 8289 	bne.w	8007f1e <_dtoa_r+0x976>
 8007a0c:	ec5b ab19 	vmov	sl, fp, d9
 8007a10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f2c0 8148 	blt.w	8007ca8 <_dtoa_r+0x700>
 8007a18:	9a00      	ldr	r2, [sp, #0]
 8007a1a:	2a0e      	cmp	r2, #14
 8007a1c:	f300 8144 	bgt.w	8007ca8 <_dtoa_r+0x700>
 8007a20:	4b67      	ldr	r3, [pc, #412]	; (8007bc0 <_dtoa_r+0x618>)
 8007a22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f280 80d5 	bge.w	8007bdc <_dtoa_r+0x634>
 8007a32:	9b03      	ldr	r3, [sp, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f300 80d1 	bgt.w	8007bdc <_dtoa_r+0x634>
 8007a3a:	f040 826f 	bne.w	8007f1c <_dtoa_r+0x974>
 8007a3e:	4b65      	ldr	r3, [pc, #404]	; (8007bd4 <_dtoa_r+0x62c>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	4640      	mov	r0, r8
 8007a44:	4649      	mov	r1, r9
 8007a46:	f7f8 fdd7 	bl	80005f8 <__aeabi_dmul>
 8007a4a:	4652      	mov	r2, sl
 8007a4c:	465b      	mov	r3, fp
 8007a4e:	f7f9 f859 	bl	8000b04 <__aeabi_dcmpge>
 8007a52:	9e03      	ldr	r6, [sp, #12]
 8007a54:	4637      	mov	r7, r6
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f040 8245 	bne.w	8007ee6 <_dtoa_r+0x93e>
 8007a5c:	9d01      	ldr	r5, [sp, #4]
 8007a5e:	2331      	movs	r3, #49	; 0x31
 8007a60:	f805 3b01 	strb.w	r3, [r5], #1
 8007a64:	9b00      	ldr	r3, [sp, #0]
 8007a66:	3301      	adds	r3, #1
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	e240      	b.n	8007eee <_dtoa_r+0x946>
 8007a6c:	07f2      	lsls	r2, r6, #31
 8007a6e:	d505      	bpl.n	8007a7c <_dtoa_r+0x4d4>
 8007a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a74:	f7f8 fdc0 	bl	80005f8 <__aeabi_dmul>
 8007a78:	3501      	adds	r5, #1
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	1076      	asrs	r6, r6, #1
 8007a7e:	3708      	adds	r7, #8
 8007a80:	e777      	b.n	8007972 <_dtoa_r+0x3ca>
 8007a82:	2502      	movs	r5, #2
 8007a84:	e779      	b.n	800797a <_dtoa_r+0x3d2>
 8007a86:	9f00      	ldr	r7, [sp, #0]
 8007a88:	9e03      	ldr	r6, [sp, #12]
 8007a8a:	e794      	b.n	80079b6 <_dtoa_r+0x40e>
 8007a8c:	9901      	ldr	r1, [sp, #4]
 8007a8e:	4b4c      	ldr	r3, [pc, #304]	; (8007bc0 <_dtoa_r+0x618>)
 8007a90:	4431      	add	r1, r6
 8007a92:	910d      	str	r1, [sp, #52]	; 0x34
 8007a94:	9908      	ldr	r1, [sp, #32]
 8007a96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a9e:	2900      	cmp	r1, #0
 8007aa0:	d043      	beq.n	8007b2a <_dtoa_r+0x582>
 8007aa2:	494d      	ldr	r1, [pc, #308]	; (8007bd8 <_dtoa_r+0x630>)
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	f7f8 fed1 	bl	800084c <__aeabi_ddiv>
 8007aaa:	4652      	mov	r2, sl
 8007aac:	465b      	mov	r3, fp
 8007aae:	f7f8 fbeb 	bl	8000288 <__aeabi_dsub>
 8007ab2:	9d01      	ldr	r5, [sp, #4]
 8007ab4:	4682      	mov	sl, r0
 8007ab6:	468b      	mov	fp, r1
 8007ab8:	4649      	mov	r1, r9
 8007aba:	4640      	mov	r0, r8
 8007abc:	f7f9 f84c 	bl	8000b58 <__aeabi_d2iz>
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	f7f8 fd2f 	bl	8000524 <__aeabi_i2d>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4640      	mov	r0, r8
 8007acc:	4649      	mov	r1, r9
 8007ace:	f7f8 fbdb 	bl	8000288 <__aeabi_dsub>
 8007ad2:	3630      	adds	r6, #48	; 0x30
 8007ad4:	f805 6b01 	strb.w	r6, [r5], #1
 8007ad8:	4652      	mov	r2, sl
 8007ada:	465b      	mov	r3, fp
 8007adc:	4680      	mov	r8, r0
 8007ade:	4689      	mov	r9, r1
 8007ae0:	f7f8 fffc 	bl	8000adc <__aeabi_dcmplt>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d163      	bne.n	8007bb0 <_dtoa_r+0x608>
 8007ae8:	4642      	mov	r2, r8
 8007aea:	464b      	mov	r3, r9
 8007aec:	4936      	ldr	r1, [pc, #216]	; (8007bc8 <_dtoa_r+0x620>)
 8007aee:	2000      	movs	r0, #0
 8007af0:	f7f8 fbca 	bl	8000288 <__aeabi_dsub>
 8007af4:	4652      	mov	r2, sl
 8007af6:	465b      	mov	r3, fp
 8007af8:	f7f8 fff0 	bl	8000adc <__aeabi_dcmplt>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	f040 80b5 	bne.w	8007c6c <_dtoa_r+0x6c4>
 8007b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b04:	429d      	cmp	r5, r3
 8007b06:	d081      	beq.n	8007a0c <_dtoa_r+0x464>
 8007b08:	4b30      	ldr	r3, [pc, #192]	; (8007bcc <_dtoa_r+0x624>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4650      	mov	r0, sl
 8007b0e:	4659      	mov	r1, fp
 8007b10:	f7f8 fd72 	bl	80005f8 <__aeabi_dmul>
 8007b14:	4b2d      	ldr	r3, [pc, #180]	; (8007bcc <_dtoa_r+0x624>)
 8007b16:	4682      	mov	sl, r0
 8007b18:	468b      	mov	fp, r1
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f7f8 fd6a 	bl	80005f8 <__aeabi_dmul>
 8007b24:	4680      	mov	r8, r0
 8007b26:	4689      	mov	r9, r1
 8007b28:	e7c6      	b.n	8007ab8 <_dtoa_r+0x510>
 8007b2a:	4650      	mov	r0, sl
 8007b2c:	4659      	mov	r1, fp
 8007b2e:	f7f8 fd63 	bl	80005f8 <__aeabi_dmul>
 8007b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b34:	9d01      	ldr	r5, [sp, #4]
 8007b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b38:	4682      	mov	sl, r0
 8007b3a:	468b      	mov	fp, r1
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	4640      	mov	r0, r8
 8007b40:	f7f9 f80a 	bl	8000b58 <__aeabi_d2iz>
 8007b44:	4606      	mov	r6, r0
 8007b46:	f7f8 fced 	bl	8000524 <__aeabi_i2d>
 8007b4a:	3630      	adds	r6, #48	; 0x30
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4640      	mov	r0, r8
 8007b52:	4649      	mov	r1, r9
 8007b54:	f7f8 fb98 	bl	8000288 <__aeabi_dsub>
 8007b58:	f805 6b01 	strb.w	r6, [r5], #1
 8007b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b5e:	429d      	cmp	r5, r3
 8007b60:	4680      	mov	r8, r0
 8007b62:	4689      	mov	r9, r1
 8007b64:	f04f 0200 	mov.w	r2, #0
 8007b68:	d124      	bne.n	8007bb4 <_dtoa_r+0x60c>
 8007b6a:	4b1b      	ldr	r3, [pc, #108]	; (8007bd8 <_dtoa_r+0x630>)
 8007b6c:	4650      	mov	r0, sl
 8007b6e:	4659      	mov	r1, fp
 8007b70:	f7f8 fb8c 	bl	800028c <__adddf3>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4640      	mov	r0, r8
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	f7f8 ffcc 	bl	8000b18 <__aeabi_dcmpgt>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d173      	bne.n	8007c6c <_dtoa_r+0x6c4>
 8007b84:	4652      	mov	r2, sl
 8007b86:	465b      	mov	r3, fp
 8007b88:	4913      	ldr	r1, [pc, #76]	; (8007bd8 <_dtoa_r+0x630>)
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	f7f8 fb7c 	bl	8000288 <__aeabi_dsub>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	4640      	mov	r0, r8
 8007b96:	4649      	mov	r1, r9
 8007b98:	f7f8 ffa0 	bl	8000adc <__aeabi_dcmplt>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	f43f af35 	beq.w	8007a0c <_dtoa_r+0x464>
 8007ba2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ba4:	1e6b      	subs	r3, r5, #1
 8007ba6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ba8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bac:	2b30      	cmp	r3, #48	; 0x30
 8007bae:	d0f8      	beq.n	8007ba2 <_dtoa_r+0x5fa>
 8007bb0:	9700      	str	r7, [sp, #0]
 8007bb2:	e049      	b.n	8007c48 <_dtoa_r+0x6a0>
 8007bb4:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <_dtoa_r+0x624>)
 8007bb6:	f7f8 fd1f 	bl	80005f8 <__aeabi_dmul>
 8007bba:	4680      	mov	r8, r0
 8007bbc:	4689      	mov	r9, r1
 8007bbe:	e7bd      	b.n	8007b3c <_dtoa_r+0x594>
 8007bc0:	08009a70 	.word	0x08009a70
 8007bc4:	08009a48 	.word	0x08009a48
 8007bc8:	3ff00000 	.word	0x3ff00000
 8007bcc:	40240000 	.word	0x40240000
 8007bd0:	401c0000 	.word	0x401c0000
 8007bd4:	40140000 	.word	0x40140000
 8007bd8:	3fe00000 	.word	0x3fe00000
 8007bdc:	9d01      	ldr	r5, [sp, #4]
 8007bde:	4656      	mov	r6, sl
 8007be0:	465f      	mov	r7, fp
 8007be2:	4642      	mov	r2, r8
 8007be4:	464b      	mov	r3, r9
 8007be6:	4630      	mov	r0, r6
 8007be8:	4639      	mov	r1, r7
 8007bea:	f7f8 fe2f 	bl	800084c <__aeabi_ddiv>
 8007bee:	f7f8 ffb3 	bl	8000b58 <__aeabi_d2iz>
 8007bf2:	4682      	mov	sl, r0
 8007bf4:	f7f8 fc96 	bl	8000524 <__aeabi_i2d>
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	464b      	mov	r3, r9
 8007bfc:	f7f8 fcfc 	bl	80005f8 <__aeabi_dmul>
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	4630      	mov	r0, r6
 8007c06:	4639      	mov	r1, r7
 8007c08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007c0c:	f7f8 fb3c 	bl	8000288 <__aeabi_dsub>
 8007c10:	f805 6b01 	strb.w	r6, [r5], #1
 8007c14:	9e01      	ldr	r6, [sp, #4]
 8007c16:	9f03      	ldr	r7, [sp, #12]
 8007c18:	1bae      	subs	r6, r5, r6
 8007c1a:	42b7      	cmp	r7, r6
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	d135      	bne.n	8007c8e <_dtoa_r+0x6e6>
 8007c22:	f7f8 fb33 	bl	800028c <__adddf3>
 8007c26:	4642      	mov	r2, r8
 8007c28:	464b      	mov	r3, r9
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460f      	mov	r7, r1
 8007c2e:	f7f8 ff73 	bl	8000b18 <__aeabi_dcmpgt>
 8007c32:	b9d0      	cbnz	r0, 8007c6a <_dtoa_r+0x6c2>
 8007c34:	4642      	mov	r2, r8
 8007c36:	464b      	mov	r3, r9
 8007c38:	4630      	mov	r0, r6
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	f7f8 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c40:	b110      	cbz	r0, 8007c48 <_dtoa_r+0x6a0>
 8007c42:	f01a 0f01 	tst.w	sl, #1
 8007c46:	d110      	bne.n	8007c6a <_dtoa_r+0x6c2>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	ee18 1a10 	vmov	r1, s16
 8007c4e:	f000 fc3d 	bl	80084cc <_Bfree>
 8007c52:	2300      	movs	r3, #0
 8007c54:	9800      	ldr	r0, [sp, #0]
 8007c56:	702b      	strb	r3, [r5, #0]
 8007c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	6018      	str	r0, [r3, #0]
 8007c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f43f acf1 	beq.w	8007648 <_dtoa_r+0xa0>
 8007c66:	601d      	str	r5, [r3, #0]
 8007c68:	e4ee      	b.n	8007648 <_dtoa_r+0xa0>
 8007c6a:	9f00      	ldr	r7, [sp, #0]
 8007c6c:	462b      	mov	r3, r5
 8007c6e:	461d      	mov	r5, r3
 8007c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c74:	2a39      	cmp	r2, #57	; 0x39
 8007c76:	d106      	bne.n	8007c86 <_dtoa_r+0x6de>
 8007c78:	9a01      	ldr	r2, [sp, #4]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d1f7      	bne.n	8007c6e <_dtoa_r+0x6c6>
 8007c7e:	9901      	ldr	r1, [sp, #4]
 8007c80:	2230      	movs	r2, #48	; 0x30
 8007c82:	3701      	adds	r7, #1
 8007c84:	700a      	strb	r2, [r1, #0]
 8007c86:	781a      	ldrb	r2, [r3, #0]
 8007c88:	3201      	adds	r2, #1
 8007c8a:	701a      	strb	r2, [r3, #0]
 8007c8c:	e790      	b.n	8007bb0 <_dtoa_r+0x608>
 8007c8e:	4ba6      	ldr	r3, [pc, #664]	; (8007f28 <_dtoa_r+0x980>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	f7f8 fcb1 	bl	80005f8 <__aeabi_dmul>
 8007c96:	2200      	movs	r2, #0
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	460f      	mov	r7, r1
 8007c9e:	f7f8 ff13 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d09d      	beq.n	8007be2 <_dtoa_r+0x63a>
 8007ca6:	e7cf      	b.n	8007c48 <_dtoa_r+0x6a0>
 8007ca8:	9a08      	ldr	r2, [sp, #32]
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	f000 80d7 	beq.w	8007e5e <_dtoa_r+0x8b6>
 8007cb0:	9a06      	ldr	r2, [sp, #24]
 8007cb2:	2a01      	cmp	r2, #1
 8007cb4:	f300 80ba 	bgt.w	8007e2c <_dtoa_r+0x884>
 8007cb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	f000 80b2 	beq.w	8007e24 <_dtoa_r+0x87c>
 8007cc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007cc4:	9e07      	ldr	r6, [sp, #28]
 8007cc6:	9d04      	ldr	r5, [sp, #16]
 8007cc8:	9a04      	ldr	r2, [sp, #16]
 8007cca:	441a      	add	r2, r3
 8007ccc:	9204      	str	r2, [sp, #16]
 8007cce:	9a05      	ldr	r2, [sp, #20]
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	441a      	add	r2, r3
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	9205      	str	r2, [sp, #20]
 8007cd8:	f000 fcb0 	bl	800863c <__i2b>
 8007cdc:	4607      	mov	r7, r0
 8007cde:	2d00      	cmp	r5, #0
 8007ce0:	dd0c      	ble.n	8007cfc <_dtoa_r+0x754>
 8007ce2:	9b05      	ldr	r3, [sp, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	dd09      	ble.n	8007cfc <_dtoa_r+0x754>
 8007ce8:	42ab      	cmp	r3, r5
 8007cea:	9a04      	ldr	r2, [sp, #16]
 8007cec:	bfa8      	it	ge
 8007cee:	462b      	movge	r3, r5
 8007cf0:	1ad2      	subs	r2, r2, r3
 8007cf2:	9204      	str	r2, [sp, #16]
 8007cf4:	9a05      	ldr	r2, [sp, #20]
 8007cf6:	1aed      	subs	r5, r5, r3
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	9305      	str	r3, [sp, #20]
 8007cfc:	9b07      	ldr	r3, [sp, #28]
 8007cfe:	b31b      	cbz	r3, 8007d48 <_dtoa_r+0x7a0>
 8007d00:	9b08      	ldr	r3, [sp, #32]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 80af 	beq.w	8007e66 <_dtoa_r+0x8be>
 8007d08:	2e00      	cmp	r6, #0
 8007d0a:	dd13      	ble.n	8007d34 <_dtoa_r+0x78c>
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	4632      	mov	r2, r6
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 fd53 	bl	80087bc <__pow5mult>
 8007d16:	ee18 2a10 	vmov	r2, s16
 8007d1a:	4601      	mov	r1, r0
 8007d1c:	4607      	mov	r7, r0
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 fca2 	bl	8008668 <__multiply>
 8007d24:	ee18 1a10 	vmov	r1, s16
 8007d28:	4680      	mov	r8, r0
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 fbce 	bl	80084cc <_Bfree>
 8007d30:	ee08 8a10 	vmov	s16, r8
 8007d34:	9b07      	ldr	r3, [sp, #28]
 8007d36:	1b9a      	subs	r2, r3, r6
 8007d38:	d006      	beq.n	8007d48 <_dtoa_r+0x7a0>
 8007d3a:	ee18 1a10 	vmov	r1, s16
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f000 fd3c 	bl	80087bc <__pow5mult>
 8007d44:	ee08 0a10 	vmov	s16, r0
 8007d48:	2101      	movs	r1, #1
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 fc76 	bl	800863c <__i2b>
 8007d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	4606      	mov	r6, r0
 8007d56:	f340 8088 	ble.w	8007e6a <_dtoa_r+0x8c2>
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	4601      	mov	r1, r0
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f000 fd2c 	bl	80087bc <__pow5mult>
 8007d64:	9b06      	ldr	r3, [sp, #24]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	4606      	mov	r6, r0
 8007d6a:	f340 8081 	ble.w	8007e70 <_dtoa_r+0x8c8>
 8007d6e:	f04f 0800 	mov.w	r8, #0
 8007d72:	6933      	ldr	r3, [r6, #16]
 8007d74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d78:	6918      	ldr	r0, [r3, #16]
 8007d7a:	f000 fc0f 	bl	800859c <__hi0bits>
 8007d7e:	f1c0 0020 	rsb	r0, r0, #32
 8007d82:	9b05      	ldr	r3, [sp, #20]
 8007d84:	4418      	add	r0, r3
 8007d86:	f010 001f 	ands.w	r0, r0, #31
 8007d8a:	f000 8092 	beq.w	8007eb2 <_dtoa_r+0x90a>
 8007d8e:	f1c0 0320 	rsb	r3, r0, #32
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	f340 808a 	ble.w	8007eac <_dtoa_r+0x904>
 8007d98:	f1c0 001c 	rsb	r0, r0, #28
 8007d9c:	9b04      	ldr	r3, [sp, #16]
 8007d9e:	4403      	add	r3, r0
 8007da0:	9304      	str	r3, [sp, #16]
 8007da2:	9b05      	ldr	r3, [sp, #20]
 8007da4:	4403      	add	r3, r0
 8007da6:	4405      	add	r5, r0
 8007da8:	9305      	str	r3, [sp, #20]
 8007daa:	9b04      	ldr	r3, [sp, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	dd07      	ble.n	8007dc0 <_dtoa_r+0x818>
 8007db0:	ee18 1a10 	vmov	r1, s16
 8007db4:	461a      	mov	r2, r3
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 fd5a 	bl	8008870 <__lshift>
 8007dbc:	ee08 0a10 	vmov	s16, r0
 8007dc0:	9b05      	ldr	r3, [sp, #20]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	dd05      	ble.n	8007dd2 <_dtoa_r+0x82a>
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fd50 	bl	8008870 <__lshift>
 8007dd0:	4606      	mov	r6, r0
 8007dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d06e      	beq.n	8007eb6 <_dtoa_r+0x90e>
 8007dd8:	ee18 0a10 	vmov	r0, s16
 8007ddc:	4631      	mov	r1, r6
 8007dde:	f000 fdb7 	bl	8008950 <__mcmp>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	da67      	bge.n	8007eb6 <_dtoa_r+0x90e>
 8007de6:	9b00      	ldr	r3, [sp, #0]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	ee18 1a10 	vmov	r1, s16
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	220a      	movs	r2, #10
 8007df2:	2300      	movs	r3, #0
 8007df4:	4620      	mov	r0, r4
 8007df6:	f000 fb8b 	bl	8008510 <__multadd>
 8007dfa:	9b08      	ldr	r3, [sp, #32]
 8007dfc:	ee08 0a10 	vmov	s16, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 81b1 	beq.w	8008168 <_dtoa_r+0xbc0>
 8007e06:	2300      	movs	r3, #0
 8007e08:	4639      	mov	r1, r7
 8007e0a:	220a      	movs	r2, #10
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f000 fb7f 	bl	8008510 <__multadd>
 8007e12:	9b02      	ldr	r3, [sp, #8]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	4607      	mov	r7, r0
 8007e18:	f300 808e 	bgt.w	8007f38 <_dtoa_r+0x990>
 8007e1c:	9b06      	ldr	r3, [sp, #24]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	dc51      	bgt.n	8007ec6 <_dtoa_r+0x91e>
 8007e22:	e089      	b.n	8007f38 <_dtoa_r+0x990>
 8007e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e2a:	e74b      	b.n	8007cc4 <_dtoa_r+0x71c>
 8007e2c:	9b03      	ldr	r3, [sp, #12]
 8007e2e:	1e5e      	subs	r6, r3, #1
 8007e30:	9b07      	ldr	r3, [sp, #28]
 8007e32:	42b3      	cmp	r3, r6
 8007e34:	bfbf      	itttt	lt
 8007e36:	9b07      	ldrlt	r3, [sp, #28]
 8007e38:	9607      	strlt	r6, [sp, #28]
 8007e3a:	1af2      	sublt	r2, r6, r3
 8007e3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007e3e:	bfb6      	itet	lt
 8007e40:	189b      	addlt	r3, r3, r2
 8007e42:	1b9e      	subge	r6, r3, r6
 8007e44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	bfb8      	it	lt
 8007e4a:	2600      	movlt	r6, #0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bfb7      	itett	lt
 8007e50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007e54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007e58:	1a9d      	sublt	r5, r3, r2
 8007e5a:	2300      	movlt	r3, #0
 8007e5c:	e734      	b.n	8007cc8 <_dtoa_r+0x720>
 8007e5e:	9e07      	ldr	r6, [sp, #28]
 8007e60:	9d04      	ldr	r5, [sp, #16]
 8007e62:	9f08      	ldr	r7, [sp, #32]
 8007e64:	e73b      	b.n	8007cde <_dtoa_r+0x736>
 8007e66:	9a07      	ldr	r2, [sp, #28]
 8007e68:	e767      	b.n	8007d3a <_dtoa_r+0x792>
 8007e6a:	9b06      	ldr	r3, [sp, #24]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	dc18      	bgt.n	8007ea2 <_dtoa_r+0x8fa>
 8007e70:	f1ba 0f00 	cmp.w	sl, #0
 8007e74:	d115      	bne.n	8007ea2 <_dtoa_r+0x8fa>
 8007e76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e7a:	b993      	cbnz	r3, 8007ea2 <_dtoa_r+0x8fa>
 8007e7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e80:	0d1b      	lsrs	r3, r3, #20
 8007e82:	051b      	lsls	r3, r3, #20
 8007e84:	b183      	cbz	r3, 8007ea8 <_dtoa_r+0x900>
 8007e86:	9b04      	ldr	r3, [sp, #16]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	9304      	str	r3, [sp, #16]
 8007e8c:	9b05      	ldr	r3, [sp, #20]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	9305      	str	r3, [sp, #20]
 8007e92:	f04f 0801 	mov.w	r8, #1
 8007e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f47f af6a 	bne.w	8007d72 <_dtoa_r+0x7ca>
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	e76f      	b.n	8007d82 <_dtoa_r+0x7da>
 8007ea2:	f04f 0800 	mov.w	r8, #0
 8007ea6:	e7f6      	b.n	8007e96 <_dtoa_r+0x8ee>
 8007ea8:	4698      	mov	r8, r3
 8007eaa:	e7f4      	b.n	8007e96 <_dtoa_r+0x8ee>
 8007eac:	f43f af7d 	beq.w	8007daa <_dtoa_r+0x802>
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	301c      	adds	r0, #28
 8007eb4:	e772      	b.n	8007d9c <_dtoa_r+0x7f4>
 8007eb6:	9b03      	ldr	r3, [sp, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	dc37      	bgt.n	8007f2c <_dtoa_r+0x984>
 8007ebc:	9b06      	ldr	r3, [sp, #24]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	dd34      	ble.n	8007f2c <_dtoa_r+0x984>
 8007ec2:	9b03      	ldr	r3, [sp, #12]
 8007ec4:	9302      	str	r3, [sp, #8]
 8007ec6:	9b02      	ldr	r3, [sp, #8]
 8007ec8:	b96b      	cbnz	r3, 8007ee6 <_dtoa_r+0x93e>
 8007eca:	4631      	mov	r1, r6
 8007ecc:	2205      	movs	r2, #5
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 fb1e 	bl	8008510 <__multadd>
 8007ed4:	4601      	mov	r1, r0
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	ee18 0a10 	vmov	r0, s16
 8007edc:	f000 fd38 	bl	8008950 <__mcmp>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	f73f adbb 	bgt.w	8007a5c <_dtoa_r+0x4b4>
 8007ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee8:	9d01      	ldr	r5, [sp, #4]
 8007eea:	43db      	mvns	r3, r3
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	f04f 0800 	mov.w	r8, #0
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f000 fae9 	bl	80084cc <_Bfree>
 8007efa:	2f00      	cmp	r7, #0
 8007efc:	f43f aea4 	beq.w	8007c48 <_dtoa_r+0x6a0>
 8007f00:	f1b8 0f00 	cmp.w	r8, #0
 8007f04:	d005      	beq.n	8007f12 <_dtoa_r+0x96a>
 8007f06:	45b8      	cmp	r8, r7
 8007f08:	d003      	beq.n	8007f12 <_dtoa_r+0x96a>
 8007f0a:	4641      	mov	r1, r8
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f000 fadd 	bl	80084cc <_Bfree>
 8007f12:	4639      	mov	r1, r7
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 fad9 	bl	80084cc <_Bfree>
 8007f1a:	e695      	b.n	8007c48 <_dtoa_r+0x6a0>
 8007f1c:	2600      	movs	r6, #0
 8007f1e:	4637      	mov	r7, r6
 8007f20:	e7e1      	b.n	8007ee6 <_dtoa_r+0x93e>
 8007f22:	9700      	str	r7, [sp, #0]
 8007f24:	4637      	mov	r7, r6
 8007f26:	e599      	b.n	8007a5c <_dtoa_r+0x4b4>
 8007f28:	40240000 	.word	0x40240000
 8007f2c:	9b08      	ldr	r3, [sp, #32]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 80ca 	beq.w	80080c8 <_dtoa_r+0xb20>
 8007f34:	9b03      	ldr	r3, [sp, #12]
 8007f36:	9302      	str	r3, [sp, #8]
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	dd05      	ble.n	8007f48 <_dtoa_r+0x9a0>
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	462a      	mov	r2, r5
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 fc95 	bl	8008870 <__lshift>
 8007f46:	4607      	mov	r7, r0
 8007f48:	f1b8 0f00 	cmp.w	r8, #0
 8007f4c:	d05b      	beq.n	8008006 <_dtoa_r+0xa5e>
 8007f4e:	6879      	ldr	r1, [r7, #4]
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 fa7b 	bl	800844c <_Balloc>
 8007f56:	4605      	mov	r5, r0
 8007f58:	b928      	cbnz	r0, 8007f66 <_dtoa_r+0x9be>
 8007f5a:	4b87      	ldr	r3, [pc, #540]	; (8008178 <_dtoa_r+0xbd0>)
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007f62:	f7ff bb3b 	b.w	80075dc <_dtoa_r+0x34>
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	3202      	adds	r2, #2
 8007f6a:	0092      	lsls	r2, r2, #2
 8007f6c:	f107 010c 	add.w	r1, r7, #12
 8007f70:	300c      	adds	r0, #12
 8007f72:	f7fe fc04 	bl	800677e <memcpy>
 8007f76:	2201      	movs	r2, #1
 8007f78:	4629      	mov	r1, r5
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 fc78 	bl	8008870 <__lshift>
 8007f80:	9b01      	ldr	r3, [sp, #4]
 8007f82:	f103 0901 	add.w	r9, r3, #1
 8007f86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	9305      	str	r3, [sp, #20]
 8007f8e:	f00a 0301 	and.w	r3, sl, #1
 8007f92:	46b8      	mov	r8, r7
 8007f94:	9304      	str	r3, [sp, #16]
 8007f96:	4607      	mov	r7, r0
 8007f98:	4631      	mov	r1, r6
 8007f9a:	ee18 0a10 	vmov	r0, s16
 8007f9e:	f7ff fa77 	bl	8007490 <quorem>
 8007fa2:	4641      	mov	r1, r8
 8007fa4:	9002      	str	r0, [sp, #8]
 8007fa6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007faa:	ee18 0a10 	vmov	r0, s16
 8007fae:	f000 fccf 	bl	8008950 <__mcmp>
 8007fb2:	463a      	mov	r2, r7
 8007fb4:	9003      	str	r0, [sp, #12]
 8007fb6:	4631      	mov	r1, r6
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f000 fce5 	bl	8008988 <__mdiff>
 8007fbe:	68c2      	ldr	r2, [r0, #12]
 8007fc0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	bb02      	cbnz	r2, 800800a <_dtoa_r+0xa62>
 8007fc8:	4601      	mov	r1, r0
 8007fca:	ee18 0a10 	vmov	r0, s16
 8007fce:	f000 fcbf 	bl	8008950 <__mcmp>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	9207      	str	r2, [sp, #28]
 8007fda:	f000 fa77 	bl	80084cc <_Bfree>
 8007fde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007fe2:	ea43 0102 	orr.w	r1, r3, r2
 8007fe6:	9b04      	ldr	r3, [sp, #16]
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	464d      	mov	r5, r9
 8007fec:	d10f      	bne.n	800800e <_dtoa_r+0xa66>
 8007fee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ff2:	d02a      	beq.n	800804a <_dtoa_r+0xaa2>
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	dd02      	ble.n	8008000 <_dtoa_r+0xa58>
 8007ffa:	9b02      	ldr	r3, [sp, #8]
 8007ffc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008000:	f88b a000 	strb.w	sl, [fp]
 8008004:	e775      	b.n	8007ef2 <_dtoa_r+0x94a>
 8008006:	4638      	mov	r0, r7
 8008008:	e7ba      	b.n	8007f80 <_dtoa_r+0x9d8>
 800800a:	2201      	movs	r2, #1
 800800c:	e7e2      	b.n	8007fd4 <_dtoa_r+0xa2c>
 800800e:	9b03      	ldr	r3, [sp, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	db04      	blt.n	800801e <_dtoa_r+0xa76>
 8008014:	9906      	ldr	r1, [sp, #24]
 8008016:	430b      	orrs	r3, r1
 8008018:	9904      	ldr	r1, [sp, #16]
 800801a:	430b      	orrs	r3, r1
 800801c:	d122      	bne.n	8008064 <_dtoa_r+0xabc>
 800801e:	2a00      	cmp	r2, #0
 8008020:	ddee      	ble.n	8008000 <_dtoa_r+0xa58>
 8008022:	ee18 1a10 	vmov	r1, s16
 8008026:	2201      	movs	r2, #1
 8008028:	4620      	mov	r0, r4
 800802a:	f000 fc21 	bl	8008870 <__lshift>
 800802e:	4631      	mov	r1, r6
 8008030:	ee08 0a10 	vmov	s16, r0
 8008034:	f000 fc8c 	bl	8008950 <__mcmp>
 8008038:	2800      	cmp	r0, #0
 800803a:	dc03      	bgt.n	8008044 <_dtoa_r+0xa9c>
 800803c:	d1e0      	bne.n	8008000 <_dtoa_r+0xa58>
 800803e:	f01a 0f01 	tst.w	sl, #1
 8008042:	d0dd      	beq.n	8008000 <_dtoa_r+0xa58>
 8008044:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008048:	d1d7      	bne.n	8007ffa <_dtoa_r+0xa52>
 800804a:	2339      	movs	r3, #57	; 0x39
 800804c:	f88b 3000 	strb.w	r3, [fp]
 8008050:	462b      	mov	r3, r5
 8008052:	461d      	mov	r5, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800805a:	2a39      	cmp	r2, #57	; 0x39
 800805c:	d071      	beq.n	8008142 <_dtoa_r+0xb9a>
 800805e:	3201      	adds	r2, #1
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	e746      	b.n	8007ef2 <_dtoa_r+0x94a>
 8008064:	2a00      	cmp	r2, #0
 8008066:	dd07      	ble.n	8008078 <_dtoa_r+0xad0>
 8008068:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800806c:	d0ed      	beq.n	800804a <_dtoa_r+0xaa2>
 800806e:	f10a 0301 	add.w	r3, sl, #1
 8008072:	f88b 3000 	strb.w	r3, [fp]
 8008076:	e73c      	b.n	8007ef2 <_dtoa_r+0x94a>
 8008078:	9b05      	ldr	r3, [sp, #20]
 800807a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800807e:	4599      	cmp	r9, r3
 8008080:	d047      	beq.n	8008112 <_dtoa_r+0xb6a>
 8008082:	ee18 1a10 	vmov	r1, s16
 8008086:	2300      	movs	r3, #0
 8008088:	220a      	movs	r2, #10
 800808a:	4620      	mov	r0, r4
 800808c:	f000 fa40 	bl	8008510 <__multadd>
 8008090:	45b8      	cmp	r8, r7
 8008092:	ee08 0a10 	vmov	s16, r0
 8008096:	f04f 0300 	mov.w	r3, #0
 800809a:	f04f 020a 	mov.w	r2, #10
 800809e:	4641      	mov	r1, r8
 80080a0:	4620      	mov	r0, r4
 80080a2:	d106      	bne.n	80080b2 <_dtoa_r+0xb0a>
 80080a4:	f000 fa34 	bl	8008510 <__multadd>
 80080a8:	4680      	mov	r8, r0
 80080aa:	4607      	mov	r7, r0
 80080ac:	f109 0901 	add.w	r9, r9, #1
 80080b0:	e772      	b.n	8007f98 <_dtoa_r+0x9f0>
 80080b2:	f000 fa2d 	bl	8008510 <__multadd>
 80080b6:	4639      	mov	r1, r7
 80080b8:	4680      	mov	r8, r0
 80080ba:	2300      	movs	r3, #0
 80080bc:	220a      	movs	r2, #10
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 fa26 	bl	8008510 <__multadd>
 80080c4:	4607      	mov	r7, r0
 80080c6:	e7f1      	b.n	80080ac <_dtoa_r+0xb04>
 80080c8:	9b03      	ldr	r3, [sp, #12]
 80080ca:	9302      	str	r3, [sp, #8]
 80080cc:	9d01      	ldr	r5, [sp, #4]
 80080ce:	ee18 0a10 	vmov	r0, s16
 80080d2:	4631      	mov	r1, r6
 80080d4:	f7ff f9dc 	bl	8007490 <quorem>
 80080d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080dc:	9b01      	ldr	r3, [sp, #4]
 80080de:	f805 ab01 	strb.w	sl, [r5], #1
 80080e2:	1aea      	subs	r2, r5, r3
 80080e4:	9b02      	ldr	r3, [sp, #8]
 80080e6:	4293      	cmp	r3, r2
 80080e8:	dd09      	ble.n	80080fe <_dtoa_r+0xb56>
 80080ea:	ee18 1a10 	vmov	r1, s16
 80080ee:	2300      	movs	r3, #0
 80080f0:	220a      	movs	r2, #10
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 fa0c 	bl	8008510 <__multadd>
 80080f8:	ee08 0a10 	vmov	s16, r0
 80080fc:	e7e7      	b.n	80080ce <_dtoa_r+0xb26>
 80080fe:	9b02      	ldr	r3, [sp, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	bfc8      	it	gt
 8008104:	461d      	movgt	r5, r3
 8008106:	9b01      	ldr	r3, [sp, #4]
 8008108:	bfd8      	it	le
 800810a:	2501      	movle	r5, #1
 800810c:	441d      	add	r5, r3
 800810e:	f04f 0800 	mov.w	r8, #0
 8008112:	ee18 1a10 	vmov	r1, s16
 8008116:	2201      	movs	r2, #1
 8008118:	4620      	mov	r0, r4
 800811a:	f000 fba9 	bl	8008870 <__lshift>
 800811e:	4631      	mov	r1, r6
 8008120:	ee08 0a10 	vmov	s16, r0
 8008124:	f000 fc14 	bl	8008950 <__mcmp>
 8008128:	2800      	cmp	r0, #0
 800812a:	dc91      	bgt.n	8008050 <_dtoa_r+0xaa8>
 800812c:	d102      	bne.n	8008134 <_dtoa_r+0xb8c>
 800812e:	f01a 0f01 	tst.w	sl, #1
 8008132:	d18d      	bne.n	8008050 <_dtoa_r+0xaa8>
 8008134:	462b      	mov	r3, r5
 8008136:	461d      	mov	r5, r3
 8008138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800813c:	2a30      	cmp	r2, #48	; 0x30
 800813e:	d0fa      	beq.n	8008136 <_dtoa_r+0xb8e>
 8008140:	e6d7      	b.n	8007ef2 <_dtoa_r+0x94a>
 8008142:	9a01      	ldr	r2, [sp, #4]
 8008144:	429a      	cmp	r2, r3
 8008146:	d184      	bne.n	8008052 <_dtoa_r+0xaaa>
 8008148:	9b00      	ldr	r3, [sp, #0]
 800814a:	3301      	adds	r3, #1
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	2331      	movs	r3, #49	; 0x31
 8008150:	7013      	strb	r3, [r2, #0]
 8008152:	e6ce      	b.n	8007ef2 <_dtoa_r+0x94a>
 8008154:	4b09      	ldr	r3, [pc, #36]	; (800817c <_dtoa_r+0xbd4>)
 8008156:	f7ff ba95 	b.w	8007684 <_dtoa_r+0xdc>
 800815a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800815c:	2b00      	cmp	r3, #0
 800815e:	f47f aa6e 	bne.w	800763e <_dtoa_r+0x96>
 8008162:	4b07      	ldr	r3, [pc, #28]	; (8008180 <_dtoa_r+0xbd8>)
 8008164:	f7ff ba8e 	b.w	8007684 <_dtoa_r+0xdc>
 8008168:	9b02      	ldr	r3, [sp, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	dcae      	bgt.n	80080cc <_dtoa_r+0xb24>
 800816e:	9b06      	ldr	r3, [sp, #24]
 8008170:	2b02      	cmp	r3, #2
 8008172:	f73f aea8 	bgt.w	8007ec6 <_dtoa_r+0x91e>
 8008176:	e7a9      	b.n	80080cc <_dtoa_r+0xb24>
 8008178:	080099db 	.word	0x080099db
 800817c:	080098fc 	.word	0x080098fc
 8008180:	0800995c 	.word	0x0800995c

08008184 <__sflush_r>:
 8008184:	898a      	ldrh	r2, [r1, #12]
 8008186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818a:	4605      	mov	r5, r0
 800818c:	0710      	lsls	r0, r2, #28
 800818e:	460c      	mov	r4, r1
 8008190:	d458      	bmi.n	8008244 <__sflush_r+0xc0>
 8008192:	684b      	ldr	r3, [r1, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	dc05      	bgt.n	80081a4 <__sflush_r+0x20>
 8008198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800819a:	2b00      	cmp	r3, #0
 800819c:	dc02      	bgt.n	80081a4 <__sflush_r+0x20>
 800819e:	2000      	movs	r0, #0
 80081a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081a6:	2e00      	cmp	r6, #0
 80081a8:	d0f9      	beq.n	800819e <__sflush_r+0x1a>
 80081aa:	2300      	movs	r3, #0
 80081ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081b0:	682f      	ldr	r7, [r5, #0]
 80081b2:	602b      	str	r3, [r5, #0]
 80081b4:	d032      	beq.n	800821c <__sflush_r+0x98>
 80081b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	075a      	lsls	r2, r3, #29
 80081bc:	d505      	bpl.n	80081ca <__sflush_r+0x46>
 80081be:	6863      	ldr	r3, [r4, #4]
 80081c0:	1ac0      	subs	r0, r0, r3
 80081c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081c4:	b10b      	cbz	r3, 80081ca <__sflush_r+0x46>
 80081c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081c8:	1ac0      	subs	r0, r0, r3
 80081ca:	2300      	movs	r3, #0
 80081cc:	4602      	mov	r2, r0
 80081ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081d0:	6a21      	ldr	r1, [r4, #32]
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b0      	blx	r6
 80081d6:	1c43      	adds	r3, r0, #1
 80081d8:	89a3      	ldrh	r3, [r4, #12]
 80081da:	d106      	bne.n	80081ea <__sflush_r+0x66>
 80081dc:	6829      	ldr	r1, [r5, #0]
 80081de:	291d      	cmp	r1, #29
 80081e0:	d82c      	bhi.n	800823c <__sflush_r+0xb8>
 80081e2:	4a2a      	ldr	r2, [pc, #168]	; (800828c <__sflush_r+0x108>)
 80081e4:	40ca      	lsrs	r2, r1
 80081e6:	07d6      	lsls	r6, r2, #31
 80081e8:	d528      	bpl.n	800823c <__sflush_r+0xb8>
 80081ea:	2200      	movs	r2, #0
 80081ec:	6062      	str	r2, [r4, #4]
 80081ee:	04d9      	lsls	r1, r3, #19
 80081f0:	6922      	ldr	r2, [r4, #16]
 80081f2:	6022      	str	r2, [r4, #0]
 80081f4:	d504      	bpl.n	8008200 <__sflush_r+0x7c>
 80081f6:	1c42      	adds	r2, r0, #1
 80081f8:	d101      	bne.n	80081fe <__sflush_r+0x7a>
 80081fa:	682b      	ldr	r3, [r5, #0]
 80081fc:	b903      	cbnz	r3, 8008200 <__sflush_r+0x7c>
 80081fe:	6560      	str	r0, [r4, #84]	; 0x54
 8008200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008202:	602f      	str	r7, [r5, #0]
 8008204:	2900      	cmp	r1, #0
 8008206:	d0ca      	beq.n	800819e <__sflush_r+0x1a>
 8008208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800820c:	4299      	cmp	r1, r3
 800820e:	d002      	beq.n	8008216 <__sflush_r+0x92>
 8008210:	4628      	mov	r0, r5
 8008212:	f000 fcb5 	bl	8008b80 <_free_r>
 8008216:	2000      	movs	r0, #0
 8008218:	6360      	str	r0, [r4, #52]	; 0x34
 800821a:	e7c1      	b.n	80081a0 <__sflush_r+0x1c>
 800821c:	6a21      	ldr	r1, [r4, #32]
 800821e:	2301      	movs	r3, #1
 8008220:	4628      	mov	r0, r5
 8008222:	47b0      	blx	r6
 8008224:	1c41      	adds	r1, r0, #1
 8008226:	d1c7      	bne.n	80081b8 <__sflush_r+0x34>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0c4      	beq.n	80081b8 <__sflush_r+0x34>
 800822e:	2b1d      	cmp	r3, #29
 8008230:	d001      	beq.n	8008236 <__sflush_r+0xb2>
 8008232:	2b16      	cmp	r3, #22
 8008234:	d101      	bne.n	800823a <__sflush_r+0xb6>
 8008236:	602f      	str	r7, [r5, #0]
 8008238:	e7b1      	b.n	800819e <__sflush_r+0x1a>
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	e7ad      	b.n	80081a0 <__sflush_r+0x1c>
 8008244:	690f      	ldr	r7, [r1, #16]
 8008246:	2f00      	cmp	r7, #0
 8008248:	d0a9      	beq.n	800819e <__sflush_r+0x1a>
 800824a:	0793      	lsls	r3, r2, #30
 800824c:	680e      	ldr	r6, [r1, #0]
 800824e:	bf08      	it	eq
 8008250:	694b      	ldreq	r3, [r1, #20]
 8008252:	600f      	str	r7, [r1, #0]
 8008254:	bf18      	it	ne
 8008256:	2300      	movne	r3, #0
 8008258:	eba6 0807 	sub.w	r8, r6, r7
 800825c:	608b      	str	r3, [r1, #8]
 800825e:	f1b8 0f00 	cmp.w	r8, #0
 8008262:	dd9c      	ble.n	800819e <__sflush_r+0x1a>
 8008264:	6a21      	ldr	r1, [r4, #32]
 8008266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008268:	4643      	mov	r3, r8
 800826a:	463a      	mov	r2, r7
 800826c:	4628      	mov	r0, r5
 800826e:	47b0      	blx	r6
 8008270:	2800      	cmp	r0, #0
 8008272:	dc06      	bgt.n	8008282 <__sflush_r+0xfe>
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800827a:	81a3      	strh	r3, [r4, #12]
 800827c:	f04f 30ff 	mov.w	r0, #4294967295
 8008280:	e78e      	b.n	80081a0 <__sflush_r+0x1c>
 8008282:	4407      	add	r7, r0
 8008284:	eba8 0800 	sub.w	r8, r8, r0
 8008288:	e7e9      	b.n	800825e <__sflush_r+0xda>
 800828a:	bf00      	nop
 800828c:	20400001 	.word	0x20400001

08008290 <_fflush_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	690b      	ldr	r3, [r1, #16]
 8008294:	4605      	mov	r5, r0
 8008296:	460c      	mov	r4, r1
 8008298:	b913      	cbnz	r3, 80082a0 <_fflush_r+0x10>
 800829a:	2500      	movs	r5, #0
 800829c:	4628      	mov	r0, r5
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	b118      	cbz	r0, 80082aa <_fflush_r+0x1a>
 80082a2:	6983      	ldr	r3, [r0, #24]
 80082a4:	b90b      	cbnz	r3, 80082aa <_fflush_r+0x1a>
 80082a6:	f7fe f9a5 	bl	80065f4 <__sinit>
 80082aa:	4b14      	ldr	r3, [pc, #80]	; (80082fc <_fflush_r+0x6c>)
 80082ac:	429c      	cmp	r4, r3
 80082ae:	d11b      	bne.n	80082e8 <_fflush_r+0x58>
 80082b0:	686c      	ldr	r4, [r5, #4]
 80082b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d0ef      	beq.n	800829a <_fflush_r+0xa>
 80082ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082bc:	07d0      	lsls	r0, r2, #31
 80082be:	d404      	bmi.n	80082ca <_fflush_r+0x3a>
 80082c0:	0599      	lsls	r1, r3, #22
 80082c2:	d402      	bmi.n	80082ca <_fflush_r+0x3a>
 80082c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082c6:	f7fe fa58 	bl	800677a <__retarget_lock_acquire_recursive>
 80082ca:	4628      	mov	r0, r5
 80082cc:	4621      	mov	r1, r4
 80082ce:	f7ff ff59 	bl	8008184 <__sflush_r>
 80082d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082d4:	07da      	lsls	r2, r3, #31
 80082d6:	4605      	mov	r5, r0
 80082d8:	d4e0      	bmi.n	800829c <_fflush_r+0xc>
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	059b      	lsls	r3, r3, #22
 80082de:	d4dd      	bmi.n	800829c <_fflush_r+0xc>
 80082e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082e2:	f7fe fa4b 	bl	800677c <__retarget_lock_release_recursive>
 80082e6:	e7d9      	b.n	800829c <_fflush_r+0xc>
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <_fflush_r+0x70>)
 80082ea:	429c      	cmp	r4, r3
 80082ec:	d101      	bne.n	80082f2 <_fflush_r+0x62>
 80082ee:	68ac      	ldr	r4, [r5, #8]
 80082f0:	e7df      	b.n	80082b2 <_fflush_r+0x22>
 80082f2:	4b04      	ldr	r3, [pc, #16]	; (8008304 <_fflush_r+0x74>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	bf08      	it	eq
 80082f8:	68ec      	ldreq	r4, [r5, #12]
 80082fa:	e7da      	b.n	80082b2 <_fflush_r+0x22>
 80082fc:	080098a8 	.word	0x080098a8
 8008300:	080098c8 	.word	0x080098c8
 8008304:	08009888 	.word	0x08009888

08008308 <fiprintf>:
 8008308:	b40e      	push	{r1, r2, r3}
 800830a:	b503      	push	{r0, r1, lr}
 800830c:	4601      	mov	r1, r0
 800830e:	ab03      	add	r3, sp, #12
 8008310:	4805      	ldr	r0, [pc, #20]	; (8008328 <fiprintf+0x20>)
 8008312:	f853 2b04 	ldr.w	r2, [r3], #4
 8008316:	6800      	ldr	r0, [r0, #0]
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	f000 fe03 	bl	8008f24 <_vfiprintf_r>
 800831e:	b002      	add	sp, #8
 8008320:	f85d eb04 	ldr.w	lr, [sp], #4
 8008324:	b003      	add	sp, #12
 8008326:	4770      	bx	lr
 8008328:	20000034 	.word	0x20000034

0800832c <_localeconv_r>:
 800832c:	4800      	ldr	r0, [pc, #0]	; (8008330 <_localeconv_r+0x4>)
 800832e:	4770      	bx	lr
 8008330:	20000188 	.word	0x20000188

08008334 <_lseek_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4d07      	ldr	r5, [pc, #28]	; (8008354 <_lseek_r+0x20>)
 8008338:	4604      	mov	r4, r0
 800833a:	4608      	mov	r0, r1
 800833c:	4611      	mov	r1, r2
 800833e:	2200      	movs	r2, #0
 8008340:	602a      	str	r2, [r5, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	f7fe f841 	bl	80063ca <_lseek>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_lseek_r+0x1e>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_lseek_r+0x1e>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	2000049c 	.word	0x2000049c

08008358 <__swhatbuf_r>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	460e      	mov	r6, r1
 800835c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008360:	2900      	cmp	r1, #0
 8008362:	b096      	sub	sp, #88	; 0x58
 8008364:	4614      	mov	r4, r2
 8008366:	461d      	mov	r5, r3
 8008368:	da08      	bge.n	800837c <__swhatbuf_r+0x24>
 800836a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	602a      	str	r2, [r5, #0]
 8008372:	061a      	lsls	r2, r3, #24
 8008374:	d410      	bmi.n	8008398 <__swhatbuf_r+0x40>
 8008376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800837a:	e00e      	b.n	800839a <__swhatbuf_r+0x42>
 800837c:	466a      	mov	r2, sp
 800837e:	f000 ff1b 	bl	80091b8 <_fstat_r>
 8008382:	2800      	cmp	r0, #0
 8008384:	dbf1      	blt.n	800836a <__swhatbuf_r+0x12>
 8008386:	9a01      	ldr	r2, [sp, #4]
 8008388:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800838c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008390:	425a      	negs	r2, r3
 8008392:	415a      	adcs	r2, r3
 8008394:	602a      	str	r2, [r5, #0]
 8008396:	e7ee      	b.n	8008376 <__swhatbuf_r+0x1e>
 8008398:	2340      	movs	r3, #64	; 0x40
 800839a:	2000      	movs	r0, #0
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	b016      	add	sp, #88	; 0x58
 80083a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080083a4 <__smakebuf_r>:
 80083a4:	898b      	ldrh	r3, [r1, #12]
 80083a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083a8:	079d      	lsls	r5, r3, #30
 80083aa:	4606      	mov	r6, r0
 80083ac:	460c      	mov	r4, r1
 80083ae:	d507      	bpl.n	80083c0 <__smakebuf_r+0x1c>
 80083b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	6123      	str	r3, [r4, #16]
 80083b8:	2301      	movs	r3, #1
 80083ba:	6163      	str	r3, [r4, #20]
 80083bc:	b002      	add	sp, #8
 80083be:	bd70      	pop	{r4, r5, r6, pc}
 80083c0:	ab01      	add	r3, sp, #4
 80083c2:	466a      	mov	r2, sp
 80083c4:	f7ff ffc8 	bl	8008358 <__swhatbuf_r>
 80083c8:	9900      	ldr	r1, [sp, #0]
 80083ca:	4605      	mov	r5, r0
 80083cc:	4630      	mov	r0, r6
 80083ce:	f7fe fa0d 	bl	80067ec <_malloc_r>
 80083d2:	b948      	cbnz	r0, 80083e8 <__smakebuf_r+0x44>
 80083d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d8:	059a      	lsls	r2, r3, #22
 80083da:	d4ef      	bmi.n	80083bc <__smakebuf_r+0x18>
 80083dc:	f023 0303 	bic.w	r3, r3, #3
 80083e0:	f043 0302 	orr.w	r3, r3, #2
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	e7e3      	b.n	80083b0 <__smakebuf_r+0xc>
 80083e8:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <__smakebuf_r+0x7c>)
 80083ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	6020      	str	r0, [r4, #0]
 80083f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f4:	81a3      	strh	r3, [r4, #12]
 80083f6:	9b00      	ldr	r3, [sp, #0]
 80083f8:	6163      	str	r3, [r4, #20]
 80083fa:	9b01      	ldr	r3, [sp, #4]
 80083fc:	6120      	str	r0, [r4, #16]
 80083fe:	b15b      	cbz	r3, 8008418 <__smakebuf_r+0x74>
 8008400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008404:	4630      	mov	r0, r6
 8008406:	f000 fee9 	bl	80091dc <_isatty_r>
 800840a:	b128      	cbz	r0, 8008418 <__smakebuf_r+0x74>
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	f023 0303 	bic.w	r3, r3, #3
 8008412:	f043 0301 	orr.w	r3, r3, #1
 8008416:	81a3      	strh	r3, [r4, #12]
 8008418:	89a0      	ldrh	r0, [r4, #12]
 800841a:	4305      	orrs	r5, r0
 800841c:	81a5      	strh	r5, [r4, #12]
 800841e:	e7cd      	b.n	80083bc <__smakebuf_r+0x18>
 8008420:	0800658d 	.word	0x0800658d

08008424 <malloc>:
 8008424:	4b02      	ldr	r3, [pc, #8]	; (8008430 <malloc+0xc>)
 8008426:	4601      	mov	r1, r0
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	f7fe b9df 	b.w	80067ec <_malloc_r>
 800842e:	bf00      	nop
 8008430:	20000034 	.word	0x20000034

08008434 <__malloc_lock>:
 8008434:	4801      	ldr	r0, [pc, #4]	; (800843c <__malloc_lock+0x8>)
 8008436:	f7fe b9a0 	b.w	800677a <__retarget_lock_acquire_recursive>
 800843a:	bf00      	nop
 800843c:	20000490 	.word	0x20000490

08008440 <__malloc_unlock>:
 8008440:	4801      	ldr	r0, [pc, #4]	; (8008448 <__malloc_unlock+0x8>)
 8008442:	f7fe b99b 	b.w	800677c <__retarget_lock_release_recursive>
 8008446:	bf00      	nop
 8008448:	20000490 	.word	0x20000490

0800844c <_Balloc>:
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008450:	4604      	mov	r4, r0
 8008452:	460d      	mov	r5, r1
 8008454:	b976      	cbnz	r6, 8008474 <_Balloc+0x28>
 8008456:	2010      	movs	r0, #16
 8008458:	f7ff ffe4 	bl	8008424 <malloc>
 800845c:	4602      	mov	r2, r0
 800845e:	6260      	str	r0, [r4, #36]	; 0x24
 8008460:	b920      	cbnz	r0, 800846c <_Balloc+0x20>
 8008462:	4b18      	ldr	r3, [pc, #96]	; (80084c4 <_Balloc+0x78>)
 8008464:	4818      	ldr	r0, [pc, #96]	; (80084c8 <_Balloc+0x7c>)
 8008466:	2166      	movs	r1, #102	; 0x66
 8008468:	f7fe ffe4 	bl	8007434 <__assert_func>
 800846c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008470:	6006      	str	r6, [r0, #0]
 8008472:	60c6      	str	r6, [r0, #12]
 8008474:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008476:	68f3      	ldr	r3, [r6, #12]
 8008478:	b183      	cbz	r3, 800849c <_Balloc+0x50>
 800847a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008482:	b9b8      	cbnz	r0, 80084b4 <_Balloc+0x68>
 8008484:	2101      	movs	r1, #1
 8008486:	fa01 f605 	lsl.w	r6, r1, r5
 800848a:	1d72      	adds	r2, r6, #5
 800848c:	0092      	lsls	r2, r2, #2
 800848e:	4620      	mov	r0, r4
 8008490:	f000 fb60 	bl	8008b54 <_calloc_r>
 8008494:	b160      	cbz	r0, 80084b0 <_Balloc+0x64>
 8008496:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800849a:	e00e      	b.n	80084ba <_Balloc+0x6e>
 800849c:	2221      	movs	r2, #33	; 0x21
 800849e:	2104      	movs	r1, #4
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 fb57 	bl	8008b54 <_calloc_r>
 80084a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084a8:	60f0      	str	r0, [r6, #12]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e4      	bne.n	800847a <_Balloc+0x2e>
 80084b0:	2000      	movs	r0, #0
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	6802      	ldr	r2, [r0, #0]
 80084b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084ba:	2300      	movs	r3, #0
 80084bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084c0:	e7f7      	b.n	80084b2 <_Balloc+0x66>
 80084c2:	bf00      	nop
 80084c4:	08009969 	.word	0x08009969
 80084c8:	080099ec 	.word	0x080099ec

080084cc <_Bfree>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084d0:	4605      	mov	r5, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	b976      	cbnz	r6, 80084f4 <_Bfree+0x28>
 80084d6:	2010      	movs	r0, #16
 80084d8:	f7ff ffa4 	bl	8008424 <malloc>
 80084dc:	4602      	mov	r2, r0
 80084de:	6268      	str	r0, [r5, #36]	; 0x24
 80084e0:	b920      	cbnz	r0, 80084ec <_Bfree+0x20>
 80084e2:	4b09      	ldr	r3, [pc, #36]	; (8008508 <_Bfree+0x3c>)
 80084e4:	4809      	ldr	r0, [pc, #36]	; (800850c <_Bfree+0x40>)
 80084e6:	218a      	movs	r1, #138	; 0x8a
 80084e8:	f7fe ffa4 	bl	8007434 <__assert_func>
 80084ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084f0:	6006      	str	r6, [r0, #0]
 80084f2:	60c6      	str	r6, [r0, #12]
 80084f4:	b13c      	cbz	r4, 8008506 <_Bfree+0x3a>
 80084f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084f8:	6862      	ldr	r2, [r4, #4]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008500:	6021      	str	r1, [r4, #0]
 8008502:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008506:	bd70      	pop	{r4, r5, r6, pc}
 8008508:	08009969 	.word	0x08009969
 800850c:	080099ec 	.word	0x080099ec

08008510 <__multadd>:
 8008510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008514:	690d      	ldr	r5, [r1, #16]
 8008516:	4607      	mov	r7, r0
 8008518:	460c      	mov	r4, r1
 800851a:	461e      	mov	r6, r3
 800851c:	f101 0c14 	add.w	ip, r1, #20
 8008520:	2000      	movs	r0, #0
 8008522:	f8dc 3000 	ldr.w	r3, [ip]
 8008526:	b299      	uxth	r1, r3
 8008528:	fb02 6101 	mla	r1, r2, r1, r6
 800852c:	0c1e      	lsrs	r6, r3, #16
 800852e:	0c0b      	lsrs	r3, r1, #16
 8008530:	fb02 3306 	mla	r3, r2, r6, r3
 8008534:	b289      	uxth	r1, r1
 8008536:	3001      	adds	r0, #1
 8008538:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800853c:	4285      	cmp	r5, r0
 800853e:	f84c 1b04 	str.w	r1, [ip], #4
 8008542:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008546:	dcec      	bgt.n	8008522 <__multadd+0x12>
 8008548:	b30e      	cbz	r6, 800858e <__multadd+0x7e>
 800854a:	68a3      	ldr	r3, [r4, #8]
 800854c:	42ab      	cmp	r3, r5
 800854e:	dc19      	bgt.n	8008584 <__multadd+0x74>
 8008550:	6861      	ldr	r1, [r4, #4]
 8008552:	4638      	mov	r0, r7
 8008554:	3101      	adds	r1, #1
 8008556:	f7ff ff79 	bl	800844c <_Balloc>
 800855a:	4680      	mov	r8, r0
 800855c:	b928      	cbnz	r0, 800856a <__multadd+0x5a>
 800855e:	4602      	mov	r2, r0
 8008560:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <__multadd+0x84>)
 8008562:	480d      	ldr	r0, [pc, #52]	; (8008598 <__multadd+0x88>)
 8008564:	21b5      	movs	r1, #181	; 0xb5
 8008566:	f7fe ff65 	bl	8007434 <__assert_func>
 800856a:	6922      	ldr	r2, [r4, #16]
 800856c:	3202      	adds	r2, #2
 800856e:	f104 010c 	add.w	r1, r4, #12
 8008572:	0092      	lsls	r2, r2, #2
 8008574:	300c      	adds	r0, #12
 8008576:	f7fe f902 	bl	800677e <memcpy>
 800857a:	4621      	mov	r1, r4
 800857c:	4638      	mov	r0, r7
 800857e:	f7ff ffa5 	bl	80084cc <_Bfree>
 8008582:	4644      	mov	r4, r8
 8008584:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008588:	3501      	adds	r5, #1
 800858a:	615e      	str	r6, [r3, #20]
 800858c:	6125      	str	r5, [r4, #16]
 800858e:	4620      	mov	r0, r4
 8008590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008594:	080099db 	.word	0x080099db
 8008598:	080099ec 	.word	0x080099ec

0800859c <__hi0bits>:
 800859c:	0c03      	lsrs	r3, r0, #16
 800859e:	041b      	lsls	r3, r3, #16
 80085a0:	b9d3      	cbnz	r3, 80085d8 <__hi0bits+0x3c>
 80085a2:	0400      	lsls	r0, r0, #16
 80085a4:	2310      	movs	r3, #16
 80085a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80085aa:	bf04      	itt	eq
 80085ac:	0200      	lsleq	r0, r0, #8
 80085ae:	3308      	addeq	r3, #8
 80085b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80085b4:	bf04      	itt	eq
 80085b6:	0100      	lsleq	r0, r0, #4
 80085b8:	3304      	addeq	r3, #4
 80085ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80085be:	bf04      	itt	eq
 80085c0:	0080      	lsleq	r0, r0, #2
 80085c2:	3302      	addeq	r3, #2
 80085c4:	2800      	cmp	r0, #0
 80085c6:	db05      	blt.n	80085d4 <__hi0bits+0x38>
 80085c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80085cc:	f103 0301 	add.w	r3, r3, #1
 80085d0:	bf08      	it	eq
 80085d2:	2320      	moveq	r3, #32
 80085d4:	4618      	mov	r0, r3
 80085d6:	4770      	bx	lr
 80085d8:	2300      	movs	r3, #0
 80085da:	e7e4      	b.n	80085a6 <__hi0bits+0xa>

080085dc <__lo0bits>:
 80085dc:	6803      	ldr	r3, [r0, #0]
 80085de:	f013 0207 	ands.w	r2, r3, #7
 80085e2:	4601      	mov	r1, r0
 80085e4:	d00b      	beq.n	80085fe <__lo0bits+0x22>
 80085e6:	07da      	lsls	r2, r3, #31
 80085e8:	d423      	bmi.n	8008632 <__lo0bits+0x56>
 80085ea:	0798      	lsls	r0, r3, #30
 80085ec:	bf49      	itett	mi
 80085ee:	085b      	lsrmi	r3, r3, #1
 80085f0:	089b      	lsrpl	r3, r3, #2
 80085f2:	2001      	movmi	r0, #1
 80085f4:	600b      	strmi	r3, [r1, #0]
 80085f6:	bf5c      	itt	pl
 80085f8:	600b      	strpl	r3, [r1, #0]
 80085fa:	2002      	movpl	r0, #2
 80085fc:	4770      	bx	lr
 80085fe:	b298      	uxth	r0, r3
 8008600:	b9a8      	cbnz	r0, 800862e <__lo0bits+0x52>
 8008602:	0c1b      	lsrs	r3, r3, #16
 8008604:	2010      	movs	r0, #16
 8008606:	b2da      	uxtb	r2, r3
 8008608:	b90a      	cbnz	r2, 800860e <__lo0bits+0x32>
 800860a:	3008      	adds	r0, #8
 800860c:	0a1b      	lsrs	r3, r3, #8
 800860e:	071a      	lsls	r2, r3, #28
 8008610:	bf04      	itt	eq
 8008612:	091b      	lsreq	r3, r3, #4
 8008614:	3004      	addeq	r0, #4
 8008616:	079a      	lsls	r2, r3, #30
 8008618:	bf04      	itt	eq
 800861a:	089b      	lsreq	r3, r3, #2
 800861c:	3002      	addeq	r0, #2
 800861e:	07da      	lsls	r2, r3, #31
 8008620:	d403      	bmi.n	800862a <__lo0bits+0x4e>
 8008622:	085b      	lsrs	r3, r3, #1
 8008624:	f100 0001 	add.w	r0, r0, #1
 8008628:	d005      	beq.n	8008636 <__lo0bits+0x5a>
 800862a:	600b      	str	r3, [r1, #0]
 800862c:	4770      	bx	lr
 800862e:	4610      	mov	r0, r2
 8008630:	e7e9      	b.n	8008606 <__lo0bits+0x2a>
 8008632:	2000      	movs	r0, #0
 8008634:	4770      	bx	lr
 8008636:	2020      	movs	r0, #32
 8008638:	4770      	bx	lr
	...

0800863c <__i2b>:
 800863c:	b510      	push	{r4, lr}
 800863e:	460c      	mov	r4, r1
 8008640:	2101      	movs	r1, #1
 8008642:	f7ff ff03 	bl	800844c <_Balloc>
 8008646:	4602      	mov	r2, r0
 8008648:	b928      	cbnz	r0, 8008656 <__i2b+0x1a>
 800864a:	4b05      	ldr	r3, [pc, #20]	; (8008660 <__i2b+0x24>)
 800864c:	4805      	ldr	r0, [pc, #20]	; (8008664 <__i2b+0x28>)
 800864e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008652:	f7fe feef 	bl	8007434 <__assert_func>
 8008656:	2301      	movs	r3, #1
 8008658:	6144      	str	r4, [r0, #20]
 800865a:	6103      	str	r3, [r0, #16]
 800865c:	bd10      	pop	{r4, pc}
 800865e:	bf00      	nop
 8008660:	080099db 	.word	0x080099db
 8008664:	080099ec 	.word	0x080099ec

08008668 <__multiply>:
 8008668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	4691      	mov	r9, r2
 800866e:	690a      	ldr	r2, [r1, #16]
 8008670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008674:	429a      	cmp	r2, r3
 8008676:	bfb8      	it	lt
 8008678:	460b      	movlt	r3, r1
 800867a:	460c      	mov	r4, r1
 800867c:	bfbc      	itt	lt
 800867e:	464c      	movlt	r4, r9
 8008680:	4699      	movlt	r9, r3
 8008682:	6927      	ldr	r7, [r4, #16]
 8008684:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008688:	68a3      	ldr	r3, [r4, #8]
 800868a:	6861      	ldr	r1, [r4, #4]
 800868c:	eb07 060a 	add.w	r6, r7, sl
 8008690:	42b3      	cmp	r3, r6
 8008692:	b085      	sub	sp, #20
 8008694:	bfb8      	it	lt
 8008696:	3101      	addlt	r1, #1
 8008698:	f7ff fed8 	bl	800844c <_Balloc>
 800869c:	b930      	cbnz	r0, 80086ac <__multiply+0x44>
 800869e:	4602      	mov	r2, r0
 80086a0:	4b44      	ldr	r3, [pc, #272]	; (80087b4 <__multiply+0x14c>)
 80086a2:	4845      	ldr	r0, [pc, #276]	; (80087b8 <__multiply+0x150>)
 80086a4:	f240 115d 	movw	r1, #349	; 0x15d
 80086a8:	f7fe fec4 	bl	8007434 <__assert_func>
 80086ac:	f100 0514 	add.w	r5, r0, #20
 80086b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086b4:	462b      	mov	r3, r5
 80086b6:	2200      	movs	r2, #0
 80086b8:	4543      	cmp	r3, r8
 80086ba:	d321      	bcc.n	8008700 <__multiply+0x98>
 80086bc:	f104 0314 	add.w	r3, r4, #20
 80086c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086c4:	f109 0314 	add.w	r3, r9, #20
 80086c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086cc:	9202      	str	r2, [sp, #8]
 80086ce:	1b3a      	subs	r2, r7, r4
 80086d0:	3a15      	subs	r2, #21
 80086d2:	f022 0203 	bic.w	r2, r2, #3
 80086d6:	3204      	adds	r2, #4
 80086d8:	f104 0115 	add.w	r1, r4, #21
 80086dc:	428f      	cmp	r7, r1
 80086de:	bf38      	it	cc
 80086e0:	2204      	movcc	r2, #4
 80086e2:	9201      	str	r2, [sp, #4]
 80086e4:	9a02      	ldr	r2, [sp, #8]
 80086e6:	9303      	str	r3, [sp, #12]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d80c      	bhi.n	8008706 <__multiply+0x9e>
 80086ec:	2e00      	cmp	r6, #0
 80086ee:	dd03      	ble.n	80086f8 <__multiply+0x90>
 80086f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d05a      	beq.n	80087ae <__multiply+0x146>
 80086f8:	6106      	str	r6, [r0, #16]
 80086fa:	b005      	add	sp, #20
 80086fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008700:	f843 2b04 	str.w	r2, [r3], #4
 8008704:	e7d8      	b.n	80086b8 <__multiply+0x50>
 8008706:	f8b3 a000 	ldrh.w	sl, [r3]
 800870a:	f1ba 0f00 	cmp.w	sl, #0
 800870e:	d024      	beq.n	800875a <__multiply+0xf2>
 8008710:	f104 0e14 	add.w	lr, r4, #20
 8008714:	46a9      	mov	r9, r5
 8008716:	f04f 0c00 	mov.w	ip, #0
 800871a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800871e:	f8d9 1000 	ldr.w	r1, [r9]
 8008722:	fa1f fb82 	uxth.w	fp, r2
 8008726:	b289      	uxth	r1, r1
 8008728:	fb0a 110b 	mla	r1, sl, fp, r1
 800872c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008730:	f8d9 2000 	ldr.w	r2, [r9]
 8008734:	4461      	add	r1, ip
 8008736:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800873a:	fb0a c20b 	mla	r2, sl, fp, ip
 800873e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008742:	b289      	uxth	r1, r1
 8008744:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008748:	4577      	cmp	r7, lr
 800874a:	f849 1b04 	str.w	r1, [r9], #4
 800874e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008752:	d8e2      	bhi.n	800871a <__multiply+0xb2>
 8008754:	9a01      	ldr	r2, [sp, #4]
 8008756:	f845 c002 	str.w	ip, [r5, r2]
 800875a:	9a03      	ldr	r2, [sp, #12]
 800875c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008760:	3304      	adds	r3, #4
 8008762:	f1b9 0f00 	cmp.w	r9, #0
 8008766:	d020      	beq.n	80087aa <__multiply+0x142>
 8008768:	6829      	ldr	r1, [r5, #0]
 800876a:	f104 0c14 	add.w	ip, r4, #20
 800876e:	46ae      	mov	lr, r5
 8008770:	f04f 0a00 	mov.w	sl, #0
 8008774:	f8bc b000 	ldrh.w	fp, [ip]
 8008778:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800877c:	fb09 220b 	mla	r2, r9, fp, r2
 8008780:	4492      	add	sl, r2
 8008782:	b289      	uxth	r1, r1
 8008784:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008788:	f84e 1b04 	str.w	r1, [lr], #4
 800878c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008790:	f8be 1000 	ldrh.w	r1, [lr]
 8008794:	0c12      	lsrs	r2, r2, #16
 8008796:	fb09 1102 	mla	r1, r9, r2, r1
 800879a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800879e:	4567      	cmp	r7, ip
 80087a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087a4:	d8e6      	bhi.n	8008774 <__multiply+0x10c>
 80087a6:	9a01      	ldr	r2, [sp, #4]
 80087a8:	50a9      	str	r1, [r5, r2]
 80087aa:	3504      	adds	r5, #4
 80087ac:	e79a      	b.n	80086e4 <__multiply+0x7c>
 80087ae:	3e01      	subs	r6, #1
 80087b0:	e79c      	b.n	80086ec <__multiply+0x84>
 80087b2:	bf00      	nop
 80087b4:	080099db 	.word	0x080099db
 80087b8:	080099ec 	.word	0x080099ec

080087bc <__pow5mult>:
 80087bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087c0:	4615      	mov	r5, r2
 80087c2:	f012 0203 	ands.w	r2, r2, #3
 80087c6:	4606      	mov	r6, r0
 80087c8:	460f      	mov	r7, r1
 80087ca:	d007      	beq.n	80087dc <__pow5mult+0x20>
 80087cc:	4c25      	ldr	r4, [pc, #148]	; (8008864 <__pow5mult+0xa8>)
 80087ce:	3a01      	subs	r2, #1
 80087d0:	2300      	movs	r3, #0
 80087d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087d6:	f7ff fe9b 	bl	8008510 <__multadd>
 80087da:	4607      	mov	r7, r0
 80087dc:	10ad      	asrs	r5, r5, #2
 80087de:	d03d      	beq.n	800885c <__pow5mult+0xa0>
 80087e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087e2:	b97c      	cbnz	r4, 8008804 <__pow5mult+0x48>
 80087e4:	2010      	movs	r0, #16
 80087e6:	f7ff fe1d 	bl	8008424 <malloc>
 80087ea:	4602      	mov	r2, r0
 80087ec:	6270      	str	r0, [r6, #36]	; 0x24
 80087ee:	b928      	cbnz	r0, 80087fc <__pow5mult+0x40>
 80087f0:	4b1d      	ldr	r3, [pc, #116]	; (8008868 <__pow5mult+0xac>)
 80087f2:	481e      	ldr	r0, [pc, #120]	; (800886c <__pow5mult+0xb0>)
 80087f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80087f8:	f7fe fe1c 	bl	8007434 <__assert_func>
 80087fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008800:	6004      	str	r4, [r0, #0]
 8008802:	60c4      	str	r4, [r0, #12]
 8008804:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800880c:	b94c      	cbnz	r4, 8008822 <__pow5mult+0x66>
 800880e:	f240 2171 	movw	r1, #625	; 0x271
 8008812:	4630      	mov	r0, r6
 8008814:	f7ff ff12 	bl	800863c <__i2b>
 8008818:	2300      	movs	r3, #0
 800881a:	f8c8 0008 	str.w	r0, [r8, #8]
 800881e:	4604      	mov	r4, r0
 8008820:	6003      	str	r3, [r0, #0]
 8008822:	f04f 0900 	mov.w	r9, #0
 8008826:	07eb      	lsls	r3, r5, #31
 8008828:	d50a      	bpl.n	8008840 <__pow5mult+0x84>
 800882a:	4639      	mov	r1, r7
 800882c:	4622      	mov	r2, r4
 800882e:	4630      	mov	r0, r6
 8008830:	f7ff ff1a 	bl	8008668 <__multiply>
 8008834:	4639      	mov	r1, r7
 8008836:	4680      	mov	r8, r0
 8008838:	4630      	mov	r0, r6
 800883a:	f7ff fe47 	bl	80084cc <_Bfree>
 800883e:	4647      	mov	r7, r8
 8008840:	106d      	asrs	r5, r5, #1
 8008842:	d00b      	beq.n	800885c <__pow5mult+0xa0>
 8008844:	6820      	ldr	r0, [r4, #0]
 8008846:	b938      	cbnz	r0, 8008858 <__pow5mult+0x9c>
 8008848:	4622      	mov	r2, r4
 800884a:	4621      	mov	r1, r4
 800884c:	4630      	mov	r0, r6
 800884e:	f7ff ff0b 	bl	8008668 <__multiply>
 8008852:	6020      	str	r0, [r4, #0]
 8008854:	f8c0 9000 	str.w	r9, [r0]
 8008858:	4604      	mov	r4, r0
 800885a:	e7e4      	b.n	8008826 <__pow5mult+0x6a>
 800885c:	4638      	mov	r0, r7
 800885e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008862:	bf00      	nop
 8008864:	08009b38 	.word	0x08009b38
 8008868:	08009969 	.word	0x08009969
 800886c:	080099ec 	.word	0x080099ec

08008870 <__lshift>:
 8008870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008874:	460c      	mov	r4, r1
 8008876:	6849      	ldr	r1, [r1, #4]
 8008878:	6923      	ldr	r3, [r4, #16]
 800887a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800887e:	68a3      	ldr	r3, [r4, #8]
 8008880:	4607      	mov	r7, r0
 8008882:	4691      	mov	r9, r2
 8008884:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008888:	f108 0601 	add.w	r6, r8, #1
 800888c:	42b3      	cmp	r3, r6
 800888e:	db0b      	blt.n	80088a8 <__lshift+0x38>
 8008890:	4638      	mov	r0, r7
 8008892:	f7ff fddb 	bl	800844c <_Balloc>
 8008896:	4605      	mov	r5, r0
 8008898:	b948      	cbnz	r0, 80088ae <__lshift+0x3e>
 800889a:	4602      	mov	r2, r0
 800889c:	4b2a      	ldr	r3, [pc, #168]	; (8008948 <__lshift+0xd8>)
 800889e:	482b      	ldr	r0, [pc, #172]	; (800894c <__lshift+0xdc>)
 80088a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80088a4:	f7fe fdc6 	bl	8007434 <__assert_func>
 80088a8:	3101      	adds	r1, #1
 80088aa:	005b      	lsls	r3, r3, #1
 80088ac:	e7ee      	b.n	800888c <__lshift+0x1c>
 80088ae:	2300      	movs	r3, #0
 80088b0:	f100 0114 	add.w	r1, r0, #20
 80088b4:	f100 0210 	add.w	r2, r0, #16
 80088b8:	4618      	mov	r0, r3
 80088ba:	4553      	cmp	r3, sl
 80088bc:	db37      	blt.n	800892e <__lshift+0xbe>
 80088be:	6920      	ldr	r0, [r4, #16]
 80088c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088c4:	f104 0314 	add.w	r3, r4, #20
 80088c8:	f019 091f 	ands.w	r9, r9, #31
 80088cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80088d4:	d02f      	beq.n	8008936 <__lshift+0xc6>
 80088d6:	f1c9 0e20 	rsb	lr, r9, #32
 80088da:	468a      	mov	sl, r1
 80088dc:	f04f 0c00 	mov.w	ip, #0
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	fa02 f209 	lsl.w	r2, r2, r9
 80088e6:	ea42 020c 	orr.w	r2, r2, ip
 80088ea:	f84a 2b04 	str.w	r2, [sl], #4
 80088ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80088f2:	4298      	cmp	r0, r3
 80088f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80088f8:	d8f2      	bhi.n	80088e0 <__lshift+0x70>
 80088fa:	1b03      	subs	r3, r0, r4
 80088fc:	3b15      	subs	r3, #21
 80088fe:	f023 0303 	bic.w	r3, r3, #3
 8008902:	3304      	adds	r3, #4
 8008904:	f104 0215 	add.w	r2, r4, #21
 8008908:	4290      	cmp	r0, r2
 800890a:	bf38      	it	cc
 800890c:	2304      	movcc	r3, #4
 800890e:	f841 c003 	str.w	ip, [r1, r3]
 8008912:	f1bc 0f00 	cmp.w	ip, #0
 8008916:	d001      	beq.n	800891c <__lshift+0xac>
 8008918:	f108 0602 	add.w	r6, r8, #2
 800891c:	3e01      	subs	r6, #1
 800891e:	4638      	mov	r0, r7
 8008920:	612e      	str	r6, [r5, #16]
 8008922:	4621      	mov	r1, r4
 8008924:	f7ff fdd2 	bl	80084cc <_Bfree>
 8008928:	4628      	mov	r0, r5
 800892a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008932:	3301      	adds	r3, #1
 8008934:	e7c1      	b.n	80088ba <__lshift+0x4a>
 8008936:	3904      	subs	r1, #4
 8008938:	f853 2b04 	ldr.w	r2, [r3], #4
 800893c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008940:	4298      	cmp	r0, r3
 8008942:	d8f9      	bhi.n	8008938 <__lshift+0xc8>
 8008944:	e7ea      	b.n	800891c <__lshift+0xac>
 8008946:	bf00      	nop
 8008948:	080099db 	.word	0x080099db
 800894c:	080099ec 	.word	0x080099ec

08008950 <__mcmp>:
 8008950:	b530      	push	{r4, r5, lr}
 8008952:	6902      	ldr	r2, [r0, #16]
 8008954:	690c      	ldr	r4, [r1, #16]
 8008956:	1b12      	subs	r2, r2, r4
 8008958:	d10e      	bne.n	8008978 <__mcmp+0x28>
 800895a:	f100 0314 	add.w	r3, r0, #20
 800895e:	3114      	adds	r1, #20
 8008960:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008964:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008968:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800896c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008970:	42a5      	cmp	r5, r4
 8008972:	d003      	beq.n	800897c <__mcmp+0x2c>
 8008974:	d305      	bcc.n	8008982 <__mcmp+0x32>
 8008976:	2201      	movs	r2, #1
 8008978:	4610      	mov	r0, r2
 800897a:	bd30      	pop	{r4, r5, pc}
 800897c:	4283      	cmp	r3, r0
 800897e:	d3f3      	bcc.n	8008968 <__mcmp+0x18>
 8008980:	e7fa      	b.n	8008978 <__mcmp+0x28>
 8008982:	f04f 32ff 	mov.w	r2, #4294967295
 8008986:	e7f7      	b.n	8008978 <__mcmp+0x28>

08008988 <__mdiff>:
 8008988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800898c:	460c      	mov	r4, r1
 800898e:	4606      	mov	r6, r0
 8008990:	4611      	mov	r1, r2
 8008992:	4620      	mov	r0, r4
 8008994:	4690      	mov	r8, r2
 8008996:	f7ff ffdb 	bl	8008950 <__mcmp>
 800899a:	1e05      	subs	r5, r0, #0
 800899c:	d110      	bne.n	80089c0 <__mdiff+0x38>
 800899e:	4629      	mov	r1, r5
 80089a0:	4630      	mov	r0, r6
 80089a2:	f7ff fd53 	bl	800844c <_Balloc>
 80089a6:	b930      	cbnz	r0, 80089b6 <__mdiff+0x2e>
 80089a8:	4b3a      	ldr	r3, [pc, #232]	; (8008a94 <__mdiff+0x10c>)
 80089aa:	4602      	mov	r2, r0
 80089ac:	f240 2132 	movw	r1, #562	; 0x232
 80089b0:	4839      	ldr	r0, [pc, #228]	; (8008a98 <__mdiff+0x110>)
 80089b2:	f7fe fd3f 	bl	8007434 <__assert_func>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c0:	bfa4      	itt	ge
 80089c2:	4643      	movge	r3, r8
 80089c4:	46a0      	movge	r8, r4
 80089c6:	4630      	mov	r0, r6
 80089c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80089cc:	bfa6      	itte	ge
 80089ce:	461c      	movge	r4, r3
 80089d0:	2500      	movge	r5, #0
 80089d2:	2501      	movlt	r5, #1
 80089d4:	f7ff fd3a 	bl	800844c <_Balloc>
 80089d8:	b920      	cbnz	r0, 80089e4 <__mdiff+0x5c>
 80089da:	4b2e      	ldr	r3, [pc, #184]	; (8008a94 <__mdiff+0x10c>)
 80089dc:	4602      	mov	r2, r0
 80089de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80089e2:	e7e5      	b.n	80089b0 <__mdiff+0x28>
 80089e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80089e8:	6926      	ldr	r6, [r4, #16]
 80089ea:	60c5      	str	r5, [r0, #12]
 80089ec:	f104 0914 	add.w	r9, r4, #20
 80089f0:	f108 0514 	add.w	r5, r8, #20
 80089f4:	f100 0e14 	add.w	lr, r0, #20
 80089f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80089fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a00:	f108 0210 	add.w	r2, r8, #16
 8008a04:	46f2      	mov	sl, lr
 8008a06:	2100      	movs	r1, #0
 8008a08:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a10:	fa1f f883 	uxth.w	r8, r3
 8008a14:	fa11 f18b 	uxtah	r1, r1, fp
 8008a18:	0c1b      	lsrs	r3, r3, #16
 8008a1a:	eba1 0808 	sub.w	r8, r1, r8
 8008a1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a26:	fa1f f888 	uxth.w	r8, r8
 8008a2a:	1419      	asrs	r1, r3, #16
 8008a2c:	454e      	cmp	r6, r9
 8008a2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a32:	f84a 3b04 	str.w	r3, [sl], #4
 8008a36:	d8e7      	bhi.n	8008a08 <__mdiff+0x80>
 8008a38:	1b33      	subs	r3, r6, r4
 8008a3a:	3b15      	subs	r3, #21
 8008a3c:	f023 0303 	bic.w	r3, r3, #3
 8008a40:	3304      	adds	r3, #4
 8008a42:	3415      	adds	r4, #21
 8008a44:	42a6      	cmp	r6, r4
 8008a46:	bf38      	it	cc
 8008a48:	2304      	movcc	r3, #4
 8008a4a:	441d      	add	r5, r3
 8008a4c:	4473      	add	r3, lr
 8008a4e:	469e      	mov	lr, r3
 8008a50:	462e      	mov	r6, r5
 8008a52:	4566      	cmp	r6, ip
 8008a54:	d30e      	bcc.n	8008a74 <__mdiff+0xec>
 8008a56:	f10c 0203 	add.w	r2, ip, #3
 8008a5a:	1b52      	subs	r2, r2, r5
 8008a5c:	f022 0203 	bic.w	r2, r2, #3
 8008a60:	3d03      	subs	r5, #3
 8008a62:	45ac      	cmp	ip, r5
 8008a64:	bf38      	it	cc
 8008a66:	2200      	movcc	r2, #0
 8008a68:	441a      	add	r2, r3
 8008a6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008a6e:	b17b      	cbz	r3, 8008a90 <__mdiff+0x108>
 8008a70:	6107      	str	r7, [r0, #16]
 8008a72:	e7a3      	b.n	80089bc <__mdiff+0x34>
 8008a74:	f856 8b04 	ldr.w	r8, [r6], #4
 8008a78:	fa11 f288 	uxtah	r2, r1, r8
 8008a7c:	1414      	asrs	r4, r2, #16
 8008a7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a82:	b292      	uxth	r2, r2
 8008a84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a88:	f84e 2b04 	str.w	r2, [lr], #4
 8008a8c:	1421      	asrs	r1, r4, #16
 8008a8e:	e7e0      	b.n	8008a52 <__mdiff+0xca>
 8008a90:	3f01      	subs	r7, #1
 8008a92:	e7ea      	b.n	8008a6a <__mdiff+0xe2>
 8008a94:	080099db 	.word	0x080099db
 8008a98:	080099ec 	.word	0x080099ec

08008a9c <__d2b>:
 8008a9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008aa0:	4689      	mov	r9, r1
 8008aa2:	2101      	movs	r1, #1
 8008aa4:	ec57 6b10 	vmov	r6, r7, d0
 8008aa8:	4690      	mov	r8, r2
 8008aaa:	f7ff fccf 	bl	800844c <_Balloc>
 8008aae:	4604      	mov	r4, r0
 8008ab0:	b930      	cbnz	r0, 8008ac0 <__d2b+0x24>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	4b25      	ldr	r3, [pc, #148]	; (8008b4c <__d2b+0xb0>)
 8008ab6:	4826      	ldr	r0, [pc, #152]	; (8008b50 <__d2b+0xb4>)
 8008ab8:	f240 310a 	movw	r1, #778	; 0x30a
 8008abc:	f7fe fcba 	bl	8007434 <__assert_func>
 8008ac0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ac4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ac8:	bb35      	cbnz	r5, 8008b18 <__d2b+0x7c>
 8008aca:	2e00      	cmp	r6, #0
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	d028      	beq.n	8008b22 <__d2b+0x86>
 8008ad0:	4668      	mov	r0, sp
 8008ad2:	9600      	str	r6, [sp, #0]
 8008ad4:	f7ff fd82 	bl	80085dc <__lo0bits>
 8008ad8:	9900      	ldr	r1, [sp, #0]
 8008ada:	b300      	cbz	r0, 8008b1e <__d2b+0x82>
 8008adc:	9a01      	ldr	r2, [sp, #4]
 8008ade:	f1c0 0320 	rsb	r3, r0, #32
 8008ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae6:	430b      	orrs	r3, r1
 8008ae8:	40c2      	lsrs	r2, r0
 8008aea:	6163      	str	r3, [r4, #20]
 8008aec:	9201      	str	r2, [sp, #4]
 8008aee:	9b01      	ldr	r3, [sp, #4]
 8008af0:	61a3      	str	r3, [r4, #24]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	bf14      	ite	ne
 8008af6:	2202      	movne	r2, #2
 8008af8:	2201      	moveq	r2, #1
 8008afa:	6122      	str	r2, [r4, #16]
 8008afc:	b1d5      	cbz	r5, 8008b34 <__d2b+0x98>
 8008afe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b02:	4405      	add	r5, r0
 8008b04:	f8c9 5000 	str.w	r5, [r9]
 8008b08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b0c:	f8c8 0000 	str.w	r0, [r8]
 8008b10:	4620      	mov	r0, r4
 8008b12:	b003      	add	sp, #12
 8008b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b1c:	e7d5      	b.n	8008aca <__d2b+0x2e>
 8008b1e:	6161      	str	r1, [r4, #20]
 8008b20:	e7e5      	b.n	8008aee <__d2b+0x52>
 8008b22:	a801      	add	r0, sp, #4
 8008b24:	f7ff fd5a 	bl	80085dc <__lo0bits>
 8008b28:	9b01      	ldr	r3, [sp, #4]
 8008b2a:	6163      	str	r3, [r4, #20]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	6122      	str	r2, [r4, #16]
 8008b30:	3020      	adds	r0, #32
 8008b32:	e7e3      	b.n	8008afc <__d2b+0x60>
 8008b34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b3c:	f8c9 0000 	str.w	r0, [r9]
 8008b40:	6918      	ldr	r0, [r3, #16]
 8008b42:	f7ff fd2b 	bl	800859c <__hi0bits>
 8008b46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b4a:	e7df      	b.n	8008b0c <__d2b+0x70>
 8008b4c:	080099db 	.word	0x080099db
 8008b50:	080099ec 	.word	0x080099ec

08008b54 <_calloc_r>:
 8008b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b56:	fba1 2402 	umull	r2, r4, r1, r2
 8008b5a:	b94c      	cbnz	r4, 8008b70 <_calloc_r+0x1c>
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	9201      	str	r2, [sp, #4]
 8008b60:	f7fd fe44 	bl	80067ec <_malloc_r>
 8008b64:	9a01      	ldr	r2, [sp, #4]
 8008b66:	4605      	mov	r5, r0
 8008b68:	b930      	cbnz	r0, 8008b78 <_calloc_r+0x24>
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	b003      	add	sp, #12
 8008b6e:	bd30      	pop	{r4, r5, pc}
 8008b70:	220c      	movs	r2, #12
 8008b72:	6002      	str	r2, [r0, #0]
 8008b74:	2500      	movs	r5, #0
 8008b76:	e7f8      	b.n	8008b6a <_calloc_r+0x16>
 8008b78:	4621      	mov	r1, r4
 8008b7a:	f7fd fe0e 	bl	800679a <memset>
 8008b7e:	e7f4      	b.n	8008b6a <_calloc_r+0x16>

08008b80 <_free_r>:
 8008b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b82:	2900      	cmp	r1, #0
 8008b84:	d044      	beq.n	8008c10 <_free_r+0x90>
 8008b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b8a:	9001      	str	r0, [sp, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b92:	bfb8      	it	lt
 8008b94:	18e4      	addlt	r4, r4, r3
 8008b96:	f7ff fc4d 	bl	8008434 <__malloc_lock>
 8008b9a:	4a1e      	ldr	r2, [pc, #120]	; (8008c14 <_free_r+0x94>)
 8008b9c:	9801      	ldr	r0, [sp, #4]
 8008b9e:	6813      	ldr	r3, [r2, #0]
 8008ba0:	b933      	cbnz	r3, 8008bb0 <_free_r+0x30>
 8008ba2:	6063      	str	r3, [r4, #4]
 8008ba4:	6014      	str	r4, [r2, #0]
 8008ba6:	b003      	add	sp, #12
 8008ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bac:	f7ff bc48 	b.w	8008440 <__malloc_unlock>
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	d908      	bls.n	8008bc6 <_free_r+0x46>
 8008bb4:	6825      	ldr	r5, [r4, #0]
 8008bb6:	1961      	adds	r1, r4, r5
 8008bb8:	428b      	cmp	r3, r1
 8008bba:	bf01      	itttt	eq
 8008bbc:	6819      	ldreq	r1, [r3, #0]
 8008bbe:	685b      	ldreq	r3, [r3, #4]
 8008bc0:	1949      	addeq	r1, r1, r5
 8008bc2:	6021      	streq	r1, [r4, #0]
 8008bc4:	e7ed      	b.n	8008ba2 <_free_r+0x22>
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	b10b      	cbz	r3, 8008bd0 <_free_r+0x50>
 8008bcc:	42a3      	cmp	r3, r4
 8008bce:	d9fa      	bls.n	8008bc6 <_free_r+0x46>
 8008bd0:	6811      	ldr	r1, [r2, #0]
 8008bd2:	1855      	adds	r5, r2, r1
 8008bd4:	42a5      	cmp	r5, r4
 8008bd6:	d10b      	bne.n	8008bf0 <_free_r+0x70>
 8008bd8:	6824      	ldr	r4, [r4, #0]
 8008bda:	4421      	add	r1, r4
 8008bdc:	1854      	adds	r4, r2, r1
 8008bde:	42a3      	cmp	r3, r4
 8008be0:	6011      	str	r1, [r2, #0]
 8008be2:	d1e0      	bne.n	8008ba6 <_free_r+0x26>
 8008be4:	681c      	ldr	r4, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	6053      	str	r3, [r2, #4]
 8008bea:	4421      	add	r1, r4
 8008bec:	6011      	str	r1, [r2, #0]
 8008bee:	e7da      	b.n	8008ba6 <_free_r+0x26>
 8008bf0:	d902      	bls.n	8008bf8 <_free_r+0x78>
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	6003      	str	r3, [r0, #0]
 8008bf6:	e7d6      	b.n	8008ba6 <_free_r+0x26>
 8008bf8:	6825      	ldr	r5, [r4, #0]
 8008bfa:	1961      	adds	r1, r4, r5
 8008bfc:	428b      	cmp	r3, r1
 8008bfe:	bf04      	itt	eq
 8008c00:	6819      	ldreq	r1, [r3, #0]
 8008c02:	685b      	ldreq	r3, [r3, #4]
 8008c04:	6063      	str	r3, [r4, #4]
 8008c06:	bf04      	itt	eq
 8008c08:	1949      	addeq	r1, r1, r5
 8008c0a:	6021      	streq	r1, [r4, #0]
 8008c0c:	6054      	str	r4, [r2, #4]
 8008c0e:	e7ca      	b.n	8008ba6 <_free_r+0x26>
 8008c10:	b003      	add	sp, #12
 8008c12:	bd30      	pop	{r4, r5, pc}
 8008c14:	20000494 	.word	0x20000494

08008c18 <__ssputs_r>:
 8008c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c1c:	688e      	ldr	r6, [r1, #8]
 8008c1e:	429e      	cmp	r6, r3
 8008c20:	4682      	mov	sl, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	4690      	mov	r8, r2
 8008c26:	461f      	mov	r7, r3
 8008c28:	d838      	bhi.n	8008c9c <__ssputs_r+0x84>
 8008c2a:	898a      	ldrh	r2, [r1, #12]
 8008c2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c30:	d032      	beq.n	8008c98 <__ssputs_r+0x80>
 8008c32:	6825      	ldr	r5, [r4, #0]
 8008c34:	6909      	ldr	r1, [r1, #16]
 8008c36:	eba5 0901 	sub.w	r9, r5, r1
 8008c3a:	6965      	ldr	r5, [r4, #20]
 8008c3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c44:	3301      	adds	r3, #1
 8008c46:	444b      	add	r3, r9
 8008c48:	106d      	asrs	r5, r5, #1
 8008c4a:	429d      	cmp	r5, r3
 8008c4c:	bf38      	it	cc
 8008c4e:	461d      	movcc	r5, r3
 8008c50:	0553      	lsls	r3, r2, #21
 8008c52:	d531      	bpl.n	8008cb8 <__ssputs_r+0xa0>
 8008c54:	4629      	mov	r1, r5
 8008c56:	f7fd fdc9 	bl	80067ec <_malloc_r>
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	b950      	cbnz	r0, 8008c74 <__ssputs_r+0x5c>
 8008c5e:	230c      	movs	r3, #12
 8008c60:	f8ca 3000 	str.w	r3, [sl]
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6a:	81a3      	strh	r3, [r4, #12]
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c74:	6921      	ldr	r1, [r4, #16]
 8008c76:	464a      	mov	r2, r9
 8008c78:	f7fd fd81 	bl	800677e <memcpy>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	6126      	str	r6, [r4, #16]
 8008c8a:	6165      	str	r5, [r4, #20]
 8008c8c:	444e      	add	r6, r9
 8008c8e:	eba5 0509 	sub.w	r5, r5, r9
 8008c92:	6026      	str	r6, [r4, #0]
 8008c94:	60a5      	str	r5, [r4, #8]
 8008c96:	463e      	mov	r6, r7
 8008c98:	42be      	cmp	r6, r7
 8008c9a:	d900      	bls.n	8008c9e <__ssputs_r+0x86>
 8008c9c:	463e      	mov	r6, r7
 8008c9e:	6820      	ldr	r0, [r4, #0]
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	4641      	mov	r1, r8
 8008ca4:	f000 fabc 	bl	8009220 <memmove>
 8008ca8:	68a3      	ldr	r3, [r4, #8]
 8008caa:	1b9b      	subs	r3, r3, r6
 8008cac:	60a3      	str	r3, [r4, #8]
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	4433      	add	r3, r6
 8008cb2:	6023      	str	r3, [r4, #0]
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	e7db      	b.n	8008c70 <__ssputs_r+0x58>
 8008cb8:	462a      	mov	r2, r5
 8008cba:	f000 facb 	bl	8009254 <_realloc_r>
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d1e1      	bne.n	8008c88 <__ssputs_r+0x70>
 8008cc4:	6921      	ldr	r1, [r4, #16]
 8008cc6:	4650      	mov	r0, sl
 8008cc8:	f7ff ff5a 	bl	8008b80 <_free_r>
 8008ccc:	e7c7      	b.n	8008c5e <__ssputs_r+0x46>
	...

08008cd0 <_svfiprintf_r>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	4698      	mov	r8, r3
 8008cd6:	898b      	ldrh	r3, [r1, #12]
 8008cd8:	061b      	lsls	r3, r3, #24
 8008cda:	b09d      	sub	sp, #116	; 0x74
 8008cdc:	4607      	mov	r7, r0
 8008cde:	460d      	mov	r5, r1
 8008ce0:	4614      	mov	r4, r2
 8008ce2:	d50e      	bpl.n	8008d02 <_svfiprintf_r+0x32>
 8008ce4:	690b      	ldr	r3, [r1, #16]
 8008ce6:	b963      	cbnz	r3, 8008d02 <_svfiprintf_r+0x32>
 8008ce8:	2140      	movs	r1, #64	; 0x40
 8008cea:	f7fd fd7f 	bl	80067ec <_malloc_r>
 8008cee:	6028      	str	r0, [r5, #0]
 8008cf0:	6128      	str	r0, [r5, #16]
 8008cf2:	b920      	cbnz	r0, 8008cfe <_svfiprintf_r+0x2e>
 8008cf4:	230c      	movs	r3, #12
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	e0d1      	b.n	8008ea2 <_svfiprintf_r+0x1d2>
 8008cfe:	2340      	movs	r3, #64	; 0x40
 8008d00:	616b      	str	r3, [r5, #20]
 8008d02:	2300      	movs	r3, #0
 8008d04:	9309      	str	r3, [sp, #36]	; 0x24
 8008d06:	2320      	movs	r3, #32
 8008d08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d10:	2330      	movs	r3, #48	; 0x30
 8008d12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ebc <_svfiprintf_r+0x1ec>
 8008d16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d1a:	f04f 0901 	mov.w	r9, #1
 8008d1e:	4623      	mov	r3, r4
 8008d20:	469a      	mov	sl, r3
 8008d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d26:	b10a      	cbz	r2, 8008d2c <_svfiprintf_r+0x5c>
 8008d28:	2a25      	cmp	r2, #37	; 0x25
 8008d2a:	d1f9      	bne.n	8008d20 <_svfiprintf_r+0x50>
 8008d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d30:	d00b      	beq.n	8008d4a <_svfiprintf_r+0x7a>
 8008d32:	465b      	mov	r3, fp
 8008d34:	4622      	mov	r2, r4
 8008d36:	4629      	mov	r1, r5
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f7ff ff6d 	bl	8008c18 <__ssputs_r>
 8008d3e:	3001      	adds	r0, #1
 8008d40:	f000 80aa 	beq.w	8008e98 <_svfiprintf_r+0x1c8>
 8008d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d46:	445a      	add	r2, fp
 8008d48:	9209      	str	r2, [sp, #36]	; 0x24
 8008d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 80a2 	beq.w	8008e98 <_svfiprintf_r+0x1c8>
 8008d54:	2300      	movs	r3, #0
 8008d56:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d5e:	f10a 0a01 	add.w	sl, sl, #1
 8008d62:	9304      	str	r3, [sp, #16]
 8008d64:	9307      	str	r3, [sp, #28]
 8008d66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d6a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d6c:	4654      	mov	r4, sl
 8008d6e:	2205      	movs	r2, #5
 8008d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d74:	4851      	ldr	r0, [pc, #324]	; (8008ebc <_svfiprintf_r+0x1ec>)
 8008d76:	f7f7 fa33 	bl	80001e0 <memchr>
 8008d7a:	9a04      	ldr	r2, [sp, #16]
 8008d7c:	b9d8      	cbnz	r0, 8008db6 <_svfiprintf_r+0xe6>
 8008d7e:	06d0      	lsls	r0, r2, #27
 8008d80:	bf44      	itt	mi
 8008d82:	2320      	movmi	r3, #32
 8008d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d88:	0711      	lsls	r1, r2, #28
 8008d8a:	bf44      	itt	mi
 8008d8c:	232b      	movmi	r3, #43	; 0x2b
 8008d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d92:	f89a 3000 	ldrb.w	r3, [sl]
 8008d96:	2b2a      	cmp	r3, #42	; 0x2a
 8008d98:	d015      	beq.n	8008dc6 <_svfiprintf_r+0xf6>
 8008d9a:	9a07      	ldr	r2, [sp, #28]
 8008d9c:	4654      	mov	r4, sl
 8008d9e:	2000      	movs	r0, #0
 8008da0:	f04f 0c0a 	mov.w	ip, #10
 8008da4:	4621      	mov	r1, r4
 8008da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008daa:	3b30      	subs	r3, #48	; 0x30
 8008dac:	2b09      	cmp	r3, #9
 8008dae:	d94e      	bls.n	8008e4e <_svfiprintf_r+0x17e>
 8008db0:	b1b0      	cbz	r0, 8008de0 <_svfiprintf_r+0x110>
 8008db2:	9207      	str	r2, [sp, #28]
 8008db4:	e014      	b.n	8008de0 <_svfiprintf_r+0x110>
 8008db6:	eba0 0308 	sub.w	r3, r0, r8
 8008dba:	fa09 f303 	lsl.w	r3, r9, r3
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	9304      	str	r3, [sp, #16]
 8008dc2:	46a2      	mov	sl, r4
 8008dc4:	e7d2      	b.n	8008d6c <_svfiprintf_r+0x9c>
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	1d19      	adds	r1, r3, #4
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	9103      	str	r1, [sp, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bfbb      	ittet	lt
 8008dd2:	425b      	neglt	r3, r3
 8008dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8008dd8:	9307      	strge	r3, [sp, #28]
 8008dda:	9307      	strlt	r3, [sp, #28]
 8008ddc:	bfb8      	it	lt
 8008dde:	9204      	strlt	r2, [sp, #16]
 8008de0:	7823      	ldrb	r3, [r4, #0]
 8008de2:	2b2e      	cmp	r3, #46	; 0x2e
 8008de4:	d10c      	bne.n	8008e00 <_svfiprintf_r+0x130>
 8008de6:	7863      	ldrb	r3, [r4, #1]
 8008de8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dea:	d135      	bne.n	8008e58 <_svfiprintf_r+0x188>
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	1d1a      	adds	r2, r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	9203      	str	r2, [sp, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bfb8      	it	lt
 8008df8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dfc:	3402      	adds	r4, #2
 8008dfe:	9305      	str	r3, [sp, #20]
 8008e00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ecc <_svfiprintf_r+0x1fc>
 8008e04:	7821      	ldrb	r1, [r4, #0]
 8008e06:	2203      	movs	r2, #3
 8008e08:	4650      	mov	r0, sl
 8008e0a:	f7f7 f9e9 	bl	80001e0 <memchr>
 8008e0e:	b140      	cbz	r0, 8008e22 <_svfiprintf_r+0x152>
 8008e10:	2340      	movs	r3, #64	; 0x40
 8008e12:	eba0 000a 	sub.w	r0, r0, sl
 8008e16:	fa03 f000 	lsl.w	r0, r3, r0
 8008e1a:	9b04      	ldr	r3, [sp, #16]
 8008e1c:	4303      	orrs	r3, r0
 8008e1e:	3401      	adds	r4, #1
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e26:	4826      	ldr	r0, [pc, #152]	; (8008ec0 <_svfiprintf_r+0x1f0>)
 8008e28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e2c:	2206      	movs	r2, #6
 8008e2e:	f7f7 f9d7 	bl	80001e0 <memchr>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d038      	beq.n	8008ea8 <_svfiprintf_r+0x1d8>
 8008e36:	4b23      	ldr	r3, [pc, #140]	; (8008ec4 <_svfiprintf_r+0x1f4>)
 8008e38:	bb1b      	cbnz	r3, 8008e82 <_svfiprintf_r+0x1b2>
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	3307      	adds	r3, #7
 8008e3e:	f023 0307 	bic.w	r3, r3, #7
 8008e42:	3308      	adds	r3, #8
 8008e44:	9303      	str	r3, [sp, #12]
 8008e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e48:	4433      	add	r3, r6
 8008e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e4c:	e767      	b.n	8008d1e <_svfiprintf_r+0x4e>
 8008e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e52:	460c      	mov	r4, r1
 8008e54:	2001      	movs	r0, #1
 8008e56:	e7a5      	b.n	8008da4 <_svfiprintf_r+0xd4>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	3401      	adds	r4, #1
 8008e5c:	9305      	str	r3, [sp, #20]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	f04f 0c0a 	mov.w	ip, #10
 8008e64:	4620      	mov	r0, r4
 8008e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e6a:	3a30      	subs	r2, #48	; 0x30
 8008e6c:	2a09      	cmp	r2, #9
 8008e6e:	d903      	bls.n	8008e78 <_svfiprintf_r+0x1a8>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0c5      	beq.n	8008e00 <_svfiprintf_r+0x130>
 8008e74:	9105      	str	r1, [sp, #20]
 8008e76:	e7c3      	b.n	8008e00 <_svfiprintf_r+0x130>
 8008e78:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e7f0      	b.n	8008e64 <_svfiprintf_r+0x194>
 8008e82:	ab03      	add	r3, sp, #12
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	462a      	mov	r2, r5
 8008e88:	4b0f      	ldr	r3, [pc, #60]	; (8008ec8 <_svfiprintf_r+0x1f8>)
 8008e8a:	a904      	add	r1, sp, #16
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	f7fd fdc1 	bl	8006a14 <_printf_float>
 8008e92:	1c42      	adds	r2, r0, #1
 8008e94:	4606      	mov	r6, r0
 8008e96:	d1d6      	bne.n	8008e46 <_svfiprintf_r+0x176>
 8008e98:	89ab      	ldrh	r3, [r5, #12]
 8008e9a:	065b      	lsls	r3, r3, #25
 8008e9c:	f53f af2c 	bmi.w	8008cf8 <_svfiprintf_r+0x28>
 8008ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ea2:	b01d      	add	sp, #116	; 0x74
 8008ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea8:	ab03      	add	r3, sp, #12
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	462a      	mov	r2, r5
 8008eae:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <_svfiprintf_r+0x1f8>)
 8008eb0:	a904      	add	r1, sp, #16
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	f7fe f852 	bl	8006f5c <_printf_i>
 8008eb8:	e7eb      	b.n	8008e92 <_svfiprintf_r+0x1c2>
 8008eba:	bf00      	nop
 8008ebc:	08009b44 	.word	0x08009b44
 8008ec0:	08009b4e 	.word	0x08009b4e
 8008ec4:	08006a15 	.word	0x08006a15
 8008ec8:	08008c19 	.word	0x08008c19
 8008ecc:	08009b4a 	.word	0x08009b4a

08008ed0 <__sfputc_r>:
 8008ed0:	6893      	ldr	r3, [r2, #8]
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	b410      	push	{r4}
 8008ed8:	6093      	str	r3, [r2, #8]
 8008eda:	da08      	bge.n	8008eee <__sfputc_r+0x1e>
 8008edc:	6994      	ldr	r4, [r2, #24]
 8008ede:	42a3      	cmp	r3, r4
 8008ee0:	db01      	blt.n	8008ee6 <__sfputc_r+0x16>
 8008ee2:	290a      	cmp	r1, #10
 8008ee4:	d103      	bne.n	8008eee <__sfputc_r+0x1e>
 8008ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eea:	f7fe b9d1 	b.w	8007290 <__swbuf_r>
 8008eee:	6813      	ldr	r3, [r2, #0]
 8008ef0:	1c58      	adds	r0, r3, #1
 8008ef2:	6010      	str	r0, [r2, #0]
 8008ef4:	7019      	strb	r1, [r3, #0]
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <__sfputs_r>:
 8008efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f00:	4606      	mov	r6, r0
 8008f02:	460f      	mov	r7, r1
 8008f04:	4614      	mov	r4, r2
 8008f06:	18d5      	adds	r5, r2, r3
 8008f08:	42ac      	cmp	r4, r5
 8008f0a:	d101      	bne.n	8008f10 <__sfputs_r+0x12>
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	e007      	b.n	8008f20 <__sfputs_r+0x22>
 8008f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f14:	463a      	mov	r2, r7
 8008f16:	4630      	mov	r0, r6
 8008f18:	f7ff ffda 	bl	8008ed0 <__sfputc_r>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d1f3      	bne.n	8008f08 <__sfputs_r+0xa>
 8008f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f24 <_vfiprintf_r>:
 8008f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	460d      	mov	r5, r1
 8008f2a:	b09d      	sub	sp, #116	; 0x74
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	4698      	mov	r8, r3
 8008f30:	4606      	mov	r6, r0
 8008f32:	b118      	cbz	r0, 8008f3c <_vfiprintf_r+0x18>
 8008f34:	6983      	ldr	r3, [r0, #24]
 8008f36:	b90b      	cbnz	r3, 8008f3c <_vfiprintf_r+0x18>
 8008f38:	f7fd fb5c 	bl	80065f4 <__sinit>
 8008f3c:	4b89      	ldr	r3, [pc, #548]	; (8009164 <_vfiprintf_r+0x240>)
 8008f3e:	429d      	cmp	r5, r3
 8008f40:	d11b      	bne.n	8008f7a <_vfiprintf_r+0x56>
 8008f42:	6875      	ldr	r5, [r6, #4]
 8008f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f46:	07d9      	lsls	r1, r3, #31
 8008f48:	d405      	bmi.n	8008f56 <_vfiprintf_r+0x32>
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	059a      	lsls	r2, r3, #22
 8008f4e:	d402      	bmi.n	8008f56 <_vfiprintf_r+0x32>
 8008f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f52:	f7fd fc12 	bl	800677a <__retarget_lock_acquire_recursive>
 8008f56:	89ab      	ldrh	r3, [r5, #12]
 8008f58:	071b      	lsls	r3, r3, #28
 8008f5a:	d501      	bpl.n	8008f60 <_vfiprintf_r+0x3c>
 8008f5c:	692b      	ldr	r3, [r5, #16]
 8008f5e:	b9eb      	cbnz	r3, 8008f9c <_vfiprintf_r+0x78>
 8008f60:	4629      	mov	r1, r5
 8008f62:	4630      	mov	r0, r6
 8008f64:	f7fe f9f8 	bl	8007358 <__swsetup_r>
 8008f68:	b1c0      	cbz	r0, 8008f9c <_vfiprintf_r+0x78>
 8008f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f6c:	07dc      	lsls	r4, r3, #31
 8008f6e:	d50e      	bpl.n	8008f8e <_vfiprintf_r+0x6a>
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	b01d      	add	sp, #116	; 0x74
 8008f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f7a:	4b7b      	ldr	r3, [pc, #492]	; (8009168 <_vfiprintf_r+0x244>)
 8008f7c:	429d      	cmp	r5, r3
 8008f7e:	d101      	bne.n	8008f84 <_vfiprintf_r+0x60>
 8008f80:	68b5      	ldr	r5, [r6, #8]
 8008f82:	e7df      	b.n	8008f44 <_vfiprintf_r+0x20>
 8008f84:	4b79      	ldr	r3, [pc, #484]	; (800916c <_vfiprintf_r+0x248>)
 8008f86:	429d      	cmp	r5, r3
 8008f88:	bf08      	it	eq
 8008f8a:	68f5      	ldreq	r5, [r6, #12]
 8008f8c:	e7da      	b.n	8008f44 <_vfiprintf_r+0x20>
 8008f8e:	89ab      	ldrh	r3, [r5, #12]
 8008f90:	0598      	lsls	r0, r3, #22
 8008f92:	d4ed      	bmi.n	8008f70 <_vfiprintf_r+0x4c>
 8008f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f96:	f7fd fbf1 	bl	800677c <__retarget_lock_release_recursive>
 8008f9a:	e7e9      	b.n	8008f70 <_vfiprintf_r+0x4c>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa0:	2320      	movs	r3, #32
 8008fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008faa:	2330      	movs	r3, #48	; 0x30
 8008fac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009170 <_vfiprintf_r+0x24c>
 8008fb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fb4:	f04f 0901 	mov.w	r9, #1
 8008fb8:	4623      	mov	r3, r4
 8008fba:	469a      	mov	sl, r3
 8008fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fc0:	b10a      	cbz	r2, 8008fc6 <_vfiprintf_r+0xa2>
 8008fc2:	2a25      	cmp	r2, #37	; 0x25
 8008fc4:	d1f9      	bne.n	8008fba <_vfiprintf_r+0x96>
 8008fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8008fca:	d00b      	beq.n	8008fe4 <_vfiprintf_r+0xc0>
 8008fcc:	465b      	mov	r3, fp
 8008fce:	4622      	mov	r2, r4
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f7ff ff93 	bl	8008efe <__sfputs_r>
 8008fd8:	3001      	adds	r0, #1
 8008fda:	f000 80aa 	beq.w	8009132 <_vfiprintf_r+0x20e>
 8008fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe0:	445a      	add	r2, fp
 8008fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 80a2 	beq.w	8009132 <_vfiprintf_r+0x20e>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ff8:	f10a 0a01 	add.w	sl, sl, #1
 8008ffc:	9304      	str	r3, [sp, #16]
 8008ffe:	9307      	str	r3, [sp, #28]
 8009000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009004:	931a      	str	r3, [sp, #104]	; 0x68
 8009006:	4654      	mov	r4, sl
 8009008:	2205      	movs	r2, #5
 800900a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800900e:	4858      	ldr	r0, [pc, #352]	; (8009170 <_vfiprintf_r+0x24c>)
 8009010:	f7f7 f8e6 	bl	80001e0 <memchr>
 8009014:	9a04      	ldr	r2, [sp, #16]
 8009016:	b9d8      	cbnz	r0, 8009050 <_vfiprintf_r+0x12c>
 8009018:	06d1      	lsls	r1, r2, #27
 800901a:	bf44      	itt	mi
 800901c:	2320      	movmi	r3, #32
 800901e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009022:	0713      	lsls	r3, r2, #28
 8009024:	bf44      	itt	mi
 8009026:	232b      	movmi	r3, #43	; 0x2b
 8009028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800902c:	f89a 3000 	ldrb.w	r3, [sl]
 8009030:	2b2a      	cmp	r3, #42	; 0x2a
 8009032:	d015      	beq.n	8009060 <_vfiprintf_r+0x13c>
 8009034:	9a07      	ldr	r2, [sp, #28]
 8009036:	4654      	mov	r4, sl
 8009038:	2000      	movs	r0, #0
 800903a:	f04f 0c0a 	mov.w	ip, #10
 800903e:	4621      	mov	r1, r4
 8009040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009044:	3b30      	subs	r3, #48	; 0x30
 8009046:	2b09      	cmp	r3, #9
 8009048:	d94e      	bls.n	80090e8 <_vfiprintf_r+0x1c4>
 800904a:	b1b0      	cbz	r0, 800907a <_vfiprintf_r+0x156>
 800904c:	9207      	str	r2, [sp, #28]
 800904e:	e014      	b.n	800907a <_vfiprintf_r+0x156>
 8009050:	eba0 0308 	sub.w	r3, r0, r8
 8009054:	fa09 f303 	lsl.w	r3, r9, r3
 8009058:	4313      	orrs	r3, r2
 800905a:	9304      	str	r3, [sp, #16]
 800905c:	46a2      	mov	sl, r4
 800905e:	e7d2      	b.n	8009006 <_vfiprintf_r+0xe2>
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	1d19      	adds	r1, r3, #4
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	9103      	str	r1, [sp, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	bfbb      	ittet	lt
 800906c:	425b      	neglt	r3, r3
 800906e:	f042 0202 	orrlt.w	r2, r2, #2
 8009072:	9307      	strge	r3, [sp, #28]
 8009074:	9307      	strlt	r3, [sp, #28]
 8009076:	bfb8      	it	lt
 8009078:	9204      	strlt	r2, [sp, #16]
 800907a:	7823      	ldrb	r3, [r4, #0]
 800907c:	2b2e      	cmp	r3, #46	; 0x2e
 800907e:	d10c      	bne.n	800909a <_vfiprintf_r+0x176>
 8009080:	7863      	ldrb	r3, [r4, #1]
 8009082:	2b2a      	cmp	r3, #42	; 0x2a
 8009084:	d135      	bne.n	80090f2 <_vfiprintf_r+0x1ce>
 8009086:	9b03      	ldr	r3, [sp, #12]
 8009088:	1d1a      	adds	r2, r3, #4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	9203      	str	r2, [sp, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	bfb8      	it	lt
 8009092:	f04f 33ff 	movlt.w	r3, #4294967295
 8009096:	3402      	adds	r4, #2
 8009098:	9305      	str	r3, [sp, #20]
 800909a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009180 <_vfiprintf_r+0x25c>
 800909e:	7821      	ldrb	r1, [r4, #0]
 80090a0:	2203      	movs	r2, #3
 80090a2:	4650      	mov	r0, sl
 80090a4:	f7f7 f89c 	bl	80001e0 <memchr>
 80090a8:	b140      	cbz	r0, 80090bc <_vfiprintf_r+0x198>
 80090aa:	2340      	movs	r3, #64	; 0x40
 80090ac:	eba0 000a 	sub.w	r0, r0, sl
 80090b0:	fa03 f000 	lsl.w	r0, r3, r0
 80090b4:	9b04      	ldr	r3, [sp, #16]
 80090b6:	4303      	orrs	r3, r0
 80090b8:	3401      	adds	r4, #1
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c0:	482c      	ldr	r0, [pc, #176]	; (8009174 <_vfiprintf_r+0x250>)
 80090c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090c6:	2206      	movs	r2, #6
 80090c8:	f7f7 f88a 	bl	80001e0 <memchr>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d03f      	beq.n	8009150 <_vfiprintf_r+0x22c>
 80090d0:	4b29      	ldr	r3, [pc, #164]	; (8009178 <_vfiprintf_r+0x254>)
 80090d2:	bb1b      	cbnz	r3, 800911c <_vfiprintf_r+0x1f8>
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	3307      	adds	r3, #7
 80090d8:	f023 0307 	bic.w	r3, r3, #7
 80090dc:	3308      	adds	r3, #8
 80090de:	9303      	str	r3, [sp, #12]
 80090e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e2:	443b      	add	r3, r7
 80090e4:	9309      	str	r3, [sp, #36]	; 0x24
 80090e6:	e767      	b.n	8008fb8 <_vfiprintf_r+0x94>
 80090e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ec:	460c      	mov	r4, r1
 80090ee:	2001      	movs	r0, #1
 80090f0:	e7a5      	b.n	800903e <_vfiprintf_r+0x11a>
 80090f2:	2300      	movs	r3, #0
 80090f4:	3401      	adds	r4, #1
 80090f6:	9305      	str	r3, [sp, #20]
 80090f8:	4619      	mov	r1, r3
 80090fa:	f04f 0c0a 	mov.w	ip, #10
 80090fe:	4620      	mov	r0, r4
 8009100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009104:	3a30      	subs	r2, #48	; 0x30
 8009106:	2a09      	cmp	r2, #9
 8009108:	d903      	bls.n	8009112 <_vfiprintf_r+0x1ee>
 800910a:	2b00      	cmp	r3, #0
 800910c:	d0c5      	beq.n	800909a <_vfiprintf_r+0x176>
 800910e:	9105      	str	r1, [sp, #20]
 8009110:	e7c3      	b.n	800909a <_vfiprintf_r+0x176>
 8009112:	fb0c 2101 	mla	r1, ip, r1, r2
 8009116:	4604      	mov	r4, r0
 8009118:	2301      	movs	r3, #1
 800911a:	e7f0      	b.n	80090fe <_vfiprintf_r+0x1da>
 800911c:	ab03      	add	r3, sp, #12
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	462a      	mov	r2, r5
 8009122:	4b16      	ldr	r3, [pc, #88]	; (800917c <_vfiprintf_r+0x258>)
 8009124:	a904      	add	r1, sp, #16
 8009126:	4630      	mov	r0, r6
 8009128:	f7fd fc74 	bl	8006a14 <_printf_float>
 800912c:	4607      	mov	r7, r0
 800912e:	1c78      	adds	r0, r7, #1
 8009130:	d1d6      	bne.n	80090e0 <_vfiprintf_r+0x1bc>
 8009132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009134:	07d9      	lsls	r1, r3, #31
 8009136:	d405      	bmi.n	8009144 <_vfiprintf_r+0x220>
 8009138:	89ab      	ldrh	r3, [r5, #12]
 800913a:	059a      	lsls	r2, r3, #22
 800913c:	d402      	bmi.n	8009144 <_vfiprintf_r+0x220>
 800913e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009140:	f7fd fb1c 	bl	800677c <__retarget_lock_release_recursive>
 8009144:	89ab      	ldrh	r3, [r5, #12]
 8009146:	065b      	lsls	r3, r3, #25
 8009148:	f53f af12 	bmi.w	8008f70 <_vfiprintf_r+0x4c>
 800914c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800914e:	e711      	b.n	8008f74 <_vfiprintf_r+0x50>
 8009150:	ab03      	add	r3, sp, #12
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	462a      	mov	r2, r5
 8009156:	4b09      	ldr	r3, [pc, #36]	; (800917c <_vfiprintf_r+0x258>)
 8009158:	a904      	add	r1, sp, #16
 800915a:	4630      	mov	r0, r6
 800915c:	f7fd fefe 	bl	8006f5c <_printf_i>
 8009160:	e7e4      	b.n	800912c <_vfiprintf_r+0x208>
 8009162:	bf00      	nop
 8009164:	080098a8 	.word	0x080098a8
 8009168:	080098c8 	.word	0x080098c8
 800916c:	08009888 	.word	0x08009888
 8009170:	08009b44 	.word	0x08009b44
 8009174:	08009b4e 	.word	0x08009b4e
 8009178:	08006a15 	.word	0x08006a15
 800917c:	08008eff 	.word	0x08008eff
 8009180:	08009b4a 	.word	0x08009b4a

08009184 <_read_r>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	4d07      	ldr	r5, [pc, #28]	; (80091a4 <_read_r+0x20>)
 8009188:	4604      	mov	r4, r0
 800918a:	4608      	mov	r0, r1
 800918c:	4611      	mov	r1, r2
 800918e:	2200      	movs	r2, #0
 8009190:	602a      	str	r2, [r5, #0]
 8009192:	461a      	mov	r2, r3
 8009194:	f7fd f8c1 	bl	800631a <_read>
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	d102      	bne.n	80091a2 <_read_r+0x1e>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	b103      	cbz	r3, 80091a2 <_read_r+0x1e>
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	2000049c 	.word	0x2000049c

080091a8 <abort>:
 80091a8:	b508      	push	{r3, lr}
 80091aa:	2006      	movs	r0, #6
 80091ac:	f000 f8aa 	bl	8009304 <raise>
 80091b0:	2001      	movs	r0, #1
 80091b2:	f000 f927 	bl	8009404 <_exit>
	...

080091b8 <_fstat_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d07      	ldr	r5, [pc, #28]	; (80091d8 <_fstat_r+0x20>)
 80091bc:	2300      	movs	r3, #0
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	4611      	mov	r1, r2
 80091c4:	602b      	str	r3, [r5, #0]
 80091c6:	f7fd f98c 	bl	80064e2 <_fstat>
 80091ca:	1c43      	adds	r3, r0, #1
 80091cc:	d102      	bne.n	80091d4 <_fstat_r+0x1c>
 80091ce:	682b      	ldr	r3, [r5, #0]
 80091d0:	b103      	cbz	r3, 80091d4 <_fstat_r+0x1c>
 80091d2:	6023      	str	r3, [r4, #0]
 80091d4:	bd38      	pop	{r3, r4, r5, pc}
 80091d6:	bf00      	nop
 80091d8:	2000049c 	.word	0x2000049c

080091dc <_isatty_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d06      	ldr	r5, [pc, #24]	; (80091f8 <_isatty_r+0x1c>)
 80091e0:	2300      	movs	r3, #0
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	602b      	str	r3, [r5, #0]
 80091e8:	f7fd f989 	bl	80064fe <_isatty>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d102      	bne.n	80091f6 <_isatty_r+0x1a>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	b103      	cbz	r3, 80091f6 <_isatty_r+0x1a>
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	2000049c 	.word	0x2000049c

080091fc <__ascii_mbtowc>:
 80091fc:	b082      	sub	sp, #8
 80091fe:	b901      	cbnz	r1, 8009202 <__ascii_mbtowc+0x6>
 8009200:	a901      	add	r1, sp, #4
 8009202:	b142      	cbz	r2, 8009216 <__ascii_mbtowc+0x1a>
 8009204:	b14b      	cbz	r3, 800921a <__ascii_mbtowc+0x1e>
 8009206:	7813      	ldrb	r3, [r2, #0]
 8009208:	600b      	str	r3, [r1, #0]
 800920a:	7812      	ldrb	r2, [r2, #0]
 800920c:	1e10      	subs	r0, r2, #0
 800920e:	bf18      	it	ne
 8009210:	2001      	movne	r0, #1
 8009212:	b002      	add	sp, #8
 8009214:	4770      	bx	lr
 8009216:	4610      	mov	r0, r2
 8009218:	e7fb      	b.n	8009212 <__ascii_mbtowc+0x16>
 800921a:	f06f 0001 	mvn.w	r0, #1
 800921e:	e7f8      	b.n	8009212 <__ascii_mbtowc+0x16>

08009220 <memmove>:
 8009220:	4288      	cmp	r0, r1
 8009222:	b510      	push	{r4, lr}
 8009224:	eb01 0402 	add.w	r4, r1, r2
 8009228:	d902      	bls.n	8009230 <memmove+0x10>
 800922a:	4284      	cmp	r4, r0
 800922c:	4623      	mov	r3, r4
 800922e:	d807      	bhi.n	8009240 <memmove+0x20>
 8009230:	1e43      	subs	r3, r0, #1
 8009232:	42a1      	cmp	r1, r4
 8009234:	d008      	beq.n	8009248 <memmove+0x28>
 8009236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800923a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800923e:	e7f8      	b.n	8009232 <memmove+0x12>
 8009240:	4402      	add	r2, r0
 8009242:	4601      	mov	r1, r0
 8009244:	428a      	cmp	r2, r1
 8009246:	d100      	bne.n	800924a <memmove+0x2a>
 8009248:	bd10      	pop	{r4, pc}
 800924a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800924e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009252:	e7f7      	b.n	8009244 <memmove+0x24>

08009254 <_realloc_r>:
 8009254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009258:	4680      	mov	r8, r0
 800925a:	4614      	mov	r4, r2
 800925c:	460e      	mov	r6, r1
 800925e:	b921      	cbnz	r1, 800926a <_realloc_r+0x16>
 8009260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009264:	4611      	mov	r1, r2
 8009266:	f7fd bac1 	b.w	80067ec <_malloc_r>
 800926a:	b92a      	cbnz	r2, 8009278 <_realloc_r+0x24>
 800926c:	f7ff fc88 	bl	8008b80 <_free_r>
 8009270:	4625      	mov	r5, r4
 8009272:	4628      	mov	r0, r5
 8009274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009278:	f000 f86d 	bl	8009356 <_malloc_usable_size_r>
 800927c:	4284      	cmp	r4, r0
 800927e:	4607      	mov	r7, r0
 8009280:	d802      	bhi.n	8009288 <_realloc_r+0x34>
 8009282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009286:	d812      	bhi.n	80092ae <_realloc_r+0x5a>
 8009288:	4621      	mov	r1, r4
 800928a:	4640      	mov	r0, r8
 800928c:	f7fd faae 	bl	80067ec <_malloc_r>
 8009290:	4605      	mov	r5, r0
 8009292:	2800      	cmp	r0, #0
 8009294:	d0ed      	beq.n	8009272 <_realloc_r+0x1e>
 8009296:	42bc      	cmp	r4, r7
 8009298:	4622      	mov	r2, r4
 800929a:	4631      	mov	r1, r6
 800929c:	bf28      	it	cs
 800929e:	463a      	movcs	r2, r7
 80092a0:	f7fd fa6d 	bl	800677e <memcpy>
 80092a4:	4631      	mov	r1, r6
 80092a6:	4640      	mov	r0, r8
 80092a8:	f7ff fc6a 	bl	8008b80 <_free_r>
 80092ac:	e7e1      	b.n	8009272 <_realloc_r+0x1e>
 80092ae:	4635      	mov	r5, r6
 80092b0:	e7df      	b.n	8009272 <_realloc_r+0x1e>

080092b2 <_raise_r>:
 80092b2:	291f      	cmp	r1, #31
 80092b4:	b538      	push	{r3, r4, r5, lr}
 80092b6:	4604      	mov	r4, r0
 80092b8:	460d      	mov	r5, r1
 80092ba:	d904      	bls.n	80092c6 <_raise_r+0x14>
 80092bc:	2316      	movs	r3, #22
 80092be:	6003      	str	r3, [r0, #0]
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295
 80092c4:	bd38      	pop	{r3, r4, r5, pc}
 80092c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092c8:	b112      	cbz	r2, 80092d0 <_raise_r+0x1e>
 80092ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092ce:	b94b      	cbnz	r3, 80092e4 <_raise_r+0x32>
 80092d0:	4620      	mov	r0, r4
 80092d2:	f000 f831 	bl	8009338 <_getpid_r>
 80092d6:	462a      	mov	r2, r5
 80092d8:	4601      	mov	r1, r0
 80092da:	4620      	mov	r0, r4
 80092dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092e0:	f000 b818 	b.w	8009314 <_kill_r>
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d00a      	beq.n	80092fe <_raise_r+0x4c>
 80092e8:	1c59      	adds	r1, r3, #1
 80092ea:	d103      	bne.n	80092f4 <_raise_r+0x42>
 80092ec:	2316      	movs	r3, #22
 80092ee:	6003      	str	r3, [r0, #0]
 80092f0:	2001      	movs	r0, #1
 80092f2:	e7e7      	b.n	80092c4 <_raise_r+0x12>
 80092f4:	2400      	movs	r4, #0
 80092f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092fa:	4628      	mov	r0, r5
 80092fc:	4798      	blx	r3
 80092fe:	2000      	movs	r0, #0
 8009300:	e7e0      	b.n	80092c4 <_raise_r+0x12>
	...

08009304 <raise>:
 8009304:	4b02      	ldr	r3, [pc, #8]	; (8009310 <raise+0xc>)
 8009306:	4601      	mov	r1, r0
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	f7ff bfd2 	b.w	80092b2 <_raise_r>
 800930e:	bf00      	nop
 8009310:	20000034 	.word	0x20000034

08009314 <_kill_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4d07      	ldr	r5, [pc, #28]	; (8009334 <_kill_r+0x20>)
 8009318:	2300      	movs	r3, #0
 800931a:	4604      	mov	r4, r0
 800931c:	4608      	mov	r0, r1
 800931e:	4611      	mov	r1, r2
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	f000 f867 	bl	80093f4 <_kill>
 8009326:	1c43      	adds	r3, r0, #1
 8009328:	d102      	bne.n	8009330 <_kill_r+0x1c>
 800932a:	682b      	ldr	r3, [r5, #0]
 800932c:	b103      	cbz	r3, 8009330 <_kill_r+0x1c>
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	bd38      	pop	{r3, r4, r5, pc}
 8009332:	bf00      	nop
 8009334:	2000049c 	.word	0x2000049c

08009338 <_getpid_r>:
 8009338:	f7fd b8b0 	b.w	800649c <_getpid>

0800933c <__ascii_wctomb>:
 800933c:	b149      	cbz	r1, 8009352 <__ascii_wctomb+0x16>
 800933e:	2aff      	cmp	r2, #255	; 0xff
 8009340:	bf85      	ittet	hi
 8009342:	238a      	movhi	r3, #138	; 0x8a
 8009344:	6003      	strhi	r3, [r0, #0]
 8009346:	700a      	strbls	r2, [r1, #0]
 8009348:	f04f 30ff 	movhi.w	r0, #4294967295
 800934c:	bf98      	it	ls
 800934e:	2001      	movls	r0, #1
 8009350:	4770      	bx	lr
 8009352:	4608      	mov	r0, r1
 8009354:	4770      	bx	lr

08009356 <_malloc_usable_size_r>:
 8009356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800935a:	1f18      	subs	r0, r3, #4
 800935c:	2b00      	cmp	r3, #0
 800935e:	bfbc      	itt	lt
 8009360:	580b      	ldrlt	r3, [r1, r0]
 8009362:	18c0      	addlt	r0, r0, r3
 8009364:	4770      	bx	lr
	...

08009368 <round>:
 8009368:	ec51 0b10 	vmov	r0, r1, d0
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8009372:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8009376:	2c13      	cmp	r4, #19
 8009378:	ee10 2a10 	vmov	r2, s0
 800937c:	460b      	mov	r3, r1
 800937e:	dc19      	bgt.n	80093b4 <round+0x4c>
 8009380:	2c00      	cmp	r4, #0
 8009382:	da09      	bge.n	8009398 <round+0x30>
 8009384:	3401      	adds	r4, #1
 8009386:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800938a:	d103      	bne.n	8009394 <round+0x2c>
 800938c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009390:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009394:	2200      	movs	r2, #0
 8009396:	e028      	b.n	80093ea <round+0x82>
 8009398:	4d15      	ldr	r5, [pc, #84]	; (80093f0 <round+0x88>)
 800939a:	4125      	asrs	r5, r4
 800939c:	ea01 0605 	and.w	r6, r1, r5
 80093a0:	4332      	orrs	r2, r6
 80093a2:	d00e      	beq.n	80093c2 <round+0x5a>
 80093a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80093a8:	fa42 f404 	asr.w	r4, r2, r4
 80093ac:	4423      	add	r3, r4
 80093ae:	ea23 0305 	bic.w	r3, r3, r5
 80093b2:	e7ef      	b.n	8009394 <round+0x2c>
 80093b4:	2c33      	cmp	r4, #51	; 0x33
 80093b6:	dd07      	ble.n	80093c8 <round+0x60>
 80093b8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80093bc:	d101      	bne.n	80093c2 <round+0x5a>
 80093be:	f7f6 ff65 	bl	800028c <__adddf3>
 80093c2:	ec41 0b10 	vmov	d0, r0, r1
 80093c6:	bd70      	pop	{r4, r5, r6, pc}
 80093c8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80093cc:	f04f 35ff 	mov.w	r5, #4294967295
 80093d0:	40f5      	lsrs	r5, r6
 80093d2:	4228      	tst	r0, r5
 80093d4:	d0f5      	beq.n	80093c2 <round+0x5a>
 80093d6:	2101      	movs	r1, #1
 80093d8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80093dc:	fa01 f404 	lsl.w	r4, r1, r4
 80093e0:	1912      	adds	r2, r2, r4
 80093e2:	bf28      	it	cs
 80093e4:	185b      	addcs	r3, r3, r1
 80093e6:	ea22 0205 	bic.w	r2, r2, r5
 80093ea:	4619      	mov	r1, r3
 80093ec:	4610      	mov	r0, r2
 80093ee:	e7e8      	b.n	80093c2 <round+0x5a>
 80093f0:	000fffff 	.word	0x000fffff

080093f4 <_kill>:
 80093f4:	4b02      	ldr	r3, [pc, #8]	; (8009400 <_kill+0xc>)
 80093f6:	2258      	movs	r2, #88	; 0x58
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	f04f 30ff 	mov.w	r0, #4294967295
 80093fe:	4770      	bx	lr
 8009400:	2000049c 	.word	0x2000049c

08009404 <_exit>:
 8009404:	e7fe      	b.n	8009404 <_exit>
	...

08009408 <_init>:
 8009408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940a:	bf00      	nop
 800940c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800940e:	bc08      	pop	{r3}
 8009410:	469e      	mov	lr, r3
 8009412:	4770      	bx	lr

08009414 <_fini>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	bf00      	nop
 8009418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941a:	bc08      	pop	{r3}
 800941c:	469e      	mov	lr, r3
 800941e:	4770      	bx	lr
