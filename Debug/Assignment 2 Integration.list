
Assignment 2 Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08008288  08008288  00018288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008880  08008880  0002027c  2**0
                  CONTENTS
  4 .ARM          00000008  08008880  08008880  00018880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008888  08008888  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008888  08008888  00018888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800888c  0800888c  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  08008890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000027c  08008b0c  0002027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08008b0c  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e75e  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a8  00000000  00000000  0002ea0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000310b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00031e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028de4  00000000  00000000  00032a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ed2  00000000  00000000  0005b7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4c91  00000000  00000000  0006c6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a68  00000000  00000000  001613a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00165e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  00165e34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000027c 	.word	0x2000027c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800826c 	.word	0x0800826c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000280 	.word	0x20000280
 80001cc:	0800826c 	.word	0x0800826c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <main>:
static float read_temp(void);

static void LSM6DSL_AccInit_6D_EXTI(void);

int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
    initialise_monitor_handles();
 8000f50:	f004 f9ee 	bl	8005330 <initialise_monitor_handles>
    HAL_Init();
 8000f54:	f001 ff5e 	bl	8002e14 <HAL_Init>
    UART1_Init();
 8000f58:	f000 fb98 	bl	800168c <UART1_Init>

    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 ffae 	bl	8001ec0 <BSP_PB_Init>
    BSP_LED_Init(LED2);
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 ff4f 	bl	8001e08 <BSP_LED_Init>

    //     BSP_ACCELERO_Init();
    LSM6DSL_AccInit_6D_EXTI();
 8000f6a:	f000 fd09 	bl	8001980 <LSM6DSL_AccInit_6D_EXTI>
    BSP_GYRO_Init();
 8000f6e:	f001 f94d 	bl	800220c <BSP_GYRO_Init>
    BSP_MAGNETO_Init();
 8000f72:	f001 f9d3 	bl	800231c <BSP_MAGNETO_Init>
    BSP_HSENSOR_Init();
 8000f76:	f001 f9a3 	bl	80022c0 <BSP_HSENSOR_Init>
    BSP_PSENSOR_Init();
 8000f7a:	f001 f9fb 	bl	8002374 <BSP_PSENSOR_Init>
    BSP_TSENSOR_Init();
 8000f7e:	f001 fa27 	bl	80023d0 <BSP_TSENSOR_Init>

    // print Entering STANDBY MODE when going to STANDBY_MODE
    sprintf(uart_buffer, "Entering STANDBY MODE\r\n");
 8000f82:	491b      	ldr	r1, [pc, #108]	; (8000ff0 <main+0xa4>)
 8000f84:	481b      	ldr	r0, [pc, #108]	; (8000ff4 <main+0xa8>)
 8000f86:	f005 f897 	bl	80060b8 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer),
 8000f8a:	481a      	ldr	r0, [pc, #104]	; (8000ff4 <main+0xa8>)
 8000f8c:	f7ff f920 	bl	80001d0 <strlen>
 8000f90:	4603      	mov	r3, r0
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f98:	4916      	ldr	r1, [pc, #88]	; (8000ff4 <main+0xa8>)
 8000f9a:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <main+0xac>)
 8000f9c:	f003 fa0a 	bl	80043b4 <HAL_UART_Transmit>
        0xFFFF);

    while (1) {
        button_press();
 8000fa0:	f000 fbee 	bl	8001780 <button_press>
        switch (state) {
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <main+0xb0>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d81b      	bhi.n	8000fe4 <main+0x98>
 8000fac:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <main+0x68>)
 8000fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb2:	bf00      	nop
 8000fb4:	08000fc5 	.word	0x08000fc5
 8000fb8:	08000fcd 	.word	0x08000fcd
 8000fbc:	08000fd5 	.word	0x08000fd5
 8000fc0:	08000fdd 	.word	0x08000fdd
        case STANDBY_MODE:
            standby_mode(&state);
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <main+0xb0>)
 8000fc6:	f000 f81b 	bl	8001000 <standby_mode>
            break;
 8000fca:	e00f      	b.n	8000fec <main+0xa0>
        case BATTLE_NO_LAST_OF_EE2028_MODE:
            battle_no_last_of_ee2028_mode(&state);
 8000fcc:	480b      	ldr	r0, [pc, #44]	; (8000ffc <main+0xb0>)
 8000fce:	f000 f901 	bl	80011d4 <battle_no_last_of_ee2028_mode>
            break;
 8000fd2:	e00b      	b.n	8000fec <main+0xa0>
        case BATTLE_LAST_OF_EE2028_MODE:
            battle_last_of_ee2028_mode(&state);
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <main+0xb0>)
 8000fd6:	f000 fab7 	bl	8001548 <battle_last_of_ee2028_mode>
            break;
 8000fda:	e007      	b.n	8000fec <main+0xa0>
        case DEAD_MODE:
            dead_mode(&state);
 8000fdc:	4807      	ldr	r0, [pc, #28]	; (8000ffc <main+0xb0>)
 8000fde:	f000 fb37 	bl	8001650 <dead_mode>
            break;
 8000fe2:	e003      	b.n	8000fec <main+0xa0>
        default:
            // for debugging incase state somehow get here
            led_blink(LED_10HZ);
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f000 fc13 	bl	8001810 <led_blink>
            break;
 8000fea:	bf00      	nop
        button_press();
 8000fec:	e7d8      	b.n	8000fa0 <main+0x54>
 8000fee:	bf00      	nop
 8000ff0:	08008288 	.word	0x08008288
 8000ff4:	200002a8 	.word	0x200002a8
 8000ff8:	20000328 	.word	0x20000328
 8000ffc:	20000298 	.word	0x20000298

08001000 <standby_mode>:
        }
    }
}

static void standby_mode(uint8_t* p_state)
{
 8001000:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001004:	b088      	sub	sp, #32
 8001006:	af04      	add	r7, sp, #16
 8001008:	6078      	str	r0, [r7, #4]
    // in STANDBY_MODE, LED always on
    led_blink(LED_ALWAYS_ON);
 800100a:	2000      	movs	r0, #0
 800100c:	f000 fc00 	bl	8001810 <led_blink>

    // in STANDBY_MODE, double press to enter BATTLE_NO_LAST_OF_EE2028_MODE
    if (double_press) {
 8001010:	4b62      	ldr	r3, [pc, #392]	; (800119c <standby_mode+0x19c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d02c      	beq.n	8001072 <standby_mode+0x72>
        uint8_t d6d_src = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_D6D_SRC);
 8001018:	211d      	movs	r1, #29
 800101a:	20d4      	movs	r0, #212	; 0xd4
 800101c:	f001 f8ba 	bl	8002194 <SENSOR_IO_Read>
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]

        // if upside down, go to BATTLE_LAST_OF_EE2028_MODE else BATTLE_NO_LAST_OF_EE2028_MODE
        if (d6d_src & D6D_SRC_UPSIDEDOWN) {
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	2b00      	cmp	r3, #0
 800102c:	d008      	beq.n	8001040 <standby_mode+0x40>
            *p_state = BATTLE_LAST_OF_EE2028_MODE;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2202      	movs	r2, #2
 8001032:	701a      	strb	r2, [r3, #0]
            last_of_ee2028_tick = HAL_GetTick();
 8001034:	f001 ff52 	bl	8002edc <HAL_GetTick>
 8001038:	4603      	mov	r3, r0
 800103a:	4a59      	ldr	r2, [pc, #356]	; (80011a0 <standby_mode+0x1a0>)
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e002      	b.n	8001046 <standby_mode+0x46>
        } else {
            *p_state = BATTLE_NO_LAST_OF_EE2028_MODE;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
        }

        // print Entering BATTLE MODE when going to BATTLE_NO_LAST_OF_EE2028_MODE/BATTLE_LAST_OF_EE2028_MODE as thats how it is logically
        sprintf(uart_buffer, "Entering BATTLE MODE\r\n");
 8001046:	4957      	ldr	r1, [pc, #348]	; (80011a4 <standby_mode+0x1a4>)
 8001048:	4857      	ldr	r0, [pc, #348]	; (80011a8 <standby_mode+0x1a8>)
 800104a:	f005 f835 	bl	80060b8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 800104e:	4856      	ldr	r0, [pc, #344]	; (80011a8 <standby_mode+0x1a8>)
 8001050:	f7ff f8be 	bl	80001d0 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
 8001058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800105c:	4952      	ldr	r1, [pc, #328]	; (80011a8 <standby_mode+0x1a8>)
 800105e:	4853      	ldr	r0, [pc, #332]	; (80011ac <standby_mode+0x1ac>)
 8001060:	f003 f9a8 	bl	80043b4 <HAL_UART_Transmit>

        last_telem_tick = 0;
 8001064:	4b52      	ldr	r3, [pc, #328]	; (80011b0 <standby_mode+0x1b0>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]

        // clear flag
        double_press = BOOL_CLR;
 800106a:	4b4c      	ldr	r3, [pc, #304]	; (800119c <standby_mode+0x19c>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
        return;
 8001070:	e08f      	b.n	8001192 <standby_mode+0x192>
    }

    // in STANDBY_MODE, single press does nothing
    if (single_press) {
 8001072:	4b50      	ldr	r3, [pc, #320]	; (80011b4 <standby_mode+0x1b4>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <standby_mode+0x80>
        // does nothing, but still need to reset the flag
        single_press = BOOL_CLR;
 800107a:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <standby_mode+0x1b4>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
    }

    // read GMPH telem and send UART @ 1 Hz
    if (HAL_GetTick() - last_telem_tick >= 1000) {
 8001080:	f001 ff2c 	bl	8002edc <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	4b4a      	ldr	r3, [pc, #296]	; (80011b0 <standby_mode+0x1b0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001090:	d37f      	bcc.n	8001192 <standby_mode+0x192>
        read_gyro(gyro_data);
 8001092:	4849      	ldr	r0, [pc, #292]	; (80011b8 <standby_mode+0x1b8>)
 8001094:	f000 fc20 	bl	80018d8 <read_gyro>
        read_mag(mag_data);
 8001098:	4848      	ldr	r0, [pc, #288]	; (80011bc <standby_mode+0x1bc>)
 800109a:	f000 fc45 	bl	8001928 <read_mag>
        pressure_data = read_pressure();
 800109e:	f000 fc57 	bl	8001950 <read_pressure>
 80010a2:	eef0 7a40 	vmov.f32	s15, s0
 80010a6:	4b46      	ldr	r3, [pc, #280]	; (80011c0 <standby_mode+0x1c0>)
 80010a8:	edc3 7a00 	vstr	s15, [r3]
        humidity_data = read_humidity();
 80010ac:	f000 fc47 	bl	800193e <read_humidity>
 80010b0:	eef0 7a40 	vmov.f32	s15, s0
 80010b4:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <standby_mode+0x1c4>)
 80010b6:	edc3 7a00 	vstr	s15, [r3]
        // sprintf(uart_buffer, "Gx: %.2f dps, Gy: %.2f dps, Gz: %.2f dps, Mx: %d mG, My: %d mG, Mz: %d mG, P: %.2f kPA, H: %.2f%%\r\n",
        //     gyro_data[0], gyro_data[1], gyro_data[2], mag_data[0], mag_data[1], mag_data[2], pressure_data, humidity_data);
        // HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);

        // split to multiple messages to fit in buffer
        sprintf(uart_buffer, "Gx: %.2f dps, Gy: %.2f dps, Gz: %.2f dps, ", gyro_data[0], gyro_data[1], gyro_data[2]);
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <standby_mode+0x1b8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa42 	bl	8000548 <__aeabi_f2d>
 80010c4:	4680      	mov	r8, r0
 80010c6:	4689      	mov	r9, r1
 80010c8:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <standby_mode+0x1b8>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa3b 	bl	8000548 <__aeabi_f2d>
 80010d2:	4604      	mov	r4, r0
 80010d4:	460d      	mov	r5, r1
 80010d6:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <standby_mode+0x1b8>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa34 	bl	8000548 <__aeabi_f2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010e8:	e9cd 4500 	strd	r4, r5, [sp]
 80010ec:	4642      	mov	r2, r8
 80010ee:	464b      	mov	r3, r9
 80010f0:	4935      	ldr	r1, [pc, #212]	; (80011c8 <standby_mode+0x1c8>)
 80010f2:	482d      	ldr	r0, [pc, #180]	; (80011a8 <standby_mode+0x1a8>)
 80010f4:	f004 ffe0 	bl	80060b8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80010f8:	482b      	ldr	r0, [pc, #172]	; (80011a8 <standby_mode+0x1a8>)
 80010fa:	f7ff f869 	bl	80001d0 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	b29a      	uxth	r2, r3
 8001102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001106:	4928      	ldr	r1, [pc, #160]	; (80011a8 <standby_mode+0x1a8>)
 8001108:	4828      	ldr	r0, [pc, #160]	; (80011ac <standby_mode+0x1ac>)
 800110a:	f003 f953 	bl	80043b4 <HAL_UART_Transmit>

        sprintf(uart_buffer, "Mx: %d mG, My: %d mG, Mz: %d mG, ", mag_data[0], mag_data[1], mag_data[2]);
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <standby_mode+0x1bc>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	461a      	mov	r2, r3
 8001116:	4b29      	ldr	r3, [pc, #164]	; (80011bc <standby_mode+0x1bc>)
 8001118:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800111c:	4619      	mov	r1, r3
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <standby_mode+0x1bc>)
 8001120:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	460b      	mov	r3, r1
 8001128:	4928      	ldr	r1, [pc, #160]	; (80011cc <standby_mode+0x1cc>)
 800112a:	481f      	ldr	r0, [pc, #124]	; (80011a8 <standby_mode+0x1a8>)
 800112c:	f004 ffc4 	bl	80060b8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001130:	481d      	ldr	r0, [pc, #116]	; (80011a8 <standby_mode+0x1a8>)
 8001132:	f7ff f84d 	bl	80001d0 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800113e:	491a      	ldr	r1, [pc, #104]	; (80011a8 <standby_mode+0x1a8>)
 8001140:	481a      	ldr	r0, [pc, #104]	; (80011ac <standby_mode+0x1ac>)
 8001142:	f003 f937 	bl	80043b4 <HAL_UART_Transmit>

        sprintf(uart_buffer, "P: %.2f kPA, H: %.2f%%\r\n", pressure_data, humidity_data);
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <standby_mode+0x1c0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f9fc 	bl	8000548 <__aeabi_f2d>
 8001150:	4604      	mov	r4, r0
 8001152:	460d      	mov	r5, r1
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <standby_mode+0x1c4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9f5 	bl	8000548 <__aeabi_f2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	e9cd 2300 	strd	r2, r3, [sp]
 8001166:	4622      	mov	r2, r4
 8001168:	462b      	mov	r3, r5
 800116a:	4919      	ldr	r1, [pc, #100]	; (80011d0 <standby_mode+0x1d0>)
 800116c:	480e      	ldr	r0, [pc, #56]	; (80011a8 <standby_mode+0x1a8>)
 800116e:	f004 ffa3 	bl	80060b8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <standby_mode+0x1a8>)
 8001174:	f7ff f82c 	bl	80001d0 <strlen>
 8001178:	4603      	mov	r3, r0
 800117a:	b29a      	uxth	r2, r3
 800117c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001180:	4909      	ldr	r1, [pc, #36]	; (80011a8 <standby_mode+0x1a8>)
 8001182:	480a      	ldr	r0, [pc, #40]	; (80011ac <standby_mode+0x1ac>)
 8001184:	f003 f916 	bl	80043b4 <HAL_UART_Transmit>

        last_telem_tick = HAL_GetTick();
 8001188:	f001 fea8 	bl	8002edc <HAL_GetTick>
 800118c:	4603      	mov	r3, r0
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <standby_mode+0x1b0>)
 8001190:	6013      	str	r3, [r2, #0]
    }

    // TODO monitoring with interupt
}
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800119a:	bf00      	nop
 800119c:	200002a6 	.word	0x200002a6
 80011a0:	2000029c 	.word	0x2000029c
 80011a4:	080082a0 	.word	0x080082a0
 80011a8:	200002a8 	.word	0x200002a8
 80011ac:	20000328 	.word	0x20000328
 80011b0:	200003a8 	.word	0x200003a8
 80011b4:	200002a5 	.word	0x200002a5
 80011b8:	200003b8 	.word	0x200003b8
 80011bc:	200003c4 	.word	0x200003c4
 80011c0:	200003d0 	.word	0x200003d0
 80011c4:	200003cc 	.word	0x200003cc
 80011c8:	080082b8 	.word	0x080082b8
 80011cc:	080082e4 	.word	0x080082e4
 80011d0:	08008308 	.word	0x08008308

080011d4 <battle_no_last_of_ee2028_mode>:

static void battle_no_last_of_ee2028_mode(uint8_t* p_state)
{
 80011d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011d8:	b088      	sub	sp, #32
 80011da:	af04      	add	r7, sp, #16
 80011dc:	6078      	str	r0, [r7, #4]
    static uint8_t gun_charge = 0;
    if (gun_charge > 10) {
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <battle_no_last_of_ee2028_mode+0xc0>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b0a      	cmp	r3, #10
 80011e4:	d902      	bls.n	80011ec <battle_no_last_of_ee2028_mode+0x18>
        // incase somehow charge gets more than 10, cap at 10/10
        gun_charge = 10;
 80011e6:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <battle_no_last_of_ee2028_mode+0xc0>)
 80011e8:	220a      	movs	r2, #10
 80011ea:	701a      	strb	r2, [r3, #0]
    }

    if (gun_charge >= 5) {
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <battle_no_last_of_ee2028_mode+0xc0>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d92e      	bls.n	8001252 <battle_no_last_of_ee2028_mode+0x7e>
        // each shot cost 5 units
        gun_charge -= 5;
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <battle_no_last_of_ee2028_mode+0xc0>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	3b05      	subs	r3, #5
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b25      	ldr	r3, [pc, #148]	; (8001294 <battle_no_last_of_ee2028_mode+0xc0>)
 80011fe:	701a      	strb	r2, [r3, #0]

        sprintf(uart_buffer, "Gun Shot:    %.*s%.*s %d%%\r\n",
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <battle_no_last_of_ee2028_mode+0xc0>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	1899      	adds	r1, r3, r2
            (gun_charge)*3, "[#][#][#][#][#][#][#][#][#][#]",
            (10 - gun_charge) * 3, "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]",
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <battle_no_last_of_ee2028_mode+0xc0>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	f1c3 020a 	rsb	r2, r3, #10
        sprintf(uart_buffer, "Gun Shot:    %.*s%.*s %d%%\r\n",
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	441a      	add	r2, r3
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <battle_no_last_of_ee2028_mode+0xc0>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	4603      	mov	r3, r0
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4403      	add	r3, r0
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <battle_no_last_of_ee2028_mode+0xc4>)
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	9200      	str	r2, [sp, #0]
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <battle_no_last_of_ee2028_mode+0xc8>)
 8001232:	460a      	mov	r2, r1
 8001234:	491a      	ldr	r1, [pc, #104]	; (80012a0 <battle_no_last_of_ee2028_mode+0xcc>)
 8001236:	481b      	ldr	r0, [pc, #108]	; (80012a4 <battle_no_last_of_ee2028_mode+0xd0>)
 8001238:	f004 ff3e 	bl	80060b8 <siprintf>
            gun_charge * 10);
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 800123c:	4819      	ldr	r0, [pc, #100]	; (80012a4 <battle_no_last_of_ee2028_mode+0xd0>)
 800123e:	f7fe ffc7 	bl	80001d0 <strlen>
 8001242:	4603      	mov	r3, r0
 8001244:	b29a      	uxth	r2, r3
 8001246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800124a:	4916      	ldr	r1, [pc, #88]	; (80012a4 <battle_no_last_of_ee2028_mode+0xd0>)
 800124c:	4816      	ldr	r0, [pc, #88]	; (80012a8 <battle_no_last_of_ee2028_mode+0xd4>)
 800124e:	f003 f8b1 	bl	80043b4 <HAL_UART_Transmit>
    }

    // in BATTLE_NO_LAST_OF_EE2028_MODE, LED blinks at 1 Hz
    led_blink(LED_1HZ);
 8001252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001256:	f000 fadb 	bl	8001810 <led_blink>

    // in BATTLE_NO_LAST_OF_EE2028_MODE, double press to enter STANDBY_MODE
    if (double_press) {
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <battle_no_last_of_ee2028_mode+0xd8>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d02a      	beq.n	80012b8 <battle_no_last_of_ee2028_mode+0xe4>
        // goes to STANDBY_MODE
        *p_state = STANDBY_MODE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]

        // print Entering STANDBY MODE when going to STANDBY_MODE
        sprintf(uart_buffer, "Entering STANDBY MODE\r\n");
 8001268:	4911      	ldr	r1, [pc, #68]	; (80012b0 <battle_no_last_of_ee2028_mode+0xdc>)
 800126a:	480e      	ldr	r0, [pc, #56]	; (80012a4 <battle_no_last_of_ee2028_mode+0xd0>)
 800126c:	f004 ff24 	bl	80060b8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <battle_no_last_of_ee2028_mode+0xd0>)
 8001272:	f7fe ffad 	bl	80001d0 <strlen>
 8001276:	4603      	mov	r3, r0
 8001278:	b29a      	uxth	r2, r3
 800127a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800127e:	4909      	ldr	r1, [pc, #36]	; (80012a4 <battle_no_last_of_ee2028_mode+0xd0>)
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <battle_no_last_of_ee2028_mode+0xd4>)
 8001282:	f003 f897 	bl	80043b4 <HAL_UART_Transmit>
        last_telem_tick = 0;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <battle_no_last_of_ee2028_mode+0xe0>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]

        // clear flag
        double_press = BOOL_CLR;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <battle_no_last_of_ee2028_mode+0xd8>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
        return;
 8001292:	e12d      	b.n	80014f0 <battle_no_last_of_ee2028_mode+0x31c>
 8001294:	200003d9 	.word	0x200003d9
 8001298:	08008364 	.word	0x08008364
 800129c:	08008324 	.word	0x08008324
 80012a0:	08008344 	.word	0x08008344
 80012a4:	200002a8 	.word	0x200002a8
 80012a8:	20000328 	.word	0x20000328
 80012ac:	200002a6 	.word	0x200002a6
 80012b0:	08008288 	.word	0x08008288
 80012b4:	200003a8 	.word	0x200003a8
    }

    // in BATTLE_NO_LAST_OF_EE2028_MODE, single press charge gun by 3
    if (single_press) {
 80012b8:	4b8f      	ldr	r3, [pc, #572]	; (80014f8 <battle_no_last_of_ee2028_mode+0x324>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d031      	beq.n	8001324 <battle_no_last_of_ee2028_mode+0x150>
        gun_charge += 3;
 80012c0:	4b8e      	ldr	r3, [pc, #568]	; (80014fc <battle_no_last_of_ee2028_mode+0x328>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3303      	adds	r3, #3
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b8c      	ldr	r3, [pc, #560]	; (80014fc <battle_no_last_of_ee2028_mode+0x328>)
 80012ca:	701a      	strb	r2, [r3, #0]

        // print gun status
        sprintf(uart_buffer, "Gun Charged: %.*s%.*s %d%%\r\n",
 80012cc:	4b8b      	ldr	r3, [pc, #556]	; (80014fc <battle_no_last_of_ee2028_mode+0x328>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	1899      	adds	r1, r3, r2
            (gun_charge)*3, "[#][#][#][#][#][#][#][#][#][#]",
            (10 - gun_charge) * 3, "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]",
 80012d8:	4b88      	ldr	r3, [pc, #544]	; (80014fc <battle_no_last_of_ee2028_mode+0x328>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	f1c3 020a 	rsb	r2, r3, #10
        sprintf(uart_buffer, "Gun Charged: %.*s%.*s %d%%\r\n",
 80012e0:	4613      	mov	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	441a      	add	r2, r3
 80012e6:	4b85      	ldr	r3, [pc, #532]	; (80014fc <battle_no_last_of_ee2028_mode+0x328>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	4603      	mov	r3, r0
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4403      	add	r3, r0
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	4b82      	ldr	r3, [pc, #520]	; (8001500 <battle_no_last_of_ee2028_mode+0x32c>)
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	9200      	str	r2, [sp, #0]
 80012fc:	4b81      	ldr	r3, [pc, #516]	; (8001504 <battle_no_last_of_ee2028_mode+0x330>)
 80012fe:	460a      	mov	r2, r1
 8001300:	4981      	ldr	r1, [pc, #516]	; (8001508 <battle_no_last_of_ee2028_mode+0x334>)
 8001302:	4882      	ldr	r0, [pc, #520]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 8001304:	f004 fed8 	bl	80060b8 <siprintf>
            gun_charge * 10);
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001308:	4880      	ldr	r0, [pc, #512]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 800130a:	f7fe ff61 	bl	80001d0 <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001316:	497d      	ldr	r1, [pc, #500]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 8001318:	487d      	ldr	r0, [pc, #500]	; (8001510 <battle_no_last_of_ee2028_mode+0x33c>)
 800131a:	f003 f84b 	bl	80043b4 <HAL_UART_Transmit>

        // clear flag
        single_press = BOOL_CLR;
 800131e:	4b76      	ldr	r3, [pc, #472]	; (80014f8 <battle_no_last_of_ee2028_mode+0x324>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
    }

    // read TPHAGM telem and send UART @ 1 Hz
    if (HAL_GetTick() - last_telem_tick >= 1000) {
 8001324:	f001 fdda 	bl	8002edc <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <battle_no_last_of_ee2028_mode+0x340>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001334:	f0c0 80bd 	bcc.w	80014b2 <battle_no_last_of_ee2028_mode+0x2de>
        temp_data = read_temp();
 8001338:	f000 fb19 	bl	800196e <read_temp>
 800133c:	eef0 7a40 	vmov.f32	s15, s0
 8001340:	4b75      	ldr	r3, [pc, #468]	; (8001518 <battle_no_last_of_ee2028_mode+0x344>)
 8001342:	edc3 7a00 	vstr	s15, [r3]
        pressure_data = read_pressure();
 8001346:	f000 fb03 	bl	8001950 <read_pressure>
 800134a:	eef0 7a40 	vmov.f32	s15, s0
 800134e:	4b73      	ldr	r3, [pc, #460]	; (800151c <battle_no_last_of_ee2028_mode+0x348>)
 8001350:	edc3 7a00 	vstr	s15, [r3]
        humidity_data = read_humidity();
 8001354:	f000 faf3 	bl	800193e <read_humidity>
 8001358:	eef0 7a40 	vmov.f32	s15, s0
 800135c:	4b70      	ldr	r3, [pc, #448]	; (8001520 <battle_no_last_of_ee2028_mode+0x34c>)
 800135e:	edc3 7a00 	vstr	s15, [r3]
        read_acc(accel_data);
 8001362:	4870      	ldr	r0, [pc, #448]	; (8001524 <battle_no_last_of_ee2028_mode+0x350>)
 8001364:	f000 fa78 	bl	8001858 <read_acc>
        read_gyro(gyro_data);
 8001368:	486f      	ldr	r0, [pc, #444]	; (8001528 <battle_no_last_of_ee2028_mode+0x354>)
 800136a:	f000 fab5 	bl	80018d8 <read_gyro>
        read_mag(mag_data);
 800136e:	486f      	ldr	r0, [pc, #444]	; (800152c <battle_no_last_of_ee2028_mode+0x358>)
 8001370:	f000 fada 	bl	8001928 <read_mag>
        // sprintf(uart_buffer, "T: %.2f °C, P: %.2f kPA, H: %.2f%%, Ax: %.2f ms-2, Ay: %.2f ms-2, Az: %.2f ms-2, Gx: %.2f dps, Gy: %.2f dps, Gz: %.2f dps, Mx: %d mG, My: %d mG, Mz: %d mG\r\n",
        //     temp_data, pressure_data, humidity_data, accel_data[0], accel_data[1], accel_data[2], gyro_data[0], gyro_data[1], gyro_data[2], mag_data[0], mag_data[1], mag_data[2]);
        // HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);

        // split to multiple messages to fit in buffer
        sprintf(uart_buffer, "T: %.2f degC, P: %.2f kPA, H: %.2f%%, ", temp_data, pressure_data, humidity_data);
 8001374:	4b68      	ldr	r3, [pc, #416]	; (8001518 <battle_no_last_of_ee2028_mode+0x344>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8e5 	bl	8000548 <__aeabi_f2d>
 800137e:	4680      	mov	r8, r0
 8001380:	4689      	mov	r9, r1
 8001382:	4b66      	ldr	r3, [pc, #408]	; (800151c <battle_no_last_of_ee2028_mode+0x348>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8de 	bl	8000548 <__aeabi_f2d>
 800138c:	4604      	mov	r4, r0
 800138e:	460d      	mov	r5, r1
 8001390:	4b63      	ldr	r3, [pc, #396]	; (8001520 <battle_no_last_of_ee2028_mode+0x34c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8d7 	bl	8000548 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013a2:	e9cd 4500 	strd	r4, r5, [sp]
 80013a6:	4642      	mov	r2, r8
 80013a8:	464b      	mov	r3, r9
 80013aa:	4961      	ldr	r1, [pc, #388]	; (8001530 <battle_no_last_of_ee2028_mode+0x35c>)
 80013ac:	4857      	ldr	r0, [pc, #348]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 80013ae:	f004 fe83 	bl	80060b8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80013b2:	4856      	ldr	r0, [pc, #344]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 80013b4:	f7fe ff0c 	bl	80001d0 <strlen>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c0:	4952      	ldr	r1, [pc, #328]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 80013c2:	4853      	ldr	r0, [pc, #332]	; (8001510 <battle_no_last_of_ee2028_mode+0x33c>)
 80013c4:	f002 fff6 	bl	80043b4 <HAL_UART_Transmit>

        sprintf(uart_buffer, "Ax: %.2f ms-2, Ay: %.2f ms-2, Az: %.2f ms-2, ", accel_data[0], accel_data[1], accel_data[2]);
 80013c8:	4b56      	ldr	r3, [pc, #344]	; (8001524 <battle_no_last_of_ee2028_mode+0x350>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8bb 	bl	8000548 <__aeabi_f2d>
 80013d2:	4680      	mov	r8, r0
 80013d4:	4689      	mov	r9, r1
 80013d6:	4b53      	ldr	r3, [pc, #332]	; (8001524 <battle_no_last_of_ee2028_mode+0x350>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8b4 	bl	8000548 <__aeabi_f2d>
 80013e0:	4604      	mov	r4, r0
 80013e2:	460d      	mov	r5, r1
 80013e4:	4b4f      	ldr	r3, [pc, #316]	; (8001524 <battle_no_last_of_ee2028_mode+0x350>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f8ad 	bl	8000548 <__aeabi_f2d>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013f6:	e9cd 4500 	strd	r4, r5, [sp]
 80013fa:	4642      	mov	r2, r8
 80013fc:	464b      	mov	r3, r9
 80013fe:	494d      	ldr	r1, [pc, #308]	; (8001534 <battle_no_last_of_ee2028_mode+0x360>)
 8001400:	4842      	ldr	r0, [pc, #264]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 8001402:	f004 fe59 	bl	80060b8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001406:	4841      	ldr	r0, [pc, #260]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 8001408:	f7fe fee2 	bl	80001d0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001414:	493d      	ldr	r1, [pc, #244]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 8001416:	483e      	ldr	r0, [pc, #248]	; (8001510 <battle_no_last_of_ee2028_mode+0x33c>)
 8001418:	f002 ffcc 	bl	80043b4 <HAL_UART_Transmit>

        sprintf(uart_buffer, "Gx: %.2f dps, Gy: %.2f dps, Gz: %.2f dps, ", gyro_data[0], gyro_data[1], gyro_data[2]);
 800141c:	4b42      	ldr	r3, [pc, #264]	; (8001528 <battle_no_last_of_ee2028_mode+0x354>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f891 	bl	8000548 <__aeabi_f2d>
 8001426:	4680      	mov	r8, r0
 8001428:	4689      	mov	r9, r1
 800142a:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <battle_no_last_of_ee2028_mode+0x354>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f88a 	bl	8000548 <__aeabi_f2d>
 8001434:	4604      	mov	r4, r0
 8001436:	460d      	mov	r5, r1
 8001438:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <battle_no_last_of_ee2028_mode+0x354>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f883 	bl	8000548 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800144a:	e9cd 4500 	strd	r4, r5, [sp]
 800144e:	4642      	mov	r2, r8
 8001450:	464b      	mov	r3, r9
 8001452:	4939      	ldr	r1, [pc, #228]	; (8001538 <battle_no_last_of_ee2028_mode+0x364>)
 8001454:	482d      	ldr	r0, [pc, #180]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 8001456:	f004 fe2f 	bl	80060b8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 800145a:	482c      	ldr	r0, [pc, #176]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 800145c:	f7fe feb8 	bl	80001d0 <strlen>
 8001460:	4603      	mov	r3, r0
 8001462:	b29a      	uxth	r2, r3
 8001464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001468:	4928      	ldr	r1, [pc, #160]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 800146a:	4829      	ldr	r0, [pc, #164]	; (8001510 <battle_no_last_of_ee2028_mode+0x33c>)
 800146c:	f002 ffa2 	bl	80043b4 <HAL_UART_Transmit>

        sprintf(uart_buffer, "Mx: %d mG, My: %d mG, Mz: %d mG\r\n", mag_data[0], mag_data[1], mag_data[2]);
 8001470:	4b2e      	ldr	r3, [pc, #184]	; (800152c <battle_no_last_of_ee2028_mode+0x358>)
 8001472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001476:	461a      	mov	r2, r3
 8001478:	4b2c      	ldr	r3, [pc, #176]	; (800152c <battle_no_last_of_ee2028_mode+0x358>)
 800147a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800147e:	4619      	mov	r1, r3
 8001480:	4b2a      	ldr	r3, [pc, #168]	; (800152c <battle_no_last_of_ee2028_mode+0x358>)
 8001482:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	460b      	mov	r3, r1
 800148a:	492c      	ldr	r1, [pc, #176]	; (800153c <battle_no_last_of_ee2028_mode+0x368>)
 800148c:	481f      	ldr	r0, [pc, #124]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 800148e:	f004 fe13 	bl	80060b8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001492:	481e      	ldr	r0, [pc, #120]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 8001494:	f7fe fe9c 	bl	80001d0 <strlen>
 8001498:	4603      	mov	r3, r0
 800149a:	b29a      	uxth	r2, r3
 800149c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a0:	491a      	ldr	r1, [pc, #104]	; (800150c <battle_no_last_of_ee2028_mode+0x338>)
 80014a2:	481b      	ldr	r0, [pc, #108]	; (8001510 <battle_no_last_of_ee2028_mode+0x33c>)
 80014a4:	f002 ff86 	bl	80043b4 <HAL_UART_Transmit>

        last_telem_tick = HAL_GetTick();
 80014a8:	f001 fd18 	bl	8002edc <HAL_GetTick>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a19      	ldr	r2, [pc, #100]	; (8001514 <battle_no_last_of_ee2028_mode+0x340>)
 80014b0:	6013      	str	r3, [r2, #0]
    }

    // TODO add upside down go to BATTLE_LAST_OF_EE2028_MODE
    // Reason for using EXTI: reduce over head of always I2C reading LSM6DSL_ACC_GYRO_D6D_SRC
    if (flag_6d == BOOL_SET) {
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <battle_no_last_of_ee2028_mode+0x36c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d019      	beq.n	80014f0 <battle_no_last_of_ee2028_mode+0x31c>
        flag_6d = 0;
 80014bc:	4b20      	ldr	r3, [pc, #128]	; (8001540 <battle_no_last_of_ee2028_mode+0x36c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
        uint8_t d6d_src = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_D6D_SRC);
 80014c2:	211d      	movs	r1, #29
 80014c4:	20d4      	movs	r0, #212	; 0xd4
 80014c6:	f000 fe65 	bl	8002194 <SENSOR_IO_Read>
 80014ca:	4603      	mov	r3, r0
 80014cc:	73fb      	strb	r3, [r7, #15]

        // if upside down, go to BATTLE_LAST_OF_EE2028_MODE
        if (d6d_src & D6D_SRC_UPSIDEDOWN) {
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00b      	beq.n	80014f0 <battle_no_last_of_ee2028_mode+0x31c>
            *p_state = BATTLE_LAST_OF_EE2028_MODE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2202      	movs	r2, #2
 80014dc:	701a      	strb	r2, [r3, #0]
            last_telem_tick = 0;
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <battle_no_last_of_ee2028_mode+0x340>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
            last_of_ee2028_tick = HAL_GetTick();
 80014e4:	f001 fcfa 	bl	8002edc <HAL_GetTick>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <battle_no_last_of_ee2028_mode+0x370>)
 80014ec:	6013      	str	r3, [r2, #0]
            return;
 80014ee:	bf00      	nop
        }
    }

    // TODO monitoring with interupt
}
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014f8:	200002a5 	.word	0x200002a5
 80014fc:	200003d9 	.word	0x200003d9
 8001500:	08008364 	.word	0x08008364
 8001504:	08008324 	.word	0x08008324
 8001508:	08008384 	.word	0x08008384
 800150c:	200002a8 	.word	0x200002a8
 8001510:	20000328 	.word	0x20000328
 8001514:	200003a8 	.word	0x200003a8
 8001518:	200003d4 	.word	0x200003d4
 800151c:	200003d0 	.word	0x200003d0
 8001520:	200003cc 	.word	0x200003cc
 8001524:	200003ac 	.word	0x200003ac
 8001528:	200003b8 	.word	0x200003b8
 800152c:	200003c4 	.word	0x200003c4
 8001530:	080083a4 	.word	0x080083a4
 8001534:	080083cc 	.word	0x080083cc
 8001538:	080082b8 	.word	0x080082b8
 800153c:	080083fc 	.word	0x080083fc
 8001540:	200003d8 	.word	0x200003d8
 8001544:	2000029c 	.word	0x2000029c

08001548 <battle_last_of_ee2028_mode>:

static void battle_last_of_ee2028_mode(uint8_t* p_state)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    // in BATTLE_LAST_OF_EE2028_MODE, LED blinks at 2 Hz
    led_blink(LED_2HZ);
 8001550:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001554:	f000 f95c 	bl	8001810 <led_blink>

    // send help UART @ 1 Hz
    if (HAL_GetTick() - last_telem_tick >= 1000) {
 8001558:	f001 fcc0 	bl	8002edc <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <battle_last_of_ee2028_mode+0xe4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001568:	d313      	bcc.n	8001592 <battle_last_of_ee2028_mode+0x4a>
        sprintf(uart_buffer, "Drone Was Attacked! \r\n");
 800156a:	4931      	ldr	r1, [pc, #196]	; (8001630 <battle_last_of_ee2028_mode+0xe8>)
 800156c:	4831      	ldr	r0, [pc, #196]	; (8001634 <battle_last_of_ee2028_mode+0xec>)
 800156e:	f004 fda3 	bl	80060b8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001572:	4830      	ldr	r0, [pc, #192]	; (8001634 <battle_last_of_ee2028_mode+0xec>)
 8001574:	f7fe fe2c 	bl	80001d0 <strlen>
 8001578:	4603      	mov	r3, r0
 800157a:	b29a      	uxth	r2, r3
 800157c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001580:	492c      	ldr	r1, [pc, #176]	; (8001634 <battle_last_of_ee2028_mode+0xec>)
 8001582:	482d      	ldr	r0, [pc, #180]	; (8001638 <battle_last_of_ee2028_mode+0xf0>)
 8001584:	f002 ff16 	bl	80043b4 <HAL_UART_Transmit>
        last_telem_tick = HAL_GetTick();
 8001588:	f001 fca8 	bl	8002edc <HAL_GetTick>
 800158c:	4603      	mov	r3, r0
 800158e:	4a27      	ldr	r2, [pc, #156]	; (800162c <battle_last_of_ee2028_mode+0xe4>)
 8001590:	6013      	str	r3, [r2, #0]
    }

    // TODO Disable interupt for telem monitoring

    // in STANDBY_MODE, single press does nothing
    if (single_press) {
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <battle_last_of_ee2028_mode+0xf4>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <battle_last_of_ee2028_mode+0x58>
        // does nothing, but still need to reset the flag
        single_press = BOOL_CLR;
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <battle_last_of_ee2028_mode+0xf4>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
    }

    // in BATTLE_LAST_OF_EE2028_MODE, double press within 10 s to enter BATTLE_NO_LAST_OF_EE2028_MODE else DEAD_MODE
    if (HAL_GetTick() - last_of_ee2028_tick <= 10000) {
 80015a0:	f001 fc9c 	bl	8002edc <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b26      	ldr	r3, [pc, #152]	; (8001640 <battle_last_of_ee2028_mode+0xf8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d824      	bhi.n	80015fe <battle_last_of_ee2028_mode+0xb6>
        if (double_press) {
 80015b4:	4b23      	ldr	r3, [pc, #140]	; (8001644 <battle_last_of_ee2028_mode+0xfc>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d033      	beq.n	8001624 <battle_last_of_ee2028_mode+0xdc>
            uint8_t d6d_src = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_D6D_SRC);
 80015bc:	211d      	movs	r1, #29
 80015be:	20d4      	movs	r0, #212	; 0xd4
 80015c0:	f000 fde8 	bl	8002194 <SENSOR_IO_Read>
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]

            // if not upside down, go to BATTLE_NO_LAST_OF_EE2028_MODE
            if (!(d6d_src & D6D_SRC_UPSIDEDOWN)) {
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d111      	bne.n	80015f6 <battle_last_of_ee2028_mode+0xae>
                *p_state = BATTLE_NO_LAST_OF_EE2028_MODE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
                sprintf(uart_buffer, "Rescued :D \r\n");
 80015d8:	491b      	ldr	r1, [pc, #108]	; (8001648 <battle_last_of_ee2028_mode+0x100>)
 80015da:	4816      	ldr	r0, [pc, #88]	; (8001634 <battle_last_of_ee2028_mode+0xec>)
 80015dc:	f004 fd6c 	bl	80060b8 <siprintf>
                HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80015e0:	4814      	ldr	r0, [pc, #80]	; (8001634 <battle_last_of_ee2028_mode+0xec>)
 80015e2:	f7fe fdf5 	bl	80001d0 <strlen>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ee:	4911      	ldr	r1, [pc, #68]	; (8001634 <battle_last_of_ee2028_mode+0xec>)
 80015f0:	4811      	ldr	r0, [pc, #68]	; (8001638 <battle_last_of_ee2028_mode+0xf0>)
 80015f2:	f002 fedf 	bl	80043b4 <HAL_UART_Transmit>
            }

            double_press = BOOL_CLR;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <battle_last_of_ee2028_mode+0xfc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
            return;
 80015fc:	e012      	b.n	8001624 <battle_last_of_ee2028_mode+0xdc>
        }
    } else {
        // goes to DEAD_MODE
        *p_state = DEAD_MODE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2203      	movs	r2, #3
 8001602:	701a      	strb	r2, [r3, #0]
        sprintf(uart_buffer, "Dead :( \r\n");
 8001604:	4911      	ldr	r1, [pc, #68]	; (800164c <battle_last_of_ee2028_mode+0x104>)
 8001606:	480b      	ldr	r0, [pc, #44]	; (8001634 <battle_last_of_ee2028_mode+0xec>)
 8001608:	f004 fd56 	bl	80060b8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 800160c:	4809      	ldr	r0, [pc, #36]	; (8001634 <battle_last_of_ee2028_mode+0xec>)
 800160e:	f7fe fddf 	bl	80001d0 <strlen>
 8001612:	4603      	mov	r3, r0
 8001614:	b29a      	uxth	r2, r3
 8001616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161a:	4906      	ldr	r1, [pc, #24]	; (8001634 <battle_last_of_ee2028_mode+0xec>)
 800161c:	4806      	ldr	r0, [pc, #24]	; (8001638 <battle_last_of_ee2028_mode+0xf0>)
 800161e:	f002 fec9 	bl	80043b4 <HAL_UART_Transmit>
        return;
 8001622:	bf00      	nop
    }
}
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200003a8 	.word	0x200003a8
 8001630:	08008420 	.word	0x08008420
 8001634:	200002a8 	.word	0x200002a8
 8001638:	20000328 	.word	0x20000328
 800163c:	200002a5 	.word	0x200002a5
 8001640:	2000029c 	.word	0x2000029c
 8001644:	200002a6 	.word	0x200002a6
 8001648:	08008438 	.word	0x08008438
 800164c:	08008448 	.word	0x08008448

08001650 <dead_mode>:

static void dead_mode(uint8_t* p_state)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    // in DEAD_MODE, LED blinks at 2 Hz
    led_blink(LED_2HZ);
 8001658:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800165c:	f000 f8d8 	bl	8001810 <led_blink>

    // in DEAD_MODE, double press does nothing
    if (double_press) {
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <dead_mode+0x34>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <dead_mode+0x1e>
        // does nothing, but still need to reset the flag
        double_press = BOOL_CLR;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <dead_mode+0x34>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
    }

    // in DEAD_MODE, single press does nothing
    if (single_press) {
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <dead_mode+0x38>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <dead_mode+0x2c>
        // does nothing, but still need to reset the flag
        single_press = BOOL_CLR;
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <dead_mode+0x38>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
    }
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200002a6 	.word	0x200002a6
 8001688:	200002a5 	.word	0x200002a5

0800168c <UART1_Init>:

static void UART1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
    /* Pin configuration for UART. BSP_COM_Init() can do this automatically */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <UART1_Init+0xa0>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a25      	ldr	r2, [pc, #148]	; (800172c <UART1_Init+0xa0>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <UART1_Init+0xa0>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016b8:	2307      	movs	r3, #7
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 80016bc:	23c0      	movs	r3, #192	; 0xc0
 80016be:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4619      	mov	r1, r3
 80016d0:	4817      	ldr	r0, [pc, #92]	; (8001730 <UART1_Init+0xa4>)
 80016d2:	f001 fd21 	bl	8003118 <HAL_GPIO_Init>

    /* Configuring UART1 */
    huart1.Instance = USART1;
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <UART1_Init+0xa8>)
 80016d8:	4a17      	ldr	r2, [pc, #92]	; (8001738 <UART1_Init+0xac>)
 80016da:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <UART1_Init+0xa8>)
 80016de:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e2:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <UART1_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <UART1_Init+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <UART1_Init+0xa8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <UART1_Init+0xa8>)
 80016f8:	220c      	movs	r2, #12
 80016fa:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <UART1_Init+0xa8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <UART1_Init+0xa8>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <UART1_Init+0xa8>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <UART1_Init+0xa8>)
 8001710:	2200      	movs	r2, #0
 8001712:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001714:	4807      	ldr	r0, [pc, #28]	; (8001734 <UART1_Init+0xa8>)
 8001716:	f002 fdff 	bl	8004318 <HAL_UART_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d000      	beq.n	8001722 <UART1_Init+0x96>
        while (1) { }
 8001720:	e7fe      	b.n	8001720 <UART1_Init+0x94>
    }
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	48000400 	.word	0x48000400
 8001734:	20000328 	.word	0x20000328
 8001738:	40013800 	.word	0x40013800

0800173c <HAL_GPIO_EXTI_Callback>:
 * @brief ISR for GPIO
 * @param uint16_t GPIO_Pin
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
    // button
    if (GPIO_Pin == USER_BUTTON_PIN) {
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174c:	d107      	bne.n	800175e <HAL_GPIO_EXTI_Callback+0x22>
        button_press_tick = HAL_GetTick();
 800174e:	f001 fbc5 	bl	8002edc <HAL_GetTick>
 8001752:	4603      	mov	r3, r0
 8001754:	4a07      	ldr	r2, [pc, #28]	; (8001774 <HAL_GPIO_EXTI_Callback+0x38>)
 8001756:	6013      	str	r3, [r2, #0]
        button_flag = BOOL_SET;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <HAL_GPIO_EXTI_Callback+0x3c>)
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
    }

    // 6D from LSM6DSL
    if (GPIO_Pin == GPIO_PIN_11) {
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001764:	d102      	bne.n	800176c <HAL_GPIO_EXTI_Callback+0x30>
        flag_6d = BOOL_SET;
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_GPIO_EXTI_Callback+0x40>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
    }
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200002a0 	.word	0x200002a0
 8001778:	200002a4 	.word	0x200002a4
 800177c:	200003d8 	.word	0x200003d8

08001780 <button_press>:
 * double press changes the single_press and double_press global variable
 * @param None
 * @retval None
 */
static void button_press(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
    static uint32_t button_last_tick = 0;
    static bool button_wait_flag = BOOL_CLR;

    if (button_flag == BOOL_SET) {
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <button_press+0x78>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d01b      	beq.n	80017c6 <button_press+0x46>
        if (button_press_tick - button_last_tick > 500) {
 800178e:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <button_press+0x7c>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <button_press+0x80>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800179c:	d907      	bls.n	80017ae <button_press+0x2e>
            // new event: either a single click or the first click of a double click
            button_last_tick = button_press_tick;
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <button_press+0x7c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a17      	ldr	r2, [pc, #92]	; (8001800 <button_press+0x80>)
 80017a4:	6013      	str	r3, [r2, #0]
            button_wait_flag = BOOL_SET; // used to check for single press later
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <button_press+0x84>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e008      	b.n	80017c0 <button_press+0x40>
        } else {
            // the last time pressed is within 500ms ==> double press
            double_press = BOOL_SET;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <button_press+0x88>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
            single_press = BOOL_CLR;
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <button_press+0x8c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
            button_wait_flag = BOOL_CLR;
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <button_press+0x84>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
        }
        button_flag = BOOL_CLR;
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <button_press+0x78>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
    }

    if (button_wait_flag == BOOL_SET && (HAL_GetTick() - button_last_tick > 500)) {
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <button_press+0x84>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d011      	beq.n	80017f2 <button_press+0x72>
 80017ce:	f001 fb85 	bl	8002edc <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <button_press+0x80>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017de:	d908      	bls.n	80017f2 <button_press+0x72>
        // wait for 0.5 to decide its single press or not
        double_press = BOOL_CLR;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <button_press+0x88>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
        single_press = BOOL_SET;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <button_press+0x8c>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
        button_wait_flag = BOOL_CLR;
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <button_press+0x84>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
    }
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200002a4 	.word	0x200002a4
 80017fc:	200002a0 	.word	0x200002a0
 8001800:	200003dc 	.word	0x200003dc
 8001804:	200003e0 	.word	0x200003e0
 8001808:	200002a6 	.word	0x200002a6
 800180c:	200002a5 	.word	0x200002a5

08001810 <led_blink>:
 * always on
 * @param uint32_t period
 * @retval None
 */
static void led_blink(uint32_t period)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
    static uint32_t last_tick = 0;
    if (period == LED_ALWAYS_ON) {
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d103      	bne.n	8001826 <led_blink+0x16>
        BSP_LED_On(LED2);
 800181e:	2000      	movs	r0, #0
 8001820:	f000 fb22 	bl	8001e68 <BSP_LED_On>
    } else if ((HAL_GetTick() - last_tick) >= (period >> 1)) {
        // toggle every half a period, >> 1  to aproximate half, duty cycle is 50%
        BSP_LED_Toggle(LED2);
        last_tick = HAL_GetTick();
    }
}
 8001824:	e011      	b.n	800184a <led_blink+0x3a>
    } else if ((HAL_GetTick() - last_tick) >= (period >> 1)) {
 8001826:	f001 fb59 	bl	8002edc <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <led_blink+0x44>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	1ad2      	subs	r2, r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	429a      	cmp	r2, r3
 8001838:	d307      	bcc.n	800184a <led_blink+0x3a>
        BSP_LED_Toggle(LED2);
 800183a:	2000      	movs	r0, #0
 800183c:	f000 fb2a 	bl	8001e94 <BSP_LED_Toggle>
        last_tick = HAL_GetTick();
 8001840:	f001 fb4c 	bl	8002edc <HAL_GetTick>
 8001844:	4603      	mov	r3, r0
 8001846:	4a03      	ldr	r2, [pc, #12]	; (8001854 <led_blink+0x44>)
 8001848:	6013      	str	r3, [r2, #0]
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200003e4 	.word	0x200003e4

08001858 <read_acc>:
 * @brief read acceleration from LSM6DSL, using LSM6DSL.h straight
 * @param float* p_acc pointer to float array of 3 elements
 * @retval None
 */
static void read_acc(float* p_acc)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    int16_t accel_data_i16[3] = { 0 }; // array to store the x, y and z readings.
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	809a      	strh	r2, [r3, #4]
    LSM6DSL_AccReadXYZ(accel_data_i16); // read accelerometer
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	4618      	mov	r0, r3
 8001870:	f001 f924 	bl	8002abc <LSM6DSL_AccReadXYZ>
    // the function above returns 16 bit integers which are acceleration in mg (9.8/1000 m/s^2).
    // Converting to float in m/s^2
    for (int i = 0; i < 3; i++) {
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e021      	b.n	80018be <read_acc+0x66>
        *(p_acc + i) = (float)accel_data_i16[i] * (9.8 / 1000.0f);
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	3318      	adds	r3, #24
 8001880:	443b      	add	r3, r7
 8001882:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8001886:	ee07 3a90 	vmov	s15, r3
 800188a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188e:	ee17 0a90 	vmov	r0, s15
 8001892:	f7fe fe59 	bl	8000548 <__aeabi_f2d>
 8001896:	a30e      	add	r3, pc, #56	; (adr r3, 80018d0 <read_acc+0x78>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe feac 	bl	80005f8 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	18d4      	adds	r4, r2, r3
 80018b0:	f7ff f97a 	bl	8000ba8 <__aeabi_d2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 3; i++) {
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	ddda      	ble.n	800187a <read_acc+0x22>
    }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd90      	pop	{r4, r7, pc}
 80018ce:	bf00      	nop
 80018d0:	bc01a36f 	.word	0xbc01a36f
 80018d4:	3f841205 	.word	0x3f841205

080018d8 <read_gyro>:
 * @brief read gyro from LSM6DSL
 * @param float* p_gyro pointer to float array of 3 elements
 * @retval None
 */
static void read_gyro(float* p_gyro)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
    // the function that actually reads the xyz is LSM6DSL_GyroReadXYZAngRate in lsm6dsl.c
    // the function also does sensitivity conversion to mdps
    // returns float in mdps
    BSP_GYRO_GetXYZ(p_gyro);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fcd5 	bl	8002290 <BSP_GYRO_GetXYZ>
    // Converting to float in dps
    for (int i = 0; i < 3; i++) {
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	e012      	b.n	8001912 <read_gyro+0x3a>
        *(p_gyro + i) = *(p_gyro + i) / 1000.0f;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	ed93 7a00 	vldr	s14, [r3]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001924 <read_gyro+0x4c>
 8001904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001908:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b02      	cmp	r3, #2
 8001916:	dde9      	ble.n	80018ec <read_gyro+0x14>
    }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	447a0000 	.word	0x447a0000

08001928 <read_mag>:
 * @brief read mag from LIS3MDL
 * @param int16_t* p_mag pointer to int16_t array of 3 elements
 * @retval None
 */
static void read_mag(int16_t* p_mag)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    // the function that actually reads the xyz is LIS3MDL_MagReadXYZ in lis3mdl.c
    // the function also does sensitivity conversion to mGauss
    // returns int16_t in mGauss
    LIS3MDL_MagReadXYZ(p_mag);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 ff7b 	bl	800282c <LIS3MDL_MagReadXYZ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <read_humidity>:
 * @brief read humidity from HTS221
 * @param None
 * @retval humidity
 */
static float read_humidity(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
    // the function that actually reads the value is HTS221_H_ReadHumidity in hts221.c
    // returns as float in %
    return BSP_HSENSOR_ReadHumidity();
 8001942:	f000 fcdd 	bl	8002300 <BSP_HSENSOR_ReadHumidity>
 8001946:	eef0 7a40 	vmov.f32	s15, s0
}
 800194a:	eeb0 0a67 	vmov.f32	s0, s15
 800194e:	bd80      	pop	{r7, pc}

08001950 <read_pressure>:
 * @brief read pressure from LPS22HB
 * @param None
 * @retval humidity
 */
static float read_pressure(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
    // the function that actually reads the value is LPS22HB_P_ReadPressure in lps22hb.c
    // returns as float in hPa, the read does the concatenation of 3 bytes, 2's complement and *100/4096 then /100
    // divide 10 to convert to kPa
    return BSP_PSENSOR_ReadPressure() / 10;
 8001954:	f000 fd2e 	bl	80023b4 <BSP_PSENSOR_ReadPressure>
 8001958:	eef0 7a40 	vmov.f32	s15, s0
 800195c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001960:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001964:	eef0 7a66 	vmov.f32	s15, s13
}
 8001968:	eeb0 0a67 	vmov.f32	s0, s15
 800196c:	bd80      	pop	{r7, pc}

0800196e <read_temp>:
 * @brief read temperature from HTS221
 * @param None
 * @retval temperature
 */
static float read_temp(void)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	af00      	add	r7, sp, #0
    // the function that actually reads the value is HTS221_T_ReadTemp in hts221.c
    // returns as float in deg c
    return BSP_TSENSOR_ReadTemp();
 8001972:	f000 fd49 	bl	8002408 <BSP_TSENSOR_ReadTemp>
 8001976:	eef0 7a40 	vmov.f32	s15, s0
}
 800197a:	eeb0 0a67 	vmov.f32	s0, s15
 800197e:	bd80      	pop	{r7, pc}

08001980 <LSM6DSL_AccInit_6D_EXTI>:
 *        also init GPIO PD11 for the EXTI
 * @param None
 * @retval None
 */
static void LSM6DSL_AccInit_6D_EXTI(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
    // configuring the GPIO for 6D EXTI from LSM6DSL at PD11
    GPIO_InitTypeDef gpio_init_structure;

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <LSM6DSL_AccInit_6D_EXTI+0xbc>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a2c      	ldr	r2, [pc, #176]	; (8001a3c <LSM6DSL_AccInit_6D_EXTI+0xbc>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <LSM6DSL_AccInit_6D_EXTI+0xbc>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

    /* Configure PD11 pin as input with External interrupt */
    gpio_init_structure.Pin = GPIO_PIN_11;
 800199e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019a2:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80019a4:	2302      	movs	r3, #2
 80019a6:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	617b      	str	r3, [r7, #20]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING; // interupt is active high
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <LSM6DSL_AccInit_6D_EXTI+0xc0>)
 80019ae:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	4619      	mov	r1, r3
 80019b6:	4823      	ldr	r0, [pc, #140]	; (8001a44 <LSM6DSL_AccInit_6D_EXTI+0xc4>)
 80019b8:	f001 fbae 	bl	8003118 <HAL_GPIO_Init>

    /* Enable and set EXTI Interrupt priority */
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0x0F, 0x00);
 80019bc:	2200      	movs	r2, #0
 80019be:	210f      	movs	r1, #15
 80019c0:	2028      	movs	r0, #40	; 0x28
 80019c2:	f001 fb72 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019c6:	2028      	movs	r0, #40	; 0x28
 80019c8:	f001 fb8b 	bl	80030e2 <HAL_NVIC_EnableIRQ>

    // configuring the LSM6DSL for 6D EXTI through INT1
    // must init this for I2C
    SENSOR_IO_Init();
 80019cc:	f000 fbbe 	bl	800214c <SENSOR_IO_Init>

    // write 0x60 to 0x10 CTRL1_XL to set ODR_XL = 416 Hz and turn on device, FS_XL = ±2 g
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, 0x60);
 80019d0:	2260      	movs	r2, #96	; 0x60
 80019d2:	2110      	movs	r1, #16
 80019d4:	20d4      	movs	r0, #212	; 0xd4
 80019d6:	f000 fbc3 	bl	8002160 <SENSOR_IO_Write>
    // uint8_t debug_please_work;

    // debug_please_work = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);

    // Write 0x80 to 0x58 TAP_CFG Enable interrupts; latched mode disabled
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_CFG1, 0x80);
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	2158      	movs	r1, #88	; 0x58
 80019de:	20d4      	movs	r0, #212	; 0xd4
 80019e0:	f000 fbbe 	bl	8002160 <SENSOR_IO_Write>

    //    debug_please_work = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_CFG1);

    // Write 0x60 to 0x59 TAP_THS_6D Set 6D threshold (SIXD_THS[1:0] = 11b = 50 degrees), D4D disable
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_THS_6D, 0x60);
 80019e4:	2260      	movs	r2, #96	; 0x60
 80019e6:	2159      	movs	r1, #89	; 0x59
 80019e8:	20d4      	movs	r0, #212	; 0xd4
 80019ea:	f000 fbb9 	bl	8002160 <SENSOR_IO_Write>
    //	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_THS_6D, 0x20);
    //    // Write 0x00 to 0x59 TAP_THS_6D Set 6D threshold (SIXD_THS[1:0] = 00b = 80 degrees), D4D disable
    //	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_THS_6D, 0x00);

    // Write 01h to 0x17 CTRL8_XL Enable LPF2 filter to 6D functionality
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL, 0x01);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2117      	movs	r1, #23
 80019f2:	20d4      	movs	r0, #212	; 0xd4
 80019f4:	f000 fbb4 	bl	8002160 <SENSOR_IO_Write>

    // Write 04h to 0x5E MD1_CFG 6D interrupt driven to INT1 pin
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, 0x04);
 80019f8:	2204      	movs	r2, #4
 80019fa:	215e      	movs	r1, #94	; 0x5e
 80019fc:	20d4      	movs	r0, #212	; 0xd4
 80019fe:	f000 fbaf 	bl	8002160 <SENSOR_IO_Write>

    uint8_t ctrl = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	77fb      	strb	r3, [r7, #31]
    uint8_t tmp;

    /* Read CTRL3_C */
    tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001a06:	2112      	movs	r1, #18
 8001a08:	20d4      	movs	r0, #212	; 0xd4
 8001a0a:	f000 fbc3 	bl	8002194 <SENSOR_IO_Read>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	77bb      	strb	r3, [r7, #30]

    /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
    ctrl = LSM6DSL_BDU_BLOCK_UPDATE | LSM6DSL_ACC_GYRO_IF_INC_ENABLED;
 8001a12:	2344      	movs	r3, #68	; 0x44
 8001a14:	77fb      	strb	r3, [r7, #31]
    tmp &= ~(0x64); // clear BDU, IF_INC and H_LACTIVE (for interrupt to be active high)
 8001a16:	7fbb      	ldrb	r3, [r7, #30]
 8001a18:	f023 0364 	bic.w	r3, r3, #100	; 0x64
 8001a1c:	77bb      	strb	r3, [r7, #30]
    tmp |= ctrl;
 8001a1e:	7fba      	ldrb	r2, [r7, #30]
 8001a20:	7ffb      	ldrb	r3, [r7, #31]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	77bb      	strb	r3, [r7, #30]
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001a26:	7fbb      	ldrb	r3, [r7, #30]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	2112      	movs	r1, #18
 8001a2c:	20d4      	movs	r0, #212	; 0xd4
 8001a2e:	f000 fb97 	bl	8002160 <SENSOR_IO_Write>
}
 8001a32:	bf00      	nop
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	10110000 	.word	0x10110000
 8001a44:	48000c00 	.word	0x48000c00

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_MspInit+0x44>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a52:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <HAL_MspInit+0x44>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_MspInit+0x44>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_MspInit+0x44>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_MspInit+0x44>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6593      	str	r3, [r2, #88]	; 0x58
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_MspInit+0x44>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000

08001a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <HAL_I2C_MspInit+0x7c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d128      	bne.n	8001b04 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_I2C_MspInit+0x80>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <HAL_I2C_MspInit+0x80>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_I2C_MspInit+0x80>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001aca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad0:	2312      	movs	r3, #18
 8001ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001adc:	2304      	movs	r3, #4
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480b      	ldr	r0, [pc, #44]	; (8001b14 <HAL_I2C_MspInit+0x84>)
 8001ae8:	f001 fb16 	bl	8003118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_I2C_MspInit+0x80>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_I2C_MspInit+0x80>)
 8001af2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001af6:	6593      	str	r3, [r2, #88]	; 0x58
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_I2C_MspInit+0x80>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40005800 	.word	0x40005800
 8001b10:	40021000 	.word	0x40021000
 8001b14:	48000400 	.word	0x48000400

08001b18 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_I2C_MspDeInit+0x30>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d10a      	bne.n	8001b40 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_I2C_MspDeInit+0x34>)
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2e:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_I2C_MspDeInit+0x34>)
 8001b30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b34:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8001b36:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <HAL_I2C_MspDeInit+0x38>)
 8001b3c:	f001 fc96 	bl	800346c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40005800 	.word	0x40005800
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	48000400 	.word	0x48000400

08001b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	; 0x30
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2e      	ldr	r2, [pc, #184]	; (8001c2c <HAL_UART_MspInit+0xd8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d128      	bne.n	8001bc8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b76:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <HAL_UART_MspInit+0xdc>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7a:	4a2d      	ldr	r2, [pc, #180]	; (8001c30 <HAL_UART_MspInit+0xdc>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b80:	6613      	str	r3, [r2, #96]	; 0x60
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_UART_MspInit+0xdc>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_UART_MspInit+0xdc>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	4a27      	ldr	r2, [pc, #156]	; (8001c30 <HAL_UART_MspInit+0xdc>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9a:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <HAL_UART_MspInit+0xdc>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001ba6:	23c0      	movs	r3, #192	; 0xc0
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	481c      	ldr	r0, [pc, #112]	; (8001c34 <HAL_UART_MspInit+0xe0>)
 8001bc2:	f001 faa9 	bl	8003118 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bc6:	e02d      	b.n	8001c24 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <HAL_UART_MspInit+0xe4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d128      	bne.n	8001c24 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bd2:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_UART_MspInit+0xdc>)
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <HAL_UART_MspInit+0xdc>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_UART_MspInit+0xdc>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_UART_MspInit+0xdc>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bee:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <HAL_UART_MspInit+0xdc>)
 8001bf0:	f043 0308 	orr.w	r3, r3, #8
 8001bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_UART_MspInit+0xdc>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001c02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c14:	2307      	movs	r3, #7
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4807      	ldr	r0, [pc, #28]	; (8001c3c <HAL_UART_MspInit+0xe8>)
 8001c20:	f001 fa7a 	bl	8003118 <HAL_GPIO_Init>
}
 8001c24:	bf00      	nop
 8001c26:	3730      	adds	r7, #48	; 0x30
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40013800 	.word	0x40013800
 8001c30:	40021000 	.word	0x40021000
 8001c34:	48000400 	.word	0x48000400
 8001c38:	40004800 	.word	0x40004800
 8001c3c:	48000c00 	.word	0x48000c00

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c94:	f001 f910 	bl	8002eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001ca0:	2020      	movs	r0, #32
 8001ca2:	f001 fd09 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ca6:	2040      	movs	r0, #64	; 0x40
 8001ca8:	f001 fd06 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001cac:	2080      	movs	r0, #128	; 0x80
 8001cae:	f001 fd03 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001cb2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cb6:	f001 fcff 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001cc2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001cc6:	f001 fcf7 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001cca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001cce:	f001 fcf3 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001cd2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cd6:	f001 fcef 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001cda:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cde:	f001 fceb 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001ce2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ce6:	f001 fce7 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <_sbrk+0x50>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <_sbrk+0x16>
		heap_end = &end;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <_sbrk+0x50>)
 8001d02:	4a10      	ldr	r2, [pc, #64]	; (8001d44 <_sbrk+0x54>)
 8001d04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <_sbrk+0x50>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <_sbrk+0x50>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	466a      	mov	r2, sp
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d907      	bls.n	8001d2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d1a:	f003 fb85 	bl	8005428 <__errno>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	220c      	movs	r2, #12
 8001d22:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	e006      	b.n	8001d38 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <_sbrk+0x50>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	4a03      	ldr	r2, [pc, #12]	; (8001d40 <_sbrk+0x50>)
 8001d34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	200003e8 	.word	0x200003e8
 8001d44:	20000510 	.word	0x20000510

08001d48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <SystemInit+0x64>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d52:	4a16      	ldr	r2, [pc, #88]	; (8001dac <SystemInit+0x64>)
 8001d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <SystemInit+0x68>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <SystemInit+0x68>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <SystemInit+0x68>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <SystemInit+0x68>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <SystemInit+0x68>)
 8001d74:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d78:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <SystemInit+0x68>)
 8001d80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <SystemInit+0x68>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <SystemInit+0x68>)
 8001d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <SystemInit+0x68>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <SystemInit+0x64>)
 8001d9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d9e:	609a      	str	r2, [r3, #8]
#endif
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00
 8001db0:	40021000 	.word	0x40021000

08001db4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001db8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001dba:	e003      	b.n	8001dc4 <LoopCopyDataInit>

08001dbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001dbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001dc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001dc2:	3104      	adds	r1, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001dc4:	480b      	ldr	r0, [pc, #44]	; (8001df4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001dc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001dca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001dcc:	d3f6      	bcc.n	8001dbc <CopyDataInit>
	ldr	r2, =_sbss
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001dd0:	e002      	b.n	8001dd8 <LoopFillZerobss>

08001dd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001dd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001dd4:	f842 3b04 	str.w	r3, [r2], #4

08001dd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <LoopForever+0x16>)
	cmp	r2, r3
 8001dda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ddc:	d3f9      	bcc.n	8001dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dde:	f7ff ffb3 	bl	8001d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de2:	f003 fc1d 	bl	8005620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001de6:	f7ff f8b1 	bl	8000f4c <main>

08001dea <LoopForever>:

LoopForever:
    b LoopForever
 8001dea:	e7fe      	b.n	8001dea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001df0:	08008890 	.word	0x08008890
	ldr	r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001df8:	2000027c 	.word	0x2000027c
	ldr	r2, =_sbss
 8001dfc:	2000027c 	.word	0x2000027c
	ldr	r3, = _ebss
 8001e00:	2000050c 	.word	0x2000050c

08001e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC1_2_IRQHandler>
	...

08001e08 <BSP_LED_Init>:
  * @param  Led: LED to be configured. 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10b      	bne.n	8001e30 <BSP_LED_Init+0x28>
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <BSP_LED_Init+0x58>)
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1c:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <BSP_LED_Init+0x58>)
 8001e1e:	f043 0302 	orr.w	r3, r3, #2
 8001e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <BSP_LED_Init+0x58>)
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8001e30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e34:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001e36:	2301      	movs	r3, #1
 8001e38:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <BSP_LED_Init+0x5c>)
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	f107 020c 	add.w	r2, r7, #12
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f001 f961 	bl	8003118 <HAL_GPIO_Init>
}
 8001e56:	bf00      	nop
 8001e58:	3720      	adds	r7, #32
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	20000004 	.word	0x20000004

08001e68 <BSP_LED_On>:
  * @param  Led: LED to be set on 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <BSP_LED_On+0x28>)
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e7e:	b291      	uxth	r1, r2
 8001e80:	2201      	movs	r2, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f001 fbe6 	bl	8003654 <HAL_GPIO_WritePin>
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000004 	.word	0x20000004

08001e94 <BSP_LED_Toggle>:
  * @param  Led: LED to be toggled
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	4a06      	ldr	r2, [pc, #24]	; (8001ebc <BSP_LED_Toggle+0x28>)
 8001ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eaa:	b292      	uxth	r2, r2
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 fbe8 	bl	8003684 <HAL_GPIO_TogglePin>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000004 	.word	0x20000004

08001ec0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	460a      	mov	r2, r1
 8001eca:	71fb      	strb	r3, [r7, #7]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <BSP_PB_Init+0xa0>)
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed4:	4a22      	ldr	r2, [pc, #136]	; (8001f60 <BSP_PB_Init+0xa0>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001edc:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <BSP_PB_Init+0xa0>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001ee8:	79bb      	ldrb	r3, [r7, #6]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d112      	bne.n	8001f14 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef2:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <BSP_PB_Init+0xa4>)
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	f107 020c 	add.w	r2, r7, #12
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f001 f902 	bl	8003118 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001f14:	79bb      	ldrb	r3, [r7, #6]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d11e      	bne.n	8001f58 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <BSP_PB_Init+0xa8>)
 8001f2a:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <BSP_PB_Init+0xa4>)
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	f107 020c 	add.w	r2, r7, #12
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 f8ec 	bl	8003118 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001f40:	2328      	movs	r3, #40	; 0x28
 8001f42:	b25b      	sxtb	r3, r3
 8001f44:	2200      	movs	r2, #0
 8001f46:	210f      	movs	r1, #15
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f001 f8ae 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001f4e:	2328      	movs	r3, #40	; 0x28
 8001f50:	b25b      	sxtb	r3, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f001 f8c5 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	20000008 	.word	0x20000008
 8001f68:	10110000 	.word	0x10110000

08001f6c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <I2Cx_MspInit+0xa8>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	4a26      	ldr	r2, [pc, #152]	; (8002014 <I2Cx_MspInit+0xa8>)
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <I2Cx_MspInit+0xa8>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001f8c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f90:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f92:	2312      	movs	r3, #18
 8001f94:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001f96:	2301      	movs	r3, #1
 8001f98:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	481b      	ldr	r0, [pc, #108]	; (8002018 <I2Cx_MspInit+0xac>)
 8001faa:	f001 f8b5 	bl	8003118 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4818      	ldr	r0, [pc, #96]	; (8002018 <I2Cx_MspInit+0xac>)
 8001fb6:	f001 f8af 	bl	8003118 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <I2Cx_MspInit+0xa8>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	4a15      	ldr	r2, [pc, #84]	; (8002014 <I2Cx_MspInit+0xa8>)
 8001fc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <I2Cx_MspInit+0xa8>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <I2Cx_MspInit+0xa8>)
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd6:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <I2Cx_MspInit+0xa8>)
 8001fd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fdc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <I2Cx_MspInit+0xa8>)
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe2:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <I2Cx_MspInit+0xa8>)
 8001fe4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001fe8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	210f      	movs	r1, #15
 8001fee:	2021      	movs	r0, #33	; 0x21
 8001ff0:	f001 f85b 	bl	80030aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001ff4:	2021      	movs	r0, #33	; 0x21
 8001ff6:	f001 f874 	bl	80030e2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	210f      	movs	r1, #15
 8001ffe:	2022      	movs	r0, #34	; 0x22
 8002000:	f001 f853 	bl	80030aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002004:	2022      	movs	r0, #34	; 0x22
 8002006:	f001 f86c 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3728      	adds	r7, #40	; 0x28
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	48000400 	.word	0x48000400

0800201c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <I2Cx_Init+0x54>)
 8002028:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a11      	ldr	r2, [pc, #68]	; (8002074 <I2Cx_Init+0x58>)
 800202e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff89 	bl	8001f6c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f001 fb44 	bl	80036e8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002060:	2100      	movs	r1, #0
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f002 f848 	bl	80040f8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40005800 	.word	0x40005800
 8002074:	00702681 	.word	0x00702681

08002078 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af04      	add	r7, sp, #16
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	4608      	mov	r0, r1
 8002082:	4611      	mov	r1, r2
 8002084:	461a      	mov	r2, r3
 8002086:	4603      	mov	r3, r0
 8002088:	72fb      	strb	r3, [r7, #11]
 800208a:	460b      	mov	r3, r1
 800208c:	813b      	strh	r3, [r7, #8]
 800208e:	4613      	mov	r3, r2
 8002090:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002096:	7afb      	ldrb	r3, [r7, #11]
 8002098:	b299      	uxth	r1, r3
 800209a:	88f8      	ldrh	r0, [r7, #6]
 800209c:	893a      	ldrh	r2, [r7, #8]
 800209e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a2:	9302      	str	r3, [sp, #8]
 80020a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	4603      	mov	r3, r0
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f001 fcec 	bl	8003a8c <HAL_I2C_Mem_Read>
 80020b4:	4603      	mov	r3, r0
 80020b6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80020be:	7afb      	ldrb	r3, [r7, #11]
 80020c0:	4619      	mov	r1, r3
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f832 	bl	800212c <I2Cx_Error>
  }
  return status;
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b08a      	sub	sp, #40	; 0x28
 80020d6:	af04      	add	r7, sp, #16
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	4608      	mov	r0, r1
 80020dc:	4611      	mov	r1, r2
 80020de:	461a      	mov	r2, r3
 80020e0:	4603      	mov	r3, r0
 80020e2:	72fb      	strb	r3, [r7, #11]
 80020e4:	460b      	mov	r3, r1
 80020e6:	813b      	strh	r3, [r7, #8]
 80020e8:	4613      	mov	r3, r2
 80020ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	b299      	uxth	r1, r3
 80020f4:	88f8      	ldrh	r0, [r7, #6]
 80020f6:	893a      	ldrh	r2, [r7, #8]
 80020f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fc:	9302      	str	r3, [sp, #8]
 80020fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	4603      	mov	r3, r0
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f001 fbab 	bl	8003864 <HAL_I2C_Mem_Write>
 800210e:	4603      	mov	r3, r0
 8002110:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002112:	7dfb      	ldrb	r3, [r7, #23]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002118:	7afb      	ldrb	r3, [r7, #11]
 800211a:	4619      	mov	r1, r3
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f805 	bl	800212c <I2Cx_Error>
  }
  return status;
 8002122:	7dfb      	ldrb	r3, [r7, #23]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f001 fb64 	bl	8003806 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ff6c 	bl	800201c <I2Cx_Init>
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <SENSOR_IO_Init+0x10>)
 8002152:	f7ff ff63 	bl	800201c <I2Cx_Init>
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200003ec 	.word	0x200003ec

08002160 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af02      	add	r7, sp, #8
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
 800216a:	460b      	mov	r3, r1
 800216c:	71bb      	strb	r3, [r7, #6]
 800216e:	4613      	mov	r3, r2
 8002170:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002172:	79bb      	ldrb	r3, [r7, #6]
 8002174:	b29a      	uxth	r2, r3
 8002176:	79f9      	ldrb	r1, [r7, #7]
 8002178:	2301      	movs	r3, #1
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	1d7b      	adds	r3, r7, #5
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2301      	movs	r3, #1
 8002182:	4803      	ldr	r0, [pc, #12]	; (8002190 <SENSOR_IO_Write+0x30>)
 8002184:	f7ff ffa5 	bl	80020d2 <I2Cx_WriteMultiple>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200003ec 	.word	0x200003ec

08002194 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af02      	add	r7, sp, #8
 800219a:	4603      	mov	r3, r0
 800219c:	460a      	mov	r2, r1
 800219e:	71fb      	strb	r3, [r7, #7]
 80021a0:	4613      	mov	r3, r2
 80021a2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80021a8:	79bb      	ldrb	r3, [r7, #6]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	79f9      	ldrb	r1, [r7, #7]
 80021ae:	2301      	movs	r3, #1
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	f107 030f 	add.w	r3, r7, #15
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2301      	movs	r3, #1
 80021ba:	4804      	ldr	r0, [pc, #16]	; (80021cc <SENSOR_IO_Read+0x38>)
 80021bc:	f7ff ff5c 	bl	8002078 <I2Cx_ReadMultiple>

  return read_value;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200003ec 	.word	0x200003ec

080021d0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	603a      	str	r2, [r7, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
 80021de:	460b      	mov	r3, r1
 80021e0:	71bb      	strb	r3, [r7, #6]
 80021e2:	4613      	mov	r3, r2
 80021e4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80021e6:	79bb      	ldrb	r3, [r7, #6]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	79f9      	ldrb	r1, [r7, #7]
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2301      	movs	r3, #1
 80021f6:	4804      	ldr	r0, [pc, #16]	; (8002208 <SENSOR_IO_ReadMultiple+0x38>)
 80021f8:	f7ff ff3e 	bl	8002078 <I2Cx_ReadMultiple>
 80021fc:	4603      	mov	r3, r0
 80021fe:	b29b      	uxth	r3, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200003ec 	.word	0x200003ec

0800220c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002216:	2300      	movs	r3, #0
 8002218:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <BSP_GYRO_Init+0x7c>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	4798      	blx	r3
 8002220:	4603      	mov	r3, r0
 8002222:	2b6a      	cmp	r3, #106	; 0x6a
 8002224:	d002      	beq.n	800222c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	e028      	b.n	800227e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <BSP_GYRO_Init+0x80>)
 800222e:	4a16      	ldr	r2, [pc, #88]	; (8002288 <BSP_GYRO_Init+0x7c>)
 8002230:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002236:	2330      	movs	r3, #48	; 0x30
 8002238:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002242:	2340      	movs	r3, #64	; 0x40
 8002244:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800224a:	230c      	movs	r3, #12
 800224c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800224e:	7aba      	ldrb	r2, [r7, #10]
 8002250:	797b      	ldrb	r3, [r7, #5]
 8002252:	4313      	orrs	r3, r2
 8002254:	b2db      	uxtb	r3, r3
 8002256:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002258:	7a3b      	ldrb	r3, [r7, #8]
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	b2db      	uxtb	r3, r3
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b21a      	sxth	r2, r3
 8002264:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	b21b      	sxth	r3, r3
 800226c:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <BSP_GYRO_Init+0x80>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	89ba      	ldrh	r2, [r7, #12]
 8002276:	4610      	mov	r0, r2
 8002278:	4798      	blx	r3
    
    ret = GYRO_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000068 	.word	0x20000068
 800228c:	20000438 	.word	0x20000438

08002290 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <BSP_GYRO_GetXYZ+0x2c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <BSP_GYRO_GetXYZ+0x2c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <BSP_GYRO_GetXYZ+0x2c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
    }
  }
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000438 	.word	0x20000438

080022c0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <BSP_HSENSOR_Init+0x38>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	20be      	movs	r0, #190	; 0xbe
 80022cc:	4798      	blx	r3
 80022ce:	4603      	mov	r3, r0
 80022d0:	2bbc      	cmp	r3, #188	; 0xbc
 80022d2:	d002      	beq.n	80022da <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	e009      	b.n	80022ee <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <BSP_HSENSOR_Init+0x3c>)
 80022dc:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <BSP_HSENSOR_Init+0x38>)
 80022de:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <BSP_HSENSOR_Init+0x3c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	20be      	movs	r0, #190	; 0xbe
 80022e8:	4798      	blx	r3
    ret = HSENSOR_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80022ee:	687b      	ldr	r3, [r7, #4]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	2000000c 	.word	0x2000000c
 80022fc:	2000043c 	.word	0x2000043c

08002300 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <BSP_HSENSOR_ReadHumidity+0x18>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	20be      	movs	r0, #190	; 0xbe
 800230c:	4798      	blx	r3
 800230e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002312:	eeb0 0a67 	vmov.f32	s0, s15
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2000043c 	.word	0x2000043c

0800231c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <BSP_MAGNETO_Init+0x50>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	4798      	blx	r3
 800232c:	4603      	mov	r3, r0
 800232e:	2b3d      	cmp	r3, #61	; 0x3d
 8002330:	d002      	beq.n	8002338 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	71fb      	strb	r3, [r7, #7]
 8002336:	e013      	b.n	8002360 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <BSP_MAGNETO_Init+0x54>)
 800233a:	4a0c      	ldr	r2, [pc, #48]	; (800236c <BSP_MAGNETO_Init+0x50>)
 800233c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800233e:	2358      	movs	r3, #88	; 0x58
 8002340:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002342:	2300      	movs	r3, #0
 8002344:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002346:	2300      	movs	r3, #0
 8002348:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800234a:	2308      	movs	r3, #8
 800234c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800234e:	2340      	movs	r3, #64	; 0x40
 8002350:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <BSP_MAGNETO_Init+0x54>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	463a      	mov	r2, r7
 800235a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800235e:	4798      	blx	r3
  } 

  return ret;  
 8002360:	79fb      	ldrb	r3, [r7, #7]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000028 	.word	0x20000028
 8002370:	20000440 	.word	0x20000440

08002374 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <BSP_PSENSOR_Init+0x38>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	20ba      	movs	r0, #186	; 0xba
 8002380:	4798      	blx	r3
 8002382:	4603      	mov	r3, r0
 8002384:	2bb1      	cmp	r3, #177	; 0xb1
 8002386:	d002      	beq.n	800238e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	e009      	b.n	80023a2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <BSP_PSENSOR_Init+0x3c>)
 8002390:	4a06      	ldr	r2, [pc, #24]	; (80023ac <BSP_PSENSOR_Init+0x38>)
 8002392:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <BSP_PSENSOR_Init+0x3c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	20ba      	movs	r0, #186	; 0xba
 800239c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80023a2:	687b      	ldr	r3, [r7, #4]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	2000005c 	.word	0x2000005c
 80023b0:	20000444 	.word	0x20000444

080023b4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <BSP_PSENSOR_ReadPressure+0x18>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	20ba      	movs	r0, #186	; 0xba
 80023c0:	4798      	blx	r3
 80023c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80023c6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000444 	.word	0x20000444

080023d0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <BSP_TSENSOR_Init+0x30>)
 80023dc:	4a09      	ldr	r2, [pc, #36]	; (8002404 <BSP_TSENSOR_Init+0x34>)
 80023de:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80023e0:	f7ff feb4 	bl	800214c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <BSP_TSENSOR_Init+0x30>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2100      	movs	r1, #0
 80023ec:	20be      	movs	r0, #190	; 0xbe
 80023ee:	4798      	blx	r3

  ret = TSENSOR_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80023f4:	79fb      	ldrb	r3, [r7, #7]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000448 	.word	0x20000448
 8002404:	20000018 	.word	0x20000018

08002408 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <BSP_TSENSOR_ReadTemp+0x18>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	20be      	movs	r0, #190	; 0xbe
 8002414:	4798      	blx	r3
 8002416:	eef0 7a40 	vmov.f32	s15, s0
}
 800241a:	eeb0 0a67 	vmov.f32	s0, s15
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000448 	.word	0x20000448

08002424 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2120      	movs	r1, #32
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fead 	bl	8002194 <SENSOR_IO_Read>
 800243a:	4603      	mov	r3, r0
 800243c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	f023 0303 	bic.w	r3, r3, #3
 8002454:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002464:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	2120      	movs	r1, #32
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fe76 	bl	8002160 <SENSOR_IO_Write>
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800248a:	f7ff fe5f 	bl	800214c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	210f      	movs	r1, #15
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fe7d 	bl	8002194 <SENSOR_IO_Read>
 800249a:	4603      	mov	r3, r0
 800249c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	b2d8      	uxtb	r0, r3
 80024b6:	f107 020c 	add.w	r2, r7, #12
 80024ba:	2302      	movs	r3, #2
 80024bc:	21b0      	movs	r1, #176	; 0xb0
 80024be:	f7ff fe87 	bl	80021d0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80024c2:	7b3b      	ldrb	r3, [r7, #12]
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80024ca:	7b7b      	ldrb	r3, [r7, #13]
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	b2d8      	uxtb	r0, r3
 80024d6:	f107 020c 	add.w	r2, r7, #12
 80024da:	2302      	movs	r3, #2
 80024dc:	21b6      	movs	r1, #182	; 0xb6
 80024de:	f7ff fe77 	bl	80021d0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80024e2:	7b7b      	ldrb	r3, [r7, #13]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	7b3b      	ldrb	r3, [r7, #12]
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	4313      	orrs	r3, r2
 80024ee:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	b2d8      	uxtb	r0, r3
 80024f4:	f107 020c 	add.w	r2, r7, #12
 80024f8:	2302      	movs	r3, #2
 80024fa:	21ba      	movs	r1, #186	; 0xba
 80024fc:	f7ff fe68 	bl	80021d0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002500:	7b7b      	ldrb	r3, [r7, #13]
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	b21a      	sxth	r2, r3
 8002506:	7b3b      	ldrb	r3, [r7, #12]
 8002508:	b21b      	sxth	r3, r3
 800250a:	4313      	orrs	r3, r2
 800250c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	b2d8      	uxtb	r0, r3
 8002512:	f107 020c 	add.w	r2, r7, #12
 8002516:	2302      	movs	r3, #2
 8002518:	21a8      	movs	r1, #168	; 0xa8
 800251a:	f7ff fe59 	bl	80021d0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800251e:	7b7b      	ldrb	r3, [r7, #13]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	b21a      	sxth	r2, r3
 8002524:	7b3b      	ldrb	r3, [r7, #12]
 8002526:	b21b      	sxth	r3, r3
 8002528:	4313      	orrs	r3, r2
 800252a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800252c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002530:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800253e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002542:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	ee07 3a90 	vmov	s15, r3
 800254c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002550:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002554:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002558:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	ee07 3a90 	vmov	s15, r3
 8002562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800256a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800257e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002582:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800258a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800258e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002592:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80025d8 <HTS221_H_ReadHumidity+0x130>
 8002596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800259a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259e:	dd01      	ble.n	80025a4 <HTS221_H_ReadHumidity+0xfc>
 80025a0:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HTS221_H_ReadHumidity+0x134>)
 80025a2:	e00a      	b.n	80025ba <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80025a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b0:	d502      	bpl.n	80025b8 <HTS221_H_ReadHumidity+0x110>
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e000      	b.n	80025ba <HTS221_H_ReadHumidity+0x112>
 80025b8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80025ba:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80025bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80025c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025c8:	eef0 7a66 	vmov.f32	s15, s13
}
 80025cc:	eeb0 0a67 	vmov.f32	s0, s15
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	447a0000 	.word	0x447a0000
 80025dc:	447a0000 	.word	0x447a0000

080025e0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2120      	movs	r1, #32
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fdce 	bl	8002194 <SENSOR_IO_Read>
 80025f8:	4603      	mov	r3, r0
 80025fa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	f023 0303 	bic.w	r3, r3, #3
 8002612:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002622:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	2120      	movs	r1, #32
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fd97 	bl	8002160 <SENSOR_IO_Write>
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b088      	sub	sp, #32
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	b2d8      	uxtb	r0, r3
 8002648:	f107 0208 	add.w	r2, r7, #8
 800264c:	2302      	movs	r3, #2
 800264e:	21b2      	movs	r1, #178	; 0xb2
 8002650:	f7ff fdbe 	bl	80021d0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2135      	movs	r1, #53	; 0x35
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fd9a 	bl	8002194 <SENSOR_IO_Read>
 8002660:	4603      	mov	r3, r0
 8002662:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002664:	7ffb      	ldrb	r3, [r7, #31]
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	b21b      	sxth	r3, r3
 800266a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266e:	b21a      	sxth	r2, r3
 8002670:	7a3b      	ldrb	r3, [r7, #8]
 8002672:	b21b      	sxth	r3, r3
 8002674:	4313      	orrs	r3, r2
 8002676:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002678:	7ffb      	ldrb	r3, [r7, #31]
 800267a:	019b      	lsls	r3, r3, #6
 800267c:	b21b      	sxth	r3, r3
 800267e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002682:	b21a      	sxth	r2, r3
 8002684:	7a7b      	ldrb	r3, [r7, #9]
 8002686:	b21b      	sxth	r3, r3
 8002688:	4313      	orrs	r3, r2
 800268a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800268c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002690:	10db      	asrs	r3, r3, #3
 8002692:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002694:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002698:	10db      	asrs	r3, r3, #3
 800269a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	b2d8      	uxtb	r0, r3
 80026a0:	f107 0208 	add.w	r2, r7, #8
 80026a4:	2304      	movs	r3, #4
 80026a6:	21bc      	movs	r1, #188	; 0xbc
 80026a8:	f7ff fd92 	bl	80021d0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80026ac:	7a7b      	ldrb	r3, [r7, #9]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	b21a      	sxth	r2, r3
 80026b2:	7a3b      	ldrb	r3, [r7, #8]
 80026b4:	b21b      	sxth	r3, r3
 80026b6:	4313      	orrs	r3, r2
 80026b8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80026ba:	7afb      	ldrb	r3, [r7, #11]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	b21a      	sxth	r2, r3
 80026c0:	7abb      	ldrb	r3, [r7, #10]
 80026c2:	b21b      	sxth	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	b2d8      	uxtb	r0, r3
 80026cc:	f107 0208 	add.w	r2, r7, #8
 80026d0:	2302      	movs	r3, #2
 80026d2:	21aa      	movs	r1, #170	; 0xaa
 80026d4:	f7ff fd7c 	bl	80021d0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80026d8:	7a7b      	ldrb	r3, [r7, #9]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	b21a      	sxth	r2, r3
 80026de:	7a3b      	ldrb	r3, [r7, #8]
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	4313      	orrs	r3, r2
 80026e4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80026e6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80026ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	ee07 3a90 	vmov	s15, r3
 80026f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80026fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800270a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800270e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002712:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002724:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002734:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	ee07 3a90 	vmov	s15, r3
}
 800273e:	eeb0 0a67 	vmov.f32	s0, s15
 8002742:	3720      	adds	r7, #32
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	463b      	mov	r3, r7
 8002750:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002754:	783b      	ldrb	r3, [r7, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	2120      	movs	r1, #32
 800275a:	203c      	movs	r0, #60	; 0x3c
 800275c:	f7ff fd00 	bl	8002160 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002760:	787b      	ldrb	r3, [r7, #1]
 8002762:	461a      	mov	r2, r3
 8002764:	2121      	movs	r1, #33	; 0x21
 8002766:	203c      	movs	r0, #60	; 0x3c
 8002768:	f7ff fcfa 	bl	8002160 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 800276c:	78bb      	ldrb	r3, [r7, #2]
 800276e:	461a      	mov	r2, r3
 8002770:	2122      	movs	r1, #34	; 0x22
 8002772:	203c      	movs	r0, #60	; 0x3c
 8002774:	f7ff fcf4 	bl	8002160 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	461a      	mov	r2, r3
 800277c:	2123      	movs	r1, #35	; 0x23
 800277e:	203c      	movs	r0, #60	; 0x3c
 8002780:	f7ff fcee 	bl	8002160 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002784:	793b      	ldrb	r3, [r7, #4]
 8002786:	461a      	mov	r2, r3
 8002788:	2124      	movs	r1, #36	; 0x24
 800278a:	203c      	movs	r0, #60	; 0x3c
 800278c:	f7ff fce8 	bl	8002160 <SENSOR_IO_Write>
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800279e:	2300      	movs	r3, #0
 80027a0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80027a2:	2122      	movs	r1, #34	; 0x22
 80027a4:	203c      	movs	r0, #60	; 0x3c
 80027a6:	f7ff fcf5 	bl	8002194 <SENSOR_IO_Read>
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f023 0303 	bic.w	r3, r3, #3
 80027b4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f043 0303 	orr.w	r3, r3, #3
 80027bc:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	461a      	mov	r2, r3
 80027c2:	2122      	movs	r1, #34	; 0x22
 80027c4:	203c      	movs	r0, #60	; 0x3c
 80027c6:	f7ff fccb 	bl	8002160 <SENSOR_IO_Write>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80027d6:	f7ff fcb9 	bl	800214c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80027da:	210f      	movs	r1, #15
 80027dc:	203c      	movs	r0, #60	; 0x3c
 80027de:	f7ff fcd9 	bl	8002194 <SENSOR_IO_Read>
 80027e2:	4603      	mov	r3, r0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80027f6:	2122      	movs	r1, #34	; 0x22
 80027f8:	203c      	movs	r0, #60	; 0x3c
 80027fa:	f7ff fccb 	bl	8002194 <SENSOR_IO_Read>
 80027fe:	4603      	mov	r3, r0
 8002800:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	f023 0320 	bic.w	r3, r3, #32
 8002808:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	f043 0320 	orr.w	r3, r3, #32
 8002816:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	461a      	mov	r2, r3
 800281c:	2122      	movs	r1, #34	; 0x22
 800281e:	203c      	movs	r0, #60	; 0x3c
 8002820:	f7ff fc9e 	bl	8002160 <SENSOR_IO_Write>
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002834:	2300      	movs	r3, #0
 8002836:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002842:	2121      	movs	r1, #33	; 0x21
 8002844:	203c      	movs	r0, #60	; 0x3c
 8002846:	f7ff fca5 	bl	8002194 <SENSOR_IO_Read>
 800284a:	4603      	mov	r3, r0
 800284c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800284e:	f107 0208 	add.w	r2, r7, #8
 8002852:	2306      	movs	r3, #6
 8002854:	21a8      	movs	r1, #168	; 0xa8
 8002856:	203c      	movs	r0, #60	; 0x3c
 8002858:	f7ff fcba 	bl	80021d0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800285c:	2300      	movs	r3, #0
 800285e:	77fb      	strb	r3, [r7, #31]
 8002860:	e01c      	b.n	800289c <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002862:	7ffb      	ldrb	r3, [r7, #31]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	3301      	adds	r3, #1
 8002868:	3320      	adds	r3, #32
 800286a:	443b      	add	r3, r7
 800286c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002870:	b29b      	uxth	r3, r3
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	b29a      	uxth	r2, r3
 8002876:	7ffb      	ldrb	r3, [r7, #31]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	3320      	adds	r3, #32
 800287c:	443b      	add	r3, r7
 800287e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002882:	b29b      	uxth	r3, r3
 8002884:	4413      	add	r3, r2
 8002886:	b29a      	uxth	r2, r3
 8002888:	7ffb      	ldrb	r3, [r7, #31]
 800288a:	b212      	sxth	r2, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	3320      	adds	r3, #32
 8002890:	443b      	add	r3, r7
 8002892:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002896:	7ffb      	ldrb	r3, [r7, #31]
 8002898:	3301      	adds	r3, #1
 800289a:	77fb      	strb	r3, [r7, #31]
 800289c:	7ffb      	ldrb	r3, [r7, #31]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d9df      	bls.n	8002862 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80028a8:	2b60      	cmp	r3, #96	; 0x60
 80028aa:	d013      	beq.n	80028d4 <LIS3MDL_MagReadXYZ+0xa8>
 80028ac:	2b60      	cmp	r3, #96	; 0x60
 80028ae:	dc14      	bgt.n	80028da <LIS3MDL_MagReadXYZ+0xae>
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d00c      	beq.n	80028ce <LIS3MDL_MagReadXYZ+0xa2>
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	dc10      	bgt.n	80028da <LIS3MDL_MagReadXYZ+0xae>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <LIS3MDL_MagReadXYZ+0x96>
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d003      	beq.n	80028c8 <LIS3MDL_MagReadXYZ+0x9c>
 80028c0:	e00b      	b.n	80028da <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <LIS3MDL_MagReadXYZ+0xfc>)
 80028c4:	61bb      	str	r3, [r7, #24]
    break;
 80028c6:	e008      	b.n	80028da <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <LIS3MDL_MagReadXYZ+0x100>)
 80028ca:	61bb      	str	r3, [r7, #24]
    break;
 80028cc:	e005      	b.n	80028da <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <LIS3MDL_MagReadXYZ+0x104>)
 80028d0:	61bb      	str	r3, [r7, #24]
    break;
 80028d2:	e002      	b.n	80028da <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80028d4:	4b17      	ldr	r3, [pc, #92]	; (8002934 <LIS3MDL_MagReadXYZ+0x108>)
 80028d6:	61bb      	str	r3, [r7, #24]
    break;    
 80028d8:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80028da:	2300      	movs	r3, #0
 80028dc:	77fb      	strb	r3, [r7, #31]
 80028de:	e01a      	b.n	8002916 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80028e0:	7ffb      	ldrb	r3, [r7, #31]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	3320      	adds	r3, #32
 80028e6:	443b      	add	r3, r7
 80028e8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80028f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fc:	7ffb      	ldrb	r3, [r7, #31]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002908:	ee17 2a90 	vmov	r2, s15
 800290c:	b212      	sxth	r2, r2
 800290e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002910:	7ffb      	ldrb	r3, [r7, #31]
 8002912:	3301      	adds	r3, #1
 8002914:	77fb      	strb	r3, [r7, #31]
 8002916:	7ffb      	ldrb	r3, [r7, #31]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d9e1      	bls.n	80028e0 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3720      	adds	r7, #32
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	3e0f5c29 	.word	0x3e0f5c29
 800292c:	3e947ae1 	.word	0x3e947ae1
 8002930:	3edc28f6 	.word	0x3edc28f6
 8002934:	3f147ae1 	.word	0x3f147ae1

08002938 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f879 	bl	8002a3c <LPS22HB_Init>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002960:	f7ff fbf4 	bl	800214c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	210f      	movs	r1, #15
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fc12 	bl	8002194 <SENSOR_IO_Read>
 8002970:	4603      	mov	r3, r0
 8002972:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800298e:	2300      	movs	r3, #0
 8002990:	74fb      	strb	r3, [r7, #19]
 8002992:	e013      	b.n	80029bc <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	3328      	adds	r3, #40	; 0x28
 800299c:	b2db      	uxtb	r3, r3
 800299e:	7cfc      	ldrb	r4, [r7, #19]
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f7ff fbf6 	bl	8002194 <SENSOR_IO_Read>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461a      	mov	r2, r3
 80029ac:	f104 0318 	add.w	r3, r4, #24
 80029b0:	443b      	add	r3, r7
 80029b2:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80029b6:	7cfb      	ldrb	r3, [r7, #19]
 80029b8:	3301      	adds	r3, #1
 80029ba:	74fb      	strb	r3, [r7, #19]
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d9e8      	bls.n	8002994 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80029c2:	2300      	movs	r3, #0
 80029c4:	74fb      	strb	r3, [r7, #19]
 80029c6:	e00f      	b.n	80029e8 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	3318      	adds	r3, #24
 80029cc:	443b      	add	r3, r7
 80029ce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029d2:	461a      	mov	r2, r3
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
 80029e4:	3301      	adds	r3, #1
 80029e6:	74fb      	strb	r3, [r7, #19]
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d9ec      	bls.n	80029c8 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029fe:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2264      	movs	r2, #100	; 0x64
 8002a08:	fb02 f303 	mul.w	r3, r2, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	da01      	bge.n	8002a14 <LPS22HB_P_ReadPressure+0x94>
 8002a10:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002a14:	131b      	asrs	r3, r3, #12
 8002a16:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	ee07 3a90 	vmov	s15, r3
 8002a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a22:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002a38 <LPS22HB_P_ReadPressure+0xb8>
 8002a26:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a2a:	eef0 7a66 	vmov.f32	s15, s13
}
 8002a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd90      	pop	{r4, r7, pc}
 8002a38:	42c80000 	.word	0x42c80000

08002a3c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	211a      	movs	r1, #26
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fba1 	bl	8002194 <SENSOR_IO_Read>
 8002a52:	4603      	mov	r3, r0
 8002a54:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	211a      	movs	r1, #26
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fb76 	bl	8002160 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2110      	movs	r1, #16
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fb8a 	bl	8002194 <SENSOR_IO_Read>
 8002a80:	4603      	mov	r3, r0
 8002a82:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002a92:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	f023 0302 	bic.w	r3, r3, #2
 8002a9a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	f043 0302 	orr.w	r3, r3, #2
 8002aa2:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	2110      	movs	r1, #16
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fb57 	bl	8002160 <SENSOR_IO_Write>
}  
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002ad2:	2110      	movs	r1, #16
 8002ad4:	20d4      	movs	r0, #212	; 0xd4
 8002ad6:	f7ff fb5d 	bl	8002194 <SENSOR_IO_Read>
 8002ada:	4603      	mov	r3, r0
 8002adc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002ade:	f107 0208 	add.w	r2, r7, #8
 8002ae2:	2306      	movs	r3, #6
 8002ae4:	2128      	movs	r1, #40	; 0x28
 8002ae6:	20d4      	movs	r0, #212	; 0xd4
 8002ae8:	f7ff fb72 	bl	80021d0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	77fb      	strb	r3, [r7, #31]
 8002af0:	e01c      	b.n	8002b2c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002af2:	7ffb      	ldrb	r3, [r7, #31]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	3301      	adds	r3, #1
 8002af8:	3320      	adds	r3, #32
 8002afa:	443b      	add	r3, r7
 8002afc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	7ffb      	ldrb	r3, [r7, #31]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	3320      	adds	r3, #32
 8002b0c:	443b      	add	r3, r7
 8002b0e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	7ffb      	ldrb	r3, [r7, #31]
 8002b1a:	b212      	sxth	r2, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	3320      	adds	r3, #32
 8002b20:	443b      	add	r3, r7
 8002b22:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002b26:	7ffb      	ldrb	r3, [r7, #31]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	77fb      	strb	r3, [r7, #31]
 8002b2c:	7ffb      	ldrb	r3, [r7, #31]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d9df      	bls.n	8002af2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d829      	bhi.n	8002b90 <LSM6DSL_AccReadXYZ+0xd4>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <LSM6DSL_AccReadXYZ+0x88>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b79 	.word	0x08002b79
 8002b48:	08002b91 	.word	0x08002b91
 8002b4c:	08002b91 	.word	0x08002b91
 8002b50:	08002b91 	.word	0x08002b91
 8002b54:	08002b8b 	.word	0x08002b8b
 8002b58:	08002b91 	.word	0x08002b91
 8002b5c:	08002b91 	.word	0x08002b91
 8002b60:	08002b91 	.word	0x08002b91
 8002b64:	08002b7f 	.word	0x08002b7f
 8002b68:	08002b91 	.word	0x08002b91
 8002b6c:	08002b91 	.word	0x08002b91
 8002b70:	08002b91 	.word	0x08002b91
 8002b74:	08002b85 	.word	0x08002b85
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002b78:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <LSM6DSL_AccReadXYZ+0x120>)
 8002b7a:	61bb      	str	r3, [r7, #24]
    break;
 8002b7c:	e008      	b.n	8002b90 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <LSM6DSL_AccReadXYZ+0x124>)
 8002b80:	61bb      	str	r3, [r7, #24]
    break;
 8002b82:	e005      	b.n	8002b90 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002b84:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <LSM6DSL_AccReadXYZ+0x128>)
 8002b86:	61bb      	str	r3, [r7, #24]
    break;
 8002b88:	e002      	b.n	8002b90 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <LSM6DSL_AccReadXYZ+0x12c>)
 8002b8c:	61bb      	str	r3, [r7, #24]
    break;    
 8002b8e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	77fb      	strb	r3, [r7, #31]
 8002b94:	e01a      	b.n	8002bcc <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002b96:	7ffb      	ldrb	r3, [r7, #31]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	3320      	adds	r3, #32
 8002b9c:	443b      	add	r3, r7
 8002b9e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002ba2:	ee07 3a90 	vmov	s15, r3
 8002ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002baa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb2:	7ffb      	ldrb	r3, [r7, #31]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bbe:	ee17 2a90 	vmov	r2, s15
 8002bc2:	b212      	sxth	r2, r2
 8002bc4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002bc6:	7ffb      	ldrb	r3, [r7, #31]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	77fb      	strb	r3, [r7, #31]
 8002bcc:	7ffb      	ldrb	r3, [r7, #31]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d9e1      	bls.n	8002b96 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	3d79db23 	.word	0x3d79db23
 8002be0:	3df9db23 	.word	0x3df9db23
 8002be4:	3e79db23 	.word	0x3e79db23
 8002be8:	3ef9db23 	.word	0x3ef9db23

08002bec <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002bfa:	2111      	movs	r1, #17
 8002bfc:	20d4      	movs	r0, #212	; 0xd4
 8002bfe:	f7ff fac9 	bl	8002194 <SENSOR_IO_Read>
 8002c02:	4603      	mov	r3, r0
 8002c04:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002c0a:	7bbb      	ldrb	r3, [r7, #14]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002c12:	7bba      	ldrb	r2, [r7, #14]
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002c1a:	7bbb      	ldrb	r3, [r7, #14]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2111      	movs	r1, #17
 8002c20:	20d4      	movs	r0, #212	; 0xd4
 8002c22:	f7ff fa9d 	bl	8002160 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002c26:	2112      	movs	r1, #18
 8002c28:	20d4      	movs	r0, #212	; 0xd4
 8002c2a:	f7ff fab3 	bl	8002194 <SENSOR_IO_Read>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002c3a:	7bbb      	ldrb	r3, [r7, #14]
 8002c3c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002c40:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002c42:	7bba      	ldrb	r2, [r7, #14]
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002c4a:	7bbb      	ldrb	r3, [r7, #14]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2112      	movs	r1, #18
 8002c50:	20d4      	movs	r0, #212	; 0xd4
 8002c52:	f7ff fa85 	bl	8002160 <SENSOR_IO_Write>
}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002c64:	2300      	movs	r3, #0
 8002c66:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002c68:	2111      	movs	r1, #17
 8002c6a:	20d4      	movs	r0, #212	; 0xd4
 8002c6c:	f7ff fa92 	bl	8002194 <SENSOR_IO_Read>
 8002c70:	4603      	mov	r3, r0
 8002c72:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2111      	movs	r1, #17
 8002c82:	20d4      	movs	r0, #212	; 0xd4
 8002c84:	f7ff fa6c 	bl	8002160 <SENSOR_IO_Write>
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002c94:	f7ff fa5a 	bl	800214c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002c98:	210f      	movs	r1, #15
 8002c9a:	20d4      	movs	r0, #212	; 0xd4
 8002c9c:	f7ff fa7a 	bl	8002194 <SENSOR_IO_Read>
 8002ca0:	4603      	mov	r3, r0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002cb4:	2116      	movs	r1, #22
 8002cb6:	20d4      	movs	r0, #212	; 0xd4
 8002cb8:	f7ff fa6c 	bl	8002194 <SENSOR_IO_Read>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cc6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cd4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2116      	movs	r1, #22
 8002cdc:	20d4      	movs	r0, #212	; 0xd4
 8002cde:	f7ff fa3f 	bl	8002160 <SENSOR_IO_Write>
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002d02:	2111      	movs	r1, #17
 8002d04:	20d4      	movs	r0, #212	; 0xd4
 8002d06:	f7ff fa45 	bl	8002194 <SENSOR_IO_Read>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8002d0e:	f107 0208 	add.w	r2, r7, #8
 8002d12:	2306      	movs	r3, #6
 8002d14:	2122      	movs	r1, #34	; 0x22
 8002d16:	20d4      	movs	r0, #212	; 0xd4
 8002d18:	f7ff fa5a 	bl	80021d0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	77fb      	strb	r3, [r7, #31]
 8002d20:	e01c      	b.n	8002d5c <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002d22:	7ffb      	ldrb	r3, [r7, #31]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	3301      	adds	r3, #1
 8002d28:	3320      	adds	r3, #32
 8002d2a:	443b      	add	r3, r7
 8002d2c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	7ffb      	ldrb	r3, [r7, #31]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	3320      	adds	r3, #32
 8002d3c:	443b      	add	r3, r7
 8002d3e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	7ffb      	ldrb	r3, [r7, #31]
 8002d4a:	b212      	sxth	r2, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	3320      	adds	r3, #32
 8002d50:	443b      	add	r3, r7
 8002d52:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002d56:	7ffb      	ldrb	r3, [r7, #31]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	77fb      	strb	r3, [r7, #31]
 8002d5c:	7ffb      	ldrb	r3, [r7, #31]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d9df      	bls.n	8002d22 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b0c      	cmp	r3, #12
 8002d6a:	d829      	bhi.n	8002dc0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8002d6c:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002da9 	.word	0x08002da9
 8002d78:	08002dc1 	.word	0x08002dc1
 8002d7c:	08002dc1 	.word	0x08002dc1
 8002d80:	08002dc1 	.word	0x08002dc1
 8002d84:	08002daf 	.word	0x08002daf
 8002d88:	08002dc1 	.word	0x08002dc1
 8002d8c:	08002dc1 	.word	0x08002dc1
 8002d90:	08002dc1 	.word	0x08002dc1
 8002d94:	08002db5 	.word	0x08002db5
 8002d98:	08002dc1 	.word	0x08002dc1
 8002d9c:	08002dc1 	.word	0x08002dc1
 8002da0:	08002dc1 	.word	0x08002dc1
 8002da4:	08002dbb 	.word	0x08002dbb
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8002da8:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8002daa:	61bb      	str	r3, [r7, #24]
    break;
 8002dac:	e008      	b.n	8002dc0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8002dae:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8002db0:	61bb      	str	r3, [r7, #24]
    break;
 8002db2:	e005      	b.n	8002dc0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8002db4:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8002db6:	61bb      	str	r3, [r7, #24]
    break;
 8002db8:	e002      	b.n	8002dc0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8002dbc:	61bb      	str	r3, [r7, #24]
    break;    
 8002dbe:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	77fb      	strb	r3, [r7, #31]
 8002dc4:	e016      	b.n	8002df4 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8002dc6:	7ffb      	ldrb	r3, [r7, #31]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	3320      	adds	r3, #32
 8002dcc:	443b      	add	r3, r7
 8002dce:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dda:	7ffb      	ldrb	r3, [r7, #31]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dea:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002dee:	7ffb      	ldrb	r3, [r7, #31]
 8002df0:	3301      	adds	r3, #1
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	7ffb      	ldrb	r3, [r7, #31]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d9e5      	bls.n	8002dc6 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	bf00      	nop
 8002dfe:	3720      	adds	r7, #32
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	410c0000 	.word	0x410c0000
 8002e08:	418c0000 	.word	0x418c0000
 8002e0c:	420c0000 	.word	0x420c0000
 8002e10:	428c0000 	.word	0x428c0000

08002e14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e1e:	2003      	movs	r0, #3
 8002e20:	f000 f938 	bl	8003094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e24:	2000      	movs	r0, #0
 8002e26:	f000 f80d 	bl	8002e44 <HAL_InitTick>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	71fb      	strb	r3, [r7, #7]
 8002e34:	e001      	b.n	8002e3a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e36:	f7fe fe07 	bl	8001a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_InitTick+0x68>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d022      	beq.n	8002e9e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <HAL_InitTick+0x6c>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_InitTick+0x68>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 f946 	bl	80030fe <HAL_SYSTICK_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10f      	bne.n	8002e98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b0f      	cmp	r3, #15
 8002e7c:	d809      	bhi.n	8002e92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	f04f 30ff 	mov.w	r0, #4294967295
 8002e86:	f000 f910 	bl	80030aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <HAL_InitTick+0x70>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	e007      	b.n	8002ea2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	e004      	b.n	8002ea2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	e001      	b.n	8002ea2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	200000a0 	.word	0x200000a0
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	2000009c 	.word	0x2000009c

08002eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_IncTick+0x1c>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_IncTick+0x20>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	4a03      	ldr	r2, [pc, #12]	; (8002ed4 <HAL_IncTick+0x1c>)
 8002ec8:	6013      	str	r3, [r2, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	2000044c 	.word	0x2000044c
 8002ed8:	200000a0 	.word	0x200000a0

08002edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <HAL_GetTick+0x14>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	2000044c 	.word	0x2000044c

08002ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f10:	4013      	ands	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f26:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	60d3      	str	r3, [r2, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <__NVIC_GetPriorityGrouping+0x18>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	f003 0307 	and.w	r3, r3, #7
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	db0b      	blt.n	8002f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	f003 021f 	and.w	r2, r3, #31
 8002f70:	4907      	ldr	r1, [pc, #28]	; (8002f90 <__NVIC_EnableIRQ+0x38>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	2001      	movs	r0, #1
 8002f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000e100 	.word	0xe000e100

08002f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db0a      	blt.n	8002fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	490c      	ldr	r1, [pc, #48]	; (8002fe0 <__NVIC_SetPriority+0x4c>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	0112      	lsls	r2, r2, #4
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fbc:	e00a      	b.n	8002fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4908      	ldr	r1, [pc, #32]	; (8002fe4 <__NVIC_SetPriority+0x50>)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	3b04      	subs	r3, #4
 8002fcc:	0112      	lsls	r2, r2, #4
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	761a      	strb	r2, [r3, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000e100 	.word	0xe000e100
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f1c3 0307 	rsb	r3, r3, #7
 8003002:	2b04      	cmp	r3, #4
 8003004:	bf28      	it	cs
 8003006:	2304      	movcs	r3, #4
 8003008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3304      	adds	r3, #4
 800300e:	2b06      	cmp	r3, #6
 8003010:	d902      	bls.n	8003018 <NVIC_EncodePriority+0x30>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3b03      	subs	r3, #3
 8003016:	e000      	b.n	800301a <NVIC_EncodePriority+0x32>
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	f04f 32ff 	mov.w	r2, #4294967295
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	401a      	ands	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003030:	f04f 31ff 	mov.w	r1, #4294967295
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	43d9      	mvns	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	4313      	orrs	r3, r2
         );
}
 8003042:	4618      	mov	r0, r3
 8003044:	3724      	adds	r7, #36	; 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003060:	d301      	bcc.n	8003066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003062:	2301      	movs	r3, #1
 8003064:	e00f      	b.n	8003086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <SysTick_Config+0x40>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306e:	210f      	movs	r1, #15
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	f7ff ff8e 	bl	8002f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <SysTick_Config+0x40>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <SysTick_Config+0x40>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	e000e010 	.word	0xe000e010

08003094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ff29 	bl	8002ef4 <__NVIC_SetPriorityGrouping>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030bc:	f7ff ff3e 	bl	8002f3c <__NVIC_GetPriorityGrouping>
 80030c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	f7ff ff8e 	bl	8002fe8 <NVIC_EncodePriority>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff5d 	bl	8002f94 <__NVIC_SetPriority>
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff31 	bl	8002f58 <__NVIC_EnableIRQ>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ffa2 	bl	8003050 <SysTick_Config>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003126:	e17f      	b.n	8003428 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	2101      	movs	r1, #1
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	4013      	ands	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 8171 	beq.w	8003422 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d00b      	beq.n	8003160 <HAL_GPIO_Init+0x48>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d007      	beq.n	8003160 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003154:	2b11      	cmp	r3, #17
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b12      	cmp	r3, #18
 800315e:	d130      	bne.n	80031c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003196:	2201      	movs	r2, #1
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	f003 0201 	and.w	r2, r3, #1
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d118      	bne.n	8003200 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031d4:	2201      	movs	r2, #1
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	08db      	lsrs	r3, r3, #3
 80031ea:	f003 0201 	and.w	r2, r3, #1
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x128>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b12      	cmp	r3, #18
 800323e:	d123      	bne.n	8003288 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	08da      	lsrs	r2, r3, #3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3208      	adds	r2, #8
 8003248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800324c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	220f      	movs	r2, #15
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	08da      	lsrs	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3208      	adds	r2, #8
 8003282:	6939      	ldr	r1, [r7, #16]
 8003284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	2203      	movs	r2, #3
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0203 	and.w	r2, r3, #3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80ac 	beq.w	8003422 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ca:	4b5f      	ldr	r3, [pc, #380]	; (8003448 <HAL_GPIO_Init+0x330>)
 80032cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ce:	4a5e      	ldr	r2, [pc, #376]	; (8003448 <HAL_GPIO_Init+0x330>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6613      	str	r3, [r2, #96]	; 0x60
 80032d6:	4b5c      	ldr	r3, [pc, #368]	; (8003448 <HAL_GPIO_Init+0x330>)
 80032d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032e2:	4a5a      	ldr	r2, [pc, #360]	; (800344c <HAL_GPIO_Init+0x334>)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	3302      	adds	r3, #2
 80032ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	220f      	movs	r2, #15
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800330c:	d025      	beq.n	800335a <HAL_GPIO_Init+0x242>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a4f      	ldr	r2, [pc, #316]	; (8003450 <HAL_GPIO_Init+0x338>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d01f      	beq.n	8003356 <HAL_GPIO_Init+0x23e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a4e      	ldr	r2, [pc, #312]	; (8003454 <HAL_GPIO_Init+0x33c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d019      	beq.n	8003352 <HAL_GPIO_Init+0x23a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a4d      	ldr	r2, [pc, #308]	; (8003458 <HAL_GPIO_Init+0x340>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_GPIO_Init+0x236>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a4c      	ldr	r2, [pc, #304]	; (800345c <HAL_GPIO_Init+0x344>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00d      	beq.n	800334a <HAL_GPIO_Init+0x232>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a4b      	ldr	r2, [pc, #300]	; (8003460 <HAL_GPIO_Init+0x348>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <HAL_GPIO_Init+0x22e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4a      	ldr	r2, [pc, #296]	; (8003464 <HAL_GPIO_Init+0x34c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_GPIO_Init+0x22a>
 800333e:	2306      	movs	r3, #6
 8003340:	e00c      	b.n	800335c <HAL_GPIO_Init+0x244>
 8003342:	2307      	movs	r3, #7
 8003344:	e00a      	b.n	800335c <HAL_GPIO_Init+0x244>
 8003346:	2305      	movs	r3, #5
 8003348:	e008      	b.n	800335c <HAL_GPIO_Init+0x244>
 800334a:	2304      	movs	r3, #4
 800334c:	e006      	b.n	800335c <HAL_GPIO_Init+0x244>
 800334e:	2303      	movs	r3, #3
 8003350:	e004      	b.n	800335c <HAL_GPIO_Init+0x244>
 8003352:	2302      	movs	r3, #2
 8003354:	e002      	b.n	800335c <HAL_GPIO_Init+0x244>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_GPIO_Init+0x244>
 800335a:	2300      	movs	r3, #0
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	f002 0203 	and.w	r2, r2, #3
 8003362:	0092      	lsls	r2, r2, #2
 8003364:	4093      	lsls	r3, r2
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800336c:	4937      	ldr	r1, [pc, #220]	; (800344c <HAL_GPIO_Init+0x334>)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	3302      	adds	r3, #2
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800337a:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <HAL_GPIO_Init+0x350>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	43db      	mvns	r3, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800339e:	4a32      	ldr	r2, [pc, #200]	; (8003468 <HAL_GPIO_Init+0x350>)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033a4:	4b30      	ldr	r3, [pc, #192]	; (8003468 <HAL_GPIO_Init+0x350>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033c8:	4a27      	ldr	r2, [pc, #156]	; (8003468 <HAL_GPIO_Init+0x350>)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <HAL_GPIO_Init+0x350>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <HAL_GPIO_Init+0x350>)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_GPIO_Init+0x350>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	43db      	mvns	r3, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800341c:	4a12      	ldr	r2, [pc, #72]	; (8003468 <HAL_GPIO_Init+0x350>)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	3301      	adds	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa22 f303 	lsr.w	r3, r2, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	f47f ae78 	bne.w	8003128 <HAL_GPIO_Init+0x10>
  }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	40010000 	.word	0x40010000
 8003450:	48000400 	.word	0x48000400
 8003454:	48000800 	.word	0x48000800
 8003458:	48000c00 	.word	0x48000c00
 800345c:	48001000 	.word	0x48001000
 8003460:	48001400 	.word	0x48001400
 8003464:	48001800 	.word	0x48001800
 8003468:	40010400 	.word	0x40010400

0800346c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800347a:	e0cd      	b.n	8003618 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800347c:	2201      	movs	r2, #1
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80c0 	beq.w	8003612 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003492:	4a68      	ldr	r2, [pc, #416]	; (8003634 <HAL_GPIO_DeInit+0x1c8>)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	3302      	adds	r3, #2
 800349a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	220f      	movs	r2, #15
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4013      	ands	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034ba:	d025      	beq.n	8003508 <HAL_GPIO_DeInit+0x9c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a5e      	ldr	r2, [pc, #376]	; (8003638 <HAL_GPIO_DeInit+0x1cc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d01f      	beq.n	8003504 <HAL_GPIO_DeInit+0x98>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a5d      	ldr	r2, [pc, #372]	; (800363c <HAL_GPIO_DeInit+0x1d0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d019      	beq.n	8003500 <HAL_GPIO_DeInit+0x94>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a5c      	ldr	r2, [pc, #368]	; (8003640 <HAL_GPIO_DeInit+0x1d4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d013      	beq.n	80034fc <HAL_GPIO_DeInit+0x90>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a5b      	ldr	r2, [pc, #364]	; (8003644 <HAL_GPIO_DeInit+0x1d8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00d      	beq.n	80034f8 <HAL_GPIO_DeInit+0x8c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a5a      	ldr	r2, [pc, #360]	; (8003648 <HAL_GPIO_DeInit+0x1dc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <HAL_GPIO_DeInit+0x88>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a59      	ldr	r2, [pc, #356]	; (800364c <HAL_GPIO_DeInit+0x1e0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_GPIO_DeInit+0x84>
 80034ec:	2306      	movs	r3, #6
 80034ee:	e00c      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 80034f0:	2307      	movs	r3, #7
 80034f2:	e00a      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 80034f4:	2305      	movs	r3, #5
 80034f6:	e008      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 80034f8:	2304      	movs	r3, #4
 80034fa:	e006      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 80034fc:	2303      	movs	r3, #3
 80034fe:	e004      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 8003500:	2302      	movs	r3, #2
 8003502:	e002      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 8003508:	2300      	movs	r3, #0
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	f002 0203 	and.w	r2, r2, #3
 8003510:	0092      	lsls	r2, r2, #2
 8003512:	4093      	lsls	r3, r2
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	429a      	cmp	r2, r3
 8003518:	d132      	bne.n	8003580 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800351a:	4b4d      	ldr	r3, [pc, #308]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	43db      	mvns	r3, r3
 8003522:	494b      	ldr	r1, [pc, #300]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 8003524:	4013      	ands	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003528:	4b49      	ldr	r3, [pc, #292]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	43db      	mvns	r3, r3
 8003530:	4947      	ldr	r1, [pc, #284]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 8003532:	4013      	ands	r3, r2
 8003534:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003536:	4b46      	ldr	r3, [pc, #280]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	43db      	mvns	r3, r3
 800353e:	4944      	ldr	r1, [pc, #272]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 8003540:	4013      	ands	r3, r2
 8003542:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003544:	4b42      	ldr	r3, [pc, #264]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	43db      	mvns	r3, r3
 800354c:	4940      	ldr	r1, [pc, #256]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 800354e:	4013      	ands	r3, r2
 8003550:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	220f      	movs	r2, #15
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003562:	4a34      	ldr	r2, [pc, #208]	; (8003634 <HAL_GPIO_DeInit+0x1c8>)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	3302      	adds	r3, #2
 800356a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43da      	mvns	r2, r3
 8003572:	4830      	ldr	r0, [pc, #192]	; (8003634 <HAL_GPIO_DeInit+0x1c8>)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	400a      	ands	r2, r1
 800357a:	3302      	adds	r3, #2
 800357c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2103      	movs	r1, #3
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	08da      	lsrs	r2, r3, #3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3208      	adds	r2, #8
 800359c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	220f      	movs	r2, #15
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	08d2      	lsrs	r2, r2, #3
 80035b4:	4019      	ands	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3208      	adds	r2, #8
 80035ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	2103      	movs	r1, #3
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	401a      	ands	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	2101      	movs	r1, #1
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	401a      	ands	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2103      	movs	r1, #3
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	401a      	ands	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003602:	2101      	movs	r1, #1
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	401a      	ands	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	3301      	adds	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	f47f af2b 	bne.w	800347c <HAL_GPIO_DeInit+0x10>
  }
}
 8003626:	bf00      	nop
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40010000 	.word	0x40010000
 8003638:	48000400 	.word	0x48000400
 800363c:	48000800 	.word	0x48000800
 8003640:	48000c00 	.word	0x48000c00
 8003644:	48001000 	.word	0x48001000
 8003648:	48001400 	.word	0x48001400
 800364c:	48001800 	.word	0x48001800
 8003650:	40010400 	.word	0x40010400

08003654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
 8003660:	4613      	mov	r3, r2
 8003662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003664:	787b      	ldrb	r3, [r7, #1]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800366a:	887a      	ldrh	r2, [r7, #2]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003670:	e002      	b.n	8003678 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800369c:	887a      	ldrh	r2, [r7, #2]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80036a2:	e002      	b.n	80036aa <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036a4:	887a      	ldrh	r2, [r7, #2]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	619a      	str	r2, [r3, #24]
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036c2:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d006      	beq.n	80036dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ce:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe f830 	bl	800173c <HAL_GPIO_EXTI_Callback>
  }
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40010400 	.word	0x40010400

080036e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e081      	b.n	80037fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fe f9be 	bl	8001a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	; 0x24
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003738:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003748:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d107      	bne.n	8003762 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	e006      	b.n	8003770 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800376e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d104      	bne.n	8003782 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003780:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003794:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	ea42 0103 	orr.w	r1, r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	021a      	lsls	r2, r3, #8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69d9      	ldr	r1, [r3, #28]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1a      	ldr	r2, [r3, #32]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e021      	b.n	800385c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2224      	movs	r2, #36	; 0x24
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7fe f971 	bl	8001b18 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	461a      	mov	r2, r3
 8003872:	4603      	mov	r3, r0
 8003874:	817b      	strh	r3, [r7, #10]
 8003876:	460b      	mov	r3, r1
 8003878:	813b      	strh	r3, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b20      	cmp	r3, #32
 8003888:	f040 80f9 	bne.w	8003a7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_I2C_Mem_Write+0x34>
 8003892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003894:	2b00      	cmp	r3, #0
 8003896:	d105      	bne.n	80038a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800389e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0ed      	b.n	8003a80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_I2C_Mem_Write+0x4e>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e0e6      	b.n	8003a80 <HAL_I2C_Mem_Write+0x21c>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038ba:	f7ff fb0f 	bl	8002edc <HAL_GetTick>
 80038be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2319      	movs	r3, #25
 80038c6:	2201      	movs	r2, #1
 80038c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fac3 	bl	8003e58 <I2C_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0d1      	b.n	8003a80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2221      	movs	r2, #33	; 0x21
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2240      	movs	r2, #64	; 0x40
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a3a      	ldr	r2, [r7, #32]
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003904:	88f8      	ldrh	r0, [r7, #6]
 8003906:	893a      	ldrh	r2, [r7, #8]
 8003908:	8979      	ldrh	r1, [r7, #10]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	9301      	str	r3, [sp, #4]
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	4603      	mov	r3, r0
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f9d3 	bl	8003cc0 <I2C_RequestMemoryWrite>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0a9      	b.n	8003a80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2bff      	cmp	r3, #255	; 0xff
 8003934:	d90e      	bls.n	8003954 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	22ff      	movs	r2, #255	; 0xff
 800393a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	b2da      	uxtb	r2, r3
 8003942:	8979      	ldrh	r1, [r7, #10]
 8003944:	2300      	movs	r3, #0
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fba5 	bl	800409c <I2C_TransferConfig>
 8003952:	e00f      	b.n	8003974 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	b2da      	uxtb	r2, r3
 8003964:	8979      	ldrh	r1, [r7, #10]
 8003966:	2300      	movs	r3, #0
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fb94 	bl	800409c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 faad 	bl	8003ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e07b      	b.n	8003a80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	781a      	ldrb	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d034      	beq.n	8003a2c <HAL_I2C_Mem_Write+0x1c8>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d130      	bne.n	8003a2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	2200      	movs	r2, #0
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fa3f 	bl	8003e58 <I2C_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e04d      	b.n	8003a80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2bff      	cmp	r3, #255	; 0xff
 80039ec:	d90e      	bls.n	8003a0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	22ff      	movs	r2, #255	; 0xff
 80039f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	8979      	ldrh	r1, [r7, #10]
 80039fc:	2300      	movs	r3, #0
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fb49 	bl	800409c <I2C_TransferConfig>
 8003a0a:	e00f      	b.n	8003a2c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	8979      	ldrh	r1, [r7, #10]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 fb38 	bl	800409c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d19e      	bne.n	8003974 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fa8c 	bl	8003f58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e01a      	b.n	8003a80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <HAL_I2C_Mem_Write+0x224>)
 8003a5e:	400b      	ands	r3, r1
 8003a60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	fe00e800 	.word	0xfe00e800

08003a8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	4608      	mov	r0, r1
 8003a96:	4611      	mov	r1, r2
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	817b      	strh	r3, [r7, #10]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	813b      	strh	r3, [r7, #8]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	f040 80fd 	bne.w	8003cae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_I2C_Mem_Read+0x34>
 8003aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0f1      	b.n	8003cb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_I2C_Mem_Read+0x4e>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e0ea      	b.n	8003cb0 <HAL_I2C_Mem_Read+0x224>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ae2:	f7ff f9fb 	bl	8002edc <HAL_GetTick>
 8003ae6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	2319      	movs	r3, #25
 8003aee:	2201      	movs	r2, #1
 8003af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f9af 	bl	8003e58 <I2C_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0d5      	b.n	8003cb0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2222      	movs	r2, #34	; 0x22
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2240      	movs	r2, #64	; 0x40
 8003b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a3a      	ldr	r2, [r7, #32]
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b2c:	88f8      	ldrh	r0, [r7, #6]
 8003b2e:	893a      	ldrh	r2, [r7, #8]
 8003b30:	8979      	ldrh	r1, [r7, #10]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f913 	bl	8003d68 <I2C_RequestMemoryRead>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0ad      	b.n	8003cb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2bff      	cmp	r3, #255	; 0xff
 8003b5c:	d90e      	bls.n	8003b7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	22ff      	movs	r2, #255	; 0xff
 8003b62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	8979      	ldrh	r1, [r7, #10]
 8003b6c:	4b52      	ldr	r3, [pc, #328]	; (8003cb8 <HAL_I2C_Mem_Read+0x22c>)
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fa91 	bl	800409c <I2C_TransferConfig>
 8003b7a:	e00f      	b.n	8003b9c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	8979      	ldrh	r1, [r7, #10]
 8003b8e:	4b4a      	ldr	r3, [pc, #296]	; (8003cb8 <HAL_I2C_Mem_Read+0x22c>)
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fa80 	bl	800409c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2104      	movs	r1, #4
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f956 	bl	8003e58 <I2C_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e07c      	b.n	8003cb0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d034      	beq.n	8003c5c <HAL_I2C_Mem_Read+0x1d0>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d130      	bne.n	8003c5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	2200      	movs	r2, #0
 8003c02:	2180      	movs	r1, #128	; 0x80
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f927 	bl	8003e58 <I2C_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e04d      	b.n	8003cb0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2bff      	cmp	r3, #255	; 0xff
 8003c1c:	d90e      	bls.n	8003c3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	22ff      	movs	r2, #255	; 0xff
 8003c22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	8979      	ldrh	r1, [r7, #10]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fa31 	bl	800409c <I2C_TransferConfig>
 8003c3a:	e00f      	b.n	8003c5c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	8979      	ldrh	r1, [r7, #10]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fa20 	bl	800409c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d19a      	bne.n	8003b9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f974 	bl	8003f58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e01a      	b.n	8003cb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6859      	ldr	r1, [r3, #4]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_I2C_Mem_Read+0x230>)
 8003c8e:	400b      	ands	r3, r1
 8003c90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e000      	b.n	8003cb0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	80002400 	.word	0x80002400
 8003cbc:	fe00e800 	.word	0xfe00e800

08003cc0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	4608      	mov	r0, r1
 8003cca:	4611      	mov	r1, r2
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4603      	mov	r3, r0
 8003cd0:	817b      	strh	r3, [r7, #10]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	813b      	strh	r3, [r7, #8]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	8979      	ldrh	r1, [r7, #10]
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <I2C_RequestMemoryWrite+0xa4>)
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f9d7 	bl	800409c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	69b9      	ldr	r1, [r7, #24]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f8f0 	bl	8003ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e02c      	b.n	8003d5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d08:	893b      	ldrh	r3, [r7, #8]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	629a      	str	r2, [r3, #40]	; 0x28
 8003d12:	e015      	b.n	8003d40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d14:	893b      	ldrh	r3, [r7, #8]
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	69b9      	ldr	r1, [r7, #24]
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f8d6 	bl	8003ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e012      	b.n	8003d5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d36:	893b      	ldrh	r3, [r7, #8]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2200      	movs	r2, #0
 8003d48:	2180      	movs	r1, #128	; 0x80
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f884 	bl	8003e58 <I2C_WaitOnFlagUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	80002000 	.word	0x80002000

08003d68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	4608      	mov	r0, r1
 8003d72:	4611      	mov	r1, r2
 8003d74:	461a      	mov	r2, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	817b      	strh	r3, [r7, #10]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	813b      	strh	r3, [r7, #8]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	8979      	ldrh	r1, [r7, #10]
 8003d88:	4b20      	ldr	r3, [pc, #128]	; (8003e0c <I2C_RequestMemoryRead+0xa4>)
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f984 	bl	800409c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	69b9      	ldr	r1, [r7, #24]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f89d 	bl	8003ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e02c      	b.n	8003e02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d105      	bne.n	8003dba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dae:	893b      	ldrh	r3, [r7, #8]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	629a      	str	r2, [r3, #40]	; 0x28
 8003db8:	e015      	b.n	8003de6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dba:	893b      	ldrh	r3, [r7, #8]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	69b9      	ldr	r1, [r7, #24]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f883 	bl	8003ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e012      	b.n	8003e02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ddc:	893b      	ldrh	r3, [r7, #8]
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2200      	movs	r2, #0
 8003dee:	2140      	movs	r1, #64	; 0x40
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f831 	bl	8003e58 <I2C_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	80002000 	.word	0x80002000

08003e10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d103      	bne.n	8003e2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d007      	beq.n	8003e4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	619a      	str	r2, [r3, #24]
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e68:	e022      	b.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e70:	d01e      	beq.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e72:	f7ff f833 	bl	8002edc <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d302      	bcc.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d113      	bne.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e00f      	b.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d0cd      	beq.n	8003e6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ee4:	e02c      	b.n	8003f40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f870 	bl	8003fd0 <I2C_IsAcknowledgeFailed>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e02a      	b.n	8003f50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d01e      	beq.n	8003f40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f02:	f7fe ffeb 	bl	8002edc <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d302      	bcc.n	8003f18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d113      	bne.n	8003f40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	f043 0220 	orr.w	r2, r3, #32
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e007      	b.n	8003f50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d1cb      	bne.n	8003ee6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f64:	e028      	b.n	8003fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f830 	bl	8003fd0 <I2C_IsAcknowledgeFailed>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e026      	b.n	8003fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7a:	f7fe ffaf 	bl	8002edc <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d302      	bcc.n	8003f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d113      	bne.n	8003fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e007      	b.n	8003fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d1cf      	bne.n	8003f66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d151      	bne.n	800408e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fea:	e022      	b.n	8004032 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d01e      	beq.n	8004032 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff4:	f7fe ff72 	bl	8002edc <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <I2C_IsAcknowledgeFailed+0x3a>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d113      	bne.n	8004032 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f043 0220 	orr.w	r2, r3, #32
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e02e      	b.n	8004090 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b20      	cmp	r3, #32
 800403e:	d1d5      	bne.n	8003fec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2210      	movs	r2, #16
 8004046:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2220      	movs	r2, #32
 800404e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff fedd 	bl	8003e10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <I2C_IsAcknowledgeFailed+0xc8>)
 8004062:	400b      	ands	r3, r1
 8004064:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	f043 0204 	orr.w	r2, r3, #4
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	fe00e800 	.word	0xfe00e800

0800409c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	607b      	str	r3, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	817b      	strh	r3, [r7, #10]
 80040aa:	4613      	mov	r3, r2
 80040ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	0d5b      	lsrs	r3, r3, #21
 80040b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040bc:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <I2C_TransferConfig+0x58>)
 80040be:	430b      	orrs	r3, r1
 80040c0:	43db      	mvns	r3, r3
 80040c2:	ea02 0103 	and.w	r1, r2, r3
 80040c6:	897b      	ldrh	r3, [r7, #10]
 80040c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040cc:	7a7b      	ldrb	r3, [r7, #9]
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	431a      	orrs	r2, r3
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	03ff63ff 	.word	0x03ff63ff

080040f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b20      	cmp	r3, #32
 800410c:	d138      	bne.n	8004180 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004118:	2302      	movs	r3, #2
 800411a:	e032      	b.n	8004182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	; 0x24
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800414a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	e000      	b.n	8004182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
  }
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	; 0x24
 8004194:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800419e:	4b3e      	ldr	r3, [pc, #248]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a8:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0x34>
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d121      	bne.n	8004202 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d11e      	bne.n	8004202 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041c4:	4b34      	ldr	r3, [pc, #208]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041d0:	4b31      	ldr	r3, [pc, #196]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	e005      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041e0:	4b2d      	ldr	r3, [pc, #180]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041ec:	4a2b      	ldr	r2, [pc, #172]	; (800429c <HAL_RCC_GetSysClockFreq+0x10c>)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10d      	bne.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004200:	e00a      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d102      	bne.n	800420e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	e004      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d101      	bne.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004214:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004216:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d134      	bne.n	8004288 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d003      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0xa6>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d003      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0xac>
 8004234:	e005      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004236:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004238:	617b      	str	r3, [r7, #20]
      break;
 800423a:	e005      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800423e:	617b      	str	r3, [r7, #20]
      break;
 8004240:	e002      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	617b      	str	r3, [r7, #20]
      break;
 8004246:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004248:	4b13      	ldr	r3, [pc, #76]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	3301      	adds	r3, #1
 8004254:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004256:	4b10      	ldr	r3, [pc, #64]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	fb03 f202 	mul.w	r2, r3, r2
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	0e5b      	lsrs	r3, r3, #25
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	3301      	adds	r3, #1
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004288:	69bb      	ldr	r3, [r7, #24]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3724      	adds	r7, #36	; 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	0800845c 	.word	0x0800845c
 80042a0:	00f42400 	.word	0x00f42400
 80042a4:	007a1200 	.word	0x007a1200

080042a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042ac:	4b03      	ldr	r3, [pc, #12]	; (80042bc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ae:	681b      	ldr	r3, [r3, #0]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000000 	.word	0x20000000

080042c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042c4:	f7ff fff0 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	4904      	ldr	r1, [pc, #16]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021000 	.word	0x40021000
 80042e8:	08008454 	.word	0x08008454

080042ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042f0:	f7ff ffda 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	0adb      	lsrs	r3, r3, #11
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4904      	ldr	r1, [pc, #16]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40021000 	.word	0x40021000
 8004314:	08008454 	.word	0x08008454

08004318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e040      	b.n	80043ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fd fc0a 	bl	8001b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2224      	movs	r2, #36	; 0x24
 8004344:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f8c0 	bl	80044dc <UART_SetConfig>
 800435c:	4603      	mov	r3, r0
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e022      	b.n	80043ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fc54 	bl	8004c1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004382:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004392:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fcdb 	bl	8004d60 <UART_CheckIdleState>
 80043aa:	4603      	mov	r3, r0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08a      	sub	sp, #40	; 0x28
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	f040 8081 	bne.w	80044d0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_UART_Transmit+0x26>
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e079      	b.n	80044d2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_UART_Transmit+0x38>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e072      	b.n	80044d2 <HAL_UART_Transmit+0x11e>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2221      	movs	r2, #33	; 0x21
 80043fe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004400:	f7fe fd6c 	bl	8002edc <HAL_GetTick>
 8004404:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	88fa      	ldrh	r2, [r7, #6]
 8004412:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441e:	d108      	bne.n	8004432 <HAL_UART_Transmit+0x7e>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004428:	2300      	movs	r3, #0
 800442a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	e003      	b.n	800443a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004442:	e02d      	b.n	80044a0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2200      	movs	r2, #0
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fccb 	bl	8004dea <UART_WaitOnFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e039      	b.n	80044d2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10b      	bne.n	800447c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	881a      	ldrh	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004470:	b292      	uxth	r2, r2
 8004472:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	3302      	adds	r3, #2
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	e008      	b.n	800448e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	781a      	ldrb	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	b292      	uxth	r2, r2
 8004486:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	3301      	adds	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1cb      	bne.n	8004444 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2200      	movs	r2, #0
 80044b4:	2140      	movs	r1, #64	; 0x40
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fc97 	bl	8004dea <UART_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e005      	b.n	80044d2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e000      	b.n	80044d2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80044d0:	2302      	movs	r3, #2
  }
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e0:	b0a0      	sub	sp, #128	; 0x80
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	431a      	orrs	r2, r3
 80044fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	431a      	orrs	r2, r3
 8004504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	4313      	orrs	r3, r2
 800450a:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800450c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	49a4      	ldr	r1, [pc, #656]	; (80047a4 <UART_SetConfig+0x2c8>)
 8004514:	4019      	ands	r1, r3
 8004516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800451c:	430b      	orrs	r3, r1
 800451e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800452a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800452c:	68d9      	ldr	r1, [r3, #12]
 800452e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	ea40 0301 	orr.w	r3, r0, r1
 8004536:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800453e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b99      	ldr	r3, [pc, #612]	; (80047a8 <UART_SetConfig+0x2cc>)
 8004544:	429a      	cmp	r2, r3
 8004546:	d004      	beq.n	8004552 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800454a:	6a1a      	ldr	r2, [r3, #32]
 800454c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800454e:	4313      	orrs	r3, r2
 8004550:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800455c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004562:	430b      	orrs	r3, r1
 8004564:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b90      	ldr	r3, [pc, #576]	; (80047ac <UART_SetConfig+0x2d0>)
 800456c:	429a      	cmp	r2, r3
 800456e:	d125      	bne.n	80045bc <UART_SetConfig+0xe0>
 8004570:	4b8f      	ldr	r3, [pc, #572]	; (80047b0 <UART_SetConfig+0x2d4>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b03      	cmp	r3, #3
 800457c:	d81a      	bhi.n	80045b4 <UART_SetConfig+0xd8>
 800457e:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <UART_SetConfig+0xa8>)
 8004580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004584:	08004595 	.word	0x08004595
 8004588:	080045a5 	.word	0x080045a5
 800458c:	0800459d 	.word	0x0800459d
 8004590:	080045ad 	.word	0x080045ad
 8004594:	2301      	movs	r3, #1
 8004596:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800459a:	e116      	b.n	80047ca <UART_SetConfig+0x2ee>
 800459c:	2302      	movs	r3, #2
 800459e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80045a2:	e112      	b.n	80047ca <UART_SetConfig+0x2ee>
 80045a4:	2304      	movs	r3, #4
 80045a6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80045aa:	e10e      	b.n	80047ca <UART_SetConfig+0x2ee>
 80045ac:	2308      	movs	r3, #8
 80045ae:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80045b2:	e10a      	b.n	80047ca <UART_SetConfig+0x2ee>
 80045b4:	2310      	movs	r3, #16
 80045b6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80045ba:	e106      	b.n	80047ca <UART_SetConfig+0x2ee>
 80045bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b7c      	ldr	r3, [pc, #496]	; (80047b4 <UART_SetConfig+0x2d8>)
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d138      	bne.n	8004638 <UART_SetConfig+0x15c>
 80045c6:	4b7a      	ldr	r3, [pc, #488]	; (80047b0 <UART_SetConfig+0x2d4>)
 80045c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b0c      	cmp	r3, #12
 80045d2:	d82d      	bhi.n	8004630 <UART_SetConfig+0x154>
 80045d4:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <UART_SetConfig+0x100>)
 80045d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045da:	bf00      	nop
 80045dc:	08004611 	.word	0x08004611
 80045e0:	08004631 	.word	0x08004631
 80045e4:	08004631 	.word	0x08004631
 80045e8:	08004631 	.word	0x08004631
 80045ec:	08004621 	.word	0x08004621
 80045f0:	08004631 	.word	0x08004631
 80045f4:	08004631 	.word	0x08004631
 80045f8:	08004631 	.word	0x08004631
 80045fc:	08004619 	.word	0x08004619
 8004600:	08004631 	.word	0x08004631
 8004604:	08004631 	.word	0x08004631
 8004608:	08004631 	.word	0x08004631
 800460c:	08004629 	.word	0x08004629
 8004610:	2300      	movs	r3, #0
 8004612:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004616:	e0d8      	b.n	80047ca <UART_SetConfig+0x2ee>
 8004618:	2302      	movs	r3, #2
 800461a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800461e:	e0d4      	b.n	80047ca <UART_SetConfig+0x2ee>
 8004620:	2304      	movs	r3, #4
 8004622:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004626:	e0d0      	b.n	80047ca <UART_SetConfig+0x2ee>
 8004628:	2308      	movs	r3, #8
 800462a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800462e:	e0cc      	b.n	80047ca <UART_SetConfig+0x2ee>
 8004630:	2310      	movs	r3, #16
 8004632:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004636:	e0c8      	b.n	80047ca <UART_SetConfig+0x2ee>
 8004638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b5e      	ldr	r3, [pc, #376]	; (80047b8 <UART_SetConfig+0x2dc>)
 800463e:	429a      	cmp	r2, r3
 8004640:	d125      	bne.n	800468e <UART_SetConfig+0x1b2>
 8004642:	4b5b      	ldr	r3, [pc, #364]	; (80047b0 <UART_SetConfig+0x2d4>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800464c:	2b30      	cmp	r3, #48	; 0x30
 800464e:	d016      	beq.n	800467e <UART_SetConfig+0x1a2>
 8004650:	2b30      	cmp	r3, #48	; 0x30
 8004652:	d818      	bhi.n	8004686 <UART_SetConfig+0x1aa>
 8004654:	2b20      	cmp	r3, #32
 8004656:	d00a      	beq.n	800466e <UART_SetConfig+0x192>
 8004658:	2b20      	cmp	r3, #32
 800465a:	d814      	bhi.n	8004686 <UART_SetConfig+0x1aa>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <UART_SetConfig+0x18a>
 8004660:	2b10      	cmp	r3, #16
 8004662:	d008      	beq.n	8004676 <UART_SetConfig+0x19a>
 8004664:	e00f      	b.n	8004686 <UART_SetConfig+0x1aa>
 8004666:	2300      	movs	r3, #0
 8004668:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800466c:	e0ad      	b.n	80047ca <UART_SetConfig+0x2ee>
 800466e:	2302      	movs	r3, #2
 8004670:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004674:	e0a9      	b.n	80047ca <UART_SetConfig+0x2ee>
 8004676:	2304      	movs	r3, #4
 8004678:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800467c:	e0a5      	b.n	80047ca <UART_SetConfig+0x2ee>
 800467e:	2308      	movs	r3, #8
 8004680:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004684:	e0a1      	b.n	80047ca <UART_SetConfig+0x2ee>
 8004686:	2310      	movs	r3, #16
 8004688:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800468c:	e09d      	b.n	80047ca <UART_SetConfig+0x2ee>
 800468e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b4a      	ldr	r3, [pc, #296]	; (80047bc <UART_SetConfig+0x2e0>)
 8004694:	429a      	cmp	r2, r3
 8004696:	d125      	bne.n	80046e4 <UART_SetConfig+0x208>
 8004698:	4b45      	ldr	r3, [pc, #276]	; (80047b0 <UART_SetConfig+0x2d4>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046a2:	2bc0      	cmp	r3, #192	; 0xc0
 80046a4:	d016      	beq.n	80046d4 <UART_SetConfig+0x1f8>
 80046a6:	2bc0      	cmp	r3, #192	; 0xc0
 80046a8:	d818      	bhi.n	80046dc <UART_SetConfig+0x200>
 80046aa:	2b80      	cmp	r3, #128	; 0x80
 80046ac:	d00a      	beq.n	80046c4 <UART_SetConfig+0x1e8>
 80046ae:	2b80      	cmp	r3, #128	; 0x80
 80046b0:	d814      	bhi.n	80046dc <UART_SetConfig+0x200>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <UART_SetConfig+0x1e0>
 80046b6:	2b40      	cmp	r3, #64	; 0x40
 80046b8:	d008      	beq.n	80046cc <UART_SetConfig+0x1f0>
 80046ba:	e00f      	b.n	80046dc <UART_SetConfig+0x200>
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80046c2:	e082      	b.n	80047ca <UART_SetConfig+0x2ee>
 80046c4:	2302      	movs	r3, #2
 80046c6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80046ca:	e07e      	b.n	80047ca <UART_SetConfig+0x2ee>
 80046cc:	2304      	movs	r3, #4
 80046ce:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80046d2:	e07a      	b.n	80047ca <UART_SetConfig+0x2ee>
 80046d4:	2308      	movs	r3, #8
 80046d6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80046da:	e076      	b.n	80047ca <UART_SetConfig+0x2ee>
 80046dc:	2310      	movs	r3, #16
 80046de:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80046e2:	e072      	b.n	80047ca <UART_SetConfig+0x2ee>
 80046e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b35      	ldr	r3, [pc, #212]	; (80047c0 <UART_SetConfig+0x2e4>)
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d12a      	bne.n	8004744 <UART_SetConfig+0x268>
 80046ee:	4b30      	ldr	r3, [pc, #192]	; (80047b0 <UART_SetConfig+0x2d4>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046fc:	d01a      	beq.n	8004734 <UART_SetConfig+0x258>
 80046fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004702:	d81b      	bhi.n	800473c <UART_SetConfig+0x260>
 8004704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004708:	d00c      	beq.n	8004724 <UART_SetConfig+0x248>
 800470a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800470e:	d815      	bhi.n	800473c <UART_SetConfig+0x260>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <UART_SetConfig+0x240>
 8004714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004718:	d008      	beq.n	800472c <UART_SetConfig+0x250>
 800471a:	e00f      	b.n	800473c <UART_SetConfig+0x260>
 800471c:	2300      	movs	r3, #0
 800471e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004722:	e052      	b.n	80047ca <UART_SetConfig+0x2ee>
 8004724:	2302      	movs	r3, #2
 8004726:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800472a:	e04e      	b.n	80047ca <UART_SetConfig+0x2ee>
 800472c:	2304      	movs	r3, #4
 800472e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004732:	e04a      	b.n	80047ca <UART_SetConfig+0x2ee>
 8004734:	2308      	movs	r3, #8
 8004736:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800473a:	e046      	b.n	80047ca <UART_SetConfig+0x2ee>
 800473c:	2310      	movs	r3, #16
 800473e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004742:	e042      	b.n	80047ca <UART_SetConfig+0x2ee>
 8004744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b17      	ldr	r3, [pc, #92]	; (80047a8 <UART_SetConfig+0x2cc>)
 800474a:	429a      	cmp	r2, r3
 800474c:	d13a      	bne.n	80047c4 <UART_SetConfig+0x2e8>
 800474e:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <UART_SetConfig+0x2d4>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004754:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004758:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800475c:	d01a      	beq.n	8004794 <UART_SetConfig+0x2b8>
 800475e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004762:	d81b      	bhi.n	800479c <UART_SetConfig+0x2c0>
 8004764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004768:	d00c      	beq.n	8004784 <UART_SetConfig+0x2a8>
 800476a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800476e:	d815      	bhi.n	800479c <UART_SetConfig+0x2c0>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <UART_SetConfig+0x2a0>
 8004774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004778:	d008      	beq.n	800478c <UART_SetConfig+0x2b0>
 800477a:	e00f      	b.n	800479c <UART_SetConfig+0x2c0>
 800477c:	2300      	movs	r3, #0
 800477e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004782:	e022      	b.n	80047ca <UART_SetConfig+0x2ee>
 8004784:	2302      	movs	r3, #2
 8004786:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800478a:	e01e      	b.n	80047ca <UART_SetConfig+0x2ee>
 800478c:	2304      	movs	r3, #4
 800478e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004792:	e01a      	b.n	80047ca <UART_SetConfig+0x2ee>
 8004794:	2308      	movs	r3, #8
 8004796:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800479a:	e016      	b.n	80047ca <UART_SetConfig+0x2ee>
 800479c:	2310      	movs	r3, #16
 800479e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80047a2:	e012      	b.n	80047ca <UART_SetConfig+0x2ee>
 80047a4:	efff69f3 	.word	0xefff69f3
 80047a8:	40008000 	.word	0x40008000
 80047ac:	40013800 	.word	0x40013800
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40004400 	.word	0x40004400
 80047b8:	40004800 	.word	0x40004800
 80047bc:	40004c00 	.word	0x40004c00
 80047c0:	40005000 	.word	0x40005000
 80047c4:	2310      	movs	r3, #16
 80047c6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	4bb6      	ldr	r3, [pc, #728]	; (8004aa8 <UART_SetConfig+0x5cc>)
 80047d0:	429a      	cmp	r2, r3
 80047d2:	f040 810c 	bne.w	80049ee <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047d6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d823      	bhi.n	8004826 <UART_SetConfig+0x34a>
 80047de:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <UART_SetConfig+0x308>)
 80047e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e4:	08004809 	.word	0x08004809
 80047e8:	08004827 	.word	0x08004827
 80047ec:	08004811 	.word	0x08004811
 80047f0:	08004827 	.word	0x08004827
 80047f4:	08004817 	.word	0x08004817
 80047f8:	08004827 	.word	0x08004827
 80047fc:	08004827 	.word	0x08004827
 8004800:	08004827 	.word	0x08004827
 8004804:	0800481f 	.word	0x0800481f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004808:	f7ff fd5a 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 800480c:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800480e:	e00e      	b.n	800482e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004810:	4ba6      	ldr	r3, [pc, #664]	; (8004aac <UART_SetConfig+0x5d0>)
 8004812:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004814:	e00b      	b.n	800482e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004816:	f7ff fcbb 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 800481a:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800481c:	e007      	b.n	800482e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800481e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004822:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004824:	e003      	b.n	800482e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 800482c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800482e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 81e5 	beq.w	8004c00 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	441a      	add	r2, r3
 8004840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004842:	4293      	cmp	r3, r2
 8004844:	d305      	bcc.n	8004852 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800484c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484e:	4293      	cmp	r3, r2
 8004850:	d903      	bls.n	800485a <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004858:	e1d2      	b.n	8004c00 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 800485a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800485e:	2b08      	cmp	r3, #8
 8004860:	f200 80b0 	bhi.w	80049c4 <UART_SetConfig+0x4e8>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0x390>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	08004891 	.word	0x08004891
 8004870:	080049c5 	.word	0x080049c5
 8004874:	080048f1 	.word	0x080048f1
 8004878:	080049c5 	.word	0x080049c5
 800487c:	08004931 	.word	0x08004931
 8004880:	080049c5 	.word	0x080049c5
 8004884:	080049c5 	.word	0x080049c5
 8004888:	080049c5 	.word	0x080049c5
 800488c:	0800498d 	.word	0x0800498d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004890:	f7ff fd16 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 8004894:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004898:	2200      	movs	r2, #0
 800489a:	4698      	mov	r8, r3
 800489c:	4691      	mov	r9, r2
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80048aa:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80048ae:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80048b2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80048b4:	6849      	ldr	r1, [r1, #4]
 80048b6:	0849      	lsrs	r1, r1, #1
 80048b8:	2000      	movs	r0, #0
 80048ba:	6539      	str	r1, [r7, #80]	; 0x50
 80048bc:	6578      	str	r0, [r7, #84]	; 0x54
 80048be:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80048c2:	4621      	mov	r1, r4
 80048c4:	1851      	adds	r1, r2, r1
 80048c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80048c8:	4629      	mov	r1, r5
 80048ca:	eb43 0101 	adc.w	r1, r3, r1
 80048ce:	64f9      	str	r1, [r7, #76]	; 0x4c
 80048d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	643b      	str	r3, [r7, #64]	; 0x40
 80048d8:	647a      	str	r2, [r7, #68]	; 0x44
 80048da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048e2:	f7fc f9b1 	bl	8000c48 <__aeabi_uldivmod>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4613      	mov	r3, r2
 80048ec:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80048ee:	e06d      	b.n	80049cc <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80048f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	2200      	movs	r2, #0
 80048f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80048fa:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048fc:	4b6c      	ldr	r3, [pc, #432]	; (8004ab0 <UART_SetConfig+0x5d4>)
 80048fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004902:	4602      	mov	r2, r0
 8004904:	18d3      	adds	r3, r2, r3
 8004906:	633b      	str	r3, [r7, #48]	; 0x30
 8004908:	460b      	mov	r3, r1
 800490a:	f143 0300 	adc.w	r3, r3, #0
 800490e:	637b      	str	r3, [r7, #52]	; 0x34
 8004910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
 8004918:	62fa      	str	r2, [r7, #44]	; 0x2c
 800491a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800491e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004922:	f7fc f991 	bl	8000c48 <__aeabi_uldivmod>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4613      	mov	r3, r2
 800492c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800492e:	e04d      	b.n	80049cc <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004930:	f7ff fc2e 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8004934:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004938:	2200      	movs	r2, #0
 800493a:	461c      	mov	r4, r3
 800493c:	4615      	mov	r5, r2
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	022b      	lsls	r3, r5, #8
 8004948:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800494c:	0222      	lsls	r2, r4, #8
 800494e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004950:	6849      	ldr	r1, [r1, #4]
 8004952:	0849      	lsrs	r1, r1, #1
 8004954:	2000      	movs	r0, #0
 8004956:	6239      	str	r1, [r7, #32]
 8004958:	6278      	str	r0, [r7, #36]	; 0x24
 800495a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800495e:	4621      	mov	r1, r4
 8004960:	1851      	adds	r1, r2, r1
 8004962:	61b9      	str	r1, [r7, #24]
 8004964:	4629      	mov	r1, r5
 8004966:	eb43 0101 	adc.w	r1, r3, r1
 800496a:	61f9      	str	r1, [r7, #28]
 800496c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	617a      	str	r2, [r7, #20]
 8004976:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800497a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800497e:	f7fc f963 	bl	8000c48 <__aeabi_uldivmod>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4613      	mov	r3, r2
 8004988:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800498a:	e01f      	b.n	80049cc <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800498c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	2200      	movs	r2, #0
 8004994:	469a      	mov	sl, r3
 8004996:	4693      	mov	fp, r2
 8004998:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	f14b 0300 	adc.w	r3, fp, #0
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049b6:	f7fc f947 	bl	8000c48 <__aeabi_uldivmod>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4613      	mov	r3, r2
 80049c0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80049c2:	e003      	b.n	80049cc <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 80049ca:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d2:	d308      	bcc.n	80049e6 <UART_SetConfig+0x50a>
 80049d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049da:	d204      	bcs.n	80049e6 <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 80049dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	e10c      	b.n	8004c00 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80049ec:	e108      	b.n	8004c00 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f6:	f040 808f 	bne.w	8004b18 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 80049fa:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d864      	bhi.n	8004acc <UART_SetConfig+0x5f0>
 8004a02:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <UART_SetConfig+0x52c>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a4d 	.word	0x08004a4d
 8004a10:	08004a6d 	.word	0x08004a6d
 8004a14:	08004acd 	.word	0x08004acd
 8004a18:	08004a89 	.word	0x08004a89
 8004a1c:	08004acd 	.word	0x08004acd
 8004a20:	08004acd 	.word	0x08004acd
 8004a24:	08004acd 	.word	0x08004acd
 8004a28:	08004ab5 	.word	0x08004ab5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a2c:	f7ff fc48 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 8004a30:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a34:	005a      	lsls	r2, r3, #1
 8004a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	441a      	add	r2, r3
 8004a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a4a:	e043      	b.n	8004ad4 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a4c:	f7ff fc4e 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 8004a50:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a54:	005a      	lsls	r2, r3, #1
 8004a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	085b      	lsrs	r3, r3, #1
 8004a5c:	441a      	add	r2, r3
 8004a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a6a:	e033      	b.n	8004ad4 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	085b      	lsrs	r3, r3, #1
 8004a72:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004a76:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004a7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a7c:	6852      	ldr	r2, [r2, #4]
 8004a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a86:	e025      	b.n	8004ad4 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a88:	f7ff fb82 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8004a8c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a90:	005a      	lsls	r2, r3, #1
 8004a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	441a      	add	r2, r3
 8004a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004aa6:	e015      	b.n	8004ad4 <UART_SetConfig+0x5f8>
 8004aa8:	40008000 	.word	0x40008000
 8004aac:	00f42400 	.word	0x00f42400
 8004ab0:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	085b      	lsrs	r3, r3, #1
 8004aba:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004aca:	e003      	b.n	8004ad4 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004ad2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad6:	2b0f      	cmp	r3, #15
 8004ad8:	d91a      	bls.n	8004b10 <UART_SetConfig+0x634>
 8004ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae0:	d216      	bcs.n	8004b10 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f023 030f 	bic.w	r3, r3, #15
 8004aea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004af0:	085b      	lsrs	r3, r3, #1
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 8004b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	e077      	b.n	8004c00 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004b16:	e073      	b.n	8004c00 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8004b18:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d85c      	bhi.n	8004bda <UART_SetConfig+0x6fe>
 8004b20:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <UART_SetConfig+0x64c>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b6b 	.word	0x08004b6b
 8004b30:	08004b89 	.word	0x08004b89
 8004b34:	08004bdb 	.word	0x08004bdb
 8004b38:	08004ba5 	.word	0x08004ba5
 8004b3c:	08004bdb 	.word	0x08004bdb
 8004b40:	08004bdb 	.word	0x08004bdb
 8004b44:	08004bdb 	.word	0x08004bdb
 8004b48:	08004bc3 	.word	0x08004bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b4c:	f7ff fbb8 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 8004b50:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	085a      	lsrs	r2, r3, #1
 8004b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b5a:	441a      	add	r2, r3
 8004b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b68:	e03b      	b.n	8004be2 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b6a:	f7ff fbbf 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 8004b6e:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	085a      	lsrs	r2, r3, #1
 8004b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b78:	441a      	add	r2, r3
 8004b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b86:	e02c      	b.n	8004be2 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004b92:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004b96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b98:	6852      	ldr	r2, [r2, #4]
 8004b9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ba2:	e01e      	b.n	8004be2 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ba4:	f7ff faf4 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8004ba8:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	085a      	lsrs	r2, r3, #1
 8004bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bb2:	441a      	add	r2, r3
 8004bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bc0:	e00f      	b.n	8004be2 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bd8:	e003      	b.n	8004be2 <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be4:	2b0f      	cmp	r3, #15
 8004be6:	d908      	bls.n	8004bfa <UART_SetConfig+0x71e>
 8004be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bee:	d204      	bcs.n	8004bfa <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 8004bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004bf6:	60da      	str	r2, [r3, #12]
 8004bf8:	e002      	b.n	8004c00 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c02:	2200      	movs	r2, #0
 8004c04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c08:	2200      	movs	r2, #0
 8004c0a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c0c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3780      	adds	r7, #128	; 0x80
 8004c14:	46bd      	mov	sp, r7
 8004c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c1a:	bf00      	nop

08004c1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01a      	beq.n	8004d32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d1a:	d10a      	bne.n	8004d32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	605a      	str	r2, [r3, #4]
  }
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d6e:	f7fe f8b5 	bl	8002edc <HAL_GetTick>
 8004d72:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d10e      	bne.n	8004da0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f82a 	bl	8004dea <UART_WaitOnFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e020      	b.n	8004de2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d10e      	bne.n	8004dcc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f814 	bl	8004dea <UART_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e00a      	b.n	8004de2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	4613      	mov	r3, r2
 8004df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dfa:	e05d      	b.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d059      	beq.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e04:	f7fe f86a 	bl	8002edc <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d302      	bcc.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d11b      	bne.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e28:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e042      	b.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d02b      	beq.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e6e:	d123      	bne.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e78:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e88:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0201 	bic.w	r2, r2, #1
 8004e98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e00f      	b.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69da      	ldr	r2, [r3, #28]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2301      	moveq	r3, #1
 8004eca:	2300      	movne	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d092      	beq.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <findslot>:
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <findslot+0x2c>)
 8004ee2:	b510      	push	{r4, lr}
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	b118      	cbz	r0, 8004ef2 <findslot+0x12>
 8004eea:	6983      	ldr	r3, [r0, #24]
 8004eec:	b90b      	cbnz	r3, 8004ef2 <findslot+0x12>
 8004eee:	f000 faf9 	bl	80054e4 <__sinit>
 8004ef2:	2c13      	cmp	r4, #19
 8004ef4:	d807      	bhi.n	8004f06 <findslot+0x26>
 8004ef6:	4806      	ldr	r0, [pc, #24]	; (8004f10 <findslot+0x30>)
 8004ef8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004efc:	3201      	adds	r2, #1
 8004efe:	d002      	beq.n	8004f06 <findslot+0x26>
 8004f00:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004f04:	bd10      	pop	{r4, pc}
 8004f06:	2000      	movs	r0, #0
 8004f08:	e7fc      	b.n	8004f04 <findslot+0x24>
 8004f0a:	bf00      	nop
 8004f0c:	200000ac 	.word	0x200000ac
 8004f10:	2000045c 	.word	0x2000045c

08004f14 <error>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	4604      	mov	r4, r0
 8004f18:	f000 fa86 	bl	8005428 <__errno>
 8004f1c:	2613      	movs	r6, #19
 8004f1e:	4605      	mov	r5, r0
 8004f20:	2700      	movs	r7, #0
 8004f22:	4630      	mov	r0, r6
 8004f24:	4639      	mov	r1, r7
 8004f26:	beab      	bkpt	0x00ab
 8004f28:	4606      	mov	r6, r0
 8004f2a:	602e      	str	r6, [r5, #0]
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f30 <checkerror>:
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d101      	bne.n	8004f38 <checkerror+0x8>
 8004f34:	f7ff bfee 	b.w	8004f14 <error>
 8004f38:	4770      	bx	lr

08004f3a <_swiread>:
 8004f3a:	b530      	push	{r4, r5, lr}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004f42:	9203      	str	r2, [sp, #12]
 8004f44:	2406      	movs	r4, #6
 8004f46:	ad01      	add	r5, sp, #4
 8004f48:	4620      	mov	r0, r4
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	beab      	bkpt	0x00ab
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4620      	mov	r0, r4
 8004f52:	f7ff ffed 	bl	8004f30 <checkerror>
 8004f56:	b005      	add	sp, #20
 8004f58:	bd30      	pop	{r4, r5, pc}

08004f5a <_read>:
 8004f5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f5c:	4615      	mov	r5, r2
 8004f5e:	9101      	str	r1, [sp, #4]
 8004f60:	f7ff ffbe 	bl	8004ee0 <findslot>
 8004f64:	9901      	ldr	r1, [sp, #4]
 8004f66:	4604      	mov	r4, r0
 8004f68:	b938      	cbnz	r0, 8004f7a <_read+0x20>
 8004f6a:	f000 fa5d 	bl	8005428 <__errno>
 8004f6e:	2309      	movs	r3, #9
 8004f70:	6003      	str	r3, [r0, #0]
 8004f72:	f04f 30ff 	mov.w	r0, #4294967295
 8004f76:	b003      	add	sp, #12
 8004f78:	bd30      	pop	{r4, r5, pc}
 8004f7a:	6800      	ldr	r0, [r0, #0]
 8004f7c:	462a      	mov	r2, r5
 8004f7e:	f7ff ffdc 	bl	8004f3a <_swiread>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	d0f7      	beq.n	8004f76 <_read+0x1c>
 8004f86:	6863      	ldr	r3, [r4, #4]
 8004f88:	1a2a      	subs	r2, r5, r0
 8004f8a:	4413      	add	r3, r2
 8004f8c:	6063      	str	r3, [r4, #4]
 8004f8e:	4610      	mov	r0, r2
 8004f90:	e7f1      	b.n	8004f76 <_read+0x1c>

08004f92 <_swilseek>:
 8004f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f94:	460c      	mov	r4, r1
 8004f96:	4616      	mov	r6, r2
 8004f98:	f7ff ffa2 	bl	8004ee0 <findslot>
 8004f9c:	4605      	mov	r5, r0
 8004f9e:	b940      	cbnz	r0, 8004fb2 <_swilseek+0x20>
 8004fa0:	f000 fa42 	bl	8005428 <__errno>
 8004fa4:	2309      	movs	r3, #9
 8004fa6:	6003      	str	r3, [r0, #0]
 8004fa8:	f04f 34ff 	mov.w	r4, #4294967295
 8004fac:	4620      	mov	r0, r4
 8004fae:	b003      	add	sp, #12
 8004fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb2:	2e02      	cmp	r6, #2
 8004fb4:	d903      	bls.n	8004fbe <_swilseek+0x2c>
 8004fb6:	f000 fa37 	bl	8005428 <__errno>
 8004fba:	2316      	movs	r3, #22
 8004fbc:	e7f3      	b.n	8004fa6 <_swilseek+0x14>
 8004fbe:	2e01      	cmp	r6, #1
 8004fc0:	d112      	bne.n	8004fe8 <_swilseek+0x56>
 8004fc2:	6843      	ldr	r3, [r0, #4]
 8004fc4:	18e4      	adds	r4, r4, r3
 8004fc6:	d4f6      	bmi.n	8004fb6 <_swilseek+0x24>
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	260a      	movs	r6, #10
 8004fcc:	e9cd 3400 	strd	r3, r4, [sp]
 8004fd0:	466f      	mov	r7, sp
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	4639      	mov	r1, r7
 8004fd6:	beab      	bkpt	0x00ab
 8004fd8:	4606      	mov	r6, r0
 8004fda:	4630      	mov	r0, r6
 8004fdc:	f7ff ffa8 	bl	8004f30 <checkerror>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	dbe1      	blt.n	8004fa8 <_swilseek+0x16>
 8004fe4:	606c      	str	r4, [r5, #4]
 8004fe6:	e7e1      	b.n	8004fac <_swilseek+0x1a>
 8004fe8:	2e02      	cmp	r6, #2
 8004fea:	d1ed      	bne.n	8004fc8 <_swilseek+0x36>
 8004fec:	6803      	ldr	r3, [r0, #0]
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	260c      	movs	r6, #12
 8004ff2:	466f      	mov	r7, sp
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	beab      	bkpt	0x00ab
 8004ffa:	4606      	mov	r6, r0
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f7ff ff97 	bl	8004f30 <checkerror>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	d0d0      	beq.n	8004fa8 <_swilseek+0x16>
 8005006:	4404      	add	r4, r0
 8005008:	e7de      	b.n	8004fc8 <_swilseek+0x36>

0800500a <_lseek>:
 800500a:	f7ff bfc2 	b.w	8004f92 <_swilseek>

0800500e <_swiwrite>:
 800500e:	b530      	push	{r4, r5, lr}
 8005010:	b085      	sub	sp, #20
 8005012:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005016:	9203      	str	r2, [sp, #12]
 8005018:	2405      	movs	r4, #5
 800501a:	ad01      	add	r5, sp, #4
 800501c:	4620      	mov	r0, r4
 800501e:	4629      	mov	r1, r5
 8005020:	beab      	bkpt	0x00ab
 8005022:	4604      	mov	r4, r0
 8005024:	4620      	mov	r0, r4
 8005026:	f7ff ff83 	bl	8004f30 <checkerror>
 800502a:	b005      	add	sp, #20
 800502c:	bd30      	pop	{r4, r5, pc}

0800502e <_write>:
 800502e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005030:	4615      	mov	r5, r2
 8005032:	9101      	str	r1, [sp, #4]
 8005034:	f7ff ff54 	bl	8004ee0 <findslot>
 8005038:	9901      	ldr	r1, [sp, #4]
 800503a:	4604      	mov	r4, r0
 800503c:	b930      	cbnz	r0, 800504c <_write+0x1e>
 800503e:	f000 f9f3 	bl	8005428 <__errno>
 8005042:	2309      	movs	r3, #9
 8005044:	6003      	str	r3, [r0, #0]
 8005046:	f04f 30ff 	mov.w	r0, #4294967295
 800504a:	e012      	b.n	8005072 <_write+0x44>
 800504c:	6800      	ldr	r0, [r0, #0]
 800504e:	462a      	mov	r2, r5
 8005050:	f7ff ffdd 	bl	800500e <_swiwrite>
 8005054:	2800      	cmp	r0, #0
 8005056:	dbf6      	blt.n	8005046 <_write+0x18>
 8005058:	6862      	ldr	r2, [r4, #4]
 800505a:	1a2b      	subs	r3, r5, r0
 800505c:	441a      	add	r2, r3
 800505e:	42a8      	cmp	r0, r5
 8005060:	6062      	str	r2, [r4, #4]
 8005062:	d105      	bne.n	8005070 <_write+0x42>
 8005064:	2000      	movs	r0, #0
 8005066:	b003      	add	sp, #12
 8005068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800506c:	f7ff bf52 	b.w	8004f14 <error>
 8005070:	4618      	mov	r0, r3
 8005072:	b003      	add	sp, #12
 8005074:	bd30      	pop	{r4, r5, pc}

08005076 <_swiclose>:
 8005076:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005078:	2402      	movs	r4, #2
 800507a:	9001      	str	r0, [sp, #4]
 800507c:	ad01      	add	r5, sp, #4
 800507e:	4620      	mov	r0, r4
 8005080:	4629      	mov	r1, r5
 8005082:	beab      	bkpt	0x00ab
 8005084:	4604      	mov	r4, r0
 8005086:	4620      	mov	r0, r4
 8005088:	f7ff ff52 	bl	8004f30 <checkerror>
 800508c:	b003      	add	sp, #12
 800508e:	bd30      	pop	{r4, r5, pc}

08005090 <_close>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4605      	mov	r5, r0
 8005094:	f7ff ff24 	bl	8004ee0 <findslot>
 8005098:	4604      	mov	r4, r0
 800509a:	b930      	cbnz	r0, 80050aa <_close+0x1a>
 800509c:	f000 f9c4 	bl	8005428 <__errno>
 80050a0:	2309      	movs	r3, #9
 80050a2:	6003      	str	r3, [r0, #0]
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295
 80050a8:	bd38      	pop	{r3, r4, r5, pc}
 80050aa:	3d01      	subs	r5, #1
 80050ac:	2d01      	cmp	r5, #1
 80050ae:	d809      	bhi.n	80050c4 <_close+0x34>
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <_close+0x48>)
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d104      	bne.n	80050c4 <_close+0x34>
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
 80050be:	6003      	str	r3, [r0, #0]
 80050c0:	2000      	movs	r0, #0
 80050c2:	e7f1      	b.n	80050a8 <_close+0x18>
 80050c4:	6820      	ldr	r0, [r4, #0]
 80050c6:	f7ff ffd6 	bl	8005076 <_swiclose>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d1ec      	bne.n	80050a8 <_close+0x18>
 80050ce:	f04f 33ff 	mov.w	r3, #4294967295
 80050d2:	6023      	str	r3, [r4, #0]
 80050d4:	e7e8      	b.n	80050a8 <_close+0x18>
 80050d6:	bf00      	nop
 80050d8:	2000045c 	.word	0x2000045c

080050dc <_getpid>:
 80050dc:	2001      	movs	r0, #1
 80050de:	4770      	bx	lr

080050e0 <_swistat>:
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	460c      	mov	r4, r1
 80050e4:	f7ff fefc 	bl	8004ee0 <findslot>
 80050e8:	4605      	mov	r5, r0
 80050ea:	b930      	cbnz	r0, 80050fa <_swistat+0x1a>
 80050ec:	f000 f99c 	bl	8005428 <__errno>
 80050f0:	2309      	movs	r3, #9
 80050f2:	6003      	str	r3, [r0, #0]
 80050f4:	f04f 30ff 	mov.w	r0, #4294967295
 80050f8:	bd70      	pop	{r4, r5, r6, pc}
 80050fa:	6863      	ldr	r3, [r4, #4]
 80050fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005100:	6063      	str	r3, [r4, #4]
 8005102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005106:	64a3      	str	r3, [r4, #72]	; 0x48
 8005108:	260c      	movs	r6, #12
 800510a:	4630      	mov	r0, r6
 800510c:	4629      	mov	r1, r5
 800510e:	beab      	bkpt	0x00ab
 8005110:	4605      	mov	r5, r0
 8005112:	4628      	mov	r0, r5
 8005114:	f7ff ff0c 	bl	8004f30 <checkerror>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	bf1c      	itt	ne
 800511c:	6120      	strne	r0, [r4, #16]
 800511e:	2000      	movne	r0, #0
 8005120:	e7ea      	b.n	80050f8 <_swistat+0x18>

08005122 <_fstat>:
 8005122:	460b      	mov	r3, r1
 8005124:	b510      	push	{r4, lr}
 8005126:	2100      	movs	r1, #0
 8005128:	4604      	mov	r4, r0
 800512a:	2258      	movs	r2, #88	; 0x58
 800512c:	4618      	mov	r0, r3
 800512e:	f000 faac 	bl	800568a <memset>
 8005132:	4601      	mov	r1, r0
 8005134:	4620      	mov	r0, r4
 8005136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800513a:	f7ff bfd1 	b.w	80050e0 <_swistat>

0800513e <_stat>:
 800513e:	b538      	push	{r3, r4, r5, lr}
 8005140:	460d      	mov	r5, r1
 8005142:	4604      	mov	r4, r0
 8005144:	2258      	movs	r2, #88	; 0x58
 8005146:	2100      	movs	r1, #0
 8005148:	4628      	mov	r0, r5
 800514a:	f000 fa9e 	bl	800568a <memset>
 800514e:	4620      	mov	r0, r4
 8005150:	2100      	movs	r1, #0
 8005152:	f000 f811 	bl	8005178 <_swiopen>
 8005156:	1c43      	adds	r3, r0, #1
 8005158:	4604      	mov	r4, r0
 800515a:	d00b      	beq.n	8005174 <_stat+0x36>
 800515c:	686b      	ldr	r3, [r5, #4]
 800515e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005162:	606b      	str	r3, [r5, #4]
 8005164:	4629      	mov	r1, r5
 8005166:	f7ff ffbb 	bl	80050e0 <_swistat>
 800516a:	4605      	mov	r5, r0
 800516c:	4620      	mov	r0, r4
 800516e:	f7ff ff8f 	bl	8005090 <_close>
 8005172:	462c      	mov	r4, r5
 8005174:	4620      	mov	r0, r4
 8005176:	bd38      	pop	{r3, r4, r5, pc}

08005178 <_swiopen>:
 8005178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800517c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005228 <_swiopen+0xb0>
 8005180:	b097      	sub	sp, #92	; 0x5c
 8005182:	4607      	mov	r7, r0
 8005184:	460e      	mov	r6, r1
 8005186:	2500      	movs	r5, #0
 8005188:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800518c:	1c61      	adds	r1, r4, #1
 800518e:	d037      	beq.n	8005200 <_swiopen+0x88>
 8005190:	3501      	adds	r5, #1
 8005192:	2d14      	cmp	r5, #20
 8005194:	d1f8      	bne.n	8005188 <_swiopen+0x10>
 8005196:	f000 f947 	bl	8005428 <__errno>
 800519a:	2318      	movs	r3, #24
 800519c:	6003      	str	r3, [r0, #0]
 800519e:	f04f 34ff 	mov.w	r4, #4294967295
 80051a2:	e03d      	b.n	8005220 <_swiopen+0xa8>
 80051a4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80051a8:	f240 6301 	movw	r3, #1537	; 0x601
 80051ac:	07b2      	lsls	r2, r6, #30
 80051ae:	bf48      	it	mi
 80051b0:	f044 0402 	orrmi.w	r4, r4, #2
 80051b4:	421e      	tst	r6, r3
 80051b6:	bf18      	it	ne
 80051b8:	f044 0404 	orrne.w	r4, r4, #4
 80051bc:	0733      	lsls	r3, r6, #28
 80051be:	bf48      	it	mi
 80051c0:	f024 0404 	bicmi.w	r4, r4, #4
 80051c4:	4638      	mov	r0, r7
 80051c6:	bf48      	it	mi
 80051c8:	f044 0408 	orrmi.w	r4, r4, #8
 80051cc:	9700      	str	r7, [sp, #0]
 80051ce:	f7fa ffff 	bl	80001d0 <strlen>
 80051d2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80051d6:	2401      	movs	r4, #1
 80051d8:	4620      	mov	r0, r4
 80051da:	4649      	mov	r1, r9
 80051dc:	beab      	bkpt	0x00ab
 80051de:	4604      	mov	r4, r0
 80051e0:	2c00      	cmp	r4, #0
 80051e2:	db08      	blt.n	80051f6 <_swiopen+0x7e>
 80051e4:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80051e8:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 80051ec:	2300      	movs	r3, #0
 80051ee:	f8c8 3004 	str.w	r3, [r8, #4]
 80051f2:	462c      	mov	r4, r5
 80051f4:	e014      	b.n	8005220 <_swiopen+0xa8>
 80051f6:	4620      	mov	r0, r4
 80051f8:	f7ff fe8c 	bl	8004f14 <error>
 80051fc:	4604      	mov	r4, r0
 80051fe:	e00f      	b.n	8005220 <_swiopen+0xa8>
 8005200:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8005204:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005208:	46e9      	mov	r9, sp
 800520a:	d1cb      	bne.n	80051a4 <_swiopen+0x2c>
 800520c:	4649      	mov	r1, r9
 800520e:	4638      	mov	r0, r7
 8005210:	f7ff ff95 	bl	800513e <_stat>
 8005214:	3001      	adds	r0, #1
 8005216:	d0c5      	beq.n	80051a4 <_swiopen+0x2c>
 8005218:	f000 f906 	bl	8005428 <__errno>
 800521c:	2311      	movs	r3, #17
 800521e:	6003      	str	r3, [r0, #0]
 8005220:	4620      	mov	r0, r4
 8005222:	b017      	add	sp, #92	; 0x5c
 8005224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005228:	2000045c 	.word	0x2000045c

0800522c <_get_semihosting_exts>:
 800522c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005230:	4606      	mov	r6, r0
 8005232:	460f      	mov	r7, r1
 8005234:	482a      	ldr	r0, [pc, #168]	; (80052e0 <_get_semihosting_exts+0xb4>)
 8005236:	2100      	movs	r1, #0
 8005238:	4615      	mov	r5, r2
 800523a:	f7ff ff9d 	bl	8005178 <_swiopen>
 800523e:	462a      	mov	r2, r5
 8005240:	4604      	mov	r4, r0
 8005242:	2100      	movs	r1, #0
 8005244:	4630      	mov	r0, r6
 8005246:	f000 fa20 	bl	800568a <memset>
 800524a:	1c63      	adds	r3, r4, #1
 800524c:	d016      	beq.n	800527c <_get_semihosting_exts+0x50>
 800524e:	4620      	mov	r0, r4
 8005250:	f7ff fe46 	bl	8004ee0 <findslot>
 8005254:	f04f 090c 	mov.w	r9, #12
 8005258:	4680      	mov	r8, r0
 800525a:	4648      	mov	r0, r9
 800525c:	4641      	mov	r1, r8
 800525e:	beab      	bkpt	0x00ab
 8005260:	4680      	mov	r8, r0
 8005262:	4640      	mov	r0, r8
 8005264:	f7ff fe64 	bl	8004f30 <checkerror>
 8005268:	2803      	cmp	r0, #3
 800526a:	dd02      	ble.n	8005272 <_get_semihosting_exts+0x46>
 800526c:	1ec3      	subs	r3, r0, #3
 800526e:	42ab      	cmp	r3, r5
 8005270:	dc08      	bgt.n	8005284 <_get_semihosting_exts+0x58>
 8005272:	4620      	mov	r0, r4
 8005274:	f7ff ff0c 	bl	8005090 <_close>
 8005278:	f04f 34ff 	mov.w	r4, #4294967295
 800527c:	4620      	mov	r0, r4
 800527e:	b003      	add	sp, #12
 8005280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005284:	2204      	movs	r2, #4
 8005286:	eb0d 0102 	add.w	r1, sp, r2
 800528a:	4620      	mov	r0, r4
 800528c:	f7ff fe65 	bl	8004f5a <_read>
 8005290:	2803      	cmp	r0, #3
 8005292:	ddee      	ble.n	8005272 <_get_semihosting_exts+0x46>
 8005294:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005298:	2b53      	cmp	r3, #83	; 0x53
 800529a:	d1ea      	bne.n	8005272 <_get_semihosting_exts+0x46>
 800529c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80052a0:	2b48      	cmp	r3, #72	; 0x48
 80052a2:	d1e6      	bne.n	8005272 <_get_semihosting_exts+0x46>
 80052a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80052a8:	2b46      	cmp	r3, #70	; 0x46
 80052aa:	d1e2      	bne.n	8005272 <_get_semihosting_exts+0x46>
 80052ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052b0:	2b42      	cmp	r3, #66	; 0x42
 80052b2:	d1de      	bne.n	8005272 <_get_semihosting_exts+0x46>
 80052b4:	2201      	movs	r2, #1
 80052b6:	4639      	mov	r1, r7
 80052b8:	4620      	mov	r0, r4
 80052ba:	f7ff fe6a 	bl	8004f92 <_swilseek>
 80052be:	2800      	cmp	r0, #0
 80052c0:	dbd7      	blt.n	8005272 <_get_semihosting_exts+0x46>
 80052c2:	462a      	mov	r2, r5
 80052c4:	4631      	mov	r1, r6
 80052c6:	4620      	mov	r0, r4
 80052c8:	f7ff fe47 	bl	8004f5a <_read>
 80052cc:	4605      	mov	r5, r0
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7ff fede 	bl	8005090 <_close>
 80052d4:	4628      	mov	r0, r5
 80052d6:	f7ff fe2b 	bl	8004f30 <checkerror>
 80052da:	4604      	mov	r4, r0
 80052dc:	e7ce      	b.n	800527c <_get_semihosting_exts+0x50>
 80052de:	bf00      	nop
 80052e0:	0800848c 	.word	0x0800848c

080052e4 <initialise_semihosting_exts>:
 80052e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052e6:	4d0a      	ldr	r5, [pc, #40]	; (8005310 <initialise_semihosting_exts+0x2c>)
 80052e8:	4c0a      	ldr	r4, [pc, #40]	; (8005314 <initialise_semihosting_exts+0x30>)
 80052ea:	2100      	movs	r1, #0
 80052ec:	2201      	movs	r2, #1
 80052ee:	a801      	add	r0, sp, #4
 80052f0:	6029      	str	r1, [r5, #0]
 80052f2:	6022      	str	r2, [r4, #0]
 80052f4:	f7ff ff9a 	bl	800522c <_get_semihosting_exts>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	dd07      	ble.n	800530c <initialise_semihosting_exts+0x28>
 80052fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005300:	f003 0201 	and.w	r2, r3, #1
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	602a      	str	r2, [r5, #0]
 800530a:	6023      	str	r3, [r4, #0]
 800530c:	b003      	add	sp, #12
 800530e:	bd30      	pop	{r4, r5, pc}
 8005310:	200000a4 	.word	0x200000a4
 8005314:	200000a8 	.word	0x200000a8

08005318 <_has_ext_stdout_stderr>:
 8005318:	b510      	push	{r4, lr}
 800531a:	4c04      	ldr	r4, [pc, #16]	; (800532c <_has_ext_stdout_stderr+0x14>)
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	da01      	bge.n	8005326 <_has_ext_stdout_stderr+0xe>
 8005322:	f7ff ffdf 	bl	80052e4 <initialise_semihosting_exts>
 8005326:	6820      	ldr	r0, [r4, #0]
 8005328:	bd10      	pop	{r4, pc}
 800532a:	bf00      	nop
 800532c:	200000a8 	.word	0x200000a8

08005330 <initialise_monitor_handles>:
 8005330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005334:	b085      	sub	sp, #20
 8005336:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80053e8 <initialise_monitor_handles+0xb8>
 800533a:	f8cd 9004 	str.w	r9, [sp, #4]
 800533e:	2303      	movs	r3, #3
 8005340:	2400      	movs	r4, #0
 8005342:	9303      	str	r3, [sp, #12]
 8005344:	af01      	add	r7, sp, #4
 8005346:	9402      	str	r4, [sp, #8]
 8005348:	2501      	movs	r5, #1
 800534a:	4628      	mov	r0, r5
 800534c:	4639      	mov	r1, r7
 800534e:	beab      	bkpt	0x00ab
 8005350:	4605      	mov	r5, r0
 8005352:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80053ec <initialise_monitor_handles+0xbc>
 8005356:	4623      	mov	r3, r4
 8005358:	4c20      	ldr	r4, [pc, #128]	; (80053dc <initialise_monitor_handles+0xac>)
 800535a:	f8c8 5000 	str.w	r5, [r8]
 800535e:	f04f 32ff 	mov.w	r2, #4294967295
 8005362:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8005366:	3301      	adds	r3, #1
 8005368:	2b14      	cmp	r3, #20
 800536a:	d1fa      	bne.n	8005362 <initialise_monitor_handles+0x32>
 800536c:	f7ff ffd4 	bl	8005318 <_has_ext_stdout_stderr>
 8005370:	4d1b      	ldr	r5, [pc, #108]	; (80053e0 <initialise_monitor_handles+0xb0>)
 8005372:	b1d0      	cbz	r0, 80053aa <initialise_monitor_handles+0x7a>
 8005374:	f04f 0a03 	mov.w	sl, #3
 8005378:	2304      	movs	r3, #4
 800537a:	f8cd 9004 	str.w	r9, [sp, #4]
 800537e:	2601      	movs	r6, #1
 8005380:	f8cd a00c 	str.w	sl, [sp, #12]
 8005384:	9302      	str	r3, [sp, #8]
 8005386:	4630      	mov	r0, r6
 8005388:	4639      	mov	r1, r7
 800538a:	beab      	bkpt	0x00ab
 800538c:	4683      	mov	fp, r0
 800538e:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <initialise_monitor_handles+0xb4>)
 8005390:	f8cd 9004 	str.w	r9, [sp, #4]
 8005394:	f8c3 b000 	str.w	fp, [r3]
 8005398:	2308      	movs	r3, #8
 800539a:	f8cd a00c 	str.w	sl, [sp, #12]
 800539e:	9302      	str	r3, [sp, #8]
 80053a0:	4630      	mov	r0, r6
 80053a2:	4639      	mov	r1, r7
 80053a4:	beab      	bkpt	0x00ab
 80053a6:	4606      	mov	r6, r0
 80053a8:	602e      	str	r6, [r5, #0]
 80053aa:	682b      	ldr	r3, [r5, #0]
 80053ac:	3301      	adds	r3, #1
 80053ae:	bf02      	ittt	eq
 80053b0:	4b0c      	ldreq	r3, [pc, #48]	; (80053e4 <initialise_monitor_handles+0xb4>)
 80053b2:	681b      	ldreq	r3, [r3, #0]
 80053b4:	602b      	streq	r3, [r5, #0]
 80053b6:	2600      	movs	r6, #0
 80053b8:	f8d8 3000 	ldr.w	r3, [r8]
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	6066      	str	r6, [r4, #4]
 80053c0:	f7ff ffaa 	bl	8005318 <_has_ext_stdout_stderr>
 80053c4:	b130      	cbz	r0, 80053d4 <initialise_monitor_handles+0xa4>
 80053c6:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <initialise_monitor_handles+0xb4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80053ce:	682b      	ldr	r3, [r5, #0]
 80053d0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80053d4:	b005      	add	sp, #20
 80053d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053da:	bf00      	nop
 80053dc:	2000045c 	.word	0x2000045c
 80053e0:	20000450 	.word	0x20000450
 80053e4:	20000458 	.word	0x20000458
 80053e8:	080084a2 	.word	0x080084a2
 80053ec:	20000454 	.word	0x20000454

080053f0 <_isatty>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	f7ff fd75 	bl	8004ee0 <findslot>
 80053f6:	2509      	movs	r5, #9
 80053f8:	4604      	mov	r4, r0
 80053fa:	b920      	cbnz	r0, 8005406 <_isatty+0x16>
 80053fc:	f000 f814 	bl	8005428 <__errno>
 8005400:	6005      	str	r5, [r0, #0]
 8005402:	4620      	mov	r0, r4
 8005404:	bd70      	pop	{r4, r5, r6, pc}
 8005406:	4628      	mov	r0, r5
 8005408:	4621      	mov	r1, r4
 800540a:	beab      	bkpt	0x00ab
 800540c:	4604      	mov	r4, r0
 800540e:	2c01      	cmp	r4, #1
 8005410:	d0f7      	beq.n	8005402 <_isatty+0x12>
 8005412:	f000 f809 	bl	8005428 <__errno>
 8005416:	2400      	movs	r4, #0
 8005418:	4605      	mov	r5, r0
 800541a:	2613      	movs	r6, #19
 800541c:	4630      	mov	r0, r6
 800541e:	4621      	mov	r1, r4
 8005420:	beab      	bkpt	0x00ab
 8005422:	4606      	mov	r6, r0
 8005424:	602e      	str	r6, [r5, #0]
 8005426:	e7ec      	b.n	8005402 <_isatty+0x12>

08005428 <__errno>:
 8005428:	4b01      	ldr	r3, [pc, #4]	; (8005430 <__errno+0x8>)
 800542a:	6818      	ldr	r0, [r3, #0]
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	200000ac 	.word	0x200000ac

08005434 <std>:
 8005434:	2300      	movs	r3, #0
 8005436:	b510      	push	{r4, lr}
 8005438:	4604      	mov	r4, r0
 800543a:	e9c0 3300 	strd	r3, r3, [r0]
 800543e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005442:	6083      	str	r3, [r0, #8]
 8005444:	8181      	strh	r1, [r0, #12]
 8005446:	6643      	str	r3, [r0, #100]	; 0x64
 8005448:	81c2      	strh	r2, [r0, #14]
 800544a:	6183      	str	r3, [r0, #24]
 800544c:	4619      	mov	r1, r3
 800544e:	2208      	movs	r2, #8
 8005450:	305c      	adds	r0, #92	; 0x5c
 8005452:	f000 f91a 	bl	800568a <memset>
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <std+0x38>)
 8005458:	6263      	str	r3, [r4, #36]	; 0x24
 800545a:	4b05      	ldr	r3, [pc, #20]	; (8005470 <std+0x3c>)
 800545c:	62a3      	str	r3, [r4, #40]	; 0x28
 800545e:	4b05      	ldr	r3, [pc, #20]	; (8005474 <std+0x40>)
 8005460:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <std+0x44>)
 8005464:	6224      	str	r4, [r4, #32]
 8005466:	6323      	str	r3, [r4, #48]	; 0x30
 8005468:	bd10      	pop	{r4, pc}
 800546a:	bf00      	nop
 800546c:	080060f9 	.word	0x080060f9
 8005470:	0800611b 	.word	0x0800611b
 8005474:	08006153 	.word	0x08006153
 8005478:	08006177 	.word	0x08006177

0800547c <_cleanup_r>:
 800547c:	4901      	ldr	r1, [pc, #4]	; (8005484 <_cleanup_r+0x8>)
 800547e:	f000 b8af 	b.w	80055e0 <_fwalk_reent>
 8005482:	bf00      	nop
 8005484:	08007181 	.word	0x08007181

08005488 <__sfmoreglue>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	2268      	movs	r2, #104	; 0x68
 800548c:	1e4d      	subs	r5, r1, #1
 800548e:	4355      	muls	r5, r2
 8005490:	460e      	mov	r6, r1
 8005492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005496:	f000 f921 	bl	80056dc <_malloc_r>
 800549a:	4604      	mov	r4, r0
 800549c:	b140      	cbz	r0, 80054b0 <__sfmoreglue+0x28>
 800549e:	2100      	movs	r1, #0
 80054a0:	e9c0 1600 	strd	r1, r6, [r0]
 80054a4:	300c      	adds	r0, #12
 80054a6:	60a0      	str	r0, [r4, #8]
 80054a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054ac:	f000 f8ed 	bl	800568a <memset>
 80054b0:	4620      	mov	r0, r4
 80054b2:	bd70      	pop	{r4, r5, r6, pc}

080054b4 <__sfp_lock_acquire>:
 80054b4:	4801      	ldr	r0, [pc, #4]	; (80054bc <__sfp_lock_acquire+0x8>)
 80054b6:	f000 b8d8 	b.w	800566a <__retarget_lock_acquire_recursive>
 80054ba:	bf00      	nop
 80054bc:	200004fd 	.word	0x200004fd

080054c0 <__sfp_lock_release>:
 80054c0:	4801      	ldr	r0, [pc, #4]	; (80054c8 <__sfp_lock_release+0x8>)
 80054c2:	f000 b8d3 	b.w	800566c <__retarget_lock_release_recursive>
 80054c6:	bf00      	nop
 80054c8:	200004fd 	.word	0x200004fd

080054cc <__sinit_lock_acquire>:
 80054cc:	4801      	ldr	r0, [pc, #4]	; (80054d4 <__sinit_lock_acquire+0x8>)
 80054ce:	f000 b8cc 	b.w	800566a <__retarget_lock_acquire_recursive>
 80054d2:	bf00      	nop
 80054d4:	200004fe 	.word	0x200004fe

080054d8 <__sinit_lock_release>:
 80054d8:	4801      	ldr	r0, [pc, #4]	; (80054e0 <__sinit_lock_release+0x8>)
 80054da:	f000 b8c7 	b.w	800566c <__retarget_lock_release_recursive>
 80054de:	bf00      	nop
 80054e0:	200004fe 	.word	0x200004fe

080054e4 <__sinit>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	4604      	mov	r4, r0
 80054e8:	f7ff fff0 	bl	80054cc <__sinit_lock_acquire>
 80054ec:	69a3      	ldr	r3, [r4, #24]
 80054ee:	b11b      	cbz	r3, 80054f8 <__sinit+0x14>
 80054f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f4:	f7ff bff0 	b.w	80054d8 <__sinit_lock_release>
 80054f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054fc:	6523      	str	r3, [r4, #80]	; 0x50
 80054fe:	4b13      	ldr	r3, [pc, #76]	; (800554c <__sinit+0x68>)
 8005500:	4a13      	ldr	r2, [pc, #76]	; (8005550 <__sinit+0x6c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	62a2      	str	r2, [r4, #40]	; 0x28
 8005506:	42a3      	cmp	r3, r4
 8005508:	bf04      	itt	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	61a3      	streq	r3, [r4, #24]
 800550e:	4620      	mov	r0, r4
 8005510:	f000 f820 	bl	8005554 <__sfp>
 8005514:	6060      	str	r0, [r4, #4]
 8005516:	4620      	mov	r0, r4
 8005518:	f000 f81c 	bl	8005554 <__sfp>
 800551c:	60a0      	str	r0, [r4, #8]
 800551e:	4620      	mov	r0, r4
 8005520:	f000 f818 	bl	8005554 <__sfp>
 8005524:	2200      	movs	r2, #0
 8005526:	60e0      	str	r0, [r4, #12]
 8005528:	2104      	movs	r1, #4
 800552a:	6860      	ldr	r0, [r4, #4]
 800552c:	f7ff ff82 	bl	8005434 <std>
 8005530:	68a0      	ldr	r0, [r4, #8]
 8005532:	2201      	movs	r2, #1
 8005534:	2109      	movs	r1, #9
 8005536:	f7ff ff7d 	bl	8005434 <std>
 800553a:	68e0      	ldr	r0, [r4, #12]
 800553c:	2202      	movs	r2, #2
 800553e:	2112      	movs	r1, #18
 8005540:	f7ff ff78 	bl	8005434 <std>
 8005544:	2301      	movs	r3, #1
 8005546:	61a3      	str	r3, [r4, #24]
 8005548:	e7d2      	b.n	80054f0 <__sinit+0xc>
 800554a:	bf00      	nop
 800554c:	08008508 	.word	0x08008508
 8005550:	0800547d 	.word	0x0800547d

08005554 <__sfp>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	4607      	mov	r7, r0
 8005558:	f7ff ffac 	bl	80054b4 <__sfp_lock_acquire>
 800555c:	4b1e      	ldr	r3, [pc, #120]	; (80055d8 <__sfp+0x84>)
 800555e:	681e      	ldr	r6, [r3, #0]
 8005560:	69b3      	ldr	r3, [r6, #24]
 8005562:	b913      	cbnz	r3, 800556a <__sfp+0x16>
 8005564:	4630      	mov	r0, r6
 8005566:	f7ff ffbd 	bl	80054e4 <__sinit>
 800556a:	3648      	adds	r6, #72	; 0x48
 800556c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005570:	3b01      	subs	r3, #1
 8005572:	d503      	bpl.n	800557c <__sfp+0x28>
 8005574:	6833      	ldr	r3, [r6, #0]
 8005576:	b30b      	cbz	r3, 80055bc <__sfp+0x68>
 8005578:	6836      	ldr	r6, [r6, #0]
 800557a:	e7f7      	b.n	800556c <__sfp+0x18>
 800557c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005580:	b9d5      	cbnz	r5, 80055b8 <__sfp+0x64>
 8005582:	4b16      	ldr	r3, [pc, #88]	; (80055dc <__sfp+0x88>)
 8005584:	60e3      	str	r3, [r4, #12]
 8005586:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800558a:	6665      	str	r5, [r4, #100]	; 0x64
 800558c:	f000 f86c 	bl	8005668 <__retarget_lock_init_recursive>
 8005590:	f7ff ff96 	bl	80054c0 <__sfp_lock_release>
 8005594:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005598:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800559c:	6025      	str	r5, [r4, #0]
 800559e:	61a5      	str	r5, [r4, #24]
 80055a0:	2208      	movs	r2, #8
 80055a2:	4629      	mov	r1, r5
 80055a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055a8:	f000 f86f 	bl	800568a <memset>
 80055ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055b4:	4620      	mov	r0, r4
 80055b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b8:	3468      	adds	r4, #104	; 0x68
 80055ba:	e7d9      	b.n	8005570 <__sfp+0x1c>
 80055bc:	2104      	movs	r1, #4
 80055be:	4638      	mov	r0, r7
 80055c0:	f7ff ff62 	bl	8005488 <__sfmoreglue>
 80055c4:	4604      	mov	r4, r0
 80055c6:	6030      	str	r0, [r6, #0]
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d1d5      	bne.n	8005578 <__sfp+0x24>
 80055cc:	f7ff ff78 	bl	80054c0 <__sfp_lock_release>
 80055d0:	230c      	movs	r3, #12
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	e7ee      	b.n	80055b4 <__sfp+0x60>
 80055d6:	bf00      	nop
 80055d8:	08008508 	.word	0x08008508
 80055dc:	ffff0001 	.word	0xffff0001

080055e0 <_fwalk_reent>:
 80055e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e4:	4606      	mov	r6, r0
 80055e6:	4688      	mov	r8, r1
 80055e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055ec:	2700      	movs	r7, #0
 80055ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055f2:	f1b9 0901 	subs.w	r9, r9, #1
 80055f6:	d505      	bpl.n	8005604 <_fwalk_reent+0x24>
 80055f8:	6824      	ldr	r4, [r4, #0]
 80055fa:	2c00      	cmp	r4, #0
 80055fc:	d1f7      	bne.n	80055ee <_fwalk_reent+0xe>
 80055fe:	4638      	mov	r0, r7
 8005600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005604:	89ab      	ldrh	r3, [r5, #12]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d907      	bls.n	800561a <_fwalk_reent+0x3a>
 800560a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800560e:	3301      	adds	r3, #1
 8005610:	d003      	beq.n	800561a <_fwalk_reent+0x3a>
 8005612:	4629      	mov	r1, r5
 8005614:	4630      	mov	r0, r6
 8005616:	47c0      	blx	r8
 8005618:	4307      	orrs	r7, r0
 800561a:	3568      	adds	r5, #104	; 0x68
 800561c:	e7e9      	b.n	80055f2 <_fwalk_reent+0x12>
	...

08005620 <__libc_init_array>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	4d0d      	ldr	r5, [pc, #52]	; (8005658 <__libc_init_array+0x38>)
 8005624:	4c0d      	ldr	r4, [pc, #52]	; (800565c <__libc_init_array+0x3c>)
 8005626:	1b64      	subs	r4, r4, r5
 8005628:	10a4      	asrs	r4, r4, #2
 800562a:	2600      	movs	r6, #0
 800562c:	42a6      	cmp	r6, r4
 800562e:	d109      	bne.n	8005644 <__libc_init_array+0x24>
 8005630:	4d0b      	ldr	r5, [pc, #44]	; (8005660 <__libc_init_array+0x40>)
 8005632:	4c0c      	ldr	r4, [pc, #48]	; (8005664 <__libc_init_array+0x44>)
 8005634:	f002 fe1a 	bl	800826c <_init>
 8005638:	1b64      	subs	r4, r4, r5
 800563a:	10a4      	asrs	r4, r4, #2
 800563c:	2600      	movs	r6, #0
 800563e:	42a6      	cmp	r6, r4
 8005640:	d105      	bne.n	800564e <__libc_init_array+0x2e>
 8005642:	bd70      	pop	{r4, r5, r6, pc}
 8005644:	f855 3b04 	ldr.w	r3, [r5], #4
 8005648:	4798      	blx	r3
 800564a:	3601      	adds	r6, #1
 800564c:	e7ee      	b.n	800562c <__libc_init_array+0xc>
 800564e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005652:	4798      	blx	r3
 8005654:	3601      	adds	r6, #1
 8005656:	e7f2      	b.n	800563e <__libc_init_array+0x1e>
 8005658:	08008888 	.word	0x08008888
 800565c:	08008888 	.word	0x08008888
 8005660:	08008888 	.word	0x08008888
 8005664:	0800888c 	.word	0x0800888c

08005668 <__retarget_lock_init_recursive>:
 8005668:	4770      	bx	lr

0800566a <__retarget_lock_acquire_recursive>:
 800566a:	4770      	bx	lr

0800566c <__retarget_lock_release_recursive>:
 800566c:	4770      	bx	lr

0800566e <memcpy>:
 800566e:	440a      	add	r2, r1
 8005670:	4291      	cmp	r1, r2
 8005672:	f100 33ff 	add.w	r3, r0, #4294967295
 8005676:	d100      	bne.n	800567a <memcpy+0xc>
 8005678:	4770      	bx	lr
 800567a:	b510      	push	{r4, lr}
 800567c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005680:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005684:	4291      	cmp	r1, r2
 8005686:	d1f9      	bne.n	800567c <memcpy+0xe>
 8005688:	bd10      	pop	{r4, pc}

0800568a <memset>:
 800568a:	4402      	add	r2, r0
 800568c:	4603      	mov	r3, r0
 800568e:	4293      	cmp	r3, r2
 8005690:	d100      	bne.n	8005694 <memset+0xa>
 8005692:	4770      	bx	lr
 8005694:	f803 1b01 	strb.w	r1, [r3], #1
 8005698:	e7f9      	b.n	800568e <memset+0x4>
	...

0800569c <sbrk_aligned>:
 800569c:	b570      	push	{r4, r5, r6, lr}
 800569e:	4e0e      	ldr	r6, [pc, #56]	; (80056d8 <sbrk_aligned+0x3c>)
 80056a0:	460c      	mov	r4, r1
 80056a2:	6831      	ldr	r1, [r6, #0]
 80056a4:	4605      	mov	r5, r0
 80056a6:	b911      	cbnz	r1, 80056ae <sbrk_aligned+0x12>
 80056a8:	f000 fcf6 	bl	8006098 <_sbrk_r>
 80056ac:	6030      	str	r0, [r6, #0]
 80056ae:	4621      	mov	r1, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 fcf1 	bl	8006098 <_sbrk_r>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	d00a      	beq.n	80056d0 <sbrk_aligned+0x34>
 80056ba:	1cc4      	adds	r4, r0, #3
 80056bc:	f024 0403 	bic.w	r4, r4, #3
 80056c0:	42a0      	cmp	r0, r4
 80056c2:	d007      	beq.n	80056d4 <sbrk_aligned+0x38>
 80056c4:	1a21      	subs	r1, r4, r0
 80056c6:	4628      	mov	r0, r5
 80056c8:	f000 fce6 	bl	8006098 <_sbrk_r>
 80056cc:	3001      	adds	r0, #1
 80056ce:	d101      	bne.n	80056d4 <sbrk_aligned+0x38>
 80056d0:	f04f 34ff 	mov.w	r4, #4294967295
 80056d4:	4620      	mov	r0, r4
 80056d6:	bd70      	pop	{r4, r5, r6, pc}
 80056d8:	20000504 	.word	0x20000504

080056dc <_malloc_r>:
 80056dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e0:	1ccd      	adds	r5, r1, #3
 80056e2:	f025 0503 	bic.w	r5, r5, #3
 80056e6:	3508      	adds	r5, #8
 80056e8:	2d0c      	cmp	r5, #12
 80056ea:	bf38      	it	cc
 80056ec:	250c      	movcc	r5, #12
 80056ee:	2d00      	cmp	r5, #0
 80056f0:	4607      	mov	r7, r0
 80056f2:	db01      	blt.n	80056f8 <_malloc_r+0x1c>
 80056f4:	42a9      	cmp	r1, r5
 80056f6:	d905      	bls.n	8005704 <_malloc_r+0x28>
 80056f8:	230c      	movs	r3, #12
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	2600      	movs	r6, #0
 80056fe:	4630      	mov	r0, r6
 8005700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005704:	4e2e      	ldr	r6, [pc, #184]	; (80057c0 <_malloc_r+0xe4>)
 8005706:	f001 fe0d 	bl	8007324 <__malloc_lock>
 800570a:	6833      	ldr	r3, [r6, #0]
 800570c:	461c      	mov	r4, r3
 800570e:	bb34      	cbnz	r4, 800575e <_malloc_r+0x82>
 8005710:	4629      	mov	r1, r5
 8005712:	4638      	mov	r0, r7
 8005714:	f7ff ffc2 	bl	800569c <sbrk_aligned>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	4604      	mov	r4, r0
 800571c:	d14d      	bne.n	80057ba <_malloc_r+0xde>
 800571e:	6834      	ldr	r4, [r6, #0]
 8005720:	4626      	mov	r6, r4
 8005722:	2e00      	cmp	r6, #0
 8005724:	d140      	bne.n	80057a8 <_malloc_r+0xcc>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	4631      	mov	r1, r6
 800572a:	4638      	mov	r0, r7
 800572c:	eb04 0803 	add.w	r8, r4, r3
 8005730:	f000 fcb2 	bl	8006098 <_sbrk_r>
 8005734:	4580      	cmp	r8, r0
 8005736:	d13a      	bne.n	80057ae <_malloc_r+0xd2>
 8005738:	6821      	ldr	r1, [r4, #0]
 800573a:	3503      	adds	r5, #3
 800573c:	1a6d      	subs	r5, r5, r1
 800573e:	f025 0503 	bic.w	r5, r5, #3
 8005742:	3508      	adds	r5, #8
 8005744:	2d0c      	cmp	r5, #12
 8005746:	bf38      	it	cc
 8005748:	250c      	movcc	r5, #12
 800574a:	4629      	mov	r1, r5
 800574c:	4638      	mov	r0, r7
 800574e:	f7ff ffa5 	bl	800569c <sbrk_aligned>
 8005752:	3001      	adds	r0, #1
 8005754:	d02b      	beq.n	80057ae <_malloc_r+0xd2>
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	442b      	add	r3, r5
 800575a:	6023      	str	r3, [r4, #0]
 800575c:	e00e      	b.n	800577c <_malloc_r+0xa0>
 800575e:	6822      	ldr	r2, [r4, #0]
 8005760:	1b52      	subs	r2, r2, r5
 8005762:	d41e      	bmi.n	80057a2 <_malloc_r+0xc6>
 8005764:	2a0b      	cmp	r2, #11
 8005766:	d916      	bls.n	8005796 <_malloc_r+0xba>
 8005768:	1961      	adds	r1, r4, r5
 800576a:	42a3      	cmp	r3, r4
 800576c:	6025      	str	r5, [r4, #0]
 800576e:	bf18      	it	ne
 8005770:	6059      	strne	r1, [r3, #4]
 8005772:	6863      	ldr	r3, [r4, #4]
 8005774:	bf08      	it	eq
 8005776:	6031      	streq	r1, [r6, #0]
 8005778:	5162      	str	r2, [r4, r5]
 800577a:	604b      	str	r3, [r1, #4]
 800577c:	4638      	mov	r0, r7
 800577e:	f104 060b 	add.w	r6, r4, #11
 8005782:	f001 fdd5 	bl	8007330 <__malloc_unlock>
 8005786:	f026 0607 	bic.w	r6, r6, #7
 800578a:	1d23      	adds	r3, r4, #4
 800578c:	1af2      	subs	r2, r6, r3
 800578e:	d0b6      	beq.n	80056fe <_malloc_r+0x22>
 8005790:	1b9b      	subs	r3, r3, r6
 8005792:	50a3      	str	r3, [r4, r2]
 8005794:	e7b3      	b.n	80056fe <_malloc_r+0x22>
 8005796:	6862      	ldr	r2, [r4, #4]
 8005798:	42a3      	cmp	r3, r4
 800579a:	bf0c      	ite	eq
 800579c:	6032      	streq	r2, [r6, #0]
 800579e:	605a      	strne	r2, [r3, #4]
 80057a0:	e7ec      	b.n	800577c <_malloc_r+0xa0>
 80057a2:	4623      	mov	r3, r4
 80057a4:	6864      	ldr	r4, [r4, #4]
 80057a6:	e7b2      	b.n	800570e <_malloc_r+0x32>
 80057a8:	4634      	mov	r4, r6
 80057aa:	6876      	ldr	r6, [r6, #4]
 80057ac:	e7b9      	b.n	8005722 <_malloc_r+0x46>
 80057ae:	230c      	movs	r3, #12
 80057b0:	603b      	str	r3, [r7, #0]
 80057b2:	4638      	mov	r0, r7
 80057b4:	f001 fdbc 	bl	8007330 <__malloc_unlock>
 80057b8:	e7a1      	b.n	80056fe <_malloc_r+0x22>
 80057ba:	6025      	str	r5, [r4, #0]
 80057bc:	e7de      	b.n	800577c <_malloc_r+0xa0>
 80057be:	bf00      	nop
 80057c0:	20000500 	.word	0x20000500

080057c4 <__cvt>:
 80057c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057c8:	ec55 4b10 	vmov	r4, r5, d0
 80057cc:	2d00      	cmp	r5, #0
 80057ce:	460e      	mov	r6, r1
 80057d0:	4619      	mov	r1, r3
 80057d2:	462b      	mov	r3, r5
 80057d4:	bfbb      	ittet	lt
 80057d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057da:	461d      	movlt	r5, r3
 80057dc:	2300      	movge	r3, #0
 80057de:	232d      	movlt	r3, #45	; 0x2d
 80057e0:	700b      	strb	r3, [r1, #0]
 80057e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057e8:	4691      	mov	r9, r2
 80057ea:	f023 0820 	bic.w	r8, r3, #32
 80057ee:	bfbc      	itt	lt
 80057f0:	4622      	movlt	r2, r4
 80057f2:	4614      	movlt	r4, r2
 80057f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057f8:	d005      	beq.n	8005806 <__cvt+0x42>
 80057fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057fe:	d100      	bne.n	8005802 <__cvt+0x3e>
 8005800:	3601      	adds	r6, #1
 8005802:	2102      	movs	r1, #2
 8005804:	e000      	b.n	8005808 <__cvt+0x44>
 8005806:	2103      	movs	r1, #3
 8005808:	ab03      	add	r3, sp, #12
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	ab02      	add	r3, sp, #8
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	ec45 4b10 	vmov	d0, r4, r5
 8005814:	4653      	mov	r3, sl
 8005816:	4632      	mov	r2, r6
 8005818:	f000 fe3e 	bl	8006498 <_dtoa_r>
 800581c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005820:	4607      	mov	r7, r0
 8005822:	d102      	bne.n	800582a <__cvt+0x66>
 8005824:	f019 0f01 	tst.w	r9, #1
 8005828:	d022      	beq.n	8005870 <__cvt+0xac>
 800582a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800582e:	eb07 0906 	add.w	r9, r7, r6
 8005832:	d110      	bne.n	8005856 <__cvt+0x92>
 8005834:	783b      	ldrb	r3, [r7, #0]
 8005836:	2b30      	cmp	r3, #48	; 0x30
 8005838:	d10a      	bne.n	8005850 <__cvt+0x8c>
 800583a:	2200      	movs	r2, #0
 800583c:	2300      	movs	r3, #0
 800583e:	4620      	mov	r0, r4
 8005840:	4629      	mov	r1, r5
 8005842:	f7fb f941 	bl	8000ac8 <__aeabi_dcmpeq>
 8005846:	b918      	cbnz	r0, 8005850 <__cvt+0x8c>
 8005848:	f1c6 0601 	rsb	r6, r6, #1
 800584c:	f8ca 6000 	str.w	r6, [sl]
 8005850:	f8da 3000 	ldr.w	r3, [sl]
 8005854:	4499      	add	r9, r3
 8005856:	2200      	movs	r2, #0
 8005858:	2300      	movs	r3, #0
 800585a:	4620      	mov	r0, r4
 800585c:	4629      	mov	r1, r5
 800585e:	f7fb f933 	bl	8000ac8 <__aeabi_dcmpeq>
 8005862:	b108      	cbz	r0, 8005868 <__cvt+0xa4>
 8005864:	f8cd 900c 	str.w	r9, [sp, #12]
 8005868:	2230      	movs	r2, #48	; 0x30
 800586a:	9b03      	ldr	r3, [sp, #12]
 800586c:	454b      	cmp	r3, r9
 800586e:	d307      	bcc.n	8005880 <__cvt+0xbc>
 8005870:	9b03      	ldr	r3, [sp, #12]
 8005872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005874:	1bdb      	subs	r3, r3, r7
 8005876:	4638      	mov	r0, r7
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	b004      	add	sp, #16
 800587c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005880:	1c59      	adds	r1, r3, #1
 8005882:	9103      	str	r1, [sp, #12]
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	e7f0      	b.n	800586a <__cvt+0xa6>

08005888 <__exponent>:
 8005888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800588a:	4603      	mov	r3, r0
 800588c:	2900      	cmp	r1, #0
 800588e:	bfb8      	it	lt
 8005890:	4249      	neglt	r1, r1
 8005892:	f803 2b02 	strb.w	r2, [r3], #2
 8005896:	bfb4      	ite	lt
 8005898:	222d      	movlt	r2, #45	; 0x2d
 800589a:	222b      	movge	r2, #43	; 0x2b
 800589c:	2909      	cmp	r1, #9
 800589e:	7042      	strb	r2, [r0, #1]
 80058a0:	dd2a      	ble.n	80058f8 <__exponent+0x70>
 80058a2:	f10d 0407 	add.w	r4, sp, #7
 80058a6:	46a4      	mov	ip, r4
 80058a8:	270a      	movs	r7, #10
 80058aa:	46a6      	mov	lr, r4
 80058ac:	460a      	mov	r2, r1
 80058ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80058b2:	fb07 1516 	mls	r5, r7, r6, r1
 80058b6:	3530      	adds	r5, #48	; 0x30
 80058b8:	2a63      	cmp	r2, #99	; 0x63
 80058ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80058be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058c2:	4631      	mov	r1, r6
 80058c4:	dcf1      	bgt.n	80058aa <__exponent+0x22>
 80058c6:	3130      	adds	r1, #48	; 0x30
 80058c8:	f1ae 0502 	sub.w	r5, lr, #2
 80058cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058d0:	1c44      	adds	r4, r0, #1
 80058d2:	4629      	mov	r1, r5
 80058d4:	4561      	cmp	r1, ip
 80058d6:	d30a      	bcc.n	80058ee <__exponent+0x66>
 80058d8:	f10d 0209 	add.w	r2, sp, #9
 80058dc:	eba2 020e 	sub.w	r2, r2, lr
 80058e0:	4565      	cmp	r5, ip
 80058e2:	bf88      	it	hi
 80058e4:	2200      	movhi	r2, #0
 80058e6:	4413      	add	r3, r2
 80058e8:	1a18      	subs	r0, r3, r0
 80058ea:	b003      	add	sp, #12
 80058ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058f6:	e7ed      	b.n	80058d4 <__exponent+0x4c>
 80058f8:	2330      	movs	r3, #48	; 0x30
 80058fa:	3130      	adds	r1, #48	; 0x30
 80058fc:	7083      	strb	r3, [r0, #2]
 80058fe:	70c1      	strb	r1, [r0, #3]
 8005900:	1d03      	adds	r3, r0, #4
 8005902:	e7f1      	b.n	80058e8 <__exponent+0x60>

08005904 <_printf_float>:
 8005904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005908:	ed2d 8b02 	vpush	{d8}
 800590c:	b08d      	sub	sp, #52	; 0x34
 800590e:	460c      	mov	r4, r1
 8005910:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005914:	4616      	mov	r6, r2
 8005916:	461f      	mov	r7, r3
 8005918:	4605      	mov	r5, r0
 800591a:	f001 fc7f 	bl	800721c <_localeconv_r>
 800591e:	f8d0 a000 	ldr.w	sl, [r0]
 8005922:	4650      	mov	r0, sl
 8005924:	f7fa fc54 	bl	80001d0 <strlen>
 8005928:	2300      	movs	r3, #0
 800592a:	930a      	str	r3, [sp, #40]	; 0x28
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	9305      	str	r3, [sp, #20]
 8005930:	f8d8 3000 	ldr.w	r3, [r8]
 8005934:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005938:	3307      	adds	r3, #7
 800593a:	f023 0307 	bic.w	r3, r3, #7
 800593e:	f103 0208 	add.w	r2, r3, #8
 8005942:	f8c8 2000 	str.w	r2, [r8]
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800594e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005952:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005956:	9307      	str	r3, [sp, #28]
 8005958:	f8cd 8018 	str.w	r8, [sp, #24]
 800595c:	ee08 0a10 	vmov	s16, r0
 8005960:	4b9f      	ldr	r3, [pc, #636]	; (8005be0 <_printf_float+0x2dc>)
 8005962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005966:	f04f 32ff 	mov.w	r2, #4294967295
 800596a:	f7fb f8df 	bl	8000b2c <__aeabi_dcmpun>
 800596e:	bb88      	cbnz	r0, 80059d4 <_printf_float+0xd0>
 8005970:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005974:	4b9a      	ldr	r3, [pc, #616]	; (8005be0 <_printf_float+0x2dc>)
 8005976:	f04f 32ff 	mov.w	r2, #4294967295
 800597a:	f7fb f8b9 	bl	8000af0 <__aeabi_dcmple>
 800597e:	bb48      	cbnz	r0, 80059d4 <_printf_float+0xd0>
 8005980:	2200      	movs	r2, #0
 8005982:	2300      	movs	r3, #0
 8005984:	4640      	mov	r0, r8
 8005986:	4649      	mov	r1, r9
 8005988:	f7fb f8a8 	bl	8000adc <__aeabi_dcmplt>
 800598c:	b110      	cbz	r0, 8005994 <_printf_float+0x90>
 800598e:	232d      	movs	r3, #45	; 0x2d
 8005990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005994:	4b93      	ldr	r3, [pc, #588]	; (8005be4 <_printf_float+0x2e0>)
 8005996:	4894      	ldr	r0, [pc, #592]	; (8005be8 <_printf_float+0x2e4>)
 8005998:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800599c:	bf94      	ite	ls
 800599e:	4698      	movls	r8, r3
 80059a0:	4680      	movhi	r8, r0
 80059a2:	2303      	movs	r3, #3
 80059a4:	6123      	str	r3, [r4, #16]
 80059a6:	9b05      	ldr	r3, [sp, #20]
 80059a8:	f023 0204 	bic.w	r2, r3, #4
 80059ac:	6022      	str	r2, [r4, #0]
 80059ae:	f04f 0900 	mov.w	r9, #0
 80059b2:	9700      	str	r7, [sp, #0]
 80059b4:	4633      	mov	r3, r6
 80059b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80059b8:	4621      	mov	r1, r4
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 f9d8 	bl	8005d70 <_printf_common>
 80059c0:	3001      	adds	r0, #1
 80059c2:	f040 8090 	bne.w	8005ae6 <_printf_float+0x1e2>
 80059c6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ca:	b00d      	add	sp, #52	; 0x34
 80059cc:	ecbd 8b02 	vpop	{d8}
 80059d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	4640      	mov	r0, r8
 80059da:	4649      	mov	r1, r9
 80059dc:	f7fb f8a6 	bl	8000b2c <__aeabi_dcmpun>
 80059e0:	b140      	cbz	r0, 80059f4 <_printf_float+0xf0>
 80059e2:	464b      	mov	r3, r9
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bfbc      	itt	lt
 80059e8:	232d      	movlt	r3, #45	; 0x2d
 80059ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059ee:	487f      	ldr	r0, [pc, #508]	; (8005bec <_printf_float+0x2e8>)
 80059f0:	4b7f      	ldr	r3, [pc, #508]	; (8005bf0 <_printf_float+0x2ec>)
 80059f2:	e7d1      	b.n	8005998 <_printf_float+0x94>
 80059f4:	6863      	ldr	r3, [r4, #4]
 80059f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059fa:	9206      	str	r2, [sp, #24]
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	d13f      	bne.n	8005a80 <_printf_float+0x17c>
 8005a00:	2306      	movs	r3, #6
 8005a02:	6063      	str	r3, [r4, #4]
 8005a04:	9b05      	ldr	r3, [sp, #20]
 8005a06:	6861      	ldr	r1, [r4, #4]
 8005a08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	9303      	str	r3, [sp, #12]
 8005a10:	ab0a      	add	r3, sp, #40	; 0x28
 8005a12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a16:	ab09      	add	r3, sp, #36	; 0x24
 8005a18:	ec49 8b10 	vmov	d0, r8, r9
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	6022      	str	r2, [r4, #0]
 8005a20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a24:	4628      	mov	r0, r5
 8005a26:	f7ff fecd 	bl	80057c4 <__cvt>
 8005a2a:	9b06      	ldr	r3, [sp, #24]
 8005a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a2e:	2b47      	cmp	r3, #71	; 0x47
 8005a30:	4680      	mov	r8, r0
 8005a32:	d108      	bne.n	8005a46 <_printf_float+0x142>
 8005a34:	1cc8      	adds	r0, r1, #3
 8005a36:	db02      	blt.n	8005a3e <_printf_float+0x13a>
 8005a38:	6863      	ldr	r3, [r4, #4]
 8005a3a:	4299      	cmp	r1, r3
 8005a3c:	dd41      	ble.n	8005ac2 <_printf_float+0x1be>
 8005a3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a42:	fa5f fb8b 	uxtb.w	fp, fp
 8005a46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a4a:	d820      	bhi.n	8005a8e <_printf_float+0x18a>
 8005a4c:	3901      	subs	r1, #1
 8005a4e:	465a      	mov	r2, fp
 8005a50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a54:	9109      	str	r1, [sp, #36]	; 0x24
 8005a56:	f7ff ff17 	bl	8005888 <__exponent>
 8005a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a5c:	1813      	adds	r3, r2, r0
 8005a5e:	2a01      	cmp	r2, #1
 8005a60:	4681      	mov	r9, r0
 8005a62:	6123      	str	r3, [r4, #16]
 8005a64:	dc02      	bgt.n	8005a6c <_printf_float+0x168>
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	07d2      	lsls	r2, r2, #31
 8005a6a:	d501      	bpl.n	8005a70 <_printf_float+0x16c>
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	6123      	str	r3, [r4, #16]
 8005a70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d09c      	beq.n	80059b2 <_printf_float+0xae>
 8005a78:	232d      	movs	r3, #45	; 0x2d
 8005a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a7e:	e798      	b.n	80059b2 <_printf_float+0xae>
 8005a80:	9a06      	ldr	r2, [sp, #24]
 8005a82:	2a47      	cmp	r2, #71	; 0x47
 8005a84:	d1be      	bne.n	8005a04 <_printf_float+0x100>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1bc      	bne.n	8005a04 <_printf_float+0x100>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e7b9      	b.n	8005a02 <_printf_float+0xfe>
 8005a8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a92:	d118      	bne.n	8005ac6 <_printf_float+0x1c2>
 8005a94:	2900      	cmp	r1, #0
 8005a96:	6863      	ldr	r3, [r4, #4]
 8005a98:	dd0b      	ble.n	8005ab2 <_printf_float+0x1ae>
 8005a9a:	6121      	str	r1, [r4, #16]
 8005a9c:	b913      	cbnz	r3, 8005aa4 <_printf_float+0x1a0>
 8005a9e:	6822      	ldr	r2, [r4, #0]
 8005aa0:	07d0      	lsls	r0, r2, #31
 8005aa2:	d502      	bpl.n	8005aaa <_printf_float+0x1a6>
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	440b      	add	r3, r1
 8005aa8:	6123      	str	r3, [r4, #16]
 8005aaa:	65a1      	str	r1, [r4, #88]	; 0x58
 8005aac:	f04f 0900 	mov.w	r9, #0
 8005ab0:	e7de      	b.n	8005a70 <_printf_float+0x16c>
 8005ab2:	b913      	cbnz	r3, 8005aba <_printf_float+0x1b6>
 8005ab4:	6822      	ldr	r2, [r4, #0]
 8005ab6:	07d2      	lsls	r2, r2, #31
 8005ab8:	d501      	bpl.n	8005abe <_printf_float+0x1ba>
 8005aba:	3302      	adds	r3, #2
 8005abc:	e7f4      	b.n	8005aa8 <_printf_float+0x1a4>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e7f2      	b.n	8005aa8 <_printf_float+0x1a4>
 8005ac2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac8:	4299      	cmp	r1, r3
 8005aca:	db05      	blt.n	8005ad8 <_printf_float+0x1d4>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	6121      	str	r1, [r4, #16]
 8005ad0:	07d8      	lsls	r0, r3, #31
 8005ad2:	d5ea      	bpl.n	8005aaa <_printf_float+0x1a6>
 8005ad4:	1c4b      	adds	r3, r1, #1
 8005ad6:	e7e7      	b.n	8005aa8 <_printf_float+0x1a4>
 8005ad8:	2900      	cmp	r1, #0
 8005ada:	bfd4      	ite	le
 8005adc:	f1c1 0202 	rsble	r2, r1, #2
 8005ae0:	2201      	movgt	r2, #1
 8005ae2:	4413      	add	r3, r2
 8005ae4:	e7e0      	b.n	8005aa8 <_printf_float+0x1a4>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	055a      	lsls	r2, r3, #21
 8005aea:	d407      	bmi.n	8005afc <_printf_float+0x1f8>
 8005aec:	6923      	ldr	r3, [r4, #16]
 8005aee:	4642      	mov	r2, r8
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b8      	blx	r7
 8005af6:	3001      	adds	r0, #1
 8005af8:	d12c      	bne.n	8005b54 <_printf_float+0x250>
 8005afa:	e764      	b.n	80059c6 <_printf_float+0xc2>
 8005afc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b00:	f240 80e0 	bls.w	8005cc4 <_printf_float+0x3c0>
 8005b04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f7fa ffdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d034      	beq.n	8005b7e <_printf_float+0x27a>
 8005b14:	4a37      	ldr	r2, [pc, #220]	; (8005bf4 <_printf_float+0x2f0>)
 8005b16:	2301      	movs	r3, #1
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	47b8      	blx	r7
 8005b1e:	3001      	adds	r0, #1
 8005b20:	f43f af51 	beq.w	80059c6 <_printf_float+0xc2>
 8005b24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	db02      	blt.n	8005b32 <_printf_float+0x22e>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	07d8      	lsls	r0, r3, #31
 8005b30:	d510      	bpl.n	8005b54 <_printf_float+0x250>
 8005b32:	ee18 3a10 	vmov	r3, s16
 8005b36:	4652      	mov	r2, sl
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	47b8      	blx	r7
 8005b3e:	3001      	adds	r0, #1
 8005b40:	f43f af41 	beq.w	80059c6 <_printf_float+0xc2>
 8005b44:	f04f 0800 	mov.w	r8, #0
 8005b48:	f104 091a 	add.w	r9, r4, #26
 8005b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	4543      	cmp	r3, r8
 8005b52:	dc09      	bgt.n	8005b68 <_printf_float+0x264>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	079b      	lsls	r3, r3, #30
 8005b58:	f100 8105 	bmi.w	8005d66 <_printf_float+0x462>
 8005b5c:	68e0      	ldr	r0, [r4, #12]
 8005b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b60:	4298      	cmp	r0, r3
 8005b62:	bfb8      	it	lt
 8005b64:	4618      	movlt	r0, r3
 8005b66:	e730      	b.n	80059ca <_printf_float+0xc6>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	464a      	mov	r2, r9
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4628      	mov	r0, r5
 8005b70:	47b8      	blx	r7
 8005b72:	3001      	adds	r0, #1
 8005b74:	f43f af27 	beq.w	80059c6 <_printf_float+0xc2>
 8005b78:	f108 0801 	add.w	r8, r8, #1
 8005b7c:	e7e6      	b.n	8005b4c <_printf_float+0x248>
 8005b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	dc39      	bgt.n	8005bf8 <_printf_float+0x2f4>
 8005b84:	4a1b      	ldr	r2, [pc, #108]	; (8005bf4 <_printf_float+0x2f0>)
 8005b86:	2301      	movs	r3, #1
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f43f af19 	beq.w	80059c6 <_printf_float+0xc2>
 8005b94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	d102      	bne.n	8005ba2 <_printf_float+0x29e>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	07d9      	lsls	r1, r3, #31
 8005ba0:	d5d8      	bpl.n	8005b54 <_printf_float+0x250>
 8005ba2:	ee18 3a10 	vmov	r3, s16
 8005ba6:	4652      	mov	r2, sl
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f af09 	beq.w	80059c6 <_printf_float+0xc2>
 8005bb4:	f04f 0900 	mov.w	r9, #0
 8005bb8:	f104 0a1a 	add.w	sl, r4, #26
 8005bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbe:	425b      	negs	r3, r3
 8005bc0:	454b      	cmp	r3, r9
 8005bc2:	dc01      	bgt.n	8005bc8 <_printf_float+0x2c4>
 8005bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc6:	e792      	b.n	8005aee <_printf_float+0x1ea>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4652      	mov	r2, sl
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f43f aef7 	beq.w	80059c6 <_printf_float+0xc2>
 8005bd8:	f109 0901 	add.w	r9, r9, #1
 8005bdc:	e7ee      	b.n	8005bbc <_printf_float+0x2b8>
 8005bde:	bf00      	nop
 8005be0:	7fefffff 	.word	0x7fefffff
 8005be4:	0800850c 	.word	0x0800850c
 8005be8:	08008510 	.word	0x08008510
 8005bec:	08008518 	.word	0x08008518
 8005bf0:	08008514 	.word	0x08008514
 8005bf4:	0800851c 	.word	0x0800851c
 8005bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	bfa8      	it	ge
 8005c00:	461a      	movge	r2, r3
 8005c02:	2a00      	cmp	r2, #0
 8005c04:	4691      	mov	r9, r2
 8005c06:	dc37      	bgt.n	8005c78 <_printf_float+0x374>
 8005c08:	f04f 0b00 	mov.w	fp, #0
 8005c0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c10:	f104 021a 	add.w	r2, r4, #26
 8005c14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c16:	9305      	str	r3, [sp, #20]
 8005c18:	eba3 0309 	sub.w	r3, r3, r9
 8005c1c:	455b      	cmp	r3, fp
 8005c1e:	dc33      	bgt.n	8005c88 <_printf_float+0x384>
 8005c20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c24:	429a      	cmp	r2, r3
 8005c26:	db3b      	blt.n	8005ca0 <_printf_float+0x39c>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	07da      	lsls	r2, r3, #31
 8005c2c:	d438      	bmi.n	8005ca0 <_printf_float+0x39c>
 8005c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c30:	9a05      	ldr	r2, [sp, #20]
 8005c32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c34:	1a9a      	subs	r2, r3, r2
 8005c36:	eba3 0901 	sub.w	r9, r3, r1
 8005c3a:	4591      	cmp	r9, r2
 8005c3c:	bfa8      	it	ge
 8005c3e:	4691      	movge	r9, r2
 8005c40:	f1b9 0f00 	cmp.w	r9, #0
 8005c44:	dc35      	bgt.n	8005cb2 <_printf_float+0x3ae>
 8005c46:	f04f 0800 	mov.w	r8, #0
 8005c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c4e:	f104 0a1a 	add.w	sl, r4, #26
 8005c52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	eba3 0309 	sub.w	r3, r3, r9
 8005c5c:	4543      	cmp	r3, r8
 8005c5e:	f77f af79 	ble.w	8005b54 <_printf_float+0x250>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4652      	mov	r2, sl
 8005c66:	4631      	mov	r1, r6
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b8      	blx	r7
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f43f aeaa 	beq.w	80059c6 <_printf_float+0xc2>
 8005c72:	f108 0801 	add.w	r8, r8, #1
 8005c76:	e7ec      	b.n	8005c52 <_printf_float+0x34e>
 8005c78:	4613      	mov	r3, r2
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	4628      	mov	r0, r5
 8005c80:	47b8      	blx	r7
 8005c82:	3001      	adds	r0, #1
 8005c84:	d1c0      	bne.n	8005c08 <_printf_float+0x304>
 8005c86:	e69e      	b.n	80059c6 <_printf_float+0xc2>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	9205      	str	r2, [sp, #20]
 8005c90:	47b8      	blx	r7
 8005c92:	3001      	adds	r0, #1
 8005c94:	f43f ae97 	beq.w	80059c6 <_printf_float+0xc2>
 8005c98:	9a05      	ldr	r2, [sp, #20]
 8005c9a:	f10b 0b01 	add.w	fp, fp, #1
 8005c9e:	e7b9      	b.n	8005c14 <_printf_float+0x310>
 8005ca0:	ee18 3a10 	vmov	r3, s16
 8005ca4:	4652      	mov	r2, sl
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	d1be      	bne.n	8005c2e <_printf_float+0x32a>
 8005cb0:	e689      	b.n	80059c6 <_printf_float+0xc2>
 8005cb2:	9a05      	ldr	r2, [sp, #20]
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	4442      	add	r2, r8
 8005cb8:	4631      	mov	r1, r6
 8005cba:	4628      	mov	r0, r5
 8005cbc:	47b8      	blx	r7
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d1c1      	bne.n	8005c46 <_printf_float+0x342>
 8005cc2:	e680      	b.n	80059c6 <_printf_float+0xc2>
 8005cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cc6:	2a01      	cmp	r2, #1
 8005cc8:	dc01      	bgt.n	8005cce <_printf_float+0x3ca>
 8005cca:	07db      	lsls	r3, r3, #31
 8005ccc:	d538      	bpl.n	8005d40 <_printf_float+0x43c>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	47b8      	blx	r7
 8005cd8:	3001      	adds	r0, #1
 8005cda:	f43f ae74 	beq.w	80059c6 <_printf_float+0xc2>
 8005cde:	ee18 3a10 	vmov	r3, s16
 8005ce2:	4652      	mov	r2, sl
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	f43f ae6b 	beq.w	80059c6 <_printf_float+0xc2>
 8005cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f7fa fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cfc:	b9d8      	cbnz	r0, 8005d36 <_printf_float+0x432>
 8005cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d00:	f108 0201 	add.w	r2, r8, #1
 8005d04:	3b01      	subs	r3, #1
 8005d06:	4631      	mov	r1, r6
 8005d08:	4628      	mov	r0, r5
 8005d0a:	47b8      	blx	r7
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d10e      	bne.n	8005d2e <_printf_float+0x42a>
 8005d10:	e659      	b.n	80059c6 <_printf_float+0xc2>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4631      	mov	r1, r6
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b8      	blx	r7
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	f43f ae52 	beq.w	80059c6 <_printf_float+0xc2>
 8005d22:	f108 0801 	add.w	r8, r8, #1
 8005d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	4543      	cmp	r3, r8
 8005d2c:	dcf1      	bgt.n	8005d12 <_printf_float+0x40e>
 8005d2e:	464b      	mov	r3, r9
 8005d30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d34:	e6dc      	b.n	8005af0 <_printf_float+0x1ec>
 8005d36:	f04f 0800 	mov.w	r8, #0
 8005d3a:	f104 0a1a 	add.w	sl, r4, #26
 8005d3e:	e7f2      	b.n	8005d26 <_printf_float+0x422>
 8005d40:	2301      	movs	r3, #1
 8005d42:	4642      	mov	r2, r8
 8005d44:	e7df      	b.n	8005d06 <_printf_float+0x402>
 8005d46:	2301      	movs	r3, #1
 8005d48:	464a      	mov	r2, r9
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	f43f ae38 	beq.w	80059c6 <_printf_float+0xc2>
 8005d56:	f108 0801 	add.w	r8, r8, #1
 8005d5a:	68e3      	ldr	r3, [r4, #12]
 8005d5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d5e:	1a5b      	subs	r3, r3, r1
 8005d60:	4543      	cmp	r3, r8
 8005d62:	dcf0      	bgt.n	8005d46 <_printf_float+0x442>
 8005d64:	e6fa      	b.n	8005b5c <_printf_float+0x258>
 8005d66:	f04f 0800 	mov.w	r8, #0
 8005d6a:	f104 0919 	add.w	r9, r4, #25
 8005d6e:	e7f4      	b.n	8005d5a <_printf_float+0x456>

08005d70 <_printf_common>:
 8005d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d74:	4616      	mov	r6, r2
 8005d76:	4699      	mov	r9, r3
 8005d78:	688a      	ldr	r2, [r1, #8]
 8005d7a:	690b      	ldr	r3, [r1, #16]
 8005d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d80:	4293      	cmp	r3, r2
 8005d82:	bfb8      	it	lt
 8005d84:	4613      	movlt	r3, r2
 8005d86:	6033      	str	r3, [r6, #0]
 8005d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d8c:	4607      	mov	r7, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	b10a      	cbz	r2, 8005d96 <_printf_common+0x26>
 8005d92:	3301      	adds	r3, #1
 8005d94:	6033      	str	r3, [r6, #0]
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	0699      	lsls	r1, r3, #26
 8005d9a:	bf42      	ittt	mi
 8005d9c:	6833      	ldrmi	r3, [r6, #0]
 8005d9e:	3302      	addmi	r3, #2
 8005da0:	6033      	strmi	r3, [r6, #0]
 8005da2:	6825      	ldr	r5, [r4, #0]
 8005da4:	f015 0506 	ands.w	r5, r5, #6
 8005da8:	d106      	bne.n	8005db8 <_printf_common+0x48>
 8005daa:	f104 0a19 	add.w	sl, r4, #25
 8005dae:	68e3      	ldr	r3, [r4, #12]
 8005db0:	6832      	ldr	r2, [r6, #0]
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	42ab      	cmp	r3, r5
 8005db6:	dc26      	bgt.n	8005e06 <_printf_common+0x96>
 8005db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dbc:	1e13      	subs	r3, r2, #0
 8005dbe:	6822      	ldr	r2, [r4, #0]
 8005dc0:	bf18      	it	ne
 8005dc2:	2301      	movne	r3, #1
 8005dc4:	0692      	lsls	r2, r2, #26
 8005dc6:	d42b      	bmi.n	8005e20 <_printf_common+0xb0>
 8005dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dcc:	4649      	mov	r1, r9
 8005dce:	4638      	mov	r0, r7
 8005dd0:	47c0      	blx	r8
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d01e      	beq.n	8005e14 <_printf_common+0xa4>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	68e5      	ldr	r5, [r4, #12]
 8005dda:	6832      	ldr	r2, [r6, #0]
 8005ddc:	f003 0306 	and.w	r3, r3, #6
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	bf08      	it	eq
 8005de4:	1aad      	subeq	r5, r5, r2
 8005de6:	68a3      	ldr	r3, [r4, #8]
 8005de8:	6922      	ldr	r2, [r4, #16]
 8005dea:	bf0c      	ite	eq
 8005dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df0:	2500      	movne	r5, #0
 8005df2:	4293      	cmp	r3, r2
 8005df4:	bfc4      	itt	gt
 8005df6:	1a9b      	subgt	r3, r3, r2
 8005df8:	18ed      	addgt	r5, r5, r3
 8005dfa:	2600      	movs	r6, #0
 8005dfc:	341a      	adds	r4, #26
 8005dfe:	42b5      	cmp	r5, r6
 8005e00:	d11a      	bne.n	8005e38 <_printf_common+0xc8>
 8005e02:	2000      	movs	r0, #0
 8005e04:	e008      	b.n	8005e18 <_printf_common+0xa8>
 8005e06:	2301      	movs	r3, #1
 8005e08:	4652      	mov	r2, sl
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	47c0      	blx	r8
 8005e10:	3001      	adds	r0, #1
 8005e12:	d103      	bne.n	8005e1c <_printf_common+0xac>
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295
 8005e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1c:	3501      	adds	r5, #1
 8005e1e:	e7c6      	b.n	8005dae <_printf_common+0x3e>
 8005e20:	18e1      	adds	r1, r4, r3
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	2030      	movs	r0, #48	; 0x30
 8005e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e2a:	4422      	add	r2, r4
 8005e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e34:	3302      	adds	r3, #2
 8005e36:	e7c7      	b.n	8005dc8 <_printf_common+0x58>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4638      	mov	r0, r7
 8005e40:	47c0      	blx	r8
 8005e42:	3001      	adds	r0, #1
 8005e44:	d0e6      	beq.n	8005e14 <_printf_common+0xa4>
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7d9      	b.n	8005dfe <_printf_common+0x8e>
	...

08005e4c <_printf_i>:
 8005e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e50:	7e0f      	ldrb	r7, [r1, #24]
 8005e52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e54:	2f78      	cmp	r7, #120	; 0x78
 8005e56:	4691      	mov	r9, r2
 8005e58:	4680      	mov	r8, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	469a      	mov	sl, r3
 8005e5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e62:	d807      	bhi.n	8005e74 <_printf_i+0x28>
 8005e64:	2f62      	cmp	r7, #98	; 0x62
 8005e66:	d80a      	bhi.n	8005e7e <_printf_i+0x32>
 8005e68:	2f00      	cmp	r7, #0
 8005e6a:	f000 80d8 	beq.w	800601e <_printf_i+0x1d2>
 8005e6e:	2f58      	cmp	r7, #88	; 0x58
 8005e70:	f000 80a3 	beq.w	8005fba <_printf_i+0x16e>
 8005e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e7c:	e03a      	b.n	8005ef4 <_printf_i+0xa8>
 8005e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e82:	2b15      	cmp	r3, #21
 8005e84:	d8f6      	bhi.n	8005e74 <_printf_i+0x28>
 8005e86:	a101      	add	r1, pc, #4	; (adr r1, 8005e8c <_printf_i+0x40>)
 8005e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e8c:	08005ee5 	.word	0x08005ee5
 8005e90:	08005ef9 	.word	0x08005ef9
 8005e94:	08005e75 	.word	0x08005e75
 8005e98:	08005e75 	.word	0x08005e75
 8005e9c:	08005e75 	.word	0x08005e75
 8005ea0:	08005e75 	.word	0x08005e75
 8005ea4:	08005ef9 	.word	0x08005ef9
 8005ea8:	08005e75 	.word	0x08005e75
 8005eac:	08005e75 	.word	0x08005e75
 8005eb0:	08005e75 	.word	0x08005e75
 8005eb4:	08005e75 	.word	0x08005e75
 8005eb8:	08006005 	.word	0x08006005
 8005ebc:	08005f29 	.word	0x08005f29
 8005ec0:	08005fe7 	.word	0x08005fe7
 8005ec4:	08005e75 	.word	0x08005e75
 8005ec8:	08005e75 	.word	0x08005e75
 8005ecc:	08006027 	.word	0x08006027
 8005ed0:	08005e75 	.word	0x08005e75
 8005ed4:	08005f29 	.word	0x08005f29
 8005ed8:	08005e75 	.word	0x08005e75
 8005edc:	08005e75 	.word	0x08005e75
 8005ee0:	08005fef 	.word	0x08005fef
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	1d1a      	adds	r2, r3, #4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	602a      	str	r2, [r5, #0]
 8005eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0a3      	b.n	8006040 <_printf_i+0x1f4>
 8005ef8:	6820      	ldr	r0, [r4, #0]
 8005efa:	6829      	ldr	r1, [r5, #0]
 8005efc:	0606      	lsls	r6, r0, #24
 8005efe:	f101 0304 	add.w	r3, r1, #4
 8005f02:	d50a      	bpl.n	8005f1a <_printf_i+0xce>
 8005f04:	680e      	ldr	r6, [r1, #0]
 8005f06:	602b      	str	r3, [r5, #0]
 8005f08:	2e00      	cmp	r6, #0
 8005f0a:	da03      	bge.n	8005f14 <_printf_i+0xc8>
 8005f0c:	232d      	movs	r3, #45	; 0x2d
 8005f0e:	4276      	negs	r6, r6
 8005f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f14:	485e      	ldr	r0, [pc, #376]	; (8006090 <_printf_i+0x244>)
 8005f16:	230a      	movs	r3, #10
 8005f18:	e019      	b.n	8005f4e <_printf_i+0x102>
 8005f1a:	680e      	ldr	r6, [r1, #0]
 8005f1c:	602b      	str	r3, [r5, #0]
 8005f1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f22:	bf18      	it	ne
 8005f24:	b236      	sxthne	r6, r6
 8005f26:	e7ef      	b.n	8005f08 <_printf_i+0xbc>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	6820      	ldr	r0, [r4, #0]
 8005f2c:	1d19      	adds	r1, r3, #4
 8005f2e:	6029      	str	r1, [r5, #0]
 8005f30:	0601      	lsls	r1, r0, #24
 8005f32:	d501      	bpl.n	8005f38 <_printf_i+0xec>
 8005f34:	681e      	ldr	r6, [r3, #0]
 8005f36:	e002      	b.n	8005f3e <_printf_i+0xf2>
 8005f38:	0646      	lsls	r6, r0, #25
 8005f3a:	d5fb      	bpl.n	8005f34 <_printf_i+0xe8>
 8005f3c:	881e      	ldrh	r6, [r3, #0]
 8005f3e:	4854      	ldr	r0, [pc, #336]	; (8006090 <_printf_i+0x244>)
 8005f40:	2f6f      	cmp	r7, #111	; 0x6f
 8005f42:	bf0c      	ite	eq
 8005f44:	2308      	moveq	r3, #8
 8005f46:	230a      	movne	r3, #10
 8005f48:	2100      	movs	r1, #0
 8005f4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f4e:	6865      	ldr	r5, [r4, #4]
 8005f50:	60a5      	str	r5, [r4, #8]
 8005f52:	2d00      	cmp	r5, #0
 8005f54:	bfa2      	ittt	ge
 8005f56:	6821      	ldrge	r1, [r4, #0]
 8005f58:	f021 0104 	bicge.w	r1, r1, #4
 8005f5c:	6021      	strge	r1, [r4, #0]
 8005f5e:	b90e      	cbnz	r6, 8005f64 <_printf_i+0x118>
 8005f60:	2d00      	cmp	r5, #0
 8005f62:	d04d      	beq.n	8006000 <_printf_i+0x1b4>
 8005f64:	4615      	mov	r5, r2
 8005f66:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f6a:	fb03 6711 	mls	r7, r3, r1, r6
 8005f6e:	5dc7      	ldrb	r7, [r0, r7]
 8005f70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f74:	4637      	mov	r7, r6
 8005f76:	42bb      	cmp	r3, r7
 8005f78:	460e      	mov	r6, r1
 8005f7a:	d9f4      	bls.n	8005f66 <_printf_i+0x11a>
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d10b      	bne.n	8005f98 <_printf_i+0x14c>
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	07de      	lsls	r6, r3, #31
 8005f84:	d508      	bpl.n	8005f98 <_printf_i+0x14c>
 8005f86:	6923      	ldr	r3, [r4, #16]
 8005f88:	6861      	ldr	r1, [r4, #4]
 8005f8a:	4299      	cmp	r1, r3
 8005f8c:	bfde      	ittt	le
 8005f8e:	2330      	movle	r3, #48	; 0x30
 8005f90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f98:	1b52      	subs	r2, r2, r5
 8005f9a:	6122      	str	r2, [r4, #16]
 8005f9c:	f8cd a000 	str.w	sl, [sp]
 8005fa0:	464b      	mov	r3, r9
 8005fa2:	aa03      	add	r2, sp, #12
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f7ff fee2 	bl	8005d70 <_printf_common>
 8005fac:	3001      	adds	r0, #1
 8005fae:	d14c      	bne.n	800604a <_printf_i+0x1fe>
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb4:	b004      	add	sp, #16
 8005fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fba:	4835      	ldr	r0, [pc, #212]	; (8006090 <_printf_i+0x244>)
 8005fbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fc0:	6829      	ldr	r1, [r5, #0]
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fc8:	6029      	str	r1, [r5, #0]
 8005fca:	061d      	lsls	r5, r3, #24
 8005fcc:	d514      	bpl.n	8005ff8 <_printf_i+0x1ac>
 8005fce:	07df      	lsls	r7, r3, #31
 8005fd0:	bf44      	itt	mi
 8005fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd6:	6023      	strmi	r3, [r4, #0]
 8005fd8:	b91e      	cbnz	r6, 8005fe2 <_printf_i+0x196>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	f023 0320 	bic.w	r3, r3, #32
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	2310      	movs	r3, #16
 8005fe4:	e7b0      	b.n	8005f48 <_printf_i+0xfc>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	f043 0320 	orr.w	r3, r3, #32
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	2378      	movs	r3, #120	; 0x78
 8005ff0:	4828      	ldr	r0, [pc, #160]	; (8006094 <_printf_i+0x248>)
 8005ff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ff6:	e7e3      	b.n	8005fc0 <_printf_i+0x174>
 8005ff8:	0659      	lsls	r1, r3, #25
 8005ffa:	bf48      	it	mi
 8005ffc:	b2b6      	uxthmi	r6, r6
 8005ffe:	e7e6      	b.n	8005fce <_printf_i+0x182>
 8006000:	4615      	mov	r5, r2
 8006002:	e7bb      	b.n	8005f7c <_printf_i+0x130>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	6826      	ldr	r6, [r4, #0]
 8006008:	6961      	ldr	r1, [r4, #20]
 800600a:	1d18      	adds	r0, r3, #4
 800600c:	6028      	str	r0, [r5, #0]
 800600e:	0635      	lsls	r5, r6, #24
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	d501      	bpl.n	8006018 <_printf_i+0x1cc>
 8006014:	6019      	str	r1, [r3, #0]
 8006016:	e002      	b.n	800601e <_printf_i+0x1d2>
 8006018:	0670      	lsls	r0, r6, #25
 800601a:	d5fb      	bpl.n	8006014 <_printf_i+0x1c8>
 800601c:	8019      	strh	r1, [r3, #0]
 800601e:	2300      	movs	r3, #0
 8006020:	6123      	str	r3, [r4, #16]
 8006022:	4615      	mov	r5, r2
 8006024:	e7ba      	b.n	8005f9c <_printf_i+0x150>
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	1d1a      	adds	r2, r3, #4
 800602a:	602a      	str	r2, [r5, #0]
 800602c:	681d      	ldr	r5, [r3, #0]
 800602e:	6862      	ldr	r2, [r4, #4]
 8006030:	2100      	movs	r1, #0
 8006032:	4628      	mov	r0, r5
 8006034:	f7fa f8d4 	bl	80001e0 <memchr>
 8006038:	b108      	cbz	r0, 800603e <_printf_i+0x1f2>
 800603a:	1b40      	subs	r0, r0, r5
 800603c:	6060      	str	r0, [r4, #4]
 800603e:	6863      	ldr	r3, [r4, #4]
 8006040:	6123      	str	r3, [r4, #16]
 8006042:	2300      	movs	r3, #0
 8006044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006048:	e7a8      	b.n	8005f9c <_printf_i+0x150>
 800604a:	6923      	ldr	r3, [r4, #16]
 800604c:	462a      	mov	r2, r5
 800604e:	4649      	mov	r1, r9
 8006050:	4640      	mov	r0, r8
 8006052:	47d0      	blx	sl
 8006054:	3001      	adds	r0, #1
 8006056:	d0ab      	beq.n	8005fb0 <_printf_i+0x164>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	079b      	lsls	r3, r3, #30
 800605c:	d413      	bmi.n	8006086 <_printf_i+0x23a>
 800605e:	68e0      	ldr	r0, [r4, #12]
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	4298      	cmp	r0, r3
 8006064:	bfb8      	it	lt
 8006066:	4618      	movlt	r0, r3
 8006068:	e7a4      	b.n	8005fb4 <_printf_i+0x168>
 800606a:	2301      	movs	r3, #1
 800606c:	4632      	mov	r2, r6
 800606e:	4649      	mov	r1, r9
 8006070:	4640      	mov	r0, r8
 8006072:	47d0      	blx	sl
 8006074:	3001      	adds	r0, #1
 8006076:	d09b      	beq.n	8005fb0 <_printf_i+0x164>
 8006078:	3501      	adds	r5, #1
 800607a:	68e3      	ldr	r3, [r4, #12]
 800607c:	9903      	ldr	r1, [sp, #12]
 800607e:	1a5b      	subs	r3, r3, r1
 8006080:	42ab      	cmp	r3, r5
 8006082:	dcf2      	bgt.n	800606a <_printf_i+0x21e>
 8006084:	e7eb      	b.n	800605e <_printf_i+0x212>
 8006086:	2500      	movs	r5, #0
 8006088:	f104 0619 	add.w	r6, r4, #25
 800608c:	e7f5      	b.n	800607a <_printf_i+0x22e>
 800608e:	bf00      	nop
 8006090:	0800851e 	.word	0x0800851e
 8006094:	0800852f 	.word	0x0800852f

08006098 <_sbrk_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4d06      	ldr	r5, [pc, #24]	; (80060b4 <_sbrk_r+0x1c>)
 800609c:	2300      	movs	r3, #0
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	f7fb fe24 	bl	8001cf0 <_sbrk>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_sbrk_r+0x1a>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_sbrk_r+0x1a>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	20000508 	.word	0x20000508

080060b8 <siprintf>:
 80060b8:	b40e      	push	{r1, r2, r3}
 80060ba:	b500      	push	{lr}
 80060bc:	b09c      	sub	sp, #112	; 0x70
 80060be:	ab1d      	add	r3, sp, #116	; 0x74
 80060c0:	9002      	str	r0, [sp, #8]
 80060c2:	9006      	str	r0, [sp, #24]
 80060c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060c8:	4809      	ldr	r0, [pc, #36]	; (80060f0 <siprintf+0x38>)
 80060ca:	9107      	str	r1, [sp, #28]
 80060cc:	9104      	str	r1, [sp, #16]
 80060ce:	4909      	ldr	r1, [pc, #36]	; (80060f4 <siprintf+0x3c>)
 80060d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80060d4:	9105      	str	r1, [sp, #20]
 80060d6:	6800      	ldr	r0, [r0, #0]
 80060d8:	9301      	str	r3, [sp, #4]
 80060da:	a902      	add	r1, sp, #8
 80060dc:	f001 fd70 	bl	8007bc0 <_svfiprintf_r>
 80060e0:	9b02      	ldr	r3, [sp, #8]
 80060e2:	2200      	movs	r2, #0
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	b01c      	add	sp, #112	; 0x70
 80060e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060ec:	b003      	add	sp, #12
 80060ee:	4770      	bx	lr
 80060f0:	200000ac 	.word	0x200000ac
 80060f4:	ffff0208 	.word	0xffff0208

080060f8 <__sread>:
 80060f8:	b510      	push	{r4, lr}
 80060fa:	460c      	mov	r4, r1
 80060fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006100:	f001 ffb8 	bl	8008074 <_read_r>
 8006104:	2800      	cmp	r0, #0
 8006106:	bfab      	itete	ge
 8006108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800610a:	89a3      	ldrhlt	r3, [r4, #12]
 800610c:	181b      	addge	r3, r3, r0
 800610e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006112:	bfac      	ite	ge
 8006114:	6563      	strge	r3, [r4, #84]	; 0x54
 8006116:	81a3      	strhlt	r3, [r4, #12]
 8006118:	bd10      	pop	{r4, pc}

0800611a <__swrite>:
 800611a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800611e:	461f      	mov	r7, r3
 8006120:	898b      	ldrh	r3, [r1, #12]
 8006122:	05db      	lsls	r3, r3, #23
 8006124:	4605      	mov	r5, r0
 8006126:	460c      	mov	r4, r1
 8006128:	4616      	mov	r6, r2
 800612a:	d505      	bpl.n	8006138 <__swrite+0x1e>
 800612c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006130:	2302      	movs	r3, #2
 8006132:	2200      	movs	r2, #0
 8006134:	f001 f876 	bl	8007224 <_lseek_r>
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800613e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006142:	81a3      	strh	r3, [r4, #12]
 8006144:	4632      	mov	r2, r6
 8006146:	463b      	mov	r3, r7
 8006148:	4628      	mov	r0, r5
 800614a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800614e:	f000 b869 	b.w	8006224 <_write_r>

08006152 <__sseek>:
 8006152:	b510      	push	{r4, lr}
 8006154:	460c      	mov	r4, r1
 8006156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800615a:	f001 f863 	bl	8007224 <_lseek_r>
 800615e:	1c43      	adds	r3, r0, #1
 8006160:	89a3      	ldrh	r3, [r4, #12]
 8006162:	bf15      	itete	ne
 8006164:	6560      	strne	r0, [r4, #84]	; 0x54
 8006166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800616a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800616e:	81a3      	strheq	r3, [r4, #12]
 8006170:	bf18      	it	ne
 8006172:	81a3      	strhne	r3, [r4, #12]
 8006174:	bd10      	pop	{r4, pc}

08006176 <__sclose>:
 8006176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800617a:	f000 b8f1 	b.w	8006360 <_close_r>
	...

08006180 <__swbuf_r>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	460e      	mov	r6, r1
 8006184:	4614      	mov	r4, r2
 8006186:	4605      	mov	r5, r0
 8006188:	b118      	cbz	r0, 8006192 <__swbuf_r+0x12>
 800618a:	6983      	ldr	r3, [r0, #24]
 800618c:	b90b      	cbnz	r3, 8006192 <__swbuf_r+0x12>
 800618e:	f7ff f9a9 	bl	80054e4 <__sinit>
 8006192:	4b21      	ldr	r3, [pc, #132]	; (8006218 <__swbuf_r+0x98>)
 8006194:	429c      	cmp	r4, r3
 8006196:	d12b      	bne.n	80061f0 <__swbuf_r+0x70>
 8006198:	686c      	ldr	r4, [r5, #4]
 800619a:	69a3      	ldr	r3, [r4, #24]
 800619c:	60a3      	str	r3, [r4, #8]
 800619e:	89a3      	ldrh	r3, [r4, #12]
 80061a0:	071a      	lsls	r2, r3, #28
 80061a2:	d52f      	bpl.n	8006204 <__swbuf_r+0x84>
 80061a4:	6923      	ldr	r3, [r4, #16]
 80061a6:	b36b      	cbz	r3, 8006204 <__swbuf_r+0x84>
 80061a8:	6923      	ldr	r3, [r4, #16]
 80061aa:	6820      	ldr	r0, [r4, #0]
 80061ac:	1ac0      	subs	r0, r0, r3
 80061ae:	6963      	ldr	r3, [r4, #20]
 80061b0:	b2f6      	uxtb	r6, r6
 80061b2:	4283      	cmp	r3, r0
 80061b4:	4637      	mov	r7, r6
 80061b6:	dc04      	bgt.n	80061c2 <__swbuf_r+0x42>
 80061b8:	4621      	mov	r1, r4
 80061ba:	4628      	mov	r0, r5
 80061bc:	f000 ffe0 	bl	8007180 <_fflush_r>
 80061c0:	bb30      	cbnz	r0, 8006210 <__swbuf_r+0x90>
 80061c2:	68a3      	ldr	r3, [r4, #8]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	60a3      	str	r3, [r4, #8]
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	6022      	str	r2, [r4, #0]
 80061ce:	701e      	strb	r6, [r3, #0]
 80061d0:	6963      	ldr	r3, [r4, #20]
 80061d2:	3001      	adds	r0, #1
 80061d4:	4283      	cmp	r3, r0
 80061d6:	d004      	beq.n	80061e2 <__swbuf_r+0x62>
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	07db      	lsls	r3, r3, #31
 80061dc:	d506      	bpl.n	80061ec <__swbuf_r+0x6c>
 80061de:	2e0a      	cmp	r6, #10
 80061e0:	d104      	bne.n	80061ec <__swbuf_r+0x6c>
 80061e2:	4621      	mov	r1, r4
 80061e4:	4628      	mov	r0, r5
 80061e6:	f000 ffcb 	bl	8007180 <_fflush_r>
 80061ea:	b988      	cbnz	r0, 8006210 <__swbuf_r+0x90>
 80061ec:	4638      	mov	r0, r7
 80061ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <__swbuf_r+0x9c>)
 80061f2:	429c      	cmp	r4, r3
 80061f4:	d101      	bne.n	80061fa <__swbuf_r+0x7a>
 80061f6:	68ac      	ldr	r4, [r5, #8]
 80061f8:	e7cf      	b.n	800619a <__swbuf_r+0x1a>
 80061fa:	4b09      	ldr	r3, [pc, #36]	; (8006220 <__swbuf_r+0xa0>)
 80061fc:	429c      	cmp	r4, r3
 80061fe:	bf08      	it	eq
 8006200:	68ec      	ldreq	r4, [r5, #12]
 8006202:	e7ca      	b.n	800619a <__swbuf_r+0x1a>
 8006204:	4621      	mov	r1, r4
 8006206:	4628      	mov	r0, r5
 8006208:	f000 f81e 	bl	8006248 <__swsetup_r>
 800620c:	2800      	cmp	r0, #0
 800620e:	d0cb      	beq.n	80061a8 <__swbuf_r+0x28>
 8006210:	f04f 37ff 	mov.w	r7, #4294967295
 8006214:	e7ea      	b.n	80061ec <__swbuf_r+0x6c>
 8006216:	bf00      	nop
 8006218:	080084c8 	.word	0x080084c8
 800621c:	080084e8 	.word	0x080084e8
 8006220:	080084a8 	.word	0x080084a8

08006224 <_write_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d07      	ldr	r5, [pc, #28]	; (8006244 <_write_r+0x20>)
 8006228:	4604      	mov	r4, r0
 800622a:	4608      	mov	r0, r1
 800622c:	4611      	mov	r1, r2
 800622e:	2200      	movs	r2, #0
 8006230:	602a      	str	r2, [r5, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	f7fe fefb 	bl	800502e <_write>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_write_r+0x1e>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_write_r+0x1e>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	20000508 	.word	0x20000508

08006248 <__swsetup_r>:
 8006248:	4b32      	ldr	r3, [pc, #200]	; (8006314 <__swsetup_r+0xcc>)
 800624a:	b570      	push	{r4, r5, r6, lr}
 800624c:	681d      	ldr	r5, [r3, #0]
 800624e:	4606      	mov	r6, r0
 8006250:	460c      	mov	r4, r1
 8006252:	b125      	cbz	r5, 800625e <__swsetup_r+0x16>
 8006254:	69ab      	ldr	r3, [r5, #24]
 8006256:	b913      	cbnz	r3, 800625e <__swsetup_r+0x16>
 8006258:	4628      	mov	r0, r5
 800625a:	f7ff f943 	bl	80054e4 <__sinit>
 800625e:	4b2e      	ldr	r3, [pc, #184]	; (8006318 <__swsetup_r+0xd0>)
 8006260:	429c      	cmp	r4, r3
 8006262:	d10f      	bne.n	8006284 <__swsetup_r+0x3c>
 8006264:	686c      	ldr	r4, [r5, #4]
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800626c:	0719      	lsls	r1, r3, #28
 800626e:	d42c      	bmi.n	80062ca <__swsetup_r+0x82>
 8006270:	06dd      	lsls	r5, r3, #27
 8006272:	d411      	bmi.n	8006298 <__swsetup_r+0x50>
 8006274:	2309      	movs	r3, #9
 8006276:	6033      	str	r3, [r6, #0]
 8006278:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800627c:	81a3      	strh	r3, [r4, #12]
 800627e:	f04f 30ff 	mov.w	r0, #4294967295
 8006282:	e03e      	b.n	8006302 <__swsetup_r+0xba>
 8006284:	4b25      	ldr	r3, [pc, #148]	; (800631c <__swsetup_r+0xd4>)
 8006286:	429c      	cmp	r4, r3
 8006288:	d101      	bne.n	800628e <__swsetup_r+0x46>
 800628a:	68ac      	ldr	r4, [r5, #8]
 800628c:	e7eb      	b.n	8006266 <__swsetup_r+0x1e>
 800628e:	4b24      	ldr	r3, [pc, #144]	; (8006320 <__swsetup_r+0xd8>)
 8006290:	429c      	cmp	r4, r3
 8006292:	bf08      	it	eq
 8006294:	68ec      	ldreq	r4, [r5, #12]
 8006296:	e7e6      	b.n	8006266 <__swsetup_r+0x1e>
 8006298:	0758      	lsls	r0, r3, #29
 800629a:	d512      	bpl.n	80062c2 <__swsetup_r+0x7a>
 800629c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800629e:	b141      	cbz	r1, 80062b2 <__swsetup_r+0x6a>
 80062a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062a4:	4299      	cmp	r1, r3
 80062a6:	d002      	beq.n	80062ae <__swsetup_r+0x66>
 80062a8:	4630      	mov	r0, r6
 80062aa:	f001 fbe1 	bl	8007a70 <_free_r>
 80062ae:	2300      	movs	r3, #0
 80062b0:	6363      	str	r3, [r4, #52]	; 0x34
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	2300      	movs	r3, #0
 80062bc:	6063      	str	r3, [r4, #4]
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	f043 0308 	orr.w	r3, r3, #8
 80062c8:	81a3      	strh	r3, [r4, #12]
 80062ca:	6923      	ldr	r3, [r4, #16]
 80062cc:	b94b      	cbnz	r3, 80062e2 <__swsetup_r+0x9a>
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d8:	d003      	beq.n	80062e2 <__swsetup_r+0x9a>
 80062da:	4621      	mov	r1, r4
 80062dc:	4630      	mov	r0, r6
 80062de:	f000 ffd9 	bl	8007294 <__smakebuf_r>
 80062e2:	89a0      	ldrh	r0, [r4, #12]
 80062e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062e8:	f010 0301 	ands.w	r3, r0, #1
 80062ec:	d00a      	beq.n	8006304 <__swsetup_r+0xbc>
 80062ee:	2300      	movs	r3, #0
 80062f0:	60a3      	str	r3, [r4, #8]
 80062f2:	6963      	ldr	r3, [r4, #20]
 80062f4:	425b      	negs	r3, r3
 80062f6:	61a3      	str	r3, [r4, #24]
 80062f8:	6923      	ldr	r3, [r4, #16]
 80062fa:	b943      	cbnz	r3, 800630e <__swsetup_r+0xc6>
 80062fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006300:	d1ba      	bne.n	8006278 <__swsetup_r+0x30>
 8006302:	bd70      	pop	{r4, r5, r6, pc}
 8006304:	0781      	lsls	r1, r0, #30
 8006306:	bf58      	it	pl
 8006308:	6963      	ldrpl	r3, [r4, #20]
 800630a:	60a3      	str	r3, [r4, #8]
 800630c:	e7f4      	b.n	80062f8 <__swsetup_r+0xb0>
 800630e:	2000      	movs	r0, #0
 8006310:	e7f7      	b.n	8006302 <__swsetup_r+0xba>
 8006312:	bf00      	nop
 8006314:	200000ac 	.word	0x200000ac
 8006318:	080084c8 	.word	0x080084c8
 800631c:	080084e8 	.word	0x080084e8
 8006320:	080084a8 	.word	0x080084a8

08006324 <__assert_func>:
 8006324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006326:	4614      	mov	r4, r2
 8006328:	461a      	mov	r2, r3
 800632a:	4b09      	ldr	r3, [pc, #36]	; (8006350 <__assert_func+0x2c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4605      	mov	r5, r0
 8006330:	68d8      	ldr	r0, [r3, #12]
 8006332:	b14c      	cbz	r4, 8006348 <__assert_func+0x24>
 8006334:	4b07      	ldr	r3, [pc, #28]	; (8006354 <__assert_func+0x30>)
 8006336:	9100      	str	r1, [sp, #0]
 8006338:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800633c:	4906      	ldr	r1, [pc, #24]	; (8006358 <__assert_func+0x34>)
 800633e:	462b      	mov	r3, r5
 8006340:	f000 ff5a 	bl	80071f8 <fiprintf>
 8006344:	f001 fea8 	bl	8008098 <abort>
 8006348:	4b04      	ldr	r3, [pc, #16]	; (800635c <__assert_func+0x38>)
 800634a:	461c      	mov	r4, r3
 800634c:	e7f3      	b.n	8006336 <__assert_func+0x12>
 800634e:	bf00      	nop
 8006350:	200000ac 	.word	0x200000ac
 8006354:	08008540 	.word	0x08008540
 8006358:	0800854d 	.word	0x0800854d
 800635c:	0800857b 	.word	0x0800857b

08006360 <_close_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4d06      	ldr	r5, [pc, #24]	; (800637c <_close_r+0x1c>)
 8006364:	2300      	movs	r3, #0
 8006366:	4604      	mov	r4, r0
 8006368:	4608      	mov	r0, r1
 800636a:	602b      	str	r3, [r5, #0]
 800636c:	f7fe fe90 	bl	8005090 <_close>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d102      	bne.n	800637a <_close_r+0x1a>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	b103      	cbz	r3, 800637a <_close_r+0x1a>
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	20000508 	.word	0x20000508

08006380 <quorem>:
 8006380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	6903      	ldr	r3, [r0, #16]
 8006386:	690c      	ldr	r4, [r1, #16]
 8006388:	42a3      	cmp	r3, r4
 800638a:	4607      	mov	r7, r0
 800638c:	f2c0 8081 	blt.w	8006492 <quorem+0x112>
 8006390:	3c01      	subs	r4, #1
 8006392:	f101 0814 	add.w	r8, r1, #20
 8006396:	f100 0514 	add.w	r5, r0, #20
 800639a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800639e:	9301      	str	r3, [sp, #4]
 80063a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063a8:	3301      	adds	r3, #1
 80063aa:	429a      	cmp	r2, r3
 80063ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80063b8:	d331      	bcc.n	800641e <quorem+0x9e>
 80063ba:	f04f 0e00 	mov.w	lr, #0
 80063be:	4640      	mov	r0, r8
 80063c0:	46ac      	mov	ip, r5
 80063c2:	46f2      	mov	sl, lr
 80063c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80063c8:	b293      	uxth	r3, r2
 80063ca:	fb06 e303 	mla	r3, r6, r3, lr
 80063ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	ebaa 0303 	sub.w	r3, sl, r3
 80063d8:	f8dc a000 	ldr.w	sl, [ip]
 80063dc:	0c12      	lsrs	r2, r2, #16
 80063de:	fa13 f38a 	uxtah	r3, r3, sl
 80063e2:	fb06 e202 	mla	r2, r6, r2, lr
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	9b00      	ldr	r3, [sp, #0]
 80063ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063ee:	b292      	uxth	r2, r2
 80063f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80063fc:	4581      	cmp	r9, r0
 80063fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006402:	f84c 3b04 	str.w	r3, [ip], #4
 8006406:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800640a:	d2db      	bcs.n	80063c4 <quorem+0x44>
 800640c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006410:	b92b      	cbnz	r3, 800641e <quorem+0x9e>
 8006412:	9b01      	ldr	r3, [sp, #4]
 8006414:	3b04      	subs	r3, #4
 8006416:	429d      	cmp	r5, r3
 8006418:	461a      	mov	r2, r3
 800641a:	d32e      	bcc.n	800647a <quorem+0xfa>
 800641c:	613c      	str	r4, [r7, #16]
 800641e:	4638      	mov	r0, r7
 8006420:	f001 fa0e 	bl	8007840 <__mcmp>
 8006424:	2800      	cmp	r0, #0
 8006426:	db24      	blt.n	8006472 <quorem+0xf2>
 8006428:	3601      	adds	r6, #1
 800642a:	4628      	mov	r0, r5
 800642c:	f04f 0c00 	mov.w	ip, #0
 8006430:	f858 2b04 	ldr.w	r2, [r8], #4
 8006434:	f8d0 e000 	ldr.w	lr, [r0]
 8006438:	b293      	uxth	r3, r2
 800643a:	ebac 0303 	sub.w	r3, ip, r3
 800643e:	0c12      	lsrs	r2, r2, #16
 8006440:	fa13 f38e 	uxtah	r3, r3, lr
 8006444:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006448:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800644c:	b29b      	uxth	r3, r3
 800644e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006452:	45c1      	cmp	r9, r8
 8006454:	f840 3b04 	str.w	r3, [r0], #4
 8006458:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800645c:	d2e8      	bcs.n	8006430 <quorem+0xb0>
 800645e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006466:	b922      	cbnz	r2, 8006472 <quorem+0xf2>
 8006468:	3b04      	subs	r3, #4
 800646a:	429d      	cmp	r5, r3
 800646c:	461a      	mov	r2, r3
 800646e:	d30a      	bcc.n	8006486 <quorem+0x106>
 8006470:	613c      	str	r4, [r7, #16]
 8006472:	4630      	mov	r0, r6
 8006474:	b003      	add	sp, #12
 8006476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	3b04      	subs	r3, #4
 800647e:	2a00      	cmp	r2, #0
 8006480:	d1cc      	bne.n	800641c <quorem+0x9c>
 8006482:	3c01      	subs	r4, #1
 8006484:	e7c7      	b.n	8006416 <quorem+0x96>
 8006486:	6812      	ldr	r2, [r2, #0]
 8006488:	3b04      	subs	r3, #4
 800648a:	2a00      	cmp	r2, #0
 800648c:	d1f0      	bne.n	8006470 <quorem+0xf0>
 800648e:	3c01      	subs	r4, #1
 8006490:	e7eb      	b.n	800646a <quorem+0xea>
 8006492:	2000      	movs	r0, #0
 8006494:	e7ee      	b.n	8006474 <quorem+0xf4>
	...

08006498 <_dtoa_r>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	ed2d 8b04 	vpush	{d8-d9}
 80064a0:	ec57 6b10 	vmov	r6, r7, d0
 80064a4:	b093      	sub	sp, #76	; 0x4c
 80064a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064ac:	9106      	str	r1, [sp, #24]
 80064ae:	ee10 aa10 	vmov	sl, s0
 80064b2:	4604      	mov	r4, r0
 80064b4:	9209      	str	r2, [sp, #36]	; 0x24
 80064b6:	930c      	str	r3, [sp, #48]	; 0x30
 80064b8:	46bb      	mov	fp, r7
 80064ba:	b975      	cbnz	r5, 80064da <_dtoa_r+0x42>
 80064bc:	2010      	movs	r0, #16
 80064be:	f000 ff29 	bl	8007314 <malloc>
 80064c2:	4602      	mov	r2, r0
 80064c4:	6260      	str	r0, [r4, #36]	; 0x24
 80064c6:	b920      	cbnz	r0, 80064d2 <_dtoa_r+0x3a>
 80064c8:	4ba7      	ldr	r3, [pc, #668]	; (8006768 <_dtoa_r+0x2d0>)
 80064ca:	21ea      	movs	r1, #234	; 0xea
 80064cc:	48a7      	ldr	r0, [pc, #668]	; (800676c <_dtoa_r+0x2d4>)
 80064ce:	f7ff ff29 	bl	8006324 <__assert_func>
 80064d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064d6:	6005      	str	r5, [r0, #0]
 80064d8:	60c5      	str	r5, [r0, #12]
 80064da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064dc:	6819      	ldr	r1, [r3, #0]
 80064de:	b151      	cbz	r1, 80064f6 <_dtoa_r+0x5e>
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	604a      	str	r2, [r1, #4]
 80064e4:	2301      	movs	r3, #1
 80064e6:	4093      	lsls	r3, r2
 80064e8:	608b      	str	r3, [r1, #8]
 80064ea:	4620      	mov	r0, r4
 80064ec:	f000 ff66 	bl	80073bc <_Bfree>
 80064f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	1e3b      	subs	r3, r7, #0
 80064f8:	bfaa      	itet	ge
 80064fa:	2300      	movge	r3, #0
 80064fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006500:	f8c8 3000 	strge.w	r3, [r8]
 8006504:	4b9a      	ldr	r3, [pc, #616]	; (8006770 <_dtoa_r+0x2d8>)
 8006506:	bfbc      	itt	lt
 8006508:	2201      	movlt	r2, #1
 800650a:	f8c8 2000 	strlt.w	r2, [r8]
 800650e:	ea33 030b 	bics.w	r3, r3, fp
 8006512:	d11b      	bne.n	800654c <_dtoa_r+0xb4>
 8006514:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006516:	f242 730f 	movw	r3, #9999	; 0x270f
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006520:	4333      	orrs	r3, r6
 8006522:	f000 8592 	beq.w	800704a <_dtoa_r+0xbb2>
 8006526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006528:	b963      	cbnz	r3, 8006544 <_dtoa_r+0xac>
 800652a:	4b92      	ldr	r3, [pc, #584]	; (8006774 <_dtoa_r+0x2dc>)
 800652c:	e022      	b.n	8006574 <_dtoa_r+0xdc>
 800652e:	4b92      	ldr	r3, [pc, #584]	; (8006778 <_dtoa_r+0x2e0>)
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	3308      	adds	r3, #8
 8006534:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	9801      	ldr	r0, [sp, #4]
 800653a:	b013      	add	sp, #76	; 0x4c
 800653c:	ecbd 8b04 	vpop	{d8-d9}
 8006540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006544:	4b8b      	ldr	r3, [pc, #556]	; (8006774 <_dtoa_r+0x2dc>)
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	3303      	adds	r3, #3
 800654a:	e7f3      	b.n	8006534 <_dtoa_r+0x9c>
 800654c:	2200      	movs	r2, #0
 800654e:	2300      	movs	r3, #0
 8006550:	4650      	mov	r0, sl
 8006552:	4659      	mov	r1, fp
 8006554:	f7fa fab8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006558:	ec4b ab19 	vmov	d9, sl, fp
 800655c:	4680      	mov	r8, r0
 800655e:	b158      	cbz	r0, 8006578 <_dtoa_r+0xe0>
 8006560:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006562:	2301      	movs	r3, #1
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 856b 	beq.w	8007044 <_dtoa_r+0xbac>
 800656e:	4883      	ldr	r0, [pc, #524]	; (800677c <_dtoa_r+0x2e4>)
 8006570:	6018      	str	r0, [r3, #0]
 8006572:	1e43      	subs	r3, r0, #1
 8006574:	9301      	str	r3, [sp, #4]
 8006576:	e7df      	b.n	8006538 <_dtoa_r+0xa0>
 8006578:	ec4b ab10 	vmov	d0, sl, fp
 800657c:	aa10      	add	r2, sp, #64	; 0x40
 800657e:	a911      	add	r1, sp, #68	; 0x44
 8006580:	4620      	mov	r0, r4
 8006582:	f001 fa03 	bl	800798c <__d2b>
 8006586:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800658a:	ee08 0a10 	vmov	s16, r0
 800658e:	2d00      	cmp	r5, #0
 8006590:	f000 8084 	beq.w	800669c <_dtoa_r+0x204>
 8006594:	ee19 3a90 	vmov	r3, s19
 8006598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800659c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065a0:	4656      	mov	r6, sl
 80065a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80065ae:	4b74      	ldr	r3, [pc, #464]	; (8006780 <_dtoa_r+0x2e8>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	4630      	mov	r0, r6
 80065b4:	4639      	mov	r1, r7
 80065b6:	f7f9 fe67 	bl	8000288 <__aeabi_dsub>
 80065ba:	a365      	add	r3, pc, #404	; (adr r3, 8006750 <_dtoa_r+0x2b8>)
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	f7fa f81a 	bl	80005f8 <__aeabi_dmul>
 80065c4:	a364      	add	r3, pc, #400	; (adr r3, 8006758 <_dtoa_r+0x2c0>)
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f7f9 fe5f 	bl	800028c <__adddf3>
 80065ce:	4606      	mov	r6, r0
 80065d0:	4628      	mov	r0, r5
 80065d2:	460f      	mov	r7, r1
 80065d4:	f7f9 ffa6 	bl	8000524 <__aeabi_i2d>
 80065d8:	a361      	add	r3, pc, #388	; (adr r3, 8006760 <_dtoa_r+0x2c8>)
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f7fa f80b 	bl	80005f8 <__aeabi_dmul>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4630      	mov	r0, r6
 80065e8:	4639      	mov	r1, r7
 80065ea:	f7f9 fe4f 	bl	800028c <__adddf3>
 80065ee:	4606      	mov	r6, r0
 80065f0:	460f      	mov	r7, r1
 80065f2:	f7fa fab1 	bl	8000b58 <__aeabi_d2iz>
 80065f6:	2200      	movs	r2, #0
 80065f8:	9000      	str	r0, [sp, #0]
 80065fa:	2300      	movs	r3, #0
 80065fc:	4630      	mov	r0, r6
 80065fe:	4639      	mov	r1, r7
 8006600:	f7fa fa6c 	bl	8000adc <__aeabi_dcmplt>
 8006604:	b150      	cbz	r0, 800661c <_dtoa_r+0x184>
 8006606:	9800      	ldr	r0, [sp, #0]
 8006608:	f7f9 ff8c 	bl	8000524 <__aeabi_i2d>
 800660c:	4632      	mov	r2, r6
 800660e:	463b      	mov	r3, r7
 8006610:	f7fa fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006614:	b910      	cbnz	r0, 800661c <_dtoa_r+0x184>
 8006616:	9b00      	ldr	r3, [sp, #0]
 8006618:	3b01      	subs	r3, #1
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	9b00      	ldr	r3, [sp, #0]
 800661e:	2b16      	cmp	r3, #22
 8006620:	d85a      	bhi.n	80066d8 <_dtoa_r+0x240>
 8006622:	9a00      	ldr	r2, [sp, #0]
 8006624:	4b57      	ldr	r3, [pc, #348]	; (8006784 <_dtoa_r+0x2ec>)
 8006626:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	ec51 0b19 	vmov	r0, r1, d9
 8006632:	f7fa fa53 	bl	8000adc <__aeabi_dcmplt>
 8006636:	2800      	cmp	r0, #0
 8006638:	d050      	beq.n	80066dc <_dtoa_r+0x244>
 800663a:	9b00      	ldr	r3, [sp, #0]
 800663c:	3b01      	subs	r3, #1
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	2300      	movs	r3, #0
 8006642:	930b      	str	r3, [sp, #44]	; 0x2c
 8006644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006646:	1b5d      	subs	r5, r3, r5
 8006648:	1e6b      	subs	r3, r5, #1
 800664a:	9305      	str	r3, [sp, #20]
 800664c:	bf45      	ittet	mi
 800664e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006652:	9304      	strmi	r3, [sp, #16]
 8006654:	2300      	movpl	r3, #0
 8006656:	2300      	movmi	r3, #0
 8006658:	bf4c      	ite	mi
 800665a:	9305      	strmi	r3, [sp, #20]
 800665c:	9304      	strpl	r3, [sp, #16]
 800665e:	9b00      	ldr	r3, [sp, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	db3d      	blt.n	80066e0 <_dtoa_r+0x248>
 8006664:	9b05      	ldr	r3, [sp, #20]
 8006666:	9a00      	ldr	r2, [sp, #0]
 8006668:	920a      	str	r2, [sp, #40]	; 0x28
 800666a:	4413      	add	r3, r2
 800666c:	9305      	str	r3, [sp, #20]
 800666e:	2300      	movs	r3, #0
 8006670:	9307      	str	r3, [sp, #28]
 8006672:	9b06      	ldr	r3, [sp, #24]
 8006674:	2b09      	cmp	r3, #9
 8006676:	f200 8089 	bhi.w	800678c <_dtoa_r+0x2f4>
 800667a:	2b05      	cmp	r3, #5
 800667c:	bfc4      	itt	gt
 800667e:	3b04      	subgt	r3, #4
 8006680:	9306      	strgt	r3, [sp, #24]
 8006682:	9b06      	ldr	r3, [sp, #24]
 8006684:	f1a3 0302 	sub.w	r3, r3, #2
 8006688:	bfcc      	ite	gt
 800668a:	2500      	movgt	r5, #0
 800668c:	2501      	movle	r5, #1
 800668e:	2b03      	cmp	r3, #3
 8006690:	f200 8087 	bhi.w	80067a2 <_dtoa_r+0x30a>
 8006694:	e8df f003 	tbb	[pc, r3]
 8006698:	59383a2d 	.word	0x59383a2d
 800669c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80066a0:	441d      	add	r5, r3
 80066a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	bfc1      	itttt	gt
 80066aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80066b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066ba:	bfda      	itte	le
 80066bc:	f1c3 0320 	rsble	r3, r3, #32
 80066c0:	fa06 f003 	lslle.w	r0, r6, r3
 80066c4:	4318      	orrgt	r0, r3
 80066c6:	f7f9 ff1d 	bl	8000504 <__aeabi_ui2d>
 80066ca:	2301      	movs	r3, #1
 80066cc:	4606      	mov	r6, r0
 80066ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066d2:	3d01      	subs	r5, #1
 80066d4:	930e      	str	r3, [sp, #56]	; 0x38
 80066d6:	e76a      	b.n	80065ae <_dtoa_r+0x116>
 80066d8:	2301      	movs	r3, #1
 80066da:	e7b2      	b.n	8006642 <_dtoa_r+0x1aa>
 80066dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80066de:	e7b1      	b.n	8006644 <_dtoa_r+0x1ac>
 80066e0:	9b04      	ldr	r3, [sp, #16]
 80066e2:	9a00      	ldr	r2, [sp, #0]
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	9304      	str	r3, [sp, #16]
 80066e8:	4253      	negs	r3, r2
 80066ea:	9307      	str	r3, [sp, #28]
 80066ec:	2300      	movs	r3, #0
 80066ee:	930a      	str	r3, [sp, #40]	; 0x28
 80066f0:	e7bf      	b.n	8006672 <_dtoa_r+0x1da>
 80066f2:	2300      	movs	r3, #0
 80066f4:	9308      	str	r3, [sp, #32]
 80066f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	dc55      	bgt.n	80067a8 <_dtoa_r+0x310>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006702:	461a      	mov	r2, r3
 8006704:	9209      	str	r2, [sp, #36]	; 0x24
 8006706:	e00c      	b.n	8006722 <_dtoa_r+0x28a>
 8006708:	2301      	movs	r3, #1
 800670a:	e7f3      	b.n	80066f4 <_dtoa_r+0x25c>
 800670c:	2300      	movs	r3, #0
 800670e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006710:	9308      	str	r3, [sp, #32]
 8006712:	9b00      	ldr	r3, [sp, #0]
 8006714:	4413      	add	r3, r2
 8006716:	9302      	str	r3, [sp, #8]
 8006718:	3301      	adds	r3, #1
 800671a:	2b01      	cmp	r3, #1
 800671c:	9303      	str	r3, [sp, #12]
 800671e:	bfb8      	it	lt
 8006720:	2301      	movlt	r3, #1
 8006722:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006724:	2200      	movs	r2, #0
 8006726:	6042      	str	r2, [r0, #4]
 8006728:	2204      	movs	r2, #4
 800672a:	f102 0614 	add.w	r6, r2, #20
 800672e:	429e      	cmp	r6, r3
 8006730:	6841      	ldr	r1, [r0, #4]
 8006732:	d93d      	bls.n	80067b0 <_dtoa_r+0x318>
 8006734:	4620      	mov	r0, r4
 8006736:	f000 fe01 	bl	800733c <_Balloc>
 800673a:	9001      	str	r0, [sp, #4]
 800673c:	2800      	cmp	r0, #0
 800673e:	d13b      	bne.n	80067b8 <_dtoa_r+0x320>
 8006740:	4b11      	ldr	r3, [pc, #68]	; (8006788 <_dtoa_r+0x2f0>)
 8006742:	4602      	mov	r2, r0
 8006744:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006748:	e6c0      	b.n	80064cc <_dtoa_r+0x34>
 800674a:	2301      	movs	r3, #1
 800674c:	e7df      	b.n	800670e <_dtoa_r+0x276>
 800674e:	bf00      	nop
 8006750:	636f4361 	.word	0x636f4361
 8006754:	3fd287a7 	.word	0x3fd287a7
 8006758:	8b60c8b3 	.word	0x8b60c8b3
 800675c:	3fc68a28 	.word	0x3fc68a28
 8006760:	509f79fb 	.word	0x509f79fb
 8006764:	3fd34413 	.word	0x3fd34413
 8006768:	08008589 	.word	0x08008589
 800676c:	080085a0 	.word	0x080085a0
 8006770:	7ff00000 	.word	0x7ff00000
 8006774:	08008585 	.word	0x08008585
 8006778:	0800857c 	.word	0x0800857c
 800677c:	0800851d 	.word	0x0800851d
 8006780:	3ff80000 	.word	0x3ff80000
 8006784:	08008690 	.word	0x08008690
 8006788:	080085fb 	.word	0x080085fb
 800678c:	2501      	movs	r5, #1
 800678e:	2300      	movs	r3, #0
 8006790:	9306      	str	r3, [sp, #24]
 8006792:	9508      	str	r5, [sp, #32]
 8006794:	f04f 33ff 	mov.w	r3, #4294967295
 8006798:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800679c:	2200      	movs	r2, #0
 800679e:	2312      	movs	r3, #18
 80067a0:	e7b0      	b.n	8006704 <_dtoa_r+0x26c>
 80067a2:	2301      	movs	r3, #1
 80067a4:	9308      	str	r3, [sp, #32]
 80067a6:	e7f5      	b.n	8006794 <_dtoa_r+0x2fc>
 80067a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067ae:	e7b8      	b.n	8006722 <_dtoa_r+0x28a>
 80067b0:	3101      	adds	r1, #1
 80067b2:	6041      	str	r1, [r0, #4]
 80067b4:	0052      	lsls	r2, r2, #1
 80067b6:	e7b8      	b.n	800672a <_dtoa_r+0x292>
 80067b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ba:	9a01      	ldr	r2, [sp, #4]
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	2b0e      	cmp	r3, #14
 80067c2:	f200 809d 	bhi.w	8006900 <_dtoa_r+0x468>
 80067c6:	2d00      	cmp	r5, #0
 80067c8:	f000 809a 	beq.w	8006900 <_dtoa_r+0x468>
 80067cc:	9b00      	ldr	r3, [sp, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	dd32      	ble.n	8006838 <_dtoa_r+0x3a0>
 80067d2:	4ab7      	ldr	r2, [pc, #732]	; (8006ab0 <_dtoa_r+0x618>)
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067e0:	9b00      	ldr	r3, [sp, #0]
 80067e2:	05d8      	lsls	r0, r3, #23
 80067e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80067e8:	d516      	bpl.n	8006818 <_dtoa_r+0x380>
 80067ea:	4bb2      	ldr	r3, [pc, #712]	; (8006ab4 <_dtoa_r+0x61c>)
 80067ec:	ec51 0b19 	vmov	r0, r1, d9
 80067f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067f4:	f7fa f82a 	bl	800084c <__aeabi_ddiv>
 80067f8:	f007 070f 	and.w	r7, r7, #15
 80067fc:	4682      	mov	sl, r0
 80067fe:	468b      	mov	fp, r1
 8006800:	2503      	movs	r5, #3
 8006802:	4eac      	ldr	r6, [pc, #688]	; (8006ab4 <_dtoa_r+0x61c>)
 8006804:	b957      	cbnz	r7, 800681c <_dtoa_r+0x384>
 8006806:	4642      	mov	r2, r8
 8006808:	464b      	mov	r3, r9
 800680a:	4650      	mov	r0, sl
 800680c:	4659      	mov	r1, fp
 800680e:	f7fa f81d 	bl	800084c <__aeabi_ddiv>
 8006812:	4682      	mov	sl, r0
 8006814:	468b      	mov	fp, r1
 8006816:	e028      	b.n	800686a <_dtoa_r+0x3d2>
 8006818:	2502      	movs	r5, #2
 800681a:	e7f2      	b.n	8006802 <_dtoa_r+0x36a>
 800681c:	07f9      	lsls	r1, r7, #31
 800681e:	d508      	bpl.n	8006832 <_dtoa_r+0x39a>
 8006820:	4640      	mov	r0, r8
 8006822:	4649      	mov	r1, r9
 8006824:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006828:	f7f9 fee6 	bl	80005f8 <__aeabi_dmul>
 800682c:	3501      	adds	r5, #1
 800682e:	4680      	mov	r8, r0
 8006830:	4689      	mov	r9, r1
 8006832:	107f      	asrs	r7, r7, #1
 8006834:	3608      	adds	r6, #8
 8006836:	e7e5      	b.n	8006804 <_dtoa_r+0x36c>
 8006838:	f000 809b 	beq.w	8006972 <_dtoa_r+0x4da>
 800683c:	9b00      	ldr	r3, [sp, #0]
 800683e:	4f9d      	ldr	r7, [pc, #628]	; (8006ab4 <_dtoa_r+0x61c>)
 8006840:	425e      	negs	r6, r3
 8006842:	4b9b      	ldr	r3, [pc, #620]	; (8006ab0 <_dtoa_r+0x618>)
 8006844:	f006 020f 	and.w	r2, r6, #15
 8006848:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	ec51 0b19 	vmov	r0, r1, d9
 8006854:	f7f9 fed0 	bl	80005f8 <__aeabi_dmul>
 8006858:	1136      	asrs	r6, r6, #4
 800685a:	4682      	mov	sl, r0
 800685c:	468b      	mov	fp, r1
 800685e:	2300      	movs	r3, #0
 8006860:	2502      	movs	r5, #2
 8006862:	2e00      	cmp	r6, #0
 8006864:	d17a      	bne.n	800695c <_dtoa_r+0x4c4>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1d3      	bne.n	8006812 <_dtoa_r+0x37a>
 800686a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 8082 	beq.w	8006976 <_dtoa_r+0x4de>
 8006872:	4b91      	ldr	r3, [pc, #580]	; (8006ab8 <_dtoa_r+0x620>)
 8006874:	2200      	movs	r2, #0
 8006876:	4650      	mov	r0, sl
 8006878:	4659      	mov	r1, fp
 800687a:	f7fa f92f 	bl	8000adc <__aeabi_dcmplt>
 800687e:	2800      	cmp	r0, #0
 8006880:	d079      	beq.n	8006976 <_dtoa_r+0x4de>
 8006882:	9b03      	ldr	r3, [sp, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d076      	beq.n	8006976 <_dtoa_r+0x4de>
 8006888:	9b02      	ldr	r3, [sp, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	dd36      	ble.n	80068fc <_dtoa_r+0x464>
 800688e:	9b00      	ldr	r3, [sp, #0]
 8006890:	4650      	mov	r0, sl
 8006892:	4659      	mov	r1, fp
 8006894:	1e5f      	subs	r7, r3, #1
 8006896:	2200      	movs	r2, #0
 8006898:	4b88      	ldr	r3, [pc, #544]	; (8006abc <_dtoa_r+0x624>)
 800689a:	f7f9 fead 	bl	80005f8 <__aeabi_dmul>
 800689e:	9e02      	ldr	r6, [sp, #8]
 80068a0:	4682      	mov	sl, r0
 80068a2:	468b      	mov	fp, r1
 80068a4:	3501      	adds	r5, #1
 80068a6:	4628      	mov	r0, r5
 80068a8:	f7f9 fe3c 	bl	8000524 <__aeabi_i2d>
 80068ac:	4652      	mov	r2, sl
 80068ae:	465b      	mov	r3, fp
 80068b0:	f7f9 fea2 	bl	80005f8 <__aeabi_dmul>
 80068b4:	4b82      	ldr	r3, [pc, #520]	; (8006ac0 <_dtoa_r+0x628>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	f7f9 fce8 	bl	800028c <__adddf3>
 80068bc:	46d0      	mov	r8, sl
 80068be:	46d9      	mov	r9, fp
 80068c0:	4682      	mov	sl, r0
 80068c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80068c6:	2e00      	cmp	r6, #0
 80068c8:	d158      	bne.n	800697c <_dtoa_r+0x4e4>
 80068ca:	4b7e      	ldr	r3, [pc, #504]	; (8006ac4 <_dtoa_r+0x62c>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	4640      	mov	r0, r8
 80068d0:	4649      	mov	r1, r9
 80068d2:	f7f9 fcd9 	bl	8000288 <__aeabi_dsub>
 80068d6:	4652      	mov	r2, sl
 80068d8:	465b      	mov	r3, fp
 80068da:	4680      	mov	r8, r0
 80068dc:	4689      	mov	r9, r1
 80068de:	f7fa f91b 	bl	8000b18 <__aeabi_dcmpgt>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	f040 8295 	bne.w	8006e12 <_dtoa_r+0x97a>
 80068e8:	4652      	mov	r2, sl
 80068ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068ee:	4640      	mov	r0, r8
 80068f0:	4649      	mov	r1, r9
 80068f2:	f7fa f8f3 	bl	8000adc <__aeabi_dcmplt>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f040 8289 	bne.w	8006e0e <_dtoa_r+0x976>
 80068fc:	ec5b ab19 	vmov	sl, fp, d9
 8006900:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006902:	2b00      	cmp	r3, #0
 8006904:	f2c0 8148 	blt.w	8006b98 <_dtoa_r+0x700>
 8006908:	9a00      	ldr	r2, [sp, #0]
 800690a:	2a0e      	cmp	r2, #14
 800690c:	f300 8144 	bgt.w	8006b98 <_dtoa_r+0x700>
 8006910:	4b67      	ldr	r3, [pc, #412]	; (8006ab0 <_dtoa_r+0x618>)
 8006912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006916:	e9d3 8900 	ldrd	r8, r9, [r3]
 800691a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	f280 80d5 	bge.w	8006acc <_dtoa_r+0x634>
 8006922:	9b03      	ldr	r3, [sp, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f300 80d1 	bgt.w	8006acc <_dtoa_r+0x634>
 800692a:	f040 826f 	bne.w	8006e0c <_dtoa_r+0x974>
 800692e:	4b65      	ldr	r3, [pc, #404]	; (8006ac4 <_dtoa_r+0x62c>)
 8006930:	2200      	movs	r2, #0
 8006932:	4640      	mov	r0, r8
 8006934:	4649      	mov	r1, r9
 8006936:	f7f9 fe5f 	bl	80005f8 <__aeabi_dmul>
 800693a:	4652      	mov	r2, sl
 800693c:	465b      	mov	r3, fp
 800693e:	f7fa f8e1 	bl	8000b04 <__aeabi_dcmpge>
 8006942:	9e03      	ldr	r6, [sp, #12]
 8006944:	4637      	mov	r7, r6
 8006946:	2800      	cmp	r0, #0
 8006948:	f040 8245 	bne.w	8006dd6 <_dtoa_r+0x93e>
 800694c:	9d01      	ldr	r5, [sp, #4]
 800694e:	2331      	movs	r3, #49	; 0x31
 8006950:	f805 3b01 	strb.w	r3, [r5], #1
 8006954:	9b00      	ldr	r3, [sp, #0]
 8006956:	3301      	adds	r3, #1
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	e240      	b.n	8006dde <_dtoa_r+0x946>
 800695c:	07f2      	lsls	r2, r6, #31
 800695e:	d505      	bpl.n	800696c <_dtoa_r+0x4d4>
 8006960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006964:	f7f9 fe48 	bl	80005f8 <__aeabi_dmul>
 8006968:	3501      	adds	r5, #1
 800696a:	2301      	movs	r3, #1
 800696c:	1076      	asrs	r6, r6, #1
 800696e:	3708      	adds	r7, #8
 8006970:	e777      	b.n	8006862 <_dtoa_r+0x3ca>
 8006972:	2502      	movs	r5, #2
 8006974:	e779      	b.n	800686a <_dtoa_r+0x3d2>
 8006976:	9f00      	ldr	r7, [sp, #0]
 8006978:	9e03      	ldr	r6, [sp, #12]
 800697a:	e794      	b.n	80068a6 <_dtoa_r+0x40e>
 800697c:	9901      	ldr	r1, [sp, #4]
 800697e:	4b4c      	ldr	r3, [pc, #304]	; (8006ab0 <_dtoa_r+0x618>)
 8006980:	4431      	add	r1, r6
 8006982:	910d      	str	r1, [sp, #52]	; 0x34
 8006984:	9908      	ldr	r1, [sp, #32]
 8006986:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800698a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800698e:	2900      	cmp	r1, #0
 8006990:	d043      	beq.n	8006a1a <_dtoa_r+0x582>
 8006992:	494d      	ldr	r1, [pc, #308]	; (8006ac8 <_dtoa_r+0x630>)
 8006994:	2000      	movs	r0, #0
 8006996:	f7f9 ff59 	bl	800084c <__aeabi_ddiv>
 800699a:	4652      	mov	r2, sl
 800699c:	465b      	mov	r3, fp
 800699e:	f7f9 fc73 	bl	8000288 <__aeabi_dsub>
 80069a2:	9d01      	ldr	r5, [sp, #4]
 80069a4:	4682      	mov	sl, r0
 80069a6:	468b      	mov	fp, r1
 80069a8:	4649      	mov	r1, r9
 80069aa:	4640      	mov	r0, r8
 80069ac:	f7fa f8d4 	bl	8000b58 <__aeabi_d2iz>
 80069b0:	4606      	mov	r6, r0
 80069b2:	f7f9 fdb7 	bl	8000524 <__aeabi_i2d>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	f7f9 fc63 	bl	8000288 <__aeabi_dsub>
 80069c2:	3630      	adds	r6, #48	; 0x30
 80069c4:	f805 6b01 	strb.w	r6, [r5], #1
 80069c8:	4652      	mov	r2, sl
 80069ca:	465b      	mov	r3, fp
 80069cc:	4680      	mov	r8, r0
 80069ce:	4689      	mov	r9, r1
 80069d0:	f7fa f884 	bl	8000adc <__aeabi_dcmplt>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d163      	bne.n	8006aa0 <_dtoa_r+0x608>
 80069d8:	4642      	mov	r2, r8
 80069da:	464b      	mov	r3, r9
 80069dc:	4936      	ldr	r1, [pc, #216]	; (8006ab8 <_dtoa_r+0x620>)
 80069de:	2000      	movs	r0, #0
 80069e0:	f7f9 fc52 	bl	8000288 <__aeabi_dsub>
 80069e4:	4652      	mov	r2, sl
 80069e6:	465b      	mov	r3, fp
 80069e8:	f7fa f878 	bl	8000adc <__aeabi_dcmplt>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f040 80b5 	bne.w	8006b5c <_dtoa_r+0x6c4>
 80069f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069f4:	429d      	cmp	r5, r3
 80069f6:	d081      	beq.n	80068fc <_dtoa_r+0x464>
 80069f8:	4b30      	ldr	r3, [pc, #192]	; (8006abc <_dtoa_r+0x624>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	4650      	mov	r0, sl
 80069fe:	4659      	mov	r1, fp
 8006a00:	f7f9 fdfa 	bl	80005f8 <__aeabi_dmul>
 8006a04:	4b2d      	ldr	r3, [pc, #180]	; (8006abc <_dtoa_r+0x624>)
 8006a06:	4682      	mov	sl, r0
 8006a08:	468b      	mov	fp, r1
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f7f9 fdf2 	bl	80005f8 <__aeabi_dmul>
 8006a14:	4680      	mov	r8, r0
 8006a16:	4689      	mov	r9, r1
 8006a18:	e7c6      	b.n	80069a8 <_dtoa_r+0x510>
 8006a1a:	4650      	mov	r0, sl
 8006a1c:	4659      	mov	r1, fp
 8006a1e:	f7f9 fdeb 	bl	80005f8 <__aeabi_dmul>
 8006a22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a24:	9d01      	ldr	r5, [sp, #4]
 8006a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a28:	4682      	mov	sl, r0
 8006a2a:	468b      	mov	fp, r1
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4640      	mov	r0, r8
 8006a30:	f7fa f892 	bl	8000b58 <__aeabi_d2iz>
 8006a34:	4606      	mov	r6, r0
 8006a36:	f7f9 fd75 	bl	8000524 <__aeabi_i2d>
 8006a3a:	3630      	adds	r6, #48	; 0x30
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4640      	mov	r0, r8
 8006a42:	4649      	mov	r1, r9
 8006a44:	f7f9 fc20 	bl	8000288 <__aeabi_dsub>
 8006a48:	f805 6b01 	strb.w	r6, [r5], #1
 8006a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a4e:	429d      	cmp	r5, r3
 8006a50:	4680      	mov	r8, r0
 8006a52:	4689      	mov	r9, r1
 8006a54:	f04f 0200 	mov.w	r2, #0
 8006a58:	d124      	bne.n	8006aa4 <_dtoa_r+0x60c>
 8006a5a:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <_dtoa_r+0x630>)
 8006a5c:	4650      	mov	r0, sl
 8006a5e:	4659      	mov	r1, fp
 8006a60:	f7f9 fc14 	bl	800028c <__adddf3>
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	4640      	mov	r0, r8
 8006a6a:	4649      	mov	r1, r9
 8006a6c:	f7fa f854 	bl	8000b18 <__aeabi_dcmpgt>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d173      	bne.n	8006b5c <_dtoa_r+0x6c4>
 8006a74:	4652      	mov	r2, sl
 8006a76:	465b      	mov	r3, fp
 8006a78:	4913      	ldr	r1, [pc, #76]	; (8006ac8 <_dtoa_r+0x630>)
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	f7f9 fc04 	bl	8000288 <__aeabi_dsub>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4640      	mov	r0, r8
 8006a86:	4649      	mov	r1, r9
 8006a88:	f7fa f828 	bl	8000adc <__aeabi_dcmplt>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	f43f af35 	beq.w	80068fc <_dtoa_r+0x464>
 8006a92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a94:	1e6b      	subs	r3, r5, #1
 8006a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a9c:	2b30      	cmp	r3, #48	; 0x30
 8006a9e:	d0f8      	beq.n	8006a92 <_dtoa_r+0x5fa>
 8006aa0:	9700      	str	r7, [sp, #0]
 8006aa2:	e049      	b.n	8006b38 <_dtoa_r+0x6a0>
 8006aa4:	4b05      	ldr	r3, [pc, #20]	; (8006abc <_dtoa_r+0x624>)
 8006aa6:	f7f9 fda7 	bl	80005f8 <__aeabi_dmul>
 8006aaa:	4680      	mov	r8, r0
 8006aac:	4689      	mov	r9, r1
 8006aae:	e7bd      	b.n	8006a2c <_dtoa_r+0x594>
 8006ab0:	08008690 	.word	0x08008690
 8006ab4:	08008668 	.word	0x08008668
 8006ab8:	3ff00000 	.word	0x3ff00000
 8006abc:	40240000 	.word	0x40240000
 8006ac0:	401c0000 	.word	0x401c0000
 8006ac4:	40140000 	.word	0x40140000
 8006ac8:	3fe00000 	.word	0x3fe00000
 8006acc:	9d01      	ldr	r5, [sp, #4]
 8006ace:	4656      	mov	r6, sl
 8006ad0:	465f      	mov	r7, fp
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	4639      	mov	r1, r7
 8006ada:	f7f9 feb7 	bl	800084c <__aeabi_ddiv>
 8006ade:	f7fa f83b 	bl	8000b58 <__aeabi_d2iz>
 8006ae2:	4682      	mov	sl, r0
 8006ae4:	f7f9 fd1e 	bl	8000524 <__aeabi_i2d>
 8006ae8:	4642      	mov	r2, r8
 8006aea:	464b      	mov	r3, r9
 8006aec:	f7f9 fd84 	bl	80005f8 <__aeabi_dmul>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4630      	mov	r0, r6
 8006af6:	4639      	mov	r1, r7
 8006af8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006afc:	f7f9 fbc4 	bl	8000288 <__aeabi_dsub>
 8006b00:	f805 6b01 	strb.w	r6, [r5], #1
 8006b04:	9e01      	ldr	r6, [sp, #4]
 8006b06:	9f03      	ldr	r7, [sp, #12]
 8006b08:	1bae      	subs	r6, r5, r6
 8006b0a:	42b7      	cmp	r7, r6
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	d135      	bne.n	8006b7e <_dtoa_r+0x6e6>
 8006b12:	f7f9 fbbb 	bl	800028c <__adddf3>
 8006b16:	4642      	mov	r2, r8
 8006b18:	464b      	mov	r3, r9
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	460f      	mov	r7, r1
 8006b1e:	f7f9 fffb 	bl	8000b18 <__aeabi_dcmpgt>
 8006b22:	b9d0      	cbnz	r0, 8006b5a <_dtoa_r+0x6c2>
 8006b24:	4642      	mov	r2, r8
 8006b26:	464b      	mov	r3, r9
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f7f9 ffcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b30:	b110      	cbz	r0, 8006b38 <_dtoa_r+0x6a0>
 8006b32:	f01a 0f01 	tst.w	sl, #1
 8006b36:	d110      	bne.n	8006b5a <_dtoa_r+0x6c2>
 8006b38:	4620      	mov	r0, r4
 8006b3a:	ee18 1a10 	vmov	r1, s16
 8006b3e:	f000 fc3d 	bl	80073bc <_Bfree>
 8006b42:	2300      	movs	r3, #0
 8006b44:	9800      	ldr	r0, [sp, #0]
 8006b46:	702b      	strb	r3, [r5, #0]
 8006b48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	6018      	str	r0, [r3, #0]
 8006b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f43f acf1 	beq.w	8006538 <_dtoa_r+0xa0>
 8006b56:	601d      	str	r5, [r3, #0]
 8006b58:	e4ee      	b.n	8006538 <_dtoa_r+0xa0>
 8006b5a:	9f00      	ldr	r7, [sp, #0]
 8006b5c:	462b      	mov	r3, r5
 8006b5e:	461d      	mov	r5, r3
 8006b60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b64:	2a39      	cmp	r2, #57	; 0x39
 8006b66:	d106      	bne.n	8006b76 <_dtoa_r+0x6de>
 8006b68:	9a01      	ldr	r2, [sp, #4]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d1f7      	bne.n	8006b5e <_dtoa_r+0x6c6>
 8006b6e:	9901      	ldr	r1, [sp, #4]
 8006b70:	2230      	movs	r2, #48	; 0x30
 8006b72:	3701      	adds	r7, #1
 8006b74:	700a      	strb	r2, [r1, #0]
 8006b76:	781a      	ldrb	r2, [r3, #0]
 8006b78:	3201      	adds	r2, #1
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	e790      	b.n	8006aa0 <_dtoa_r+0x608>
 8006b7e:	4ba6      	ldr	r3, [pc, #664]	; (8006e18 <_dtoa_r+0x980>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	f7f9 fd39 	bl	80005f8 <__aeabi_dmul>
 8006b86:	2200      	movs	r2, #0
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	460f      	mov	r7, r1
 8006b8e:	f7f9 ff9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d09d      	beq.n	8006ad2 <_dtoa_r+0x63a>
 8006b96:	e7cf      	b.n	8006b38 <_dtoa_r+0x6a0>
 8006b98:	9a08      	ldr	r2, [sp, #32]
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	f000 80d7 	beq.w	8006d4e <_dtoa_r+0x8b6>
 8006ba0:	9a06      	ldr	r2, [sp, #24]
 8006ba2:	2a01      	cmp	r2, #1
 8006ba4:	f300 80ba 	bgt.w	8006d1c <_dtoa_r+0x884>
 8006ba8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006baa:	2a00      	cmp	r2, #0
 8006bac:	f000 80b2 	beq.w	8006d14 <_dtoa_r+0x87c>
 8006bb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bb4:	9e07      	ldr	r6, [sp, #28]
 8006bb6:	9d04      	ldr	r5, [sp, #16]
 8006bb8:	9a04      	ldr	r2, [sp, #16]
 8006bba:	441a      	add	r2, r3
 8006bbc:	9204      	str	r2, [sp, #16]
 8006bbe:	9a05      	ldr	r2, [sp, #20]
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	441a      	add	r2, r3
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	9205      	str	r2, [sp, #20]
 8006bc8:	f000 fcb0 	bl	800752c <__i2b>
 8006bcc:	4607      	mov	r7, r0
 8006bce:	2d00      	cmp	r5, #0
 8006bd0:	dd0c      	ble.n	8006bec <_dtoa_r+0x754>
 8006bd2:	9b05      	ldr	r3, [sp, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	dd09      	ble.n	8006bec <_dtoa_r+0x754>
 8006bd8:	42ab      	cmp	r3, r5
 8006bda:	9a04      	ldr	r2, [sp, #16]
 8006bdc:	bfa8      	it	ge
 8006bde:	462b      	movge	r3, r5
 8006be0:	1ad2      	subs	r2, r2, r3
 8006be2:	9204      	str	r2, [sp, #16]
 8006be4:	9a05      	ldr	r2, [sp, #20]
 8006be6:	1aed      	subs	r5, r5, r3
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	9305      	str	r3, [sp, #20]
 8006bec:	9b07      	ldr	r3, [sp, #28]
 8006bee:	b31b      	cbz	r3, 8006c38 <_dtoa_r+0x7a0>
 8006bf0:	9b08      	ldr	r3, [sp, #32]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 80af 	beq.w	8006d56 <_dtoa_r+0x8be>
 8006bf8:	2e00      	cmp	r6, #0
 8006bfa:	dd13      	ble.n	8006c24 <_dtoa_r+0x78c>
 8006bfc:	4639      	mov	r1, r7
 8006bfe:	4632      	mov	r2, r6
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 fd53 	bl	80076ac <__pow5mult>
 8006c06:	ee18 2a10 	vmov	r2, s16
 8006c0a:	4601      	mov	r1, r0
 8006c0c:	4607      	mov	r7, r0
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f000 fca2 	bl	8007558 <__multiply>
 8006c14:	ee18 1a10 	vmov	r1, s16
 8006c18:	4680      	mov	r8, r0
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f000 fbce 	bl	80073bc <_Bfree>
 8006c20:	ee08 8a10 	vmov	s16, r8
 8006c24:	9b07      	ldr	r3, [sp, #28]
 8006c26:	1b9a      	subs	r2, r3, r6
 8006c28:	d006      	beq.n	8006c38 <_dtoa_r+0x7a0>
 8006c2a:	ee18 1a10 	vmov	r1, s16
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 fd3c 	bl	80076ac <__pow5mult>
 8006c34:	ee08 0a10 	vmov	s16, r0
 8006c38:	2101      	movs	r1, #1
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 fc76 	bl	800752c <__i2b>
 8006c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	4606      	mov	r6, r0
 8006c46:	f340 8088 	ble.w	8006d5a <_dtoa_r+0x8c2>
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	4601      	mov	r1, r0
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f000 fd2c 	bl	80076ac <__pow5mult>
 8006c54:	9b06      	ldr	r3, [sp, #24]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	4606      	mov	r6, r0
 8006c5a:	f340 8081 	ble.w	8006d60 <_dtoa_r+0x8c8>
 8006c5e:	f04f 0800 	mov.w	r8, #0
 8006c62:	6933      	ldr	r3, [r6, #16]
 8006c64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c68:	6918      	ldr	r0, [r3, #16]
 8006c6a:	f000 fc0f 	bl	800748c <__hi0bits>
 8006c6e:	f1c0 0020 	rsb	r0, r0, #32
 8006c72:	9b05      	ldr	r3, [sp, #20]
 8006c74:	4418      	add	r0, r3
 8006c76:	f010 001f 	ands.w	r0, r0, #31
 8006c7a:	f000 8092 	beq.w	8006da2 <_dtoa_r+0x90a>
 8006c7e:	f1c0 0320 	rsb	r3, r0, #32
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	f340 808a 	ble.w	8006d9c <_dtoa_r+0x904>
 8006c88:	f1c0 001c 	rsb	r0, r0, #28
 8006c8c:	9b04      	ldr	r3, [sp, #16]
 8006c8e:	4403      	add	r3, r0
 8006c90:	9304      	str	r3, [sp, #16]
 8006c92:	9b05      	ldr	r3, [sp, #20]
 8006c94:	4403      	add	r3, r0
 8006c96:	4405      	add	r5, r0
 8006c98:	9305      	str	r3, [sp, #20]
 8006c9a:	9b04      	ldr	r3, [sp, #16]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	dd07      	ble.n	8006cb0 <_dtoa_r+0x818>
 8006ca0:	ee18 1a10 	vmov	r1, s16
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f000 fd5a 	bl	8007760 <__lshift>
 8006cac:	ee08 0a10 	vmov	s16, r0
 8006cb0:	9b05      	ldr	r3, [sp, #20]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	dd05      	ble.n	8006cc2 <_dtoa_r+0x82a>
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	461a      	mov	r2, r3
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f000 fd50 	bl	8007760 <__lshift>
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d06e      	beq.n	8006da6 <_dtoa_r+0x90e>
 8006cc8:	ee18 0a10 	vmov	r0, s16
 8006ccc:	4631      	mov	r1, r6
 8006cce:	f000 fdb7 	bl	8007840 <__mcmp>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	da67      	bge.n	8006da6 <_dtoa_r+0x90e>
 8006cd6:	9b00      	ldr	r3, [sp, #0]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	ee18 1a10 	vmov	r1, s16
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	220a      	movs	r2, #10
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f000 fb8b 	bl	8007400 <__multadd>
 8006cea:	9b08      	ldr	r3, [sp, #32]
 8006cec:	ee08 0a10 	vmov	s16, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 81b1 	beq.w	8007058 <_dtoa_r+0xbc0>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	4639      	mov	r1, r7
 8006cfa:	220a      	movs	r2, #10
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 fb7f 	bl	8007400 <__multadd>
 8006d02:	9b02      	ldr	r3, [sp, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	4607      	mov	r7, r0
 8006d08:	f300 808e 	bgt.w	8006e28 <_dtoa_r+0x990>
 8006d0c:	9b06      	ldr	r3, [sp, #24]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	dc51      	bgt.n	8006db6 <_dtoa_r+0x91e>
 8006d12:	e089      	b.n	8006e28 <_dtoa_r+0x990>
 8006d14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d1a:	e74b      	b.n	8006bb4 <_dtoa_r+0x71c>
 8006d1c:	9b03      	ldr	r3, [sp, #12]
 8006d1e:	1e5e      	subs	r6, r3, #1
 8006d20:	9b07      	ldr	r3, [sp, #28]
 8006d22:	42b3      	cmp	r3, r6
 8006d24:	bfbf      	itttt	lt
 8006d26:	9b07      	ldrlt	r3, [sp, #28]
 8006d28:	9607      	strlt	r6, [sp, #28]
 8006d2a:	1af2      	sublt	r2, r6, r3
 8006d2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d2e:	bfb6      	itet	lt
 8006d30:	189b      	addlt	r3, r3, r2
 8006d32:	1b9e      	subge	r6, r3, r6
 8006d34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	bfb8      	it	lt
 8006d3a:	2600      	movlt	r6, #0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	bfb7      	itett	lt
 8006d40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d48:	1a9d      	sublt	r5, r3, r2
 8006d4a:	2300      	movlt	r3, #0
 8006d4c:	e734      	b.n	8006bb8 <_dtoa_r+0x720>
 8006d4e:	9e07      	ldr	r6, [sp, #28]
 8006d50:	9d04      	ldr	r5, [sp, #16]
 8006d52:	9f08      	ldr	r7, [sp, #32]
 8006d54:	e73b      	b.n	8006bce <_dtoa_r+0x736>
 8006d56:	9a07      	ldr	r2, [sp, #28]
 8006d58:	e767      	b.n	8006c2a <_dtoa_r+0x792>
 8006d5a:	9b06      	ldr	r3, [sp, #24]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	dc18      	bgt.n	8006d92 <_dtoa_r+0x8fa>
 8006d60:	f1ba 0f00 	cmp.w	sl, #0
 8006d64:	d115      	bne.n	8006d92 <_dtoa_r+0x8fa>
 8006d66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d6a:	b993      	cbnz	r3, 8006d92 <_dtoa_r+0x8fa>
 8006d6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d70:	0d1b      	lsrs	r3, r3, #20
 8006d72:	051b      	lsls	r3, r3, #20
 8006d74:	b183      	cbz	r3, 8006d98 <_dtoa_r+0x900>
 8006d76:	9b04      	ldr	r3, [sp, #16]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	9304      	str	r3, [sp, #16]
 8006d7c:	9b05      	ldr	r3, [sp, #20]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	9305      	str	r3, [sp, #20]
 8006d82:	f04f 0801 	mov.w	r8, #1
 8006d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f47f af6a 	bne.w	8006c62 <_dtoa_r+0x7ca>
 8006d8e:	2001      	movs	r0, #1
 8006d90:	e76f      	b.n	8006c72 <_dtoa_r+0x7da>
 8006d92:	f04f 0800 	mov.w	r8, #0
 8006d96:	e7f6      	b.n	8006d86 <_dtoa_r+0x8ee>
 8006d98:	4698      	mov	r8, r3
 8006d9a:	e7f4      	b.n	8006d86 <_dtoa_r+0x8ee>
 8006d9c:	f43f af7d 	beq.w	8006c9a <_dtoa_r+0x802>
 8006da0:	4618      	mov	r0, r3
 8006da2:	301c      	adds	r0, #28
 8006da4:	e772      	b.n	8006c8c <_dtoa_r+0x7f4>
 8006da6:	9b03      	ldr	r3, [sp, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	dc37      	bgt.n	8006e1c <_dtoa_r+0x984>
 8006dac:	9b06      	ldr	r3, [sp, #24]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	dd34      	ble.n	8006e1c <_dtoa_r+0x984>
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	9302      	str	r3, [sp, #8]
 8006db6:	9b02      	ldr	r3, [sp, #8]
 8006db8:	b96b      	cbnz	r3, 8006dd6 <_dtoa_r+0x93e>
 8006dba:	4631      	mov	r1, r6
 8006dbc:	2205      	movs	r2, #5
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f000 fb1e 	bl	8007400 <__multadd>
 8006dc4:	4601      	mov	r1, r0
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	ee18 0a10 	vmov	r0, s16
 8006dcc:	f000 fd38 	bl	8007840 <__mcmp>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	f73f adbb 	bgt.w	800694c <_dtoa_r+0x4b4>
 8006dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd8:	9d01      	ldr	r5, [sp, #4]
 8006dda:	43db      	mvns	r3, r3
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	f04f 0800 	mov.w	r8, #0
 8006de2:	4631      	mov	r1, r6
 8006de4:	4620      	mov	r0, r4
 8006de6:	f000 fae9 	bl	80073bc <_Bfree>
 8006dea:	2f00      	cmp	r7, #0
 8006dec:	f43f aea4 	beq.w	8006b38 <_dtoa_r+0x6a0>
 8006df0:	f1b8 0f00 	cmp.w	r8, #0
 8006df4:	d005      	beq.n	8006e02 <_dtoa_r+0x96a>
 8006df6:	45b8      	cmp	r8, r7
 8006df8:	d003      	beq.n	8006e02 <_dtoa_r+0x96a>
 8006dfa:	4641      	mov	r1, r8
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 fadd 	bl	80073bc <_Bfree>
 8006e02:	4639      	mov	r1, r7
 8006e04:	4620      	mov	r0, r4
 8006e06:	f000 fad9 	bl	80073bc <_Bfree>
 8006e0a:	e695      	b.n	8006b38 <_dtoa_r+0x6a0>
 8006e0c:	2600      	movs	r6, #0
 8006e0e:	4637      	mov	r7, r6
 8006e10:	e7e1      	b.n	8006dd6 <_dtoa_r+0x93e>
 8006e12:	9700      	str	r7, [sp, #0]
 8006e14:	4637      	mov	r7, r6
 8006e16:	e599      	b.n	800694c <_dtoa_r+0x4b4>
 8006e18:	40240000 	.word	0x40240000
 8006e1c:	9b08      	ldr	r3, [sp, #32]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 80ca 	beq.w	8006fb8 <_dtoa_r+0xb20>
 8006e24:	9b03      	ldr	r3, [sp, #12]
 8006e26:	9302      	str	r3, [sp, #8]
 8006e28:	2d00      	cmp	r5, #0
 8006e2a:	dd05      	ble.n	8006e38 <_dtoa_r+0x9a0>
 8006e2c:	4639      	mov	r1, r7
 8006e2e:	462a      	mov	r2, r5
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 fc95 	bl	8007760 <__lshift>
 8006e36:	4607      	mov	r7, r0
 8006e38:	f1b8 0f00 	cmp.w	r8, #0
 8006e3c:	d05b      	beq.n	8006ef6 <_dtoa_r+0xa5e>
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 fa7b 	bl	800733c <_Balloc>
 8006e46:	4605      	mov	r5, r0
 8006e48:	b928      	cbnz	r0, 8006e56 <_dtoa_r+0x9be>
 8006e4a:	4b87      	ldr	r3, [pc, #540]	; (8007068 <_dtoa_r+0xbd0>)
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e52:	f7ff bb3b 	b.w	80064cc <_dtoa_r+0x34>
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	3202      	adds	r2, #2
 8006e5a:	0092      	lsls	r2, r2, #2
 8006e5c:	f107 010c 	add.w	r1, r7, #12
 8006e60:	300c      	adds	r0, #12
 8006e62:	f7fe fc04 	bl	800566e <memcpy>
 8006e66:	2201      	movs	r2, #1
 8006e68:	4629      	mov	r1, r5
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 fc78 	bl	8007760 <__lshift>
 8006e70:	9b01      	ldr	r3, [sp, #4]
 8006e72:	f103 0901 	add.w	r9, r3, #1
 8006e76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	9305      	str	r3, [sp, #20]
 8006e7e:	f00a 0301 	and.w	r3, sl, #1
 8006e82:	46b8      	mov	r8, r7
 8006e84:	9304      	str	r3, [sp, #16]
 8006e86:	4607      	mov	r7, r0
 8006e88:	4631      	mov	r1, r6
 8006e8a:	ee18 0a10 	vmov	r0, s16
 8006e8e:	f7ff fa77 	bl	8006380 <quorem>
 8006e92:	4641      	mov	r1, r8
 8006e94:	9002      	str	r0, [sp, #8]
 8006e96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e9a:	ee18 0a10 	vmov	r0, s16
 8006e9e:	f000 fccf 	bl	8007840 <__mcmp>
 8006ea2:	463a      	mov	r2, r7
 8006ea4:	9003      	str	r0, [sp, #12]
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f000 fce5 	bl	8007878 <__mdiff>
 8006eae:	68c2      	ldr	r2, [r0, #12]
 8006eb0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	bb02      	cbnz	r2, 8006efa <_dtoa_r+0xa62>
 8006eb8:	4601      	mov	r1, r0
 8006eba:	ee18 0a10 	vmov	r0, s16
 8006ebe:	f000 fcbf 	bl	8007840 <__mcmp>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	4629      	mov	r1, r5
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	9207      	str	r2, [sp, #28]
 8006eca:	f000 fa77 	bl	80073bc <_Bfree>
 8006ece:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006ed2:	ea43 0102 	orr.w	r1, r3, r2
 8006ed6:	9b04      	ldr	r3, [sp, #16]
 8006ed8:	430b      	orrs	r3, r1
 8006eda:	464d      	mov	r5, r9
 8006edc:	d10f      	bne.n	8006efe <_dtoa_r+0xa66>
 8006ede:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ee2:	d02a      	beq.n	8006f3a <_dtoa_r+0xaa2>
 8006ee4:	9b03      	ldr	r3, [sp, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	dd02      	ble.n	8006ef0 <_dtoa_r+0xa58>
 8006eea:	9b02      	ldr	r3, [sp, #8]
 8006eec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ef0:	f88b a000 	strb.w	sl, [fp]
 8006ef4:	e775      	b.n	8006de2 <_dtoa_r+0x94a>
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	e7ba      	b.n	8006e70 <_dtoa_r+0x9d8>
 8006efa:	2201      	movs	r2, #1
 8006efc:	e7e2      	b.n	8006ec4 <_dtoa_r+0xa2c>
 8006efe:	9b03      	ldr	r3, [sp, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	db04      	blt.n	8006f0e <_dtoa_r+0xa76>
 8006f04:	9906      	ldr	r1, [sp, #24]
 8006f06:	430b      	orrs	r3, r1
 8006f08:	9904      	ldr	r1, [sp, #16]
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	d122      	bne.n	8006f54 <_dtoa_r+0xabc>
 8006f0e:	2a00      	cmp	r2, #0
 8006f10:	ddee      	ble.n	8006ef0 <_dtoa_r+0xa58>
 8006f12:	ee18 1a10 	vmov	r1, s16
 8006f16:	2201      	movs	r2, #1
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f000 fc21 	bl	8007760 <__lshift>
 8006f1e:	4631      	mov	r1, r6
 8006f20:	ee08 0a10 	vmov	s16, r0
 8006f24:	f000 fc8c 	bl	8007840 <__mcmp>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	dc03      	bgt.n	8006f34 <_dtoa_r+0xa9c>
 8006f2c:	d1e0      	bne.n	8006ef0 <_dtoa_r+0xa58>
 8006f2e:	f01a 0f01 	tst.w	sl, #1
 8006f32:	d0dd      	beq.n	8006ef0 <_dtoa_r+0xa58>
 8006f34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f38:	d1d7      	bne.n	8006eea <_dtoa_r+0xa52>
 8006f3a:	2339      	movs	r3, #57	; 0x39
 8006f3c:	f88b 3000 	strb.w	r3, [fp]
 8006f40:	462b      	mov	r3, r5
 8006f42:	461d      	mov	r5, r3
 8006f44:	3b01      	subs	r3, #1
 8006f46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f4a:	2a39      	cmp	r2, #57	; 0x39
 8006f4c:	d071      	beq.n	8007032 <_dtoa_r+0xb9a>
 8006f4e:	3201      	adds	r2, #1
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	e746      	b.n	8006de2 <_dtoa_r+0x94a>
 8006f54:	2a00      	cmp	r2, #0
 8006f56:	dd07      	ble.n	8006f68 <_dtoa_r+0xad0>
 8006f58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f5c:	d0ed      	beq.n	8006f3a <_dtoa_r+0xaa2>
 8006f5e:	f10a 0301 	add.w	r3, sl, #1
 8006f62:	f88b 3000 	strb.w	r3, [fp]
 8006f66:	e73c      	b.n	8006de2 <_dtoa_r+0x94a>
 8006f68:	9b05      	ldr	r3, [sp, #20]
 8006f6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f6e:	4599      	cmp	r9, r3
 8006f70:	d047      	beq.n	8007002 <_dtoa_r+0xb6a>
 8006f72:	ee18 1a10 	vmov	r1, s16
 8006f76:	2300      	movs	r3, #0
 8006f78:	220a      	movs	r2, #10
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 fa40 	bl	8007400 <__multadd>
 8006f80:	45b8      	cmp	r8, r7
 8006f82:	ee08 0a10 	vmov	s16, r0
 8006f86:	f04f 0300 	mov.w	r3, #0
 8006f8a:	f04f 020a 	mov.w	r2, #10
 8006f8e:	4641      	mov	r1, r8
 8006f90:	4620      	mov	r0, r4
 8006f92:	d106      	bne.n	8006fa2 <_dtoa_r+0xb0a>
 8006f94:	f000 fa34 	bl	8007400 <__multadd>
 8006f98:	4680      	mov	r8, r0
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	f109 0901 	add.w	r9, r9, #1
 8006fa0:	e772      	b.n	8006e88 <_dtoa_r+0x9f0>
 8006fa2:	f000 fa2d 	bl	8007400 <__multadd>
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	4680      	mov	r8, r0
 8006faa:	2300      	movs	r3, #0
 8006fac:	220a      	movs	r2, #10
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 fa26 	bl	8007400 <__multadd>
 8006fb4:	4607      	mov	r7, r0
 8006fb6:	e7f1      	b.n	8006f9c <_dtoa_r+0xb04>
 8006fb8:	9b03      	ldr	r3, [sp, #12]
 8006fba:	9302      	str	r3, [sp, #8]
 8006fbc:	9d01      	ldr	r5, [sp, #4]
 8006fbe:	ee18 0a10 	vmov	r0, s16
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	f7ff f9dc 	bl	8006380 <quorem>
 8006fc8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fcc:	9b01      	ldr	r3, [sp, #4]
 8006fce:	f805 ab01 	strb.w	sl, [r5], #1
 8006fd2:	1aea      	subs	r2, r5, r3
 8006fd4:	9b02      	ldr	r3, [sp, #8]
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	dd09      	ble.n	8006fee <_dtoa_r+0xb56>
 8006fda:	ee18 1a10 	vmov	r1, s16
 8006fde:	2300      	movs	r3, #0
 8006fe0:	220a      	movs	r2, #10
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f000 fa0c 	bl	8007400 <__multadd>
 8006fe8:	ee08 0a10 	vmov	s16, r0
 8006fec:	e7e7      	b.n	8006fbe <_dtoa_r+0xb26>
 8006fee:	9b02      	ldr	r3, [sp, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	bfc8      	it	gt
 8006ff4:	461d      	movgt	r5, r3
 8006ff6:	9b01      	ldr	r3, [sp, #4]
 8006ff8:	bfd8      	it	le
 8006ffa:	2501      	movle	r5, #1
 8006ffc:	441d      	add	r5, r3
 8006ffe:	f04f 0800 	mov.w	r8, #0
 8007002:	ee18 1a10 	vmov	r1, s16
 8007006:	2201      	movs	r2, #1
 8007008:	4620      	mov	r0, r4
 800700a:	f000 fba9 	bl	8007760 <__lshift>
 800700e:	4631      	mov	r1, r6
 8007010:	ee08 0a10 	vmov	s16, r0
 8007014:	f000 fc14 	bl	8007840 <__mcmp>
 8007018:	2800      	cmp	r0, #0
 800701a:	dc91      	bgt.n	8006f40 <_dtoa_r+0xaa8>
 800701c:	d102      	bne.n	8007024 <_dtoa_r+0xb8c>
 800701e:	f01a 0f01 	tst.w	sl, #1
 8007022:	d18d      	bne.n	8006f40 <_dtoa_r+0xaa8>
 8007024:	462b      	mov	r3, r5
 8007026:	461d      	mov	r5, r3
 8007028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800702c:	2a30      	cmp	r2, #48	; 0x30
 800702e:	d0fa      	beq.n	8007026 <_dtoa_r+0xb8e>
 8007030:	e6d7      	b.n	8006de2 <_dtoa_r+0x94a>
 8007032:	9a01      	ldr	r2, [sp, #4]
 8007034:	429a      	cmp	r2, r3
 8007036:	d184      	bne.n	8006f42 <_dtoa_r+0xaaa>
 8007038:	9b00      	ldr	r3, [sp, #0]
 800703a:	3301      	adds	r3, #1
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	2331      	movs	r3, #49	; 0x31
 8007040:	7013      	strb	r3, [r2, #0]
 8007042:	e6ce      	b.n	8006de2 <_dtoa_r+0x94a>
 8007044:	4b09      	ldr	r3, [pc, #36]	; (800706c <_dtoa_r+0xbd4>)
 8007046:	f7ff ba95 	b.w	8006574 <_dtoa_r+0xdc>
 800704a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800704c:	2b00      	cmp	r3, #0
 800704e:	f47f aa6e 	bne.w	800652e <_dtoa_r+0x96>
 8007052:	4b07      	ldr	r3, [pc, #28]	; (8007070 <_dtoa_r+0xbd8>)
 8007054:	f7ff ba8e 	b.w	8006574 <_dtoa_r+0xdc>
 8007058:	9b02      	ldr	r3, [sp, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	dcae      	bgt.n	8006fbc <_dtoa_r+0xb24>
 800705e:	9b06      	ldr	r3, [sp, #24]
 8007060:	2b02      	cmp	r3, #2
 8007062:	f73f aea8 	bgt.w	8006db6 <_dtoa_r+0x91e>
 8007066:	e7a9      	b.n	8006fbc <_dtoa_r+0xb24>
 8007068:	080085fb 	.word	0x080085fb
 800706c:	0800851c 	.word	0x0800851c
 8007070:	0800857c 	.word	0x0800857c

08007074 <__sflush_r>:
 8007074:	898a      	ldrh	r2, [r1, #12]
 8007076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800707a:	4605      	mov	r5, r0
 800707c:	0710      	lsls	r0, r2, #28
 800707e:	460c      	mov	r4, r1
 8007080:	d458      	bmi.n	8007134 <__sflush_r+0xc0>
 8007082:	684b      	ldr	r3, [r1, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	dc05      	bgt.n	8007094 <__sflush_r+0x20>
 8007088:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	dc02      	bgt.n	8007094 <__sflush_r+0x20>
 800708e:	2000      	movs	r0, #0
 8007090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007096:	2e00      	cmp	r6, #0
 8007098:	d0f9      	beq.n	800708e <__sflush_r+0x1a>
 800709a:	2300      	movs	r3, #0
 800709c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070a0:	682f      	ldr	r7, [r5, #0]
 80070a2:	602b      	str	r3, [r5, #0]
 80070a4:	d032      	beq.n	800710c <__sflush_r+0x98>
 80070a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	075a      	lsls	r2, r3, #29
 80070ac:	d505      	bpl.n	80070ba <__sflush_r+0x46>
 80070ae:	6863      	ldr	r3, [r4, #4]
 80070b0:	1ac0      	subs	r0, r0, r3
 80070b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070b4:	b10b      	cbz	r3, 80070ba <__sflush_r+0x46>
 80070b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070b8:	1ac0      	subs	r0, r0, r3
 80070ba:	2300      	movs	r3, #0
 80070bc:	4602      	mov	r2, r0
 80070be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070c0:	6a21      	ldr	r1, [r4, #32]
 80070c2:	4628      	mov	r0, r5
 80070c4:	47b0      	blx	r6
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	d106      	bne.n	80070da <__sflush_r+0x66>
 80070cc:	6829      	ldr	r1, [r5, #0]
 80070ce:	291d      	cmp	r1, #29
 80070d0:	d82c      	bhi.n	800712c <__sflush_r+0xb8>
 80070d2:	4a2a      	ldr	r2, [pc, #168]	; (800717c <__sflush_r+0x108>)
 80070d4:	40ca      	lsrs	r2, r1
 80070d6:	07d6      	lsls	r6, r2, #31
 80070d8:	d528      	bpl.n	800712c <__sflush_r+0xb8>
 80070da:	2200      	movs	r2, #0
 80070dc:	6062      	str	r2, [r4, #4]
 80070de:	04d9      	lsls	r1, r3, #19
 80070e0:	6922      	ldr	r2, [r4, #16]
 80070e2:	6022      	str	r2, [r4, #0]
 80070e4:	d504      	bpl.n	80070f0 <__sflush_r+0x7c>
 80070e6:	1c42      	adds	r2, r0, #1
 80070e8:	d101      	bne.n	80070ee <__sflush_r+0x7a>
 80070ea:	682b      	ldr	r3, [r5, #0]
 80070ec:	b903      	cbnz	r3, 80070f0 <__sflush_r+0x7c>
 80070ee:	6560      	str	r0, [r4, #84]	; 0x54
 80070f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070f2:	602f      	str	r7, [r5, #0]
 80070f4:	2900      	cmp	r1, #0
 80070f6:	d0ca      	beq.n	800708e <__sflush_r+0x1a>
 80070f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070fc:	4299      	cmp	r1, r3
 80070fe:	d002      	beq.n	8007106 <__sflush_r+0x92>
 8007100:	4628      	mov	r0, r5
 8007102:	f000 fcb5 	bl	8007a70 <_free_r>
 8007106:	2000      	movs	r0, #0
 8007108:	6360      	str	r0, [r4, #52]	; 0x34
 800710a:	e7c1      	b.n	8007090 <__sflush_r+0x1c>
 800710c:	6a21      	ldr	r1, [r4, #32]
 800710e:	2301      	movs	r3, #1
 8007110:	4628      	mov	r0, r5
 8007112:	47b0      	blx	r6
 8007114:	1c41      	adds	r1, r0, #1
 8007116:	d1c7      	bne.n	80070a8 <__sflush_r+0x34>
 8007118:	682b      	ldr	r3, [r5, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0c4      	beq.n	80070a8 <__sflush_r+0x34>
 800711e:	2b1d      	cmp	r3, #29
 8007120:	d001      	beq.n	8007126 <__sflush_r+0xb2>
 8007122:	2b16      	cmp	r3, #22
 8007124:	d101      	bne.n	800712a <__sflush_r+0xb6>
 8007126:	602f      	str	r7, [r5, #0]
 8007128:	e7b1      	b.n	800708e <__sflush_r+0x1a>
 800712a:	89a3      	ldrh	r3, [r4, #12]
 800712c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	e7ad      	b.n	8007090 <__sflush_r+0x1c>
 8007134:	690f      	ldr	r7, [r1, #16]
 8007136:	2f00      	cmp	r7, #0
 8007138:	d0a9      	beq.n	800708e <__sflush_r+0x1a>
 800713a:	0793      	lsls	r3, r2, #30
 800713c:	680e      	ldr	r6, [r1, #0]
 800713e:	bf08      	it	eq
 8007140:	694b      	ldreq	r3, [r1, #20]
 8007142:	600f      	str	r7, [r1, #0]
 8007144:	bf18      	it	ne
 8007146:	2300      	movne	r3, #0
 8007148:	eba6 0807 	sub.w	r8, r6, r7
 800714c:	608b      	str	r3, [r1, #8]
 800714e:	f1b8 0f00 	cmp.w	r8, #0
 8007152:	dd9c      	ble.n	800708e <__sflush_r+0x1a>
 8007154:	6a21      	ldr	r1, [r4, #32]
 8007156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007158:	4643      	mov	r3, r8
 800715a:	463a      	mov	r2, r7
 800715c:	4628      	mov	r0, r5
 800715e:	47b0      	blx	r6
 8007160:	2800      	cmp	r0, #0
 8007162:	dc06      	bgt.n	8007172 <__sflush_r+0xfe>
 8007164:	89a3      	ldrh	r3, [r4, #12]
 8007166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	e78e      	b.n	8007090 <__sflush_r+0x1c>
 8007172:	4407      	add	r7, r0
 8007174:	eba8 0800 	sub.w	r8, r8, r0
 8007178:	e7e9      	b.n	800714e <__sflush_r+0xda>
 800717a:	bf00      	nop
 800717c:	20400001 	.word	0x20400001

08007180 <_fflush_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	690b      	ldr	r3, [r1, #16]
 8007184:	4605      	mov	r5, r0
 8007186:	460c      	mov	r4, r1
 8007188:	b913      	cbnz	r3, 8007190 <_fflush_r+0x10>
 800718a:	2500      	movs	r5, #0
 800718c:	4628      	mov	r0, r5
 800718e:	bd38      	pop	{r3, r4, r5, pc}
 8007190:	b118      	cbz	r0, 800719a <_fflush_r+0x1a>
 8007192:	6983      	ldr	r3, [r0, #24]
 8007194:	b90b      	cbnz	r3, 800719a <_fflush_r+0x1a>
 8007196:	f7fe f9a5 	bl	80054e4 <__sinit>
 800719a:	4b14      	ldr	r3, [pc, #80]	; (80071ec <_fflush_r+0x6c>)
 800719c:	429c      	cmp	r4, r3
 800719e:	d11b      	bne.n	80071d8 <_fflush_r+0x58>
 80071a0:	686c      	ldr	r4, [r5, #4]
 80071a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d0ef      	beq.n	800718a <_fflush_r+0xa>
 80071aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071ac:	07d0      	lsls	r0, r2, #31
 80071ae:	d404      	bmi.n	80071ba <_fflush_r+0x3a>
 80071b0:	0599      	lsls	r1, r3, #22
 80071b2:	d402      	bmi.n	80071ba <_fflush_r+0x3a>
 80071b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071b6:	f7fe fa58 	bl	800566a <__retarget_lock_acquire_recursive>
 80071ba:	4628      	mov	r0, r5
 80071bc:	4621      	mov	r1, r4
 80071be:	f7ff ff59 	bl	8007074 <__sflush_r>
 80071c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071c4:	07da      	lsls	r2, r3, #31
 80071c6:	4605      	mov	r5, r0
 80071c8:	d4e0      	bmi.n	800718c <_fflush_r+0xc>
 80071ca:	89a3      	ldrh	r3, [r4, #12]
 80071cc:	059b      	lsls	r3, r3, #22
 80071ce:	d4dd      	bmi.n	800718c <_fflush_r+0xc>
 80071d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071d2:	f7fe fa4b 	bl	800566c <__retarget_lock_release_recursive>
 80071d6:	e7d9      	b.n	800718c <_fflush_r+0xc>
 80071d8:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <_fflush_r+0x70>)
 80071da:	429c      	cmp	r4, r3
 80071dc:	d101      	bne.n	80071e2 <_fflush_r+0x62>
 80071de:	68ac      	ldr	r4, [r5, #8]
 80071e0:	e7df      	b.n	80071a2 <_fflush_r+0x22>
 80071e2:	4b04      	ldr	r3, [pc, #16]	; (80071f4 <_fflush_r+0x74>)
 80071e4:	429c      	cmp	r4, r3
 80071e6:	bf08      	it	eq
 80071e8:	68ec      	ldreq	r4, [r5, #12]
 80071ea:	e7da      	b.n	80071a2 <_fflush_r+0x22>
 80071ec:	080084c8 	.word	0x080084c8
 80071f0:	080084e8 	.word	0x080084e8
 80071f4:	080084a8 	.word	0x080084a8

080071f8 <fiprintf>:
 80071f8:	b40e      	push	{r1, r2, r3}
 80071fa:	b503      	push	{r0, r1, lr}
 80071fc:	4601      	mov	r1, r0
 80071fe:	ab03      	add	r3, sp, #12
 8007200:	4805      	ldr	r0, [pc, #20]	; (8007218 <fiprintf+0x20>)
 8007202:	f853 2b04 	ldr.w	r2, [r3], #4
 8007206:	6800      	ldr	r0, [r0, #0]
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	f000 fe03 	bl	8007e14 <_vfiprintf_r>
 800720e:	b002      	add	sp, #8
 8007210:	f85d eb04 	ldr.w	lr, [sp], #4
 8007214:	b003      	add	sp, #12
 8007216:	4770      	bx	lr
 8007218:	200000ac 	.word	0x200000ac

0800721c <_localeconv_r>:
 800721c:	4800      	ldr	r0, [pc, #0]	; (8007220 <_localeconv_r+0x4>)
 800721e:	4770      	bx	lr
 8007220:	20000200 	.word	0x20000200

08007224 <_lseek_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4d07      	ldr	r5, [pc, #28]	; (8007244 <_lseek_r+0x20>)
 8007228:	4604      	mov	r4, r0
 800722a:	4608      	mov	r0, r1
 800722c:	4611      	mov	r1, r2
 800722e:	2200      	movs	r2, #0
 8007230:	602a      	str	r2, [r5, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	f7fd fee9 	bl	800500a <_lseek>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_lseek_r+0x1e>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_lseek_r+0x1e>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	20000508 	.word	0x20000508

08007248 <__swhatbuf_r>:
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	460e      	mov	r6, r1
 800724c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007250:	2900      	cmp	r1, #0
 8007252:	b096      	sub	sp, #88	; 0x58
 8007254:	4614      	mov	r4, r2
 8007256:	461d      	mov	r5, r3
 8007258:	da08      	bge.n	800726c <__swhatbuf_r+0x24>
 800725a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	602a      	str	r2, [r5, #0]
 8007262:	061a      	lsls	r2, r3, #24
 8007264:	d410      	bmi.n	8007288 <__swhatbuf_r+0x40>
 8007266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800726a:	e00e      	b.n	800728a <__swhatbuf_r+0x42>
 800726c:	466a      	mov	r2, sp
 800726e:	f000 ff1b 	bl	80080a8 <_fstat_r>
 8007272:	2800      	cmp	r0, #0
 8007274:	dbf1      	blt.n	800725a <__swhatbuf_r+0x12>
 8007276:	9a01      	ldr	r2, [sp, #4]
 8007278:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800727c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007280:	425a      	negs	r2, r3
 8007282:	415a      	adcs	r2, r3
 8007284:	602a      	str	r2, [r5, #0]
 8007286:	e7ee      	b.n	8007266 <__swhatbuf_r+0x1e>
 8007288:	2340      	movs	r3, #64	; 0x40
 800728a:	2000      	movs	r0, #0
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	b016      	add	sp, #88	; 0x58
 8007290:	bd70      	pop	{r4, r5, r6, pc}
	...

08007294 <__smakebuf_r>:
 8007294:	898b      	ldrh	r3, [r1, #12]
 8007296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007298:	079d      	lsls	r5, r3, #30
 800729a:	4606      	mov	r6, r0
 800729c:	460c      	mov	r4, r1
 800729e:	d507      	bpl.n	80072b0 <__smakebuf_r+0x1c>
 80072a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	6123      	str	r3, [r4, #16]
 80072a8:	2301      	movs	r3, #1
 80072aa:	6163      	str	r3, [r4, #20]
 80072ac:	b002      	add	sp, #8
 80072ae:	bd70      	pop	{r4, r5, r6, pc}
 80072b0:	ab01      	add	r3, sp, #4
 80072b2:	466a      	mov	r2, sp
 80072b4:	f7ff ffc8 	bl	8007248 <__swhatbuf_r>
 80072b8:	9900      	ldr	r1, [sp, #0]
 80072ba:	4605      	mov	r5, r0
 80072bc:	4630      	mov	r0, r6
 80072be:	f7fe fa0d 	bl	80056dc <_malloc_r>
 80072c2:	b948      	cbnz	r0, 80072d8 <__smakebuf_r+0x44>
 80072c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072c8:	059a      	lsls	r2, r3, #22
 80072ca:	d4ef      	bmi.n	80072ac <__smakebuf_r+0x18>
 80072cc:	f023 0303 	bic.w	r3, r3, #3
 80072d0:	f043 0302 	orr.w	r3, r3, #2
 80072d4:	81a3      	strh	r3, [r4, #12]
 80072d6:	e7e3      	b.n	80072a0 <__smakebuf_r+0xc>
 80072d8:	4b0d      	ldr	r3, [pc, #52]	; (8007310 <__smakebuf_r+0x7c>)
 80072da:	62b3      	str	r3, [r6, #40]	; 0x28
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	6020      	str	r0, [r4, #0]
 80072e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e4:	81a3      	strh	r3, [r4, #12]
 80072e6:	9b00      	ldr	r3, [sp, #0]
 80072e8:	6163      	str	r3, [r4, #20]
 80072ea:	9b01      	ldr	r3, [sp, #4]
 80072ec:	6120      	str	r0, [r4, #16]
 80072ee:	b15b      	cbz	r3, 8007308 <__smakebuf_r+0x74>
 80072f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072f4:	4630      	mov	r0, r6
 80072f6:	f000 fee9 	bl	80080cc <_isatty_r>
 80072fa:	b128      	cbz	r0, 8007308 <__smakebuf_r+0x74>
 80072fc:	89a3      	ldrh	r3, [r4, #12]
 80072fe:	f023 0303 	bic.w	r3, r3, #3
 8007302:	f043 0301 	orr.w	r3, r3, #1
 8007306:	81a3      	strh	r3, [r4, #12]
 8007308:	89a0      	ldrh	r0, [r4, #12]
 800730a:	4305      	orrs	r5, r0
 800730c:	81a5      	strh	r5, [r4, #12]
 800730e:	e7cd      	b.n	80072ac <__smakebuf_r+0x18>
 8007310:	0800547d 	.word	0x0800547d

08007314 <malloc>:
 8007314:	4b02      	ldr	r3, [pc, #8]	; (8007320 <malloc+0xc>)
 8007316:	4601      	mov	r1, r0
 8007318:	6818      	ldr	r0, [r3, #0]
 800731a:	f7fe b9df 	b.w	80056dc <_malloc_r>
 800731e:	bf00      	nop
 8007320:	200000ac 	.word	0x200000ac

08007324 <__malloc_lock>:
 8007324:	4801      	ldr	r0, [pc, #4]	; (800732c <__malloc_lock+0x8>)
 8007326:	f7fe b9a0 	b.w	800566a <__retarget_lock_acquire_recursive>
 800732a:	bf00      	nop
 800732c:	200004fc 	.word	0x200004fc

08007330 <__malloc_unlock>:
 8007330:	4801      	ldr	r0, [pc, #4]	; (8007338 <__malloc_unlock+0x8>)
 8007332:	f7fe b99b 	b.w	800566c <__retarget_lock_release_recursive>
 8007336:	bf00      	nop
 8007338:	200004fc 	.word	0x200004fc

0800733c <_Balloc>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007340:	4604      	mov	r4, r0
 8007342:	460d      	mov	r5, r1
 8007344:	b976      	cbnz	r6, 8007364 <_Balloc+0x28>
 8007346:	2010      	movs	r0, #16
 8007348:	f7ff ffe4 	bl	8007314 <malloc>
 800734c:	4602      	mov	r2, r0
 800734e:	6260      	str	r0, [r4, #36]	; 0x24
 8007350:	b920      	cbnz	r0, 800735c <_Balloc+0x20>
 8007352:	4b18      	ldr	r3, [pc, #96]	; (80073b4 <_Balloc+0x78>)
 8007354:	4818      	ldr	r0, [pc, #96]	; (80073b8 <_Balloc+0x7c>)
 8007356:	2166      	movs	r1, #102	; 0x66
 8007358:	f7fe ffe4 	bl	8006324 <__assert_func>
 800735c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007360:	6006      	str	r6, [r0, #0]
 8007362:	60c6      	str	r6, [r0, #12]
 8007364:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007366:	68f3      	ldr	r3, [r6, #12]
 8007368:	b183      	cbz	r3, 800738c <_Balloc+0x50>
 800736a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007372:	b9b8      	cbnz	r0, 80073a4 <_Balloc+0x68>
 8007374:	2101      	movs	r1, #1
 8007376:	fa01 f605 	lsl.w	r6, r1, r5
 800737a:	1d72      	adds	r2, r6, #5
 800737c:	0092      	lsls	r2, r2, #2
 800737e:	4620      	mov	r0, r4
 8007380:	f000 fb60 	bl	8007a44 <_calloc_r>
 8007384:	b160      	cbz	r0, 80073a0 <_Balloc+0x64>
 8007386:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800738a:	e00e      	b.n	80073aa <_Balloc+0x6e>
 800738c:	2221      	movs	r2, #33	; 0x21
 800738e:	2104      	movs	r1, #4
 8007390:	4620      	mov	r0, r4
 8007392:	f000 fb57 	bl	8007a44 <_calloc_r>
 8007396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007398:	60f0      	str	r0, [r6, #12]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e4      	bne.n	800736a <_Balloc+0x2e>
 80073a0:	2000      	movs	r0, #0
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	6802      	ldr	r2, [r0, #0]
 80073a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073aa:	2300      	movs	r3, #0
 80073ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073b0:	e7f7      	b.n	80073a2 <_Balloc+0x66>
 80073b2:	bf00      	nop
 80073b4:	08008589 	.word	0x08008589
 80073b8:	0800860c 	.word	0x0800860c

080073bc <_Bfree>:
 80073bc:	b570      	push	{r4, r5, r6, lr}
 80073be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073c0:	4605      	mov	r5, r0
 80073c2:	460c      	mov	r4, r1
 80073c4:	b976      	cbnz	r6, 80073e4 <_Bfree+0x28>
 80073c6:	2010      	movs	r0, #16
 80073c8:	f7ff ffa4 	bl	8007314 <malloc>
 80073cc:	4602      	mov	r2, r0
 80073ce:	6268      	str	r0, [r5, #36]	; 0x24
 80073d0:	b920      	cbnz	r0, 80073dc <_Bfree+0x20>
 80073d2:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <_Bfree+0x3c>)
 80073d4:	4809      	ldr	r0, [pc, #36]	; (80073fc <_Bfree+0x40>)
 80073d6:	218a      	movs	r1, #138	; 0x8a
 80073d8:	f7fe ffa4 	bl	8006324 <__assert_func>
 80073dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073e0:	6006      	str	r6, [r0, #0]
 80073e2:	60c6      	str	r6, [r0, #12]
 80073e4:	b13c      	cbz	r4, 80073f6 <_Bfree+0x3a>
 80073e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073e8:	6862      	ldr	r2, [r4, #4]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073f0:	6021      	str	r1, [r4, #0]
 80073f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073f6:	bd70      	pop	{r4, r5, r6, pc}
 80073f8:	08008589 	.word	0x08008589
 80073fc:	0800860c 	.word	0x0800860c

08007400 <__multadd>:
 8007400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007404:	690d      	ldr	r5, [r1, #16]
 8007406:	4607      	mov	r7, r0
 8007408:	460c      	mov	r4, r1
 800740a:	461e      	mov	r6, r3
 800740c:	f101 0c14 	add.w	ip, r1, #20
 8007410:	2000      	movs	r0, #0
 8007412:	f8dc 3000 	ldr.w	r3, [ip]
 8007416:	b299      	uxth	r1, r3
 8007418:	fb02 6101 	mla	r1, r2, r1, r6
 800741c:	0c1e      	lsrs	r6, r3, #16
 800741e:	0c0b      	lsrs	r3, r1, #16
 8007420:	fb02 3306 	mla	r3, r2, r6, r3
 8007424:	b289      	uxth	r1, r1
 8007426:	3001      	adds	r0, #1
 8007428:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800742c:	4285      	cmp	r5, r0
 800742e:	f84c 1b04 	str.w	r1, [ip], #4
 8007432:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007436:	dcec      	bgt.n	8007412 <__multadd+0x12>
 8007438:	b30e      	cbz	r6, 800747e <__multadd+0x7e>
 800743a:	68a3      	ldr	r3, [r4, #8]
 800743c:	42ab      	cmp	r3, r5
 800743e:	dc19      	bgt.n	8007474 <__multadd+0x74>
 8007440:	6861      	ldr	r1, [r4, #4]
 8007442:	4638      	mov	r0, r7
 8007444:	3101      	adds	r1, #1
 8007446:	f7ff ff79 	bl	800733c <_Balloc>
 800744a:	4680      	mov	r8, r0
 800744c:	b928      	cbnz	r0, 800745a <__multadd+0x5a>
 800744e:	4602      	mov	r2, r0
 8007450:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <__multadd+0x84>)
 8007452:	480d      	ldr	r0, [pc, #52]	; (8007488 <__multadd+0x88>)
 8007454:	21b5      	movs	r1, #181	; 0xb5
 8007456:	f7fe ff65 	bl	8006324 <__assert_func>
 800745a:	6922      	ldr	r2, [r4, #16]
 800745c:	3202      	adds	r2, #2
 800745e:	f104 010c 	add.w	r1, r4, #12
 8007462:	0092      	lsls	r2, r2, #2
 8007464:	300c      	adds	r0, #12
 8007466:	f7fe f902 	bl	800566e <memcpy>
 800746a:	4621      	mov	r1, r4
 800746c:	4638      	mov	r0, r7
 800746e:	f7ff ffa5 	bl	80073bc <_Bfree>
 8007472:	4644      	mov	r4, r8
 8007474:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007478:	3501      	adds	r5, #1
 800747a:	615e      	str	r6, [r3, #20]
 800747c:	6125      	str	r5, [r4, #16]
 800747e:	4620      	mov	r0, r4
 8007480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007484:	080085fb 	.word	0x080085fb
 8007488:	0800860c 	.word	0x0800860c

0800748c <__hi0bits>:
 800748c:	0c03      	lsrs	r3, r0, #16
 800748e:	041b      	lsls	r3, r3, #16
 8007490:	b9d3      	cbnz	r3, 80074c8 <__hi0bits+0x3c>
 8007492:	0400      	lsls	r0, r0, #16
 8007494:	2310      	movs	r3, #16
 8007496:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800749a:	bf04      	itt	eq
 800749c:	0200      	lsleq	r0, r0, #8
 800749e:	3308      	addeq	r3, #8
 80074a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074a4:	bf04      	itt	eq
 80074a6:	0100      	lsleq	r0, r0, #4
 80074a8:	3304      	addeq	r3, #4
 80074aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074ae:	bf04      	itt	eq
 80074b0:	0080      	lsleq	r0, r0, #2
 80074b2:	3302      	addeq	r3, #2
 80074b4:	2800      	cmp	r0, #0
 80074b6:	db05      	blt.n	80074c4 <__hi0bits+0x38>
 80074b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074bc:	f103 0301 	add.w	r3, r3, #1
 80074c0:	bf08      	it	eq
 80074c2:	2320      	moveq	r3, #32
 80074c4:	4618      	mov	r0, r3
 80074c6:	4770      	bx	lr
 80074c8:	2300      	movs	r3, #0
 80074ca:	e7e4      	b.n	8007496 <__hi0bits+0xa>

080074cc <__lo0bits>:
 80074cc:	6803      	ldr	r3, [r0, #0]
 80074ce:	f013 0207 	ands.w	r2, r3, #7
 80074d2:	4601      	mov	r1, r0
 80074d4:	d00b      	beq.n	80074ee <__lo0bits+0x22>
 80074d6:	07da      	lsls	r2, r3, #31
 80074d8:	d423      	bmi.n	8007522 <__lo0bits+0x56>
 80074da:	0798      	lsls	r0, r3, #30
 80074dc:	bf49      	itett	mi
 80074de:	085b      	lsrmi	r3, r3, #1
 80074e0:	089b      	lsrpl	r3, r3, #2
 80074e2:	2001      	movmi	r0, #1
 80074e4:	600b      	strmi	r3, [r1, #0]
 80074e6:	bf5c      	itt	pl
 80074e8:	600b      	strpl	r3, [r1, #0]
 80074ea:	2002      	movpl	r0, #2
 80074ec:	4770      	bx	lr
 80074ee:	b298      	uxth	r0, r3
 80074f0:	b9a8      	cbnz	r0, 800751e <__lo0bits+0x52>
 80074f2:	0c1b      	lsrs	r3, r3, #16
 80074f4:	2010      	movs	r0, #16
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	b90a      	cbnz	r2, 80074fe <__lo0bits+0x32>
 80074fa:	3008      	adds	r0, #8
 80074fc:	0a1b      	lsrs	r3, r3, #8
 80074fe:	071a      	lsls	r2, r3, #28
 8007500:	bf04      	itt	eq
 8007502:	091b      	lsreq	r3, r3, #4
 8007504:	3004      	addeq	r0, #4
 8007506:	079a      	lsls	r2, r3, #30
 8007508:	bf04      	itt	eq
 800750a:	089b      	lsreq	r3, r3, #2
 800750c:	3002      	addeq	r0, #2
 800750e:	07da      	lsls	r2, r3, #31
 8007510:	d403      	bmi.n	800751a <__lo0bits+0x4e>
 8007512:	085b      	lsrs	r3, r3, #1
 8007514:	f100 0001 	add.w	r0, r0, #1
 8007518:	d005      	beq.n	8007526 <__lo0bits+0x5a>
 800751a:	600b      	str	r3, [r1, #0]
 800751c:	4770      	bx	lr
 800751e:	4610      	mov	r0, r2
 8007520:	e7e9      	b.n	80074f6 <__lo0bits+0x2a>
 8007522:	2000      	movs	r0, #0
 8007524:	4770      	bx	lr
 8007526:	2020      	movs	r0, #32
 8007528:	4770      	bx	lr
	...

0800752c <__i2b>:
 800752c:	b510      	push	{r4, lr}
 800752e:	460c      	mov	r4, r1
 8007530:	2101      	movs	r1, #1
 8007532:	f7ff ff03 	bl	800733c <_Balloc>
 8007536:	4602      	mov	r2, r0
 8007538:	b928      	cbnz	r0, 8007546 <__i2b+0x1a>
 800753a:	4b05      	ldr	r3, [pc, #20]	; (8007550 <__i2b+0x24>)
 800753c:	4805      	ldr	r0, [pc, #20]	; (8007554 <__i2b+0x28>)
 800753e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007542:	f7fe feef 	bl	8006324 <__assert_func>
 8007546:	2301      	movs	r3, #1
 8007548:	6144      	str	r4, [r0, #20]
 800754a:	6103      	str	r3, [r0, #16]
 800754c:	bd10      	pop	{r4, pc}
 800754e:	bf00      	nop
 8007550:	080085fb 	.word	0x080085fb
 8007554:	0800860c 	.word	0x0800860c

08007558 <__multiply>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	4691      	mov	r9, r2
 800755e:	690a      	ldr	r2, [r1, #16]
 8007560:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007564:	429a      	cmp	r2, r3
 8007566:	bfb8      	it	lt
 8007568:	460b      	movlt	r3, r1
 800756a:	460c      	mov	r4, r1
 800756c:	bfbc      	itt	lt
 800756e:	464c      	movlt	r4, r9
 8007570:	4699      	movlt	r9, r3
 8007572:	6927      	ldr	r7, [r4, #16]
 8007574:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007578:	68a3      	ldr	r3, [r4, #8]
 800757a:	6861      	ldr	r1, [r4, #4]
 800757c:	eb07 060a 	add.w	r6, r7, sl
 8007580:	42b3      	cmp	r3, r6
 8007582:	b085      	sub	sp, #20
 8007584:	bfb8      	it	lt
 8007586:	3101      	addlt	r1, #1
 8007588:	f7ff fed8 	bl	800733c <_Balloc>
 800758c:	b930      	cbnz	r0, 800759c <__multiply+0x44>
 800758e:	4602      	mov	r2, r0
 8007590:	4b44      	ldr	r3, [pc, #272]	; (80076a4 <__multiply+0x14c>)
 8007592:	4845      	ldr	r0, [pc, #276]	; (80076a8 <__multiply+0x150>)
 8007594:	f240 115d 	movw	r1, #349	; 0x15d
 8007598:	f7fe fec4 	bl	8006324 <__assert_func>
 800759c:	f100 0514 	add.w	r5, r0, #20
 80075a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075a4:	462b      	mov	r3, r5
 80075a6:	2200      	movs	r2, #0
 80075a8:	4543      	cmp	r3, r8
 80075aa:	d321      	bcc.n	80075f0 <__multiply+0x98>
 80075ac:	f104 0314 	add.w	r3, r4, #20
 80075b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80075b4:	f109 0314 	add.w	r3, r9, #20
 80075b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80075bc:	9202      	str	r2, [sp, #8]
 80075be:	1b3a      	subs	r2, r7, r4
 80075c0:	3a15      	subs	r2, #21
 80075c2:	f022 0203 	bic.w	r2, r2, #3
 80075c6:	3204      	adds	r2, #4
 80075c8:	f104 0115 	add.w	r1, r4, #21
 80075cc:	428f      	cmp	r7, r1
 80075ce:	bf38      	it	cc
 80075d0:	2204      	movcc	r2, #4
 80075d2:	9201      	str	r2, [sp, #4]
 80075d4:	9a02      	ldr	r2, [sp, #8]
 80075d6:	9303      	str	r3, [sp, #12]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d80c      	bhi.n	80075f6 <__multiply+0x9e>
 80075dc:	2e00      	cmp	r6, #0
 80075de:	dd03      	ble.n	80075e8 <__multiply+0x90>
 80075e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d05a      	beq.n	800769e <__multiply+0x146>
 80075e8:	6106      	str	r6, [r0, #16]
 80075ea:	b005      	add	sp, #20
 80075ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f0:	f843 2b04 	str.w	r2, [r3], #4
 80075f4:	e7d8      	b.n	80075a8 <__multiply+0x50>
 80075f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80075fa:	f1ba 0f00 	cmp.w	sl, #0
 80075fe:	d024      	beq.n	800764a <__multiply+0xf2>
 8007600:	f104 0e14 	add.w	lr, r4, #20
 8007604:	46a9      	mov	r9, r5
 8007606:	f04f 0c00 	mov.w	ip, #0
 800760a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800760e:	f8d9 1000 	ldr.w	r1, [r9]
 8007612:	fa1f fb82 	uxth.w	fp, r2
 8007616:	b289      	uxth	r1, r1
 8007618:	fb0a 110b 	mla	r1, sl, fp, r1
 800761c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007620:	f8d9 2000 	ldr.w	r2, [r9]
 8007624:	4461      	add	r1, ip
 8007626:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800762a:	fb0a c20b 	mla	r2, sl, fp, ip
 800762e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007632:	b289      	uxth	r1, r1
 8007634:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007638:	4577      	cmp	r7, lr
 800763a:	f849 1b04 	str.w	r1, [r9], #4
 800763e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007642:	d8e2      	bhi.n	800760a <__multiply+0xb2>
 8007644:	9a01      	ldr	r2, [sp, #4]
 8007646:	f845 c002 	str.w	ip, [r5, r2]
 800764a:	9a03      	ldr	r2, [sp, #12]
 800764c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007650:	3304      	adds	r3, #4
 8007652:	f1b9 0f00 	cmp.w	r9, #0
 8007656:	d020      	beq.n	800769a <__multiply+0x142>
 8007658:	6829      	ldr	r1, [r5, #0]
 800765a:	f104 0c14 	add.w	ip, r4, #20
 800765e:	46ae      	mov	lr, r5
 8007660:	f04f 0a00 	mov.w	sl, #0
 8007664:	f8bc b000 	ldrh.w	fp, [ip]
 8007668:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800766c:	fb09 220b 	mla	r2, r9, fp, r2
 8007670:	4492      	add	sl, r2
 8007672:	b289      	uxth	r1, r1
 8007674:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007678:	f84e 1b04 	str.w	r1, [lr], #4
 800767c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007680:	f8be 1000 	ldrh.w	r1, [lr]
 8007684:	0c12      	lsrs	r2, r2, #16
 8007686:	fb09 1102 	mla	r1, r9, r2, r1
 800768a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800768e:	4567      	cmp	r7, ip
 8007690:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007694:	d8e6      	bhi.n	8007664 <__multiply+0x10c>
 8007696:	9a01      	ldr	r2, [sp, #4]
 8007698:	50a9      	str	r1, [r5, r2]
 800769a:	3504      	adds	r5, #4
 800769c:	e79a      	b.n	80075d4 <__multiply+0x7c>
 800769e:	3e01      	subs	r6, #1
 80076a0:	e79c      	b.n	80075dc <__multiply+0x84>
 80076a2:	bf00      	nop
 80076a4:	080085fb 	.word	0x080085fb
 80076a8:	0800860c 	.word	0x0800860c

080076ac <__pow5mult>:
 80076ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b0:	4615      	mov	r5, r2
 80076b2:	f012 0203 	ands.w	r2, r2, #3
 80076b6:	4606      	mov	r6, r0
 80076b8:	460f      	mov	r7, r1
 80076ba:	d007      	beq.n	80076cc <__pow5mult+0x20>
 80076bc:	4c25      	ldr	r4, [pc, #148]	; (8007754 <__pow5mult+0xa8>)
 80076be:	3a01      	subs	r2, #1
 80076c0:	2300      	movs	r3, #0
 80076c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076c6:	f7ff fe9b 	bl	8007400 <__multadd>
 80076ca:	4607      	mov	r7, r0
 80076cc:	10ad      	asrs	r5, r5, #2
 80076ce:	d03d      	beq.n	800774c <__pow5mult+0xa0>
 80076d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076d2:	b97c      	cbnz	r4, 80076f4 <__pow5mult+0x48>
 80076d4:	2010      	movs	r0, #16
 80076d6:	f7ff fe1d 	bl	8007314 <malloc>
 80076da:	4602      	mov	r2, r0
 80076dc:	6270      	str	r0, [r6, #36]	; 0x24
 80076de:	b928      	cbnz	r0, 80076ec <__pow5mult+0x40>
 80076e0:	4b1d      	ldr	r3, [pc, #116]	; (8007758 <__pow5mult+0xac>)
 80076e2:	481e      	ldr	r0, [pc, #120]	; (800775c <__pow5mult+0xb0>)
 80076e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80076e8:	f7fe fe1c 	bl	8006324 <__assert_func>
 80076ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076f0:	6004      	str	r4, [r0, #0]
 80076f2:	60c4      	str	r4, [r0, #12]
 80076f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80076f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076fc:	b94c      	cbnz	r4, 8007712 <__pow5mult+0x66>
 80076fe:	f240 2171 	movw	r1, #625	; 0x271
 8007702:	4630      	mov	r0, r6
 8007704:	f7ff ff12 	bl	800752c <__i2b>
 8007708:	2300      	movs	r3, #0
 800770a:	f8c8 0008 	str.w	r0, [r8, #8]
 800770e:	4604      	mov	r4, r0
 8007710:	6003      	str	r3, [r0, #0]
 8007712:	f04f 0900 	mov.w	r9, #0
 8007716:	07eb      	lsls	r3, r5, #31
 8007718:	d50a      	bpl.n	8007730 <__pow5mult+0x84>
 800771a:	4639      	mov	r1, r7
 800771c:	4622      	mov	r2, r4
 800771e:	4630      	mov	r0, r6
 8007720:	f7ff ff1a 	bl	8007558 <__multiply>
 8007724:	4639      	mov	r1, r7
 8007726:	4680      	mov	r8, r0
 8007728:	4630      	mov	r0, r6
 800772a:	f7ff fe47 	bl	80073bc <_Bfree>
 800772e:	4647      	mov	r7, r8
 8007730:	106d      	asrs	r5, r5, #1
 8007732:	d00b      	beq.n	800774c <__pow5mult+0xa0>
 8007734:	6820      	ldr	r0, [r4, #0]
 8007736:	b938      	cbnz	r0, 8007748 <__pow5mult+0x9c>
 8007738:	4622      	mov	r2, r4
 800773a:	4621      	mov	r1, r4
 800773c:	4630      	mov	r0, r6
 800773e:	f7ff ff0b 	bl	8007558 <__multiply>
 8007742:	6020      	str	r0, [r4, #0]
 8007744:	f8c0 9000 	str.w	r9, [r0]
 8007748:	4604      	mov	r4, r0
 800774a:	e7e4      	b.n	8007716 <__pow5mult+0x6a>
 800774c:	4638      	mov	r0, r7
 800774e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007752:	bf00      	nop
 8007754:	08008758 	.word	0x08008758
 8007758:	08008589 	.word	0x08008589
 800775c:	0800860c 	.word	0x0800860c

08007760 <__lshift>:
 8007760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007764:	460c      	mov	r4, r1
 8007766:	6849      	ldr	r1, [r1, #4]
 8007768:	6923      	ldr	r3, [r4, #16]
 800776a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800776e:	68a3      	ldr	r3, [r4, #8]
 8007770:	4607      	mov	r7, r0
 8007772:	4691      	mov	r9, r2
 8007774:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007778:	f108 0601 	add.w	r6, r8, #1
 800777c:	42b3      	cmp	r3, r6
 800777e:	db0b      	blt.n	8007798 <__lshift+0x38>
 8007780:	4638      	mov	r0, r7
 8007782:	f7ff fddb 	bl	800733c <_Balloc>
 8007786:	4605      	mov	r5, r0
 8007788:	b948      	cbnz	r0, 800779e <__lshift+0x3e>
 800778a:	4602      	mov	r2, r0
 800778c:	4b2a      	ldr	r3, [pc, #168]	; (8007838 <__lshift+0xd8>)
 800778e:	482b      	ldr	r0, [pc, #172]	; (800783c <__lshift+0xdc>)
 8007790:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007794:	f7fe fdc6 	bl	8006324 <__assert_func>
 8007798:	3101      	adds	r1, #1
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	e7ee      	b.n	800777c <__lshift+0x1c>
 800779e:	2300      	movs	r3, #0
 80077a0:	f100 0114 	add.w	r1, r0, #20
 80077a4:	f100 0210 	add.w	r2, r0, #16
 80077a8:	4618      	mov	r0, r3
 80077aa:	4553      	cmp	r3, sl
 80077ac:	db37      	blt.n	800781e <__lshift+0xbe>
 80077ae:	6920      	ldr	r0, [r4, #16]
 80077b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077b4:	f104 0314 	add.w	r3, r4, #20
 80077b8:	f019 091f 	ands.w	r9, r9, #31
 80077bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80077c4:	d02f      	beq.n	8007826 <__lshift+0xc6>
 80077c6:	f1c9 0e20 	rsb	lr, r9, #32
 80077ca:	468a      	mov	sl, r1
 80077cc:	f04f 0c00 	mov.w	ip, #0
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	fa02 f209 	lsl.w	r2, r2, r9
 80077d6:	ea42 020c 	orr.w	r2, r2, ip
 80077da:	f84a 2b04 	str.w	r2, [sl], #4
 80077de:	f853 2b04 	ldr.w	r2, [r3], #4
 80077e2:	4298      	cmp	r0, r3
 80077e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80077e8:	d8f2      	bhi.n	80077d0 <__lshift+0x70>
 80077ea:	1b03      	subs	r3, r0, r4
 80077ec:	3b15      	subs	r3, #21
 80077ee:	f023 0303 	bic.w	r3, r3, #3
 80077f2:	3304      	adds	r3, #4
 80077f4:	f104 0215 	add.w	r2, r4, #21
 80077f8:	4290      	cmp	r0, r2
 80077fa:	bf38      	it	cc
 80077fc:	2304      	movcc	r3, #4
 80077fe:	f841 c003 	str.w	ip, [r1, r3]
 8007802:	f1bc 0f00 	cmp.w	ip, #0
 8007806:	d001      	beq.n	800780c <__lshift+0xac>
 8007808:	f108 0602 	add.w	r6, r8, #2
 800780c:	3e01      	subs	r6, #1
 800780e:	4638      	mov	r0, r7
 8007810:	612e      	str	r6, [r5, #16]
 8007812:	4621      	mov	r1, r4
 8007814:	f7ff fdd2 	bl	80073bc <_Bfree>
 8007818:	4628      	mov	r0, r5
 800781a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800781e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007822:	3301      	adds	r3, #1
 8007824:	e7c1      	b.n	80077aa <__lshift+0x4a>
 8007826:	3904      	subs	r1, #4
 8007828:	f853 2b04 	ldr.w	r2, [r3], #4
 800782c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007830:	4298      	cmp	r0, r3
 8007832:	d8f9      	bhi.n	8007828 <__lshift+0xc8>
 8007834:	e7ea      	b.n	800780c <__lshift+0xac>
 8007836:	bf00      	nop
 8007838:	080085fb 	.word	0x080085fb
 800783c:	0800860c 	.word	0x0800860c

08007840 <__mcmp>:
 8007840:	b530      	push	{r4, r5, lr}
 8007842:	6902      	ldr	r2, [r0, #16]
 8007844:	690c      	ldr	r4, [r1, #16]
 8007846:	1b12      	subs	r2, r2, r4
 8007848:	d10e      	bne.n	8007868 <__mcmp+0x28>
 800784a:	f100 0314 	add.w	r3, r0, #20
 800784e:	3114      	adds	r1, #20
 8007850:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007854:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007858:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800785c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007860:	42a5      	cmp	r5, r4
 8007862:	d003      	beq.n	800786c <__mcmp+0x2c>
 8007864:	d305      	bcc.n	8007872 <__mcmp+0x32>
 8007866:	2201      	movs	r2, #1
 8007868:	4610      	mov	r0, r2
 800786a:	bd30      	pop	{r4, r5, pc}
 800786c:	4283      	cmp	r3, r0
 800786e:	d3f3      	bcc.n	8007858 <__mcmp+0x18>
 8007870:	e7fa      	b.n	8007868 <__mcmp+0x28>
 8007872:	f04f 32ff 	mov.w	r2, #4294967295
 8007876:	e7f7      	b.n	8007868 <__mcmp+0x28>

08007878 <__mdiff>:
 8007878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	460c      	mov	r4, r1
 800787e:	4606      	mov	r6, r0
 8007880:	4611      	mov	r1, r2
 8007882:	4620      	mov	r0, r4
 8007884:	4690      	mov	r8, r2
 8007886:	f7ff ffdb 	bl	8007840 <__mcmp>
 800788a:	1e05      	subs	r5, r0, #0
 800788c:	d110      	bne.n	80078b0 <__mdiff+0x38>
 800788e:	4629      	mov	r1, r5
 8007890:	4630      	mov	r0, r6
 8007892:	f7ff fd53 	bl	800733c <_Balloc>
 8007896:	b930      	cbnz	r0, 80078a6 <__mdiff+0x2e>
 8007898:	4b3a      	ldr	r3, [pc, #232]	; (8007984 <__mdiff+0x10c>)
 800789a:	4602      	mov	r2, r0
 800789c:	f240 2132 	movw	r1, #562	; 0x232
 80078a0:	4839      	ldr	r0, [pc, #228]	; (8007988 <__mdiff+0x110>)
 80078a2:	f7fe fd3f 	bl	8006324 <__assert_func>
 80078a6:	2301      	movs	r3, #1
 80078a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b0:	bfa4      	itt	ge
 80078b2:	4643      	movge	r3, r8
 80078b4:	46a0      	movge	r8, r4
 80078b6:	4630      	mov	r0, r6
 80078b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078bc:	bfa6      	itte	ge
 80078be:	461c      	movge	r4, r3
 80078c0:	2500      	movge	r5, #0
 80078c2:	2501      	movlt	r5, #1
 80078c4:	f7ff fd3a 	bl	800733c <_Balloc>
 80078c8:	b920      	cbnz	r0, 80078d4 <__mdiff+0x5c>
 80078ca:	4b2e      	ldr	r3, [pc, #184]	; (8007984 <__mdiff+0x10c>)
 80078cc:	4602      	mov	r2, r0
 80078ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 80078d2:	e7e5      	b.n	80078a0 <__mdiff+0x28>
 80078d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80078d8:	6926      	ldr	r6, [r4, #16]
 80078da:	60c5      	str	r5, [r0, #12]
 80078dc:	f104 0914 	add.w	r9, r4, #20
 80078e0:	f108 0514 	add.w	r5, r8, #20
 80078e4:	f100 0e14 	add.w	lr, r0, #20
 80078e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80078ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80078f0:	f108 0210 	add.w	r2, r8, #16
 80078f4:	46f2      	mov	sl, lr
 80078f6:	2100      	movs	r1, #0
 80078f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80078fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007900:	fa1f f883 	uxth.w	r8, r3
 8007904:	fa11 f18b 	uxtah	r1, r1, fp
 8007908:	0c1b      	lsrs	r3, r3, #16
 800790a:	eba1 0808 	sub.w	r8, r1, r8
 800790e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007912:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007916:	fa1f f888 	uxth.w	r8, r8
 800791a:	1419      	asrs	r1, r3, #16
 800791c:	454e      	cmp	r6, r9
 800791e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007922:	f84a 3b04 	str.w	r3, [sl], #4
 8007926:	d8e7      	bhi.n	80078f8 <__mdiff+0x80>
 8007928:	1b33      	subs	r3, r6, r4
 800792a:	3b15      	subs	r3, #21
 800792c:	f023 0303 	bic.w	r3, r3, #3
 8007930:	3304      	adds	r3, #4
 8007932:	3415      	adds	r4, #21
 8007934:	42a6      	cmp	r6, r4
 8007936:	bf38      	it	cc
 8007938:	2304      	movcc	r3, #4
 800793a:	441d      	add	r5, r3
 800793c:	4473      	add	r3, lr
 800793e:	469e      	mov	lr, r3
 8007940:	462e      	mov	r6, r5
 8007942:	4566      	cmp	r6, ip
 8007944:	d30e      	bcc.n	8007964 <__mdiff+0xec>
 8007946:	f10c 0203 	add.w	r2, ip, #3
 800794a:	1b52      	subs	r2, r2, r5
 800794c:	f022 0203 	bic.w	r2, r2, #3
 8007950:	3d03      	subs	r5, #3
 8007952:	45ac      	cmp	ip, r5
 8007954:	bf38      	it	cc
 8007956:	2200      	movcc	r2, #0
 8007958:	441a      	add	r2, r3
 800795a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800795e:	b17b      	cbz	r3, 8007980 <__mdiff+0x108>
 8007960:	6107      	str	r7, [r0, #16]
 8007962:	e7a3      	b.n	80078ac <__mdiff+0x34>
 8007964:	f856 8b04 	ldr.w	r8, [r6], #4
 8007968:	fa11 f288 	uxtah	r2, r1, r8
 800796c:	1414      	asrs	r4, r2, #16
 800796e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007972:	b292      	uxth	r2, r2
 8007974:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007978:	f84e 2b04 	str.w	r2, [lr], #4
 800797c:	1421      	asrs	r1, r4, #16
 800797e:	e7e0      	b.n	8007942 <__mdiff+0xca>
 8007980:	3f01      	subs	r7, #1
 8007982:	e7ea      	b.n	800795a <__mdiff+0xe2>
 8007984:	080085fb 	.word	0x080085fb
 8007988:	0800860c 	.word	0x0800860c

0800798c <__d2b>:
 800798c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007990:	4689      	mov	r9, r1
 8007992:	2101      	movs	r1, #1
 8007994:	ec57 6b10 	vmov	r6, r7, d0
 8007998:	4690      	mov	r8, r2
 800799a:	f7ff fccf 	bl	800733c <_Balloc>
 800799e:	4604      	mov	r4, r0
 80079a0:	b930      	cbnz	r0, 80079b0 <__d2b+0x24>
 80079a2:	4602      	mov	r2, r0
 80079a4:	4b25      	ldr	r3, [pc, #148]	; (8007a3c <__d2b+0xb0>)
 80079a6:	4826      	ldr	r0, [pc, #152]	; (8007a40 <__d2b+0xb4>)
 80079a8:	f240 310a 	movw	r1, #778	; 0x30a
 80079ac:	f7fe fcba 	bl	8006324 <__assert_func>
 80079b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80079b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079b8:	bb35      	cbnz	r5, 8007a08 <__d2b+0x7c>
 80079ba:	2e00      	cmp	r6, #0
 80079bc:	9301      	str	r3, [sp, #4]
 80079be:	d028      	beq.n	8007a12 <__d2b+0x86>
 80079c0:	4668      	mov	r0, sp
 80079c2:	9600      	str	r6, [sp, #0]
 80079c4:	f7ff fd82 	bl	80074cc <__lo0bits>
 80079c8:	9900      	ldr	r1, [sp, #0]
 80079ca:	b300      	cbz	r0, 8007a0e <__d2b+0x82>
 80079cc:	9a01      	ldr	r2, [sp, #4]
 80079ce:	f1c0 0320 	rsb	r3, r0, #32
 80079d2:	fa02 f303 	lsl.w	r3, r2, r3
 80079d6:	430b      	orrs	r3, r1
 80079d8:	40c2      	lsrs	r2, r0
 80079da:	6163      	str	r3, [r4, #20]
 80079dc:	9201      	str	r2, [sp, #4]
 80079de:	9b01      	ldr	r3, [sp, #4]
 80079e0:	61a3      	str	r3, [r4, #24]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	bf14      	ite	ne
 80079e6:	2202      	movne	r2, #2
 80079e8:	2201      	moveq	r2, #1
 80079ea:	6122      	str	r2, [r4, #16]
 80079ec:	b1d5      	cbz	r5, 8007a24 <__d2b+0x98>
 80079ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079f2:	4405      	add	r5, r0
 80079f4:	f8c9 5000 	str.w	r5, [r9]
 80079f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079fc:	f8c8 0000 	str.w	r0, [r8]
 8007a00:	4620      	mov	r0, r4
 8007a02:	b003      	add	sp, #12
 8007a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a0c:	e7d5      	b.n	80079ba <__d2b+0x2e>
 8007a0e:	6161      	str	r1, [r4, #20]
 8007a10:	e7e5      	b.n	80079de <__d2b+0x52>
 8007a12:	a801      	add	r0, sp, #4
 8007a14:	f7ff fd5a 	bl	80074cc <__lo0bits>
 8007a18:	9b01      	ldr	r3, [sp, #4]
 8007a1a:	6163      	str	r3, [r4, #20]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	6122      	str	r2, [r4, #16]
 8007a20:	3020      	adds	r0, #32
 8007a22:	e7e3      	b.n	80079ec <__d2b+0x60>
 8007a24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a2c:	f8c9 0000 	str.w	r0, [r9]
 8007a30:	6918      	ldr	r0, [r3, #16]
 8007a32:	f7ff fd2b 	bl	800748c <__hi0bits>
 8007a36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a3a:	e7df      	b.n	80079fc <__d2b+0x70>
 8007a3c:	080085fb 	.word	0x080085fb
 8007a40:	0800860c 	.word	0x0800860c

08007a44 <_calloc_r>:
 8007a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a46:	fba1 2402 	umull	r2, r4, r1, r2
 8007a4a:	b94c      	cbnz	r4, 8007a60 <_calloc_r+0x1c>
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	9201      	str	r2, [sp, #4]
 8007a50:	f7fd fe44 	bl	80056dc <_malloc_r>
 8007a54:	9a01      	ldr	r2, [sp, #4]
 8007a56:	4605      	mov	r5, r0
 8007a58:	b930      	cbnz	r0, 8007a68 <_calloc_r+0x24>
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	b003      	add	sp, #12
 8007a5e:	bd30      	pop	{r4, r5, pc}
 8007a60:	220c      	movs	r2, #12
 8007a62:	6002      	str	r2, [r0, #0]
 8007a64:	2500      	movs	r5, #0
 8007a66:	e7f8      	b.n	8007a5a <_calloc_r+0x16>
 8007a68:	4621      	mov	r1, r4
 8007a6a:	f7fd fe0e 	bl	800568a <memset>
 8007a6e:	e7f4      	b.n	8007a5a <_calloc_r+0x16>

08007a70 <_free_r>:
 8007a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a72:	2900      	cmp	r1, #0
 8007a74:	d044      	beq.n	8007b00 <_free_r+0x90>
 8007a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a7a:	9001      	str	r0, [sp, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a82:	bfb8      	it	lt
 8007a84:	18e4      	addlt	r4, r4, r3
 8007a86:	f7ff fc4d 	bl	8007324 <__malloc_lock>
 8007a8a:	4a1e      	ldr	r2, [pc, #120]	; (8007b04 <_free_r+0x94>)
 8007a8c:	9801      	ldr	r0, [sp, #4]
 8007a8e:	6813      	ldr	r3, [r2, #0]
 8007a90:	b933      	cbnz	r3, 8007aa0 <_free_r+0x30>
 8007a92:	6063      	str	r3, [r4, #4]
 8007a94:	6014      	str	r4, [r2, #0]
 8007a96:	b003      	add	sp, #12
 8007a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a9c:	f7ff bc48 	b.w	8007330 <__malloc_unlock>
 8007aa0:	42a3      	cmp	r3, r4
 8007aa2:	d908      	bls.n	8007ab6 <_free_r+0x46>
 8007aa4:	6825      	ldr	r5, [r4, #0]
 8007aa6:	1961      	adds	r1, r4, r5
 8007aa8:	428b      	cmp	r3, r1
 8007aaa:	bf01      	itttt	eq
 8007aac:	6819      	ldreq	r1, [r3, #0]
 8007aae:	685b      	ldreq	r3, [r3, #4]
 8007ab0:	1949      	addeq	r1, r1, r5
 8007ab2:	6021      	streq	r1, [r4, #0]
 8007ab4:	e7ed      	b.n	8007a92 <_free_r+0x22>
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	b10b      	cbz	r3, 8007ac0 <_free_r+0x50>
 8007abc:	42a3      	cmp	r3, r4
 8007abe:	d9fa      	bls.n	8007ab6 <_free_r+0x46>
 8007ac0:	6811      	ldr	r1, [r2, #0]
 8007ac2:	1855      	adds	r5, r2, r1
 8007ac4:	42a5      	cmp	r5, r4
 8007ac6:	d10b      	bne.n	8007ae0 <_free_r+0x70>
 8007ac8:	6824      	ldr	r4, [r4, #0]
 8007aca:	4421      	add	r1, r4
 8007acc:	1854      	adds	r4, r2, r1
 8007ace:	42a3      	cmp	r3, r4
 8007ad0:	6011      	str	r1, [r2, #0]
 8007ad2:	d1e0      	bne.n	8007a96 <_free_r+0x26>
 8007ad4:	681c      	ldr	r4, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	6053      	str	r3, [r2, #4]
 8007ada:	4421      	add	r1, r4
 8007adc:	6011      	str	r1, [r2, #0]
 8007ade:	e7da      	b.n	8007a96 <_free_r+0x26>
 8007ae0:	d902      	bls.n	8007ae8 <_free_r+0x78>
 8007ae2:	230c      	movs	r3, #12
 8007ae4:	6003      	str	r3, [r0, #0]
 8007ae6:	e7d6      	b.n	8007a96 <_free_r+0x26>
 8007ae8:	6825      	ldr	r5, [r4, #0]
 8007aea:	1961      	adds	r1, r4, r5
 8007aec:	428b      	cmp	r3, r1
 8007aee:	bf04      	itt	eq
 8007af0:	6819      	ldreq	r1, [r3, #0]
 8007af2:	685b      	ldreq	r3, [r3, #4]
 8007af4:	6063      	str	r3, [r4, #4]
 8007af6:	bf04      	itt	eq
 8007af8:	1949      	addeq	r1, r1, r5
 8007afa:	6021      	streq	r1, [r4, #0]
 8007afc:	6054      	str	r4, [r2, #4]
 8007afe:	e7ca      	b.n	8007a96 <_free_r+0x26>
 8007b00:	b003      	add	sp, #12
 8007b02:	bd30      	pop	{r4, r5, pc}
 8007b04:	20000500 	.word	0x20000500

08007b08 <__ssputs_r>:
 8007b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b0c:	688e      	ldr	r6, [r1, #8]
 8007b0e:	429e      	cmp	r6, r3
 8007b10:	4682      	mov	sl, r0
 8007b12:	460c      	mov	r4, r1
 8007b14:	4690      	mov	r8, r2
 8007b16:	461f      	mov	r7, r3
 8007b18:	d838      	bhi.n	8007b8c <__ssputs_r+0x84>
 8007b1a:	898a      	ldrh	r2, [r1, #12]
 8007b1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b20:	d032      	beq.n	8007b88 <__ssputs_r+0x80>
 8007b22:	6825      	ldr	r5, [r4, #0]
 8007b24:	6909      	ldr	r1, [r1, #16]
 8007b26:	eba5 0901 	sub.w	r9, r5, r1
 8007b2a:	6965      	ldr	r5, [r4, #20]
 8007b2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b34:	3301      	adds	r3, #1
 8007b36:	444b      	add	r3, r9
 8007b38:	106d      	asrs	r5, r5, #1
 8007b3a:	429d      	cmp	r5, r3
 8007b3c:	bf38      	it	cc
 8007b3e:	461d      	movcc	r5, r3
 8007b40:	0553      	lsls	r3, r2, #21
 8007b42:	d531      	bpl.n	8007ba8 <__ssputs_r+0xa0>
 8007b44:	4629      	mov	r1, r5
 8007b46:	f7fd fdc9 	bl	80056dc <_malloc_r>
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	b950      	cbnz	r0, 8007b64 <__ssputs_r+0x5c>
 8007b4e:	230c      	movs	r3, #12
 8007b50:	f8ca 3000 	str.w	r3, [sl]
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b5a:	81a3      	strh	r3, [r4, #12]
 8007b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b64:	6921      	ldr	r1, [r4, #16]
 8007b66:	464a      	mov	r2, r9
 8007b68:	f7fd fd81 	bl	800566e <memcpy>
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	6126      	str	r6, [r4, #16]
 8007b7a:	6165      	str	r5, [r4, #20]
 8007b7c:	444e      	add	r6, r9
 8007b7e:	eba5 0509 	sub.w	r5, r5, r9
 8007b82:	6026      	str	r6, [r4, #0]
 8007b84:	60a5      	str	r5, [r4, #8]
 8007b86:	463e      	mov	r6, r7
 8007b88:	42be      	cmp	r6, r7
 8007b8a:	d900      	bls.n	8007b8e <__ssputs_r+0x86>
 8007b8c:	463e      	mov	r6, r7
 8007b8e:	6820      	ldr	r0, [r4, #0]
 8007b90:	4632      	mov	r2, r6
 8007b92:	4641      	mov	r1, r8
 8007b94:	f000 fabc 	bl	8008110 <memmove>
 8007b98:	68a3      	ldr	r3, [r4, #8]
 8007b9a:	1b9b      	subs	r3, r3, r6
 8007b9c:	60a3      	str	r3, [r4, #8]
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	4433      	add	r3, r6
 8007ba2:	6023      	str	r3, [r4, #0]
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	e7db      	b.n	8007b60 <__ssputs_r+0x58>
 8007ba8:	462a      	mov	r2, r5
 8007baa:	f000 facb 	bl	8008144 <_realloc_r>
 8007bae:	4606      	mov	r6, r0
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d1e1      	bne.n	8007b78 <__ssputs_r+0x70>
 8007bb4:	6921      	ldr	r1, [r4, #16]
 8007bb6:	4650      	mov	r0, sl
 8007bb8:	f7ff ff5a 	bl	8007a70 <_free_r>
 8007bbc:	e7c7      	b.n	8007b4e <__ssputs_r+0x46>
	...

08007bc0 <_svfiprintf_r>:
 8007bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc4:	4698      	mov	r8, r3
 8007bc6:	898b      	ldrh	r3, [r1, #12]
 8007bc8:	061b      	lsls	r3, r3, #24
 8007bca:	b09d      	sub	sp, #116	; 0x74
 8007bcc:	4607      	mov	r7, r0
 8007bce:	460d      	mov	r5, r1
 8007bd0:	4614      	mov	r4, r2
 8007bd2:	d50e      	bpl.n	8007bf2 <_svfiprintf_r+0x32>
 8007bd4:	690b      	ldr	r3, [r1, #16]
 8007bd6:	b963      	cbnz	r3, 8007bf2 <_svfiprintf_r+0x32>
 8007bd8:	2140      	movs	r1, #64	; 0x40
 8007bda:	f7fd fd7f 	bl	80056dc <_malloc_r>
 8007bde:	6028      	str	r0, [r5, #0]
 8007be0:	6128      	str	r0, [r5, #16]
 8007be2:	b920      	cbnz	r0, 8007bee <_svfiprintf_r+0x2e>
 8007be4:	230c      	movs	r3, #12
 8007be6:	603b      	str	r3, [r7, #0]
 8007be8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bec:	e0d1      	b.n	8007d92 <_svfiprintf_r+0x1d2>
 8007bee:	2340      	movs	r3, #64	; 0x40
 8007bf0:	616b      	str	r3, [r5, #20]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf6:	2320      	movs	r3, #32
 8007bf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c00:	2330      	movs	r3, #48	; 0x30
 8007c02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007dac <_svfiprintf_r+0x1ec>
 8007c06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c0a:	f04f 0901 	mov.w	r9, #1
 8007c0e:	4623      	mov	r3, r4
 8007c10:	469a      	mov	sl, r3
 8007c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c16:	b10a      	cbz	r2, 8007c1c <_svfiprintf_r+0x5c>
 8007c18:	2a25      	cmp	r2, #37	; 0x25
 8007c1a:	d1f9      	bne.n	8007c10 <_svfiprintf_r+0x50>
 8007c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c20:	d00b      	beq.n	8007c3a <_svfiprintf_r+0x7a>
 8007c22:	465b      	mov	r3, fp
 8007c24:	4622      	mov	r2, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	4638      	mov	r0, r7
 8007c2a:	f7ff ff6d 	bl	8007b08 <__ssputs_r>
 8007c2e:	3001      	adds	r0, #1
 8007c30:	f000 80aa 	beq.w	8007d88 <_svfiprintf_r+0x1c8>
 8007c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c36:	445a      	add	r2, fp
 8007c38:	9209      	str	r2, [sp, #36]	; 0x24
 8007c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80a2 	beq.w	8007d88 <_svfiprintf_r+0x1c8>
 8007c44:	2300      	movs	r3, #0
 8007c46:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c4e:	f10a 0a01 	add.w	sl, sl, #1
 8007c52:	9304      	str	r3, [sp, #16]
 8007c54:	9307      	str	r3, [sp, #28]
 8007c56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c5a:	931a      	str	r3, [sp, #104]	; 0x68
 8007c5c:	4654      	mov	r4, sl
 8007c5e:	2205      	movs	r2, #5
 8007c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c64:	4851      	ldr	r0, [pc, #324]	; (8007dac <_svfiprintf_r+0x1ec>)
 8007c66:	f7f8 fabb 	bl	80001e0 <memchr>
 8007c6a:	9a04      	ldr	r2, [sp, #16]
 8007c6c:	b9d8      	cbnz	r0, 8007ca6 <_svfiprintf_r+0xe6>
 8007c6e:	06d0      	lsls	r0, r2, #27
 8007c70:	bf44      	itt	mi
 8007c72:	2320      	movmi	r3, #32
 8007c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c78:	0711      	lsls	r1, r2, #28
 8007c7a:	bf44      	itt	mi
 8007c7c:	232b      	movmi	r3, #43	; 0x2b
 8007c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c82:	f89a 3000 	ldrb.w	r3, [sl]
 8007c86:	2b2a      	cmp	r3, #42	; 0x2a
 8007c88:	d015      	beq.n	8007cb6 <_svfiprintf_r+0xf6>
 8007c8a:	9a07      	ldr	r2, [sp, #28]
 8007c8c:	4654      	mov	r4, sl
 8007c8e:	2000      	movs	r0, #0
 8007c90:	f04f 0c0a 	mov.w	ip, #10
 8007c94:	4621      	mov	r1, r4
 8007c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c9a:	3b30      	subs	r3, #48	; 0x30
 8007c9c:	2b09      	cmp	r3, #9
 8007c9e:	d94e      	bls.n	8007d3e <_svfiprintf_r+0x17e>
 8007ca0:	b1b0      	cbz	r0, 8007cd0 <_svfiprintf_r+0x110>
 8007ca2:	9207      	str	r2, [sp, #28]
 8007ca4:	e014      	b.n	8007cd0 <_svfiprintf_r+0x110>
 8007ca6:	eba0 0308 	sub.w	r3, r0, r8
 8007caa:	fa09 f303 	lsl.w	r3, r9, r3
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	46a2      	mov	sl, r4
 8007cb4:	e7d2      	b.n	8007c5c <_svfiprintf_r+0x9c>
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	1d19      	adds	r1, r3, #4
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	9103      	str	r1, [sp, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bfbb      	ittet	lt
 8007cc2:	425b      	neglt	r3, r3
 8007cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8007cc8:	9307      	strge	r3, [sp, #28]
 8007cca:	9307      	strlt	r3, [sp, #28]
 8007ccc:	bfb8      	it	lt
 8007cce:	9204      	strlt	r2, [sp, #16]
 8007cd0:	7823      	ldrb	r3, [r4, #0]
 8007cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8007cd4:	d10c      	bne.n	8007cf0 <_svfiprintf_r+0x130>
 8007cd6:	7863      	ldrb	r3, [r4, #1]
 8007cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cda:	d135      	bne.n	8007d48 <_svfiprintf_r+0x188>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	1d1a      	adds	r2, r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	9203      	str	r2, [sp, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	bfb8      	it	lt
 8007ce8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cec:	3402      	adds	r4, #2
 8007cee:	9305      	str	r3, [sp, #20]
 8007cf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007dbc <_svfiprintf_r+0x1fc>
 8007cf4:	7821      	ldrb	r1, [r4, #0]
 8007cf6:	2203      	movs	r2, #3
 8007cf8:	4650      	mov	r0, sl
 8007cfa:	f7f8 fa71 	bl	80001e0 <memchr>
 8007cfe:	b140      	cbz	r0, 8007d12 <_svfiprintf_r+0x152>
 8007d00:	2340      	movs	r3, #64	; 0x40
 8007d02:	eba0 000a 	sub.w	r0, r0, sl
 8007d06:	fa03 f000 	lsl.w	r0, r3, r0
 8007d0a:	9b04      	ldr	r3, [sp, #16]
 8007d0c:	4303      	orrs	r3, r0
 8007d0e:	3401      	adds	r4, #1
 8007d10:	9304      	str	r3, [sp, #16]
 8007d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d16:	4826      	ldr	r0, [pc, #152]	; (8007db0 <_svfiprintf_r+0x1f0>)
 8007d18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d1c:	2206      	movs	r2, #6
 8007d1e:	f7f8 fa5f 	bl	80001e0 <memchr>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d038      	beq.n	8007d98 <_svfiprintf_r+0x1d8>
 8007d26:	4b23      	ldr	r3, [pc, #140]	; (8007db4 <_svfiprintf_r+0x1f4>)
 8007d28:	bb1b      	cbnz	r3, 8007d72 <_svfiprintf_r+0x1b2>
 8007d2a:	9b03      	ldr	r3, [sp, #12]
 8007d2c:	3307      	adds	r3, #7
 8007d2e:	f023 0307 	bic.w	r3, r3, #7
 8007d32:	3308      	adds	r3, #8
 8007d34:	9303      	str	r3, [sp, #12]
 8007d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d38:	4433      	add	r3, r6
 8007d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d3c:	e767      	b.n	8007c0e <_svfiprintf_r+0x4e>
 8007d3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d42:	460c      	mov	r4, r1
 8007d44:	2001      	movs	r0, #1
 8007d46:	e7a5      	b.n	8007c94 <_svfiprintf_r+0xd4>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	3401      	adds	r4, #1
 8007d4c:	9305      	str	r3, [sp, #20]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	f04f 0c0a 	mov.w	ip, #10
 8007d54:	4620      	mov	r0, r4
 8007d56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d5a:	3a30      	subs	r2, #48	; 0x30
 8007d5c:	2a09      	cmp	r2, #9
 8007d5e:	d903      	bls.n	8007d68 <_svfiprintf_r+0x1a8>
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0c5      	beq.n	8007cf0 <_svfiprintf_r+0x130>
 8007d64:	9105      	str	r1, [sp, #20]
 8007d66:	e7c3      	b.n	8007cf0 <_svfiprintf_r+0x130>
 8007d68:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e7f0      	b.n	8007d54 <_svfiprintf_r+0x194>
 8007d72:	ab03      	add	r3, sp, #12
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	462a      	mov	r2, r5
 8007d78:	4b0f      	ldr	r3, [pc, #60]	; (8007db8 <_svfiprintf_r+0x1f8>)
 8007d7a:	a904      	add	r1, sp, #16
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	f7fd fdc1 	bl	8005904 <_printf_float>
 8007d82:	1c42      	adds	r2, r0, #1
 8007d84:	4606      	mov	r6, r0
 8007d86:	d1d6      	bne.n	8007d36 <_svfiprintf_r+0x176>
 8007d88:	89ab      	ldrh	r3, [r5, #12]
 8007d8a:	065b      	lsls	r3, r3, #25
 8007d8c:	f53f af2c 	bmi.w	8007be8 <_svfiprintf_r+0x28>
 8007d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d92:	b01d      	add	sp, #116	; 0x74
 8007d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d98:	ab03      	add	r3, sp, #12
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	462a      	mov	r2, r5
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <_svfiprintf_r+0x1f8>)
 8007da0:	a904      	add	r1, sp, #16
 8007da2:	4638      	mov	r0, r7
 8007da4:	f7fe f852 	bl	8005e4c <_printf_i>
 8007da8:	e7eb      	b.n	8007d82 <_svfiprintf_r+0x1c2>
 8007daa:	bf00      	nop
 8007dac:	08008764 	.word	0x08008764
 8007db0:	0800876e 	.word	0x0800876e
 8007db4:	08005905 	.word	0x08005905
 8007db8:	08007b09 	.word	0x08007b09
 8007dbc:	0800876a 	.word	0x0800876a

08007dc0 <__sfputc_r>:
 8007dc0:	6893      	ldr	r3, [r2, #8]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	b410      	push	{r4}
 8007dc8:	6093      	str	r3, [r2, #8]
 8007dca:	da08      	bge.n	8007dde <__sfputc_r+0x1e>
 8007dcc:	6994      	ldr	r4, [r2, #24]
 8007dce:	42a3      	cmp	r3, r4
 8007dd0:	db01      	blt.n	8007dd6 <__sfputc_r+0x16>
 8007dd2:	290a      	cmp	r1, #10
 8007dd4:	d103      	bne.n	8007dde <__sfputc_r+0x1e>
 8007dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dda:	f7fe b9d1 	b.w	8006180 <__swbuf_r>
 8007dde:	6813      	ldr	r3, [r2, #0]
 8007de0:	1c58      	adds	r0, r3, #1
 8007de2:	6010      	str	r0, [r2, #0]
 8007de4:	7019      	strb	r1, [r3, #0]
 8007de6:	4608      	mov	r0, r1
 8007de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <__sfputs_r>:
 8007dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df0:	4606      	mov	r6, r0
 8007df2:	460f      	mov	r7, r1
 8007df4:	4614      	mov	r4, r2
 8007df6:	18d5      	adds	r5, r2, r3
 8007df8:	42ac      	cmp	r4, r5
 8007dfa:	d101      	bne.n	8007e00 <__sfputs_r+0x12>
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	e007      	b.n	8007e10 <__sfputs_r+0x22>
 8007e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e04:	463a      	mov	r2, r7
 8007e06:	4630      	mov	r0, r6
 8007e08:	f7ff ffda 	bl	8007dc0 <__sfputc_r>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	d1f3      	bne.n	8007df8 <__sfputs_r+0xa>
 8007e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e14 <_vfiprintf_r>:
 8007e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	460d      	mov	r5, r1
 8007e1a:	b09d      	sub	sp, #116	; 0x74
 8007e1c:	4614      	mov	r4, r2
 8007e1e:	4698      	mov	r8, r3
 8007e20:	4606      	mov	r6, r0
 8007e22:	b118      	cbz	r0, 8007e2c <_vfiprintf_r+0x18>
 8007e24:	6983      	ldr	r3, [r0, #24]
 8007e26:	b90b      	cbnz	r3, 8007e2c <_vfiprintf_r+0x18>
 8007e28:	f7fd fb5c 	bl	80054e4 <__sinit>
 8007e2c:	4b89      	ldr	r3, [pc, #548]	; (8008054 <_vfiprintf_r+0x240>)
 8007e2e:	429d      	cmp	r5, r3
 8007e30:	d11b      	bne.n	8007e6a <_vfiprintf_r+0x56>
 8007e32:	6875      	ldr	r5, [r6, #4]
 8007e34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e36:	07d9      	lsls	r1, r3, #31
 8007e38:	d405      	bmi.n	8007e46 <_vfiprintf_r+0x32>
 8007e3a:	89ab      	ldrh	r3, [r5, #12]
 8007e3c:	059a      	lsls	r2, r3, #22
 8007e3e:	d402      	bmi.n	8007e46 <_vfiprintf_r+0x32>
 8007e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e42:	f7fd fc12 	bl	800566a <__retarget_lock_acquire_recursive>
 8007e46:	89ab      	ldrh	r3, [r5, #12]
 8007e48:	071b      	lsls	r3, r3, #28
 8007e4a:	d501      	bpl.n	8007e50 <_vfiprintf_r+0x3c>
 8007e4c:	692b      	ldr	r3, [r5, #16]
 8007e4e:	b9eb      	cbnz	r3, 8007e8c <_vfiprintf_r+0x78>
 8007e50:	4629      	mov	r1, r5
 8007e52:	4630      	mov	r0, r6
 8007e54:	f7fe f9f8 	bl	8006248 <__swsetup_r>
 8007e58:	b1c0      	cbz	r0, 8007e8c <_vfiprintf_r+0x78>
 8007e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e5c:	07dc      	lsls	r4, r3, #31
 8007e5e:	d50e      	bpl.n	8007e7e <_vfiprintf_r+0x6a>
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295
 8007e64:	b01d      	add	sp, #116	; 0x74
 8007e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6a:	4b7b      	ldr	r3, [pc, #492]	; (8008058 <_vfiprintf_r+0x244>)
 8007e6c:	429d      	cmp	r5, r3
 8007e6e:	d101      	bne.n	8007e74 <_vfiprintf_r+0x60>
 8007e70:	68b5      	ldr	r5, [r6, #8]
 8007e72:	e7df      	b.n	8007e34 <_vfiprintf_r+0x20>
 8007e74:	4b79      	ldr	r3, [pc, #484]	; (800805c <_vfiprintf_r+0x248>)
 8007e76:	429d      	cmp	r5, r3
 8007e78:	bf08      	it	eq
 8007e7a:	68f5      	ldreq	r5, [r6, #12]
 8007e7c:	e7da      	b.n	8007e34 <_vfiprintf_r+0x20>
 8007e7e:	89ab      	ldrh	r3, [r5, #12]
 8007e80:	0598      	lsls	r0, r3, #22
 8007e82:	d4ed      	bmi.n	8007e60 <_vfiprintf_r+0x4c>
 8007e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e86:	f7fd fbf1 	bl	800566c <__retarget_lock_release_recursive>
 8007e8a:	e7e9      	b.n	8007e60 <_vfiprintf_r+0x4c>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e90:	2320      	movs	r3, #32
 8007e92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e9a:	2330      	movs	r3, #48	; 0x30
 8007e9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008060 <_vfiprintf_r+0x24c>
 8007ea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ea4:	f04f 0901 	mov.w	r9, #1
 8007ea8:	4623      	mov	r3, r4
 8007eaa:	469a      	mov	sl, r3
 8007eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eb0:	b10a      	cbz	r2, 8007eb6 <_vfiprintf_r+0xa2>
 8007eb2:	2a25      	cmp	r2, #37	; 0x25
 8007eb4:	d1f9      	bne.n	8007eaa <_vfiprintf_r+0x96>
 8007eb6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eba:	d00b      	beq.n	8007ed4 <_vfiprintf_r+0xc0>
 8007ebc:	465b      	mov	r3, fp
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f7ff ff93 	bl	8007dee <__sfputs_r>
 8007ec8:	3001      	adds	r0, #1
 8007eca:	f000 80aa 	beq.w	8008022 <_vfiprintf_r+0x20e>
 8007ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ed0:	445a      	add	r2, fp
 8007ed2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 80a2 	beq.w	8008022 <_vfiprintf_r+0x20e>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ee8:	f10a 0a01 	add.w	sl, sl, #1
 8007eec:	9304      	str	r3, [sp, #16]
 8007eee:	9307      	str	r3, [sp, #28]
 8007ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ef6:	4654      	mov	r4, sl
 8007ef8:	2205      	movs	r2, #5
 8007efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007efe:	4858      	ldr	r0, [pc, #352]	; (8008060 <_vfiprintf_r+0x24c>)
 8007f00:	f7f8 f96e 	bl	80001e0 <memchr>
 8007f04:	9a04      	ldr	r2, [sp, #16]
 8007f06:	b9d8      	cbnz	r0, 8007f40 <_vfiprintf_r+0x12c>
 8007f08:	06d1      	lsls	r1, r2, #27
 8007f0a:	bf44      	itt	mi
 8007f0c:	2320      	movmi	r3, #32
 8007f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f12:	0713      	lsls	r3, r2, #28
 8007f14:	bf44      	itt	mi
 8007f16:	232b      	movmi	r3, #43	; 0x2b
 8007f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f20:	2b2a      	cmp	r3, #42	; 0x2a
 8007f22:	d015      	beq.n	8007f50 <_vfiprintf_r+0x13c>
 8007f24:	9a07      	ldr	r2, [sp, #28]
 8007f26:	4654      	mov	r4, sl
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f04f 0c0a 	mov.w	ip, #10
 8007f2e:	4621      	mov	r1, r4
 8007f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f34:	3b30      	subs	r3, #48	; 0x30
 8007f36:	2b09      	cmp	r3, #9
 8007f38:	d94e      	bls.n	8007fd8 <_vfiprintf_r+0x1c4>
 8007f3a:	b1b0      	cbz	r0, 8007f6a <_vfiprintf_r+0x156>
 8007f3c:	9207      	str	r2, [sp, #28]
 8007f3e:	e014      	b.n	8007f6a <_vfiprintf_r+0x156>
 8007f40:	eba0 0308 	sub.w	r3, r0, r8
 8007f44:	fa09 f303 	lsl.w	r3, r9, r3
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	9304      	str	r3, [sp, #16]
 8007f4c:	46a2      	mov	sl, r4
 8007f4e:	e7d2      	b.n	8007ef6 <_vfiprintf_r+0xe2>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	1d19      	adds	r1, r3, #4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	9103      	str	r1, [sp, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	bfbb      	ittet	lt
 8007f5c:	425b      	neglt	r3, r3
 8007f5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f62:	9307      	strge	r3, [sp, #28]
 8007f64:	9307      	strlt	r3, [sp, #28]
 8007f66:	bfb8      	it	lt
 8007f68:	9204      	strlt	r2, [sp, #16]
 8007f6a:	7823      	ldrb	r3, [r4, #0]
 8007f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f6e:	d10c      	bne.n	8007f8a <_vfiprintf_r+0x176>
 8007f70:	7863      	ldrb	r3, [r4, #1]
 8007f72:	2b2a      	cmp	r3, #42	; 0x2a
 8007f74:	d135      	bne.n	8007fe2 <_vfiprintf_r+0x1ce>
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	1d1a      	adds	r2, r3, #4
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	9203      	str	r2, [sp, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	bfb8      	it	lt
 8007f82:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f86:	3402      	adds	r4, #2
 8007f88:	9305      	str	r3, [sp, #20]
 8007f8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008070 <_vfiprintf_r+0x25c>
 8007f8e:	7821      	ldrb	r1, [r4, #0]
 8007f90:	2203      	movs	r2, #3
 8007f92:	4650      	mov	r0, sl
 8007f94:	f7f8 f924 	bl	80001e0 <memchr>
 8007f98:	b140      	cbz	r0, 8007fac <_vfiprintf_r+0x198>
 8007f9a:	2340      	movs	r3, #64	; 0x40
 8007f9c:	eba0 000a 	sub.w	r0, r0, sl
 8007fa0:	fa03 f000 	lsl.w	r0, r3, r0
 8007fa4:	9b04      	ldr	r3, [sp, #16]
 8007fa6:	4303      	orrs	r3, r0
 8007fa8:	3401      	adds	r4, #1
 8007faa:	9304      	str	r3, [sp, #16]
 8007fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb0:	482c      	ldr	r0, [pc, #176]	; (8008064 <_vfiprintf_r+0x250>)
 8007fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fb6:	2206      	movs	r2, #6
 8007fb8:	f7f8 f912 	bl	80001e0 <memchr>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d03f      	beq.n	8008040 <_vfiprintf_r+0x22c>
 8007fc0:	4b29      	ldr	r3, [pc, #164]	; (8008068 <_vfiprintf_r+0x254>)
 8007fc2:	bb1b      	cbnz	r3, 800800c <_vfiprintf_r+0x1f8>
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	3307      	adds	r3, #7
 8007fc8:	f023 0307 	bic.w	r3, r3, #7
 8007fcc:	3308      	adds	r3, #8
 8007fce:	9303      	str	r3, [sp, #12]
 8007fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd2:	443b      	add	r3, r7
 8007fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd6:	e767      	b.n	8007ea8 <_vfiprintf_r+0x94>
 8007fd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fdc:	460c      	mov	r4, r1
 8007fde:	2001      	movs	r0, #1
 8007fe0:	e7a5      	b.n	8007f2e <_vfiprintf_r+0x11a>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	3401      	adds	r4, #1
 8007fe6:	9305      	str	r3, [sp, #20]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	f04f 0c0a 	mov.w	ip, #10
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ff4:	3a30      	subs	r2, #48	; 0x30
 8007ff6:	2a09      	cmp	r2, #9
 8007ff8:	d903      	bls.n	8008002 <_vfiprintf_r+0x1ee>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0c5      	beq.n	8007f8a <_vfiprintf_r+0x176>
 8007ffe:	9105      	str	r1, [sp, #20]
 8008000:	e7c3      	b.n	8007f8a <_vfiprintf_r+0x176>
 8008002:	fb0c 2101 	mla	r1, ip, r1, r2
 8008006:	4604      	mov	r4, r0
 8008008:	2301      	movs	r3, #1
 800800a:	e7f0      	b.n	8007fee <_vfiprintf_r+0x1da>
 800800c:	ab03      	add	r3, sp, #12
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	462a      	mov	r2, r5
 8008012:	4b16      	ldr	r3, [pc, #88]	; (800806c <_vfiprintf_r+0x258>)
 8008014:	a904      	add	r1, sp, #16
 8008016:	4630      	mov	r0, r6
 8008018:	f7fd fc74 	bl	8005904 <_printf_float>
 800801c:	4607      	mov	r7, r0
 800801e:	1c78      	adds	r0, r7, #1
 8008020:	d1d6      	bne.n	8007fd0 <_vfiprintf_r+0x1bc>
 8008022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008024:	07d9      	lsls	r1, r3, #31
 8008026:	d405      	bmi.n	8008034 <_vfiprintf_r+0x220>
 8008028:	89ab      	ldrh	r3, [r5, #12]
 800802a:	059a      	lsls	r2, r3, #22
 800802c:	d402      	bmi.n	8008034 <_vfiprintf_r+0x220>
 800802e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008030:	f7fd fb1c 	bl	800566c <__retarget_lock_release_recursive>
 8008034:	89ab      	ldrh	r3, [r5, #12]
 8008036:	065b      	lsls	r3, r3, #25
 8008038:	f53f af12 	bmi.w	8007e60 <_vfiprintf_r+0x4c>
 800803c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800803e:	e711      	b.n	8007e64 <_vfiprintf_r+0x50>
 8008040:	ab03      	add	r3, sp, #12
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	462a      	mov	r2, r5
 8008046:	4b09      	ldr	r3, [pc, #36]	; (800806c <_vfiprintf_r+0x258>)
 8008048:	a904      	add	r1, sp, #16
 800804a:	4630      	mov	r0, r6
 800804c:	f7fd fefe 	bl	8005e4c <_printf_i>
 8008050:	e7e4      	b.n	800801c <_vfiprintf_r+0x208>
 8008052:	bf00      	nop
 8008054:	080084c8 	.word	0x080084c8
 8008058:	080084e8 	.word	0x080084e8
 800805c:	080084a8 	.word	0x080084a8
 8008060:	08008764 	.word	0x08008764
 8008064:	0800876e 	.word	0x0800876e
 8008068:	08005905 	.word	0x08005905
 800806c:	08007def 	.word	0x08007def
 8008070:	0800876a 	.word	0x0800876a

08008074 <_read_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4d07      	ldr	r5, [pc, #28]	; (8008094 <_read_r+0x20>)
 8008078:	4604      	mov	r4, r0
 800807a:	4608      	mov	r0, r1
 800807c:	4611      	mov	r1, r2
 800807e:	2200      	movs	r2, #0
 8008080:	602a      	str	r2, [r5, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	f7fc ff69 	bl	8004f5a <_read>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_read_r+0x1e>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	b103      	cbz	r3, 8008092 <_read_r+0x1e>
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	20000508 	.word	0x20000508

08008098 <abort>:
 8008098:	b508      	push	{r3, lr}
 800809a:	2006      	movs	r0, #6
 800809c:	f000 f8aa 	bl	80081f4 <raise>
 80080a0:	2001      	movs	r0, #1
 80080a2:	f000 f8e1 	bl	8008268 <_exit>
	...

080080a8 <_fstat_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d07      	ldr	r5, [pc, #28]	; (80080c8 <_fstat_r+0x20>)
 80080ac:	2300      	movs	r3, #0
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	4611      	mov	r1, r2
 80080b4:	602b      	str	r3, [r5, #0]
 80080b6:	f7fd f834 	bl	8005122 <_fstat>
 80080ba:	1c43      	adds	r3, r0, #1
 80080bc:	d102      	bne.n	80080c4 <_fstat_r+0x1c>
 80080be:	682b      	ldr	r3, [r5, #0]
 80080c0:	b103      	cbz	r3, 80080c4 <_fstat_r+0x1c>
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	bd38      	pop	{r3, r4, r5, pc}
 80080c6:	bf00      	nop
 80080c8:	20000508 	.word	0x20000508

080080cc <_isatty_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d06      	ldr	r5, [pc, #24]	; (80080e8 <_isatty_r+0x1c>)
 80080d0:	2300      	movs	r3, #0
 80080d2:	4604      	mov	r4, r0
 80080d4:	4608      	mov	r0, r1
 80080d6:	602b      	str	r3, [r5, #0]
 80080d8:	f7fd f98a 	bl	80053f0 <_isatty>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_isatty_r+0x1a>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_isatty_r+0x1a>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	20000508 	.word	0x20000508

080080ec <__ascii_mbtowc>:
 80080ec:	b082      	sub	sp, #8
 80080ee:	b901      	cbnz	r1, 80080f2 <__ascii_mbtowc+0x6>
 80080f0:	a901      	add	r1, sp, #4
 80080f2:	b142      	cbz	r2, 8008106 <__ascii_mbtowc+0x1a>
 80080f4:	b14b      	cbz	r3, 800810a <__ascii_mbtowc+0x1e>
 80080f6:	7813      	ldrb	r3, [r2, #0]
 80080f8:	600b      	str	r3, [r1, #0]
 80080fa:	7812      	ldrb	r2, [r2, #0]
 80080fc:	1e10      	subs	r0, r2, #0
 80080fe:	bf18      	it	ne
 8008100:	2001      	movne	r0, #1
 8008102:	b002      	add	sp, #8
 8008104:	4770      	bx	lr
 8008106:	4610      	mov	r0, r2
 8008108:	e7fb      	b.n	8008102 <__ascii_mbtowc+0x16>
 800810a:	f06f 0001 	mvn.w	r0, #1
 800810e:	e7f8      	b.n	8008102 <__ascii_mbtowc+0x16>

08008110 <memmove>:
 8008110:	4288      	cmp	r0, r1
 8008112:	b510      	push	{r4, lr}
 8008114:	eb01 0402 	add.w	r4, r1, r2
 8008118:	d902      	bls.n	8008120 <memmove+0x10>
 800811a:	4284      	cmp	r4, r0
 800811c:	4623      	mov	r3, r4
 800811e:	d807      	bhi.n	8008130 <memmove+0x20>
 8008120:	1e43      	subs	r3, r0, #1
 8008122:	42a1      	cmp	r1, r4
 8008124:	d008      	beq.n	8008138 <memmove+0x28>
 8008126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800812a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800812e:	e7f8      	b.n	8008122 <memmove+0x12>
 8008130:	4402      	add	r2, r0
 8008132:	4601      	mov	r1, r0
 8008134:	428a      	cmp	r2, r1
 8008136:	d100      	bne.n	800813a <memmove+0x2a>
 8008138:	bd10      	pop	{r4, pc}
 800813a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800813e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008142:	e7f7      	b.n	8008134 <memmove+0x24>

08008144 <_realloc_r>:
 8008144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008148:	4680      	mov	r8, r0
 800814a:	4614      	mov	r4, r2
 800814c:	460e      	mov	r6, r1
 800814e:	b921      	cbnz	r1, 800815a <_realloc_r+0x16>
 8008150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008154:	4611      	mov	r1, r2
 8008156:	f7fd bac1 	b.w	80056dc <_malloc_r>
 800815a:	b92a      	cbnz	r2, 8008168 <_realloc_r+0x24>
 800815c:	f7ff fc88 	bl	8007a70 <_free_r>
 8008160:	4625      	mov	r5, r4
 8008162:	4628      	mov	r0, r5
 8008164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008168:	f000 f86d 	bl	8008246 <_malloc_usable_size_r>
 800816c:	4284      	cmp	r4, r0
 800816e:	4607      	mov	r7, r0
 8008170:	d802      	bhi.n	8008178 <_realloc_r+0x34>
 8008172:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008176:	d812      	bhi.n	800819e <_realloc_r+0x5a>
 8008178:	4621      	mov	r1, r4
 800817a:	4640      	mov	r0, r8
 800817c:	f7fd faae 	bl	80056dc <_malloc_r>
 8008180:	4605      	mov	r5, r0
 8008182:	2800      	cmp	r0, #0
 8008184:	d0ed      	beq.n	8008162 <_realloc_r+0x1e>
 8008186:	42bc      	cmp	r4, r7
 8008188:	4622      	mov	r2, r4
 800818a:	4631      	mov	r1, r6
 800818c:	bf28      	it	cs
 800818e:	463a      	movcs	r2, r7
 8008190:	f7fd fa6d 	bl	800566e <memcpy>
 8008194:	4631      	mov	r1, r6
 8008196:	4640      	mov	r0, r8
 8008198:	f7ff fc6a 	bl	8007a70 <_free_r>
 800819c:	e7e1      	b.n	8008162 <_realloc_r+0x1e>
 800819e:	4635      	mov	r5, r6
 80081a0:	e7df      	b.n	8008162 <_realloc_r+0x1e>

080081a2 <_raise_r>:
 80081a2:	291f      	cmp	r1, #31
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	4604      	mov	r4, r0
 80081a8:	460d      	mov	r5, r1
 80081aa:	d904      	bls.n	80081b6 <_raise_r+0x14>
 80081ac:	2316      	movs	r3, #22
 80081ae:	6003      	str	r3, [r0, #0]
 80081b0:	f04f 30ff 	mov.w	r0, #4294967295
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
 80081b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081b8:	b112      	cbz	r2, 80081c0 <_raise_r+0x1e>
 80081ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081be:	b94b      	cbnz	r3, 80081d4 <_raise_r+0x32>
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 f831 	bl	8008228 <_getpid_r>
 80081c6:	462a      	mov	r2, r5
 80081c8:	4601      	mov	r1, r0
 80081ca:	4620      	mov	r0, r4
 80081cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081d0:	f000 b818 	b.w	8008204 <_kill_r>
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d00a      	beq.n	80081ee <_raise_r+0x4c>
 80081d8:	1c59      	adds	r1, r3, #1
 80081da:	d103      	bne.n	80081e4 <_raise_r+0x42>
 80081dc:	2316      	movs	r3, #22
 80081de:	6003      	str	r3, [r0, #0]
 80081e0:	2001      	movs	r0, #1
 80081e2:	e7e7      	b.n	80081b4 <_raise_r+0x12>
 80081e4:	2400      	movs	r4, #0
 80081e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081ea:	4628      	mov	r0, r5
 80081ec:	4798      	blx	r3
 80081ee:	2000      	movs	r0, #0
 80081f0:	e7e0      	b.n	80081b4 <_raise_r+0x12>
	...

080081f4 <raise>:
 80081f4:	4b02      	ldr	r3, [pc, #8]	; (8008200 <raise+0xc>)
 80081f6:	4601      	mov	r1, r0
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	f7ff bfd2 	b.w	80081a2 <_raise_r>
 80081fe:	bf00      	nop
 8008200:	200000ac 	.word	0x200000ac

08008204 <_kill_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4d07      	ldr	r5, [pc, #28]	; (8008224 <_kill_r+0x20>)
 8008208:	2300      	movs	r3, #0
 800820a:	4604      	mov	r4, r0
 800820c:	4608      	mov	r0, r1
 800820e:	4611      	mov	r1, r2
 8008210:	602b      	str	r3, [r5, #0]
 8008212:	f000 f821 	bl	8008258 <_kill>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d102      	bne.n	8008220 <_kill_r+0x1c>
 800821a:	682b      	ldr	r3, [r5, #0]
 800821c:	b103      	cbz	r3, 8008220 <_kill_r+0x1c>
 800821e:	6023      	str	r3, [r4, #0]
 8008220:	bd38      	pop	{r3, r4, r5, pc}
 8008222:	bf00      	nop
 8008224:	20000508 	.word	0x20000508

08008228 <_getpid_r>:
 8008228:	f7fc bf58 	b.w	80050dc <_getpid>

0800822c <__ascii_wctomb>:
 800822c:	b149      	cbz	r1, 8008242 <__ascii_wctomb+0x16>
 800822e:	2aff      	cmp	r2, #255	; 0xff
 8008230:	bf85      	ittet	hi
 8008232:	238a      	movhi	r3, #138	; 0x8a
 8008234:	6003      	strhi	r3, [r0, #0]
 8008236:	700a      	strbls	r2, [r1, #0]
 8008238:	f04f 30ff 	movhi.w	r0, #4294967295
 800823c:	bf98      	it	ls
 800823e:	2001      	movls	r0, #1
 8008240:	4770      	bx	lr
 8008242:	4608      	mov	r0, r1
 8008244:	4770      	bx	lr

08008246 <_malloc_usable_size_r>:
 8008246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800824a:	1f18      	subs	r0, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	bfbc      	itt	lt
 8008250:	580b      	ldrlt	r3, [r1, r0]
 8008252:	18c0      	addlt	r0, r0, r3
 8008254:	4770      	bx	lr
	...

08008258 <_kill>:
 8008258:	4b02      	ldr	r3, [pc, #8]	; (8008264 <_kill+0xc>)
 800825a:	2258      	movs	r2, #88	; 0x58
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	f04f 30ff 	mov.w	r0, #4294967295
 8008262:	4770      	bx	lr
 8008264:	20000508 	.word	0x20000508

08008268 <_exit>:
 8008268:	e7fe      	b.n	8008268 <_exit>
	...

0800826c <_init>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	bf00      	nop
 8008270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008272:	bc08      	pop	{r3}
 8008274:	469e      	mov	lr, r3
 8008276:	4770      	bx	lr

08008278 <_fini>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	bf00      	nop
 800827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827e:	bc08      	pop	{r3}
 8008280:	469e      	mov	lr, r3
 8008282:	4770      	bx	lr
