
Assignment 2 Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08005f80  08005f80  00015f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006460  08006460  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08006460  08006460  00016460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006468  08006468  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08006470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  200001ec  0800665c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  0800665c  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095c8  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000161a  00000000  00000000  000297e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002ae00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b00  00000000  00000000  0002bd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d36  00000000  00000000  00053898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3550  00000000  00000000  0005c5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014fb1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003634  00000000  00000000  0014fb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001531a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  001531c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f64 	.word	0x08005f64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08005f64 	.word	0x08005f64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
static void button_press(void);

UART_HandleTypeDef huart1;

int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
    initialise_monitor_handles();
 8000eb0:	f002 f8b8 	bl	8003024 <initialise_monitor_handles>
    HAL_Init();
 8000eb4:	f000 fc70 	bl	8001798 <HAL_Init>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000eb8:	2101      	movs	r1, #1
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 fc16 	bl	80016ec <BSP_PB_Init>
    UART1_Init();
 8000ec0:	f000 f962 	bl	8001188 <UART1_Init>
    BSP_LED_Init(LED2);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f000 fbb5 	bl	8001634 <BSP_LED_Init>

    // print Entering STANDBY MODE when going to STANDBY_MODE
    sprintf(uart_buffer, "Entering STANDBY MODE\r\n");
 8000eca:	491b      	ldr	r1, [pc, #108]	; (8000f38 <main+0x8c>)
 8000ecc:	481b      	ldr	r0, [pc, #108]	; (8000f3c <main+0x90>)
 8000ece:	f002 ff6d 	bl	8003dac <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer),
 8000ed2:	481a      	ldr	r0, [pc, #104]	; (8000f3c <main+0x90>)
 8000ed4:	f7ff f97c 	bl	80001d0 <strlen>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ee0:	4916      	ldr	r1, [pc, #88]	; (8000f3c <main+0x90>)
 8000ee2:	4817      	ldr	r0, [pc, #92]	; (8000f40 <main+0x94>)
 8000ee4:	f001 f8e0 	bl	80020a8 <HAL_UART_Transmit>
        // UART transmit buffer. See the comment in the line above.
        // sprintf(message_print, "%d: %s", seconds_count, message1);
        // HAL_UART_Transmit(&huart1, (uint8_t*)message_print,
        // strlen(message_print),0xFFFF); //Sending in normal mode HAL_Delay(1000);

        button_press();
 8000ee8:	f000 f9ba 	bl	8001260 <button_press>
        switch (state) {
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <main+0x98>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d81b      	bhi.n	8000f2c <main+0x80>
 8000ef4:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <main+0x50>)
 8000ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efa:	bf00      	nop
 8000efc:	08000f0d 	.word	0x08000f0d
 8000f00:	08000f15 	.word	0x08000f15
 8000f04:	08000f1d 	.word	0x08000f1d
 8000f08:	08000f25 	.word	0x08000f25
        case STANDBY_MODE:
            standby_mode(&state);
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <main+0x98>)
 8000f0e:	f000 f81b 	bl	8000f48 <standby_mode>
            break;
 8000f12:	e00f      	b.n	8000f34 <main+0x88>
        case BATTLE_NO_LAST_OF_EE2028_MODE:
            battle_no_last_of_ee2028_mode(&state);
 8000f14:	480b      	ldr	r0, [pc, #44]	; (8000f44 <main+0x98>)
 8000f16:	f000 f84d 	bl	8000fb4 <battle_no_last_of_ee2028_mode>
            break;
 8000f1a:	e00b      	b.n	8000f34 <main+0x88>
        case BATTLE_LAST_OF_EE2028_MODE:
            battle_last_of_ee2028_mode(&state);
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <main+0x98>)
 8000f1e:	f000 f8f3 	bl	8001108 <battle_last_of_ee2028_mode>
            break;
 8000f22:	e007      	b.n	8000f34 <main+0x88>
        case DEAD_MODE:
            dead_mode(&state);
 8000f24:	4807      	ldr	r0, [pc, #28]	; (8000f44 <main+0x98>)
 8000f26:	f000 f911 	bl	800114c <dead_mode>
            break;
 8000f2a:	e003      	b.n	8000f34 <main+0x88>
        default:
            // for debugging incase state somehow get here
            led_blink(LED_10HZ);
 8000f2c:	2064      	movs	r0, #100	; 0x64
 8000f2e:	f000 f9df 	bl	80012f0 <led_blink>
            break;
 8000f32:	bf00      	nop
        button_press();
 8000f34:	e7d8      	b.n	8000ee8 <main+0x3c>
 8000f36:	bf00      	nop
 8000f38:	08005f80 	.word	0x08005f80
 8000f3c:	2000020c 	.word	0x2000020c
 8000f40:	2000024c 	.word	0x2000024c
 8000f44:	20000208 	.word	0x20000208

08000f48 <standby_mode>:
        }
    }
}

static void standby_mode(uint8_t* p_state)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    // in STANDBY_MODE, LED always on
    led_blink(LED_ALWAYS_ON);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 f9cd 	bl	80012f0 <led_blink>

    // in STANDBY_MODE, double press to enter BATTLE_NO_LAST_OF_EE2028_MODE
    if (double_press) {
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <standby_mode+0x58>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d014      	beq.n	8000f88 <standby_mode+0x40>
        // goes to BATTLE_NO_LAST_OF_EE2028_MODE
        *p_state = BATTLE_NO_LAST_OF_EE2028_MODE;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]

        // print Entering BATTLE MODE when going to BATTLE_NO_LAST_OF_EE2028_MODE
        sprintf(uart_buffer, "Entering BATTLE MODE\r\n");
 8000f64:	490f      	ldr	r1, [pc, #60]	; (8000fa4 <standby_mode+0x5c>)
 8000f66:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <standby_mode+0x60>)
 8000f68:	f002 ff20 	bl	8003dac <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8000f6c:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <standby_mode+0x60>)
 8000f6e:	f7ff f92f 	bl	80001d0 <strlen>
 8000f72:	4603      	mov	r3, r0
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f7a:	490b      	ldr	r1, [pc, #44]	; (8000fa8 <standby_mode+0x60>)
 8000f7c:	480b      	ldr	r0, [pc, #44]	; (8000fac <standby_mode+0x64>)
 8000f7e:	f001 f893 	bl	80020a8 <HAL_UART_Transmit>

        // clear flag
        double_press = BOOL_CLR;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <standby_mode+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
    }

    // in STANDBY_MODE, single press does nothing
    if (single_press) {
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <standby_mode+0x68>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <standby_mode+0x4e>
        // does nothing, but still need to reset the flag
        single_press = BOOL_CLR;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <standby_mode+0x68>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
    }

    // TODO add in telem code
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000020b 	.word	0x2000020b
 8000fa4:	08005f98 	.word	0x08005f98
 8000fa8:	2000020c 	.word	0x2000020c
 8000fac:	2000024c 	.word	0x2000024c
 8000fb0:	2000020a 	.word	0x2000020a

08000fb4 <battle_no_last_of_ee2028_mode>:

static void battle_no_last_of_ee2028_mode(uint8_t* p_state)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	6078      	str	r0, [r7, #4]
    static uint8_t gun_charge = 0;
    if (gun_charge > 10) {
 8000fbc:	4b48      	ldr	r3, [pc, #288]	; (80010e0 <battle_no_last_of_ee2028_mode+0x12c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b0a      	cmp	r3, #10
 8000fc2:	d902      	bls.n	8000fca <battle_no_last_of_ee2028_mode+0x16>
        // incase somehow charge gets more than 10, cap at 10/10
        gun_charge = 10;
 8000fc4:	4b46      	ldr	r3, [pc, #280]	; (80010e0 <battle_no_last_of_ee2028_mode+0x12c>)
 8000fc6:	220a      	movs	r2, #10
 8000fc8:	701a      	strb	r2, [r3, #0]
    }

    if (gun_charge >= 5) {
 8000fca:	4b45      	ldr	r3, [pc, #276]	; (80010e0 <battle_no_last_of_ee2028_mode+0x12c>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	d92e      	bls.n	8001030 <battle_no_last_of_ee2028_mode+0x7c>
        // each shot cost 5 units
        gun_charge -= 5;
 8000fd2:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <battle_no_last_of_ee2028_mode+0x12c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3b05      	subs	r3, #5
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b41      	ldr	r3, [pc, #260]	; (80010e0 <battle_no_last_of_ee2028_mode+0x12c>)
 8000fdc:	701a      	strb	r2, [r3, #0]

        sprintf(uart_buffer, "Gun Shot:    %.*s%.*s %d%%\r\n",
 8000fde:	4b40      	ldr	r3, [pc, #256]	; (80010e0 <battle_no_last_of_ee2028_mode+0x12c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	1899      	adds	r1, r3, r2
            (gun_charge)*3, "[#][#][#][#][#][#][#][#][#][#]",
            (10 - gun_charge) * 3, "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]",
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <battle_no_last_of_ee2028_mode+0x12c>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	f1c3 020a 	rsb	r2, r3, #10
        sprintf(uart_buffer, "Gun Shot:    %.*s%.*s %d%%\r\n",
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	441a      	add	r2, r3
 8000ff8:	4b39      	ldr	r3, [pc, #228]	; (80010e0 <battle_no_last_of_ee2028_mode+0x12c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	4603      	mov	r3, r0
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4403      	add	r3, r0
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <battle_no_last_of_ee2028_mode+0x130>)
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	9200      	str	r2, [sp, #0]
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <battle_no_last_of_ee2028_mode+0x134>)
 8001010:	460a      	mov	r2, r1
 8001012:	4936      	ldr	r1, [pc, #216]	; (80010ec <battle_no_last_of_ee2028_mode+0x138>)
 8001014:	4836      	ldr	r0, [pc, #216]	; (80010f0 <battle_no_last_of_ee2028_mode+0x13c>)
 8001016:	f002 fec9 	bl	8003dac <siprintf>
            gun_charge * 10);
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 800101a:	4835      	ldr	r0, [pc, #212]	; (80010f0 <battle_no_last_of_ee2028_mode+0x13c>)
 800101c:	f7ff f8d8 	bl	80001d0 <strlen>
 8001020:	4603      	mov	r3, r0
 8001022:	b29a      	uxth	r2, r3
 8001024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001028:	4931      	ldr	r1, [pc, #196]	; (80010f0 <battle_no_last_of_ee2028_mode+0x13c>)
 800102a:	4832      	ldr	r0, [pc, #200]	; (80010f4 <battle_no_last_of_ee2028_mode+0x140>)
 800102c:	f001 f83c 	bl	80020a8 <HAL_UART_Transmit>
    }

    // in BATTLE_NO_LAST_OF_EE2028_MODE, LED blinks at 1 Hz
    led_blink(LED_1HZ);
 8001030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001034:	f000 f95c 	bl	80012f0 <led_blink>

    // in BATTLE_NO_LAST_OF_EE2028_MODE, double press to enter STANDBY_MODE
    if (double_press) {
 8001038:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <battle_no_last_of_ee2028_mode+0x144>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d014      	beq.n	800106a <battle_no_last_of_ee2028_mode+0xb6>
        // goes to STANDBY_MODE
        *p_state = STANDBY_MODE;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]

        // print Entering STANDBY MODE when going to STANDBY_MODE
        sprintf(uart_buffer, "Entering STANDBY MODE\r\n");
 8001046:	492d      	ldr	r1, [pc, #180]	; (80010fc <battle_no_last_of_ee2028_mode+0x148>)
 8001048:	4829      	ldr	r0, [pc, #164]	; (80010f0 <battle_no_last_of_ee2028_mode+0x13c>)
 800104a:	f002 feaf 	bl	8003dac <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 800104e:	4828      	ldr	r0, [pc, #160]	; (80010f0 <battle_no_last_of_ee2028_mode+0x13c>)
 8001050:	f7ff f8be 	bl	80001d0 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
 8001058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800105c:	4924      	ldr	r1, [pc, #144]	; (80010f0 <battle_no_last_of_ee2028_mode+0x13c>)
 800105e:	4825      	ldr	r0, [pc, #148]	; (80010f4 <battle_no_last_of_ee2028_mode+0x140>)
 8001060:	f001 f822 	bl	80020a8 <HAL_UART_Transmit>

        // clear flag
        double_press = BOOL_CLR;
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <battle_no_last_of_ee2028_mode+0x144>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
    }

    // in BATTLE_NO_LAST_OF_EE2028_MODE, single press charge gun by 3
    if (single_press) {
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <battle_no_last_of_ee2028_mode+0x14c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d031      	beq.n	80010d6 <battle_no_last_of_ee2028_mode+0x122>
        gun_charge += 3;
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <battle_no_last_of_ee2028_mode+0x12c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	3303      	adds	r3, #3
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <battle_no_last_of_ee2028_mode+0x12c>)
 800107c:	701a      	strb	r2, [r3, #0]

        // print gun status
        sprintf(uart_buffer, "Gun Charged: %.*s%.*s %d%%\r\n",
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <battle_no_last_of_ee2028_mode+0x12c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	1899      	adds	r1, r3, r2
            (gun_charge)*3, "[#][#][#][#][#][#][#][#][#][#]",
            (10 - gun_charge) * 3, "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]",
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <battle_no_last_of_ee2028_mode+0x12c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f1c3 020a 	rsb	r2, r3, #10
        sprintf(uart_buffer, "Gun Charged: %.*s%.*s %d%%\r\n",
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	441a      	add	r2, r3
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <battle_no_last_of_ee2028_mode+0x12c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	4603      	mov	r3, r0
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4403      	add	r3, r0
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <battle_no_last_of_ee2028_mode+0x130>)
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	9200      	str	r2, [sp, #0]
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <battle_no_last_of_ee2028_mode+0x134>)
 80010b0:	460a      	mov	r2, r1
 80010b2:	4914      	ldr	r1, [pc, #80]	; (8001104 <battle_no_last_of_ee2028_mode+0x150>)
 80010b4:	480e      	ldr	r0, [pc, #56]	; (80010f0 <battle_no_last_of_ee2028_mode+0x13c>)
 80010b6:	f002 fe79 	bl	8003dac <siprintf>
            gun_charge * 10);
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <battle_no_last_of_ee2028_mode+0x13c>)
 80010bc:	f7ff f888 	bl	80001d0 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c8:	4909      	ldr	r1, [pc, #36]	; (80010f0 <battle_no_last_of_ee2028_mode+0x13c>)
 80010ca:	480a      	ldr	r0, [pc, #40]	; (80010f4 <battle_no_last_of_ee2028_mode+0x140>)
 80010cc:	f000 ffec 	bl	80020a8 <HAL_UART_Transmit>

        // clear flag
        single_press = BOOL_CLR;
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <battle_no_last_of_ee2028_mode+0x14c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
    }

    // TODO add in telem code
    // TODO add upside down go to BATTLE_LAST_OF_EE2028_MODE
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200002cc 	.word	0x200002cc
 80010e4:	08005ff0 	.word	0x08005ff0
 80010e8:	08005fb0 	.word	0x08005fb0
 80010ec:	08005fd0 	.word	0x08005fd0
 80010f0:	2000020c 	.word	0x2000020c
 80010f4:	2000024c 	.word	0x2000024c
 80010f8:	2000020b 	.word	0x2000020b
 80010fc:	08005f80 	.word	0x08005f80
 8001100:	2000020a 	.word	0x2000020a
 8001104:	08006010 	.word	0x08006010

08001108 <battle_last_of_ee2028_mode>:

static void battle_last_of_ee2028_mode(uint8_t* p_state)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    // in BATTLE_LAST_OF_EE2028_MODE, LED blinks at 2 Hz
    led_blink(LED_2HZ);
 8001110:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001114:	f000 f8ec 	bl	80012f0 <led_blink>

    // in STANDBY_MODE, double press to enter BATTLE_NO_LAST_OF_EE2028_MODE
    if (double_press) {
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <battle_last_of_ee2028_mode+0x3c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <battle_last_of_ee2028_mode+0x24>
        // goes to BATTLE_NO_LAST_OF_EE2028_MODE
        *p_state = BATTLE_NO_LAST_OF_EE2028_MODE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
        double_press = BOOL_CLR;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <battle_last_of_ee2028_mode+0x3c>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
    }

    // in STANDBY_MODE, single press does nothing
    if (single_press) {
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <battle_last_of_ee2028_mode+0x40>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <battle_last_of_ee2028_mode+0x32>
        // does nothing, but still need to reset the flag
        single_press = BOOL_CLR;
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <battle_last_of_ee2028_mode+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
    }
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000020b 	.word	0x2000020b
 8001148:	2000020a 	.word	0x2000020a

0800114c <dead_mode>:

static void dead_mode(uint8_t* p_state)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    // in DEAD_MODE, LED blinks at 2 Hz
    led_blink(LED_2HZ);
 8001154:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001158:	f000 f8ca 	bl	80012f0 <led_blink>

    // in DEAD_MODE, double press does nothing
    if (double_press) {
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <dead_mode+0x34>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <dead_mode+0x1e>
        // does nothing, but still need to reset the flag
        double_press = BOOL_CLR;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <dead_mode+0x34>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
    }

    // in DEAD_MODE, single press does nothing
    if (single_press) {
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <dead_mode+0x38>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <dead_mode+0x2c>
        // does nothing, but still need to reset the flag
        single_press = BOOL_CLR;
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <dead_mode+0x38>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
    }
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000020b 	.word	0x2000020b
 8001184:	2000020a 	.word	0x2000020a

08001188 <UART1_Init>:

static void UART1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
    /* Pin configuration for UART. BSP_COM_Init() can do this automatically */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <UART1_Init+0xa0>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	4a25      	ldr	r2, [pc, #148]	; (8001228 <UART1_Init+0xa0>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119a:	4b23      	ldr	r3, [pc, #140]	; (8001228 <UART1_Init+0xa0>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011b4:	2307      	movs	r3, #7
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 80011b8:	23c0      	movs	r3, #192	; 0xc0
 80011ba:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4619      	mov	r1, r3
 80011cc:	4817      	ldr	r0, [pc, #92]	; (800122c <UART1_Init+0xa4>)
 80011ce:	f000 fc65 	bl	8001a9c <HAL_GPIO_Init>

    /* Configuring UART1 */
    huart1.Instance = USART1;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <UART1_Init+0xa8>)
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <UART1_Init+0xac>)
 80011d6:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <UART1_Init+0xa8>)
 80011da:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011de:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <UART1_Init+0xa8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <UART1_Init+0xa8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <UART1_Init+0xa8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <UART1_Init+0xa8>)
 80011f4:	220c      	movs	r2, #12
 80011f6:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <UART1_Init+0xa8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <UART1_Init+0xa8>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <UART1_Init+0xa8>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <UART1_Init+0xa8>)
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <UART1_Init+0xa8>)
 8001212:	f000 fefb 	bl	800200c <HAL_UART_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d000      	beq.n	800121e <UART1_Init+0x96>
        while (1) { }
 800121c:	e7fe      	b.n	800121c <UART1_Init+0x94>
    }
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	48000400 	.word	0x48000400
 8001230:	2000024c 	.word	0x2000024c
 8001234:	40013800 	.word	0x40013800

08001238 <HAL_GPIO_EXTI_Callback>:
 * @brief ISR for GPIO
 * @param uint16_t GPIO_Pin
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_BUTTON_PIN) {
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001248:	d102      	bne.n	8001250 <HAL_GPIO_EXTI_Callback+0x18>
        button_flag = BOOL_SET;
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <HAL_GPIO_EXTI_Callback+0x24>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
    }
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	20000209 	.word	0x20000209

08001260 <button_press>:
 * double press changes the single_press and double_press global variable
 * @param None
 * @retval None
 */
static void button_press(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    static uint32_t button_last_tick = 0;
    static bool button_wait_flag = BOOL_CLR;

    if (button_flag == BOOL_SET) {
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <button_press+0x7c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d01d      	beq.n	80012aa <button_press+0x4a>
        if (HAL_GetTick() - button_last_tick > 500) {
 800126e:	f000 faf7 	bl	8001860 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <button_press+0x80>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800127e:	d908      	bls.n	8001292 <button_press+0x32>
            // either a single click or the first click of a double click
            button_last_tick = HAL_GetTick();
 8001280:	f000 faee 	bl	8001860 <HAL_GetTick>
 8001284:	4603      	mov	r3, r0
 8001286:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <button_press+0x80>)
 8001288:	6013      	str	r3, [r2, #0]
            button_wait_flag = BOOL_SET; // used to check for single press later
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <button_press+0x84>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e008      	b.n	80012a4 <button_press+0x44>
        } else {
            // the last time pressed is within 500ms ==> double press
            double_press = BOOL_SET;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <button_press+0x88>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
            single_press = BOOL_CLR;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <button_press+0x8c>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
            button_wait_flag = BOOL_CLR;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <button_press+0x84>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
        }
        button_flag = BOOL_CLR;
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <button_press+0x7c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
    }

    if (button_wait_flag == BOOL_SET && (HAL_GetTick() - button_last_tick > 500)) {
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <button_press+0x84>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d011      	beq.n	80012d6 <button_press+0x76>
 80012b2:	f000 fad5 	bl	8001860 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <button_press+0x80>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012c2:	d908      	bls.n	80012d6 <button_press+0x76>
        // wait for 0.5 to decide its single press or not
        double_press = BOOL_CLR;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <button_press+0x88>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
        single_press = BOOL_SET;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <button_press+0x8c>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
        button_wait_flag = BOOL_CLR;
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <button_press+0x84>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
    }
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000209 	.word	0x20000209
 80012e0:	200002d0 	.word	0x200002d0
 80012e4:	200002d4 	.word	0x200002d4
 80012e8:	2000020b 	.word	0x2000020b
 80012ec:	2000020a 	.word	0x2000020a

080012f0 <led_blink>:
 * always on
 * @param uint32_t period
 * @retval None
 */
static void led_blink(uint32_t period)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
    static uint32_t last_tick = 0;
    if (period == LED_ALWAYS_ON) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d103      	bne.n	8001306 <led_blink+0x16>
        BSP_LED_On(LED2);
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f9c8 	bl	8001694 <BSP_LED_On>
    } else if ((HAL_GetTick() - last_tick) > (period >> 1)) {
        // toggle every half a period, >> 1  to aproximate half, duty cycle is 50%
        BSP_LED_Toggle(LED2);
        last_tick = HAL_GetTick();
    }
}
 8001304:	e011      	b.n	800132a <led_blink+0x3a>
    } else if ((HAL_GetTick() - last_tick) > (period >> 1)) {
 8001306:	f000 faab 	bl	8001860 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <led_blink+0x44>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	1ad2      	subs	r2, r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	085b      	lsrs	r3, r3, #1
 8001316:	429a      	cmp	r2, r3
 8001318:	d907      	bls.n	800132a <led_blink+0x3a>
        BSP_LED_Toggle(LED2);
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f9d0 	bl	80016c0 <BSP_LED_Toggle>
        last_tick = HAL_GetTick();
 8001320:	f000 fa9e 	bl	8001860 <HAL_GetTick>
 8001324:	4603      	mov	r3, r0
 8001326:	4a03      	ldr	r2, [pc, #12]	; (8001334 <led_blink+0x44>)
 8001328:	6013      	str	r3, [r2, #0]
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200002d8 	.word	0x200002d8

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_MspInit+0x44>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_MspInit+0x44>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6613      	str	r3, [r2, #96]	; 0x60
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_MspInit+0x44>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_MspInit+0x44>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x44>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6593      	str	r3, [r2, #88]	; 0x58
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x44>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a2e      	ldr	r2, [pc, #184]	; (8001458 <HAL_UART_MspInit+0xd8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d128      	bne.n	80013f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <HAL_UART_MspInit+0xdc>)
 80013a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a6:	4a2d      	ldr	r2, [pc, #180]	; (800145c <HAL_UART_MspInit+0xdc>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6613      	str	r3, [r2, #96]	; 0x60
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_UART_MspInit+0xdc>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <HAL_UART_MspInit+0xdc>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a27      	ldr	r2, [pc, #156]	; (800145c <HAL_UART_MspInit+0xdc>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <HAL_UART_MspInit+0xdc>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80013d2:	23c0      	movs	r3, #192	; 0xc0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013e2:	2307      	movs	r3, #7
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4619      	mov	r1, r3
 80013ec:	481c      	ldr	r0, [pc, #112]	; (8001460 <HAL_UART_MspInit+0xe0>)
 80013ee:	f000 fb55 	bl	8001a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013f2:	e02d      	b.n	8001450 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_UART_MspInit+0xe4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d128      	bne.n	8001450 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_UART_MspInit+0xdc>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <HAL_UART_MspInit+0xdc>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6593      	str	r3, [r2, #88]	; 0x58
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_UART_MspInit+0xdc>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_UART_MspInit+0xdc>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <HAL_UART_MspInit+0xdc>)
 800141c:	f043 0308 	orr.w	r3, r3, #8
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_UART_MspInit+0xdc>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800142e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001440:	2307      	movs	r3, #7
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	4807      	ldr	r0, [pc, #28]	; (8001468 <HAL_UART_MspInit+0xe8>)
 800144c:	f000 fb26 	bl	8001a9c <HAL_GPIO_Init>
}
 8001450:	bf00      	nop
 8001452:	3730      	adds	r7, #48	; 0x30
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40013800 	.word	0x40013800
 800145c:	40021000 	.word	0x40021000
 8001460:	48000400 	.word	0x48000400
 8001464:	40004800 	.word	0x40004800
 8001468:	48000c00 	.word	0x48000c00

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c0:	f000 f9bc 	bl	800183c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80014cc:	2020      	movs	r0, #32
 80014ce:	f000 fcc1 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80014d2:	2040      	movs	r0, #64	; 0x40
 80014d4:	f000 fcbe 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80014d8:	2080      	movs	r0, #128	; 0x80
 80014da:	f000 fcbb 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80014de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014e2:	f000 fcb7 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}

080014ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80014ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014f2:	f000 fcaf 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80014f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014fa:	f000 fcab 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014fe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001502:	f000 fca7 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001506:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800150a:	f000 fca3 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800150e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001512:	f000 fc9f 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <_sbrk+0x50>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x16>
		heap_end = &end;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <_sbrk+0x50>)
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <_sbrk+0x54>)
 8001530:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <_sbrk+0x50>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <_sbrk+0x50>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	466a      	mov	r2, sp
 8001542:	4293      	cmp	r3, r2
 8001544:	d907      	bls.n	8001556 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001546:	f001 fde9 	bl	800311c <__errno>
 800154a:	4603      	mov	r3, r0
 800154c:	220c      	movs	r2, #12
 800154e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	e006      	b.n	8001564 <_sbrk+0x48>
	}

	heap_end += incr;
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <_sbrk+0x50>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a03      	ldr	r2, [pc, #12]	; (800156c <_sbrk+0x50>)
 8001560:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200002dc 	.word	0x200002dc
 8001570:	200003a0 	.word	0x200003a0

08001574 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <SystemInit+0x64>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157e:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <SystemInit+0x64>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <SystemInit+0x68>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a13      	ldr	r2, [pc, #76]	; (80015dc <SystemInit+0x68>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <SystemInit+0x68>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <SystemInit+0x68>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <SystemInit+0x68>)
 80015a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <SystemInit+0x68>)
 80015ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <SystemInit+0x68>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a09      	ldr	r2, [pc, #36]	; (80015dc <SystemInit+0x68>)
 80015b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <SystemInit+0x68>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <SystemInit+0x64>)
 80015c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ca:	609a      	str	r2, [r3, #8]
#endif
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	40021000 	.word	0x40021000

080015e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001618 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015e6:	e003      	b.n	80015f0 <LoopCopyDataInit>

080015e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015ee:	3104      	adds	r1, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015f0:	480b      	ldr	r0, [pc, #44]	; (8001620 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <LoopForever+0xe>)
	adds	r2, r0, r1
 80015f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015f8:	d3f6      	bcc.n	80015e8 <CopyDataInit>
	ldr	r2, =_sbss
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015fc:	e002      	b.n	8001604 <LoopFillZerobss>

080015fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001600:	f842 3b04 	str.w	r3, [r2], #4

08001604 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <LoopForever+0x16>)
	cmp	r2, r3
 8001606:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001608:	d3f9      	bcc.n	80015fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800160a:	f7ff ffb3 	bl	8001574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160e:	f001 fe81 	bl	8003314 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001612:	f7ff fc4b 	bl	8000eac <main>

08001616 <LoopForever>:

LoopForever:
    b LoopForever
 8001616:	e7fe      	b.n	8001616 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001618:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800161c:	08006470 	.word	0x08006470
	ldr	r0, =_sdata
 8001620:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001624:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 8001628:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 800162c:	200003a0 	.word	0x200003a0

08001630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC1_2_IRQHandler>
	...

08001634 <BSP_LED_Init>:
  * @param  Led: LED to be configured. 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10b      	bne.n	800165c <BSP_LED_Init+0x28>
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <BSP_LED_Init+0x58>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	4a10      	ldr	r2, [pc, #64]	; (800168c <BSP_LED_Init+0x58>)
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <BSP_LED_Init+0x58>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 800165c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001660:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <BSP_LED_Init+0x5c>)
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	f107 020c 	add.w	r2, r7, #12
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fa0d 	bl	8001a9c <HAL_GPIO_Init>
}
 8001682:	bf00      	nop
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	20000004 	.word	0x20000004

08001694 <BSP_LED_On>:
  * @param  Led: LED to be set on 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <BSP_LED_On+0x28>)
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016aa:	b291      	uxth	r1, r2
 80016ac:	2201      	movs	r2, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fb9e 	bl	8001df0 <HAL_GPIO_WritePin>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000004 	.word	0x20000004

080016c0 <BSP_LED_Toggle>:
  * @param  Led: LED to be toggled
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <BSP_LED_Toggle+0x28>)
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d6:	b292      	uxth	r2, r2
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fba0 	bl	8001e20 <HAL_GPIO_TogglePin>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000004 	.word	0x20000004

080016ec <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	460a      	mov	r2, r1
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	4613      	mov	r3, r2
 80016fa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <BSP_PB_Init+0xa0>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	4a22      	ldr	r2, [pc, #136]	; (800178c <BSP_PB_Init+0xa0>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <BSP_PB_Init+0xa0>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d112      	bne.n	8001740 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800171a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001724:	2301      	movs	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001728:	2302      	movs	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4a18      	ldr	r2, [pc, #96]	; (8001790 <BSP_PB_Init+0xa4>)
 8001730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001734:	f107 020c 	add.w	r2, r7, #12
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f9ae 	bl	8001a9c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001740:	79bb      	ldrb	r3, [r7, #6]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d11e      	bne.n	8001784 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800174c:	2301      	movs	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <BSP_PB_Init+0xa8>)
 8001756:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <BSP_PB_Init+0xa4>)
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	f107 020c 	add.w	r2, r7, #12
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f998 	bl	8001a9c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800176c:	2328      	movs	r3, #40	; 0x28
 800176e:	b25b      	sxtb	r3, r3
 8001770:	2200      	movs	r2, #0
 8001772:	210f      	movs	r1, #15
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f95a 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800177a:	2328      	movs	r3, #40	; 0x28
 800177c:	b25b      	sxtb	r3, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f971 	bl	8001a66 <HAL_NVIC_EnableIRQ>
  }
}
 8001784:	bf00      	nop
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000
 8001790:	20000008 	.word	0x20000008
 8001794:	10110000 	.word	0x10110000

08001798 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a2:	2003      	movs	r0, #3
 80017a4:	f000 f938 	bl	8001a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017a8:	2000      	movs	r0, #0
 80017aa:	f000 f80d 	bl	80017c8 <HAL_InitTick>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	71fb      	strb	r3, [r7, #7]
 80017b8:	e001      	b.n	80017be <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ba:	f7ff fdbd 	bl	8001338 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017be:	79fb      	ldrb	r3, [r7, #7]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_InitTick+0x68>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d022      	beq.n	8001822 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_InitTick+0x6c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_InitTick+0x68>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f946 	bl	8001a82 <HAL_SYSTICK_Config>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10f      	bne.n	800181c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	d809      	bhi.n	8001816 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001802:	2200      	movs	r2, #0
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	f04f 30ff 	mov.w	r0, #4294967295
 800180a:	f000 f910 	bl	8001a2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_InitTick+0x70>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e007      	b.n	8001826 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
 800181a:	e004      	b.n	8001826 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
 8001820:	e001      	b.n	8001826 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001826:	7bfb      	ldrb	r3, [r7, #15]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000010 	.word	0x20000010
 8001834:	20000000 	.word	0x20000000
 8001838:	2000000c 	.word	0x2000000c

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_IncTick+0x1c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_IncTick+0x20>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4413      	add	r3, r2
 800184a:	4a03      	ldr	r2, [pc, #12]	; (8001858 <HAL_IncTick+0x1c>)
 800184c:	6013      	str	r3, [r2, #0]
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	200002e0 	.word	0x200002e0
 800185c:	20000010 	.word	0x20000010

08001860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_GetTick+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	200002e0 	.word	0x200002e0

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <__NVIC_EnableIRQ+0x38>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	; (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e4:	d301      	bcc.n	80019ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00f      	b.n	8001a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <SysTick_Config+0x40>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f2:	210f      	movs	r1, #15
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f7ff ff8e 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SysTick_Config+0x40>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SysTick_Config+0x40>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff29 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff3e 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff8e 	bl	800196c <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff5d 	bl	8001918 <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff31 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffa2 	bl	80019d4 <SysTick_Config>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aaa:	e17f      	b.n	8001dac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8171 	beq.w	8001da6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d00b      	beq.n	8001ae4 <HAL_GPIO_Init+0x48>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d007      	beq.n	8001ae4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad8:	2b11      	cmp	r3, #17
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b12      	cmp	r3, #18
 8001ae2:	d130      	bne.n	8001b46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	f003 0201 	and.w	r2, r3, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d118      	bne.n	8001b84 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	f003 0201 	and.w	r2, r3, #1
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x128>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b12      	cmp	r3, #18
 8001bc2:	d123      	bne.n	8001c0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	08da      	lsrs	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3208      	adds	r2, #8
 8001c06:	6939      	ldr	r1, [r7, #16]
 8001c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0203 	and.w	r2, r3, #3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80ac 	beq.w	8001da6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	4b5f      	ldr	r3, [pc, #380]	; (8001dcc <HAL_GPIO_Init+0x330>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c52:	4a5e      	ldr	r2, [pc, #376]	; (8001dcc <HAL_GPIO_Init+0x330>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6613      	str	r3, [r2, #96]	; 0x60
 8001c5a:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <HAL_GPIO_Init+0x330>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c66:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <HAL_GPIO_Init+0x334>)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c90:	d025      	beq.n	8001cde <HAL_GPIO_Init+0x242>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4f      	ldr	r2, [pc, #316]	; (8001dd4 <HAL_GPIO_Init+0x338>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01f      	beq.n	8001cda <HAL_GPIO_Init+0x23e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <HAL_GPIO_Init+0x33c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d019      	beq.n	8001cd6 <HAL_GPIO_Init+0x23a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4d      	ldr	r2, [pc, #308]	; (8001ddc <HAL_GPIO_Init+0x340>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0x236>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4c      	ldr	r2, [pc, #304]	; (8001de0 <HAL_GPIO_Init+0x344>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00d      	beq.n	8001cce <HAL_GPIO_Init+0x232>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4b      	ldr	r2, [pc, #300]	; (8001de4 <HAL_GPIO_Init+0x348>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x22e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_GPIO_Init+0x34c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_GPIO_Init+0x22a>
 8001cc2:	2306      	movs	r3, #6
 8001cc4:	e00c      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e00a      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cca:	2305      	movs	r3, #5
 8001ccc:	e008      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	e006      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e004      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e002      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	f002 0203 	and.w	r2, r2, #3
 8001ce6:	0092      	lsls	r2, r2, #2
 8001ce8:	4093      	lsls	r3, r2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf0:	4937      	ldr	r1, [pc, #220]	; (8001dd0 <HAL_GPIO_Init+0x334>)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d22:	4a32      	ldr	r2, [pc, #200]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d28:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d4c:	4a27      	ldr	r2, [pc, #156]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d76:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da0:	4a12      	ldr	r2, [pc, #72]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa22 f303 	lsr.w	r3, r2, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f47f ae78 	bne.w	8001aac <HAL_GPIO_Init+0x10>
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	48000800 	.word	0x48000800
 8001ddc:	48000c00 	.word	0x48000c00
 8001de0:	48001000 	.word	0x48001000
 8001de4:	48001400 	.word	0x48001400
 8001de8:	48001800 	.word	0x48001800
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e0c:	e002      	b.n	8001e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e38:	887a      	ldrh	r2, [r7, #2]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001e3e:	e002      	b.n	8001e46 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e40:	887a      	ldrh	r2, [r7, #2]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f9e0 	bl	8001238 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40010400 	.word	0x40010400

08001e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e92:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d121      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d11e      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ec4:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10d      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	e004      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d134      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d003      	beq.n	8001f2a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d003      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0xac>
 8001f28:	e005      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f2c:	617b      	str	r3, [r7, #20]
      break;
 8001f2e:	e005      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f32:	617b      	str	r3, [r7, #20]
      break;
 8001f34:	e002      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	617b      	str	r3, [r7, #20]
      break;
 8001f3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	3301      	adds	r3, #1
 8001f48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	0a1b      	lsrs	r3, r3, #8
 8001f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	fb03 f202 	mul.w	r2, r3, r2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	0e5b      	lsrs	r3, r3, #25
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f7c:	69bb      	ldr	r3, [r7, #24]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	08006038 	.word	0x08006038
 8001f94:	00f42400 	.word	0x00f42400
 8001f98:	007a1200 	.word	0x007a1200

08001f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fb8:	f7ff fff0 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4904      	ldr	r1, [pc, #16]	; (8001fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08006030 	.word	0x08006030

08001fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fe4:	f7ff ffda 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	0adb      	lsrs	r3, r3, #11
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4904      	ldr	r1, [pc, #16]	; (8002008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	08006030 	.word	0x08006030

0800200c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e040      	b.n	80020a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002022:	2b00      	cmp	r3, #0
 8002024:	d106      	bne.n	8002034 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff f9a6 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2224      	movs	r2, #36	; 0x24
 8002038:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0201 	bic.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8c0 	bl	80021d0 <UART_SetConfig>
 8002050:	4603      	mov	r3, r0
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e022      	b.n	80020a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fc54 	bl	8002910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002076:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002086:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 fcdb 	bl	8002a54 <UART_CheckIdleState>
 800209e:	4603      	mov	r3, r0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020bc:	2b20      	cmp	r3, #32
 80020be:	f040 8081 	bne.w	80021c4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_UART_Transmit+0x26>
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e079      	b.n	80021c6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_UART_Transmit+0x38>
 80020dc:	2302      	movs	r3, #2
 80020de:	e072      	b.n	80021c6 <HAL_UART_Transmit+0x11e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2221      	movs	r2, #33	; 0x21
 80020f2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80020f4:	f7ff fbb4 	bl	8001860 <HAL_GetTick>
 80020f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	88fa      	ldrh	r2, [r7, #6]
 80020fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	88fa      	ldrh	r2, [r7, #6]
 8002106:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002112:	d108      	bne.n	8002126 <HAL_UART_Transmit+0x7e>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d104      	bne.n	8002126 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	e003      	b.n	800212e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002136:	e02d      	b.n	8002194 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2200      	movs	r2, #0
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fccb 	bl	8002ade <UART_WaitOnFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e039      	b.n	80021c6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10b      	bne.n	8002170 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	881a      	ldrh	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002164:	b292      	uxth	r2, r2
 8002166:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	3302      	adds	r3, #2
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	e008      	b.n	8002182 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	781a      	ldrb	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	b292      	uxth	r2, r2
 800217a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	3301      	adds	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1cb      	bne.n	8002138 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2200      	movs	r2, #0
 80021a8:	2140      	movs	r1, #64	; 0x40
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 fc97 	bl	8002ade <UART_WaitOnFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e005      	b.n	80021c6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2220      	movs	r2, #32
 80021be:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021d4:	b0a0      	sub	sp, #128	; 0x80
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80021da:	2300      	movs	r3, #0
 80021dc:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	49a4      	ldr	r1, [pc, #656]	; (8002498 <UART_SetConfig+0x2c8>)
 8002208:	4019      	ands	r1, r3
 800220a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002210:	430b      	orrs	r3, r1
 8002212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800221e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002220:	68d9      	ldr	r1, [r3, #12]
 8002222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	ea40 0301 	orr.w	r3, r0, r1
 800222a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800222c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b99      	ldr	r3, [pc, #612]	; (800249c <UART_SetConfig+0x2cc>)
 8002238:	429a      	cmp	r2, r3
 800223a:	d004      	beq.n	8002246 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800223c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223e:	6a1a      	ldr	r2, [r3, #32]
 8002240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002242:	4313      	orrs	r3, r2
 8002244:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002256:	430b      	orrs	r3, r1
 8002258:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800225a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b90      	ldr	r3, [pc, #576]	; (80024a0 <UART_SetConfig+0x2d0>)
 8002260:	429a      	cmp	r2, r3
 8002262:	d125      	bne.n	80022b0 <UART_SetConfig+0xe0>
 8002264:	4b8f      	ldr	r3, [pc, #572]	; (80024a4 <UART_SetConfig+0x2d4>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b03      	cmp	r3, #3
 8002270:	d81a      	bhi.n	80022a8 <UART_SetConfig+0xd8>
 8002272:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <UART_SetConfig+0xa8>)
 8002274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002278:	08002289 	.word	0x08002289
 800227c:	08002299 	.word	0x08002299
 8002280:	08002291 	.word	0x08002291
 8002284:	080022a1 	.word	0x080022a1
 8002288:	2301      	movs	r3, #1
 800228a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800228e:	e116      	b.n	80024be <UART_SetConfig+0x2ee>
 8002290:	2302      	movs	r3, #2
 8002292:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002296:	e112      	b.n	80024be <UART_SetConfig+0x2ee>
 8002298:	2304      	movs	r3, #4
 800229a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800229e:	e10e      	b.n	80024be <UART_SetConfig+0x2ee>
 80022a0:	2308      	movs	r3, #8
 80022a2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80022a6:	e10a      	b.n	80024be <UART_SetConfig+0x2ee>
 80022a8:	2310      	movs	r3, #16
 80022aa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80022ae:	e106      	b.n	80024be <UART_SetConfig+0x2ee>
 80022b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b7c      	ldr	r3, [pc, #496]	; (80024a8 <UART_SetConfig+0x2d8>)
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d138      	bne.n	800232c <UART_SetConfig+0x15c>
 80022ba:	4b7a      	ldr	r3, [pc, #488]	; (80024a4 <UART_SetConfig+0x2d4>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b0c      	cmp	r3, #12
 80022c6:	d82d      	bhi.n	8002324 <UART_SetConfig+0x154>
 80022c8:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <UART_SetConfig+0x100>)
 80022ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ce:	bf00      	nop
 80022d0:	08002305 	.word	0x08002305
 80022d4:	08002325 	.word	0x08002325
 80022d8:	08002325 	.word	0x08002325
 80022dc:	08002325 	.word	0x08002325
 80022e0:	08002315 	.word	0x08002315
 80022e4:	08002325 	.word	0x08002325
 80022e8:	08002325 	.word	0x08002325
 80022ec:	08002325 	.word	0x08002325
 80022f0:	0800230d 	.word	0x0800230d
 80022f4:	08002325 	.word	0x08002325
 80022f8:	08002325 	.word	0x08002325
 80022fc:	08002325 	.word	0x08002325
 8002300:	0800231d 	.word	0x0800231d
 8002304:	2300      	movs	r3, #0
 8002306:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800230a:	e0d8      	b.n	80024be <UART_SetConfig+0x2ee>
 800230c:	2302      	movs	r3, #2
 800230e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002312:	e0d4      	b.n	80024be <UART_SetConfig+0x2ee>
 8002314:	2304      	movs	r3, #4
 8002316:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800231a:	e0d0      	b.n	80024be <UART_SetConfig+0x2ee>
 800231c:	2308      	movs	r3, #8
 800231e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002322:	e0cc      	b.n	80024be <UART_SetConfig+0x2ee>
 8002324:	2310      	movs	r3, #16
 8002326:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800232a:	e0c8      	b.n	80024be <UART_SetConfig+0x2ee>
 800232c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b5e      	ldr	r3, [pc, #376]	; (80024ac <UART_SetConfig+0x2dc>)
 8002332:	429a      	cmp	r2, r3
 8002334:	d125      	bne.n	8002382 <UART_SetConfig+0x1b2>
 8002336:	4b5b      	ldr	r3, [pc, #364]	; (80024a4 <UART_SetConfig+0x2d4>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002340:	2b30      	cmp	r3, #48	; 0x30
 8002342:	d016      	beq.n	8002372 <UART_SetConfig+0x1a2>
 8002344:	2b30      	cmp	r3, #48	; 0x30
 8002346:	d818      	bhi.n	800237a <UART_SetConfig+0x1aa>
 8002348:	2b20      	cmp	r3, #32
 800234a:	d00a      	beq.n	8002362 <UART_SetConfig+0x192>
 800234c:	2b20      	cmp	r3, #32
 800234e:	d814      	bhi.n	800237a <UART_SetConfig+0x1aa>
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <UART_SetConfig+0x18a>
 8002354:	2b10      	cmp	r3, #16
 8002356:	d008      	beq.n	800236a <UART_SetConfig+0x19a>
 8002358:	e00f      	b.n	800237a <UART_SetConfig+0x1aa>
 800235a:	2300      	movs	r3, #0
 800235c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002360:	e0ad      	b.n	80024be <UART_SetConfig+0x2ee>
 8002362:	2302      	movs	r3, #2
 8002364:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002368:	e0a9      	b.n	80024be <UART_SetConfig+0x2ee>
 800236a:	2304      	movs	r3, #4
 800236c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002370:	e0a5      	b.n	80024be <UART_SetConfig+0x2ee>
 8002372:	2308      	movs	r3, #8
 8002374:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002378:	e0a1      	b.n	80024be <UART_SetConfig+0x2ee>
 800237a:	2310      	movs	r3, #16
 800237c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002380:	e09d      	b.n	80024be <UART_SetConfig+0x2ee>
 8002382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <UART_SetConfig+0x2e0>)
 8002388:	429a      	cmp	r2, r3
 800238a:	d125      	bne.n	80023d8 <UART_SetConfig+0x208>
 800238c:	4b45      	ldr	r3, [pc, #276]	; (80024a4 <UART_SetConfig+0x2d4>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002396:	2bc0      	cmp	r3, #192	; 0xc0
 8002398:	d016      	beq.n	80023c8 <UART_SetConfig+0x1f8>
 800239a:	2bc0      	cmp	r3, #192	; 0xc0
 800239c:	d818      	bhi.n	80023d0 <UART_SetConfig+0x200>
 800239e:	2b80      	cmp	r3, #128	; 0x80
 80023a0:	d00a      	beq.n	80023b8 <UART_SetConfig+0x1e8>
 80023a2:	2b80      	cmp	r3, #128	; 0x80
 80023a4:	d814      	bhi.n	80023d0 <UART_SetConfig+0x200>
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <UART_SetConfig+0x1e0>
 80023aa:	2b40      	cmp	r3, #64	; 0x40
 80023ac:	d008      	beq.n	80023c0 <UART_SetConfig+0x1f0>
 80023ae:	e00f      	b.n	80023d0 <UART_SetConfig+0x200>
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80023b6:	e082      	b.n	80024be <UART_SetConfig+0x2ee>
 80023b8:	2302      	movs	r3, #2
 80023ba:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80023be:	e07e      	b.n	80024be <UART_SetConfig+0x2ee>
 80023c0:	2304      	movs	r3, #4
 80023c2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80023c6:	e07a      	b.n	80024be <UART_SetConfig+0x2ee>
 80023c8:	2308      	movs	r3, #8
 80023ca:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80023ce:	e076      	b.n	80024be <UART_SetConfig+0x2ee>
 80023d0:	2310      	movs	r3, #16
 80023d2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80023d6:	e072      	b.n	80024be <UART_SetConfig+0x2ee>
 80023d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b35      	ldr	r3, [pc, #212]	; (80024b4 <UART_SetConfig+0x2e4>)
 80023de:	429a      	cmp	r2, r3
 80023e0:	d12a      	bne.n	8002438 <UART_SetConfig+0x268>
 80023e2:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <UART_SetConfig+0x2d4>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023f0:	d01a      	beq.n	8002428 <UART_SetConfig+0x258>
 80023f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023f6:	d81b      	bhi.n	8002430 <UART_SetConfig+0x260>
 80023f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fc:	d00c      	beq.n	8002418 <UART_SetConfig+0x248>
 80023fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002402:	d815      	bhi.n	8002430 <UART_SetConfig+0x260>
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <UART_SetConfig+0x240>
 8002408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800240c:	d008      	beq.n	8002420 <UART_SetConfig+0x250>
 800240e:	e00f      	b.n	8002430 <UART_SetConfig+0x260>
 8002410:	2300      	movs	r3, #0
 8002412:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002416:	e052      	b.n	80024be <UART_SetConfig+0x2ee>
 8002418:	2302      	movs	r3, #2
 800241a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800241e:	e04e      	b.n	80024be <UART_SetConfig+0x2ee>
 8002420:	2304      	movs	r3, #4
 8002422:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002426:	e04a      	b.n	80024be <UART_SetConfig+0x2ee>
 8002428:	2308      	movs	r3, #8
 800242a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800242e:	e046      	b.n	80024be <UART_SetConfig+0x2ee>
 8002430:	2310      	movs	r3, #16
 8002432:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002436:	e042      	b.n	80024be <UART_SetConfig+0x2ee>
 8002438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <UART_SetConfig+0x2cc>)
 800243e:	429a      	cmp	r2, r3
 8002440:	d13a      	bne.n	80024b8 <UART_SetConfig+0x2e8>
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <UART_SetConfig+0x2d4>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800244c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002450:	d01a      	beq.n	8002488 <UART_SetConfig+0x2b8>
 8002452:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002456:	d81b      	bhi.n	8002490 <UART_SetConfig+0x2c0>
 8002458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800245c:	d00c      	beq.n	8002478 <UART_SetConfig+0x2a8>
 800245e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002462:	d815      	bhi.n	8002490 <UART_SetConfig+0x2c0>
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <UART_SetConfig+0x2a0>
 8002468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246c:	d008      	beq.n	8002480 <UART_SetConfig+0x2b0>
 800246e:	e00f      	b.n	8002490 <UART_SetConfig+0x2c0>
 8002470:	2300      	movs	r3, #0
 8002472:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002476:	e022      	b.n	80024be <UART_SetConfig+0x2ee>
 8002478:	2302      	movs	r3, #2
 800247a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800247e:	e01e      	b.n	80024be <UART_SetConfig+0x2ee>
 8002480:	2304      	movs	r3, #4
 8002482:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002486:	e01a      	b.n	80024be <UART_SetConfig+0x2ee>
 8002488:	2308      	movs	r3, #8
 800248a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800248e:	e016      	b.n	80024be <UART_SetConfig+0x2ee>
 8002490:	2310      	movs	r3, #16
 8002492:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002496:	e012      	b.n	80024be <UART_SetConfig+0x2ee>
 8002498:	efff69f3 	.word	0xefff69f3
 800249c:	40008000 	.word	0x40008000
 80024a0:	40013800 	.word	0x40013800
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40004400 	.word	0x40004400
 80024ac:	40004800 	.word	0x40004800
 80024b0:	40004c00 	.word	0x40004c00
 80024b4:	40005000 	.word	0x40005000
 80024b8:	2310      	movs	r3, #16
 80024ba:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80024be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4bb6      	ldr	r3, [pc, #728]	; (800279c <UART_SetConfig+0x5cc>)
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 810c 	bne.w	80026e2 <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80024ca:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d823      	bhi.n	800251a <UART_SetConfig+0x34a>
 80024d2:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <UART_SetConfig+0x308>)
 80024d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d8:	080024fd 	.word	0x080024fd
 80024dc:	0800251b 	.word	0x0800251b
 80024e0:	08002505 	.word	0x08002505
 80024e4:	0800251b 	.word	0x0800251b
 80024e8:	0800250b 	.word	0x0800250b
 80024ec:	0800251b 	.word	0x0800251b
 80024f0:	0800251b 	.word	0x0800251b
 80024f4:	0800251b 	.word	0x0800251b
 80024f8:	08002513 	.word	0x08002513
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80024fc:	f7ff fd5a 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8002500:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002502:	e00e      	b.n	8002522 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002504:	4ba6      	ldr	r3, [pc, #664]	; (80027a0 <UART_SetConfig+0x5d0>)
 8002506:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002508:	e00b      	b.n	8002522 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800250a:	f7ff fcbb 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 800250e:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002510:	e007      	b.n	8002522 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002516:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002518:	e003      	b.n	8002522 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8002520:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 81e5 	beq.w	80028f4 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800252a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	441a      	add	r2, r3
 8002534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002536:	4293      	cmp	r3, r2
 8002538:	d305      	bcc.n	8002546 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800253a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002542:	4293      	cmp	r3, r2
 8002544:	d903      	bls.n	800254e <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800254c:	e1d2      	b.n	80028f4 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 800254e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002552:	2b08      	cmp	r3, #8
 8002554:	f200 80b0 	bhi.w	80026b8 <UART_SetConfig+0x4e8>
 8002558:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <UART_SetConfig+0x390>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	08002585 	.word	0x08002585
 8002564:	080026b9 	.word	0x080026b9
 8002568:	080025e5 	.word	0x080025e5
 800256c:	080026b9 	.word	0x080026b9
 8002570:	08002625 	.word	0x08002625
 8002574:	080026b9 	.word	0x080026b9
 8002578:	080026b9 	.word	0x080026b9
 800257c:	080026b9 	.word	0x080026b9
 8002580:	08002681 	.word	0x08002681
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002584:	f7ff fd16 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8002588:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800258a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800258c:	2200      	movs	r2, #0
 800258e:	4698      	mov	r8, r3
 8002590:	4691      	mov	r9, r2
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800259e:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80025a2:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80025a6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80025a8:	6849      	ldr	r1, [r1, #4]
 80025aa:	0849      	lsrs	r1, r1, #1
 80025ac:	2000      	movs	r0, #0
 80025ae:	6539      	str	r1, [r7, #80]	; 0x50
 80025b0:	6578      	str	r0, [r7, #84]	; 0x54
 80025b2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80025b6:	4621      	mov	r1, r4
 80025b8:	1851      	adds	r1, r2, r1
 80025ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80025bc:	4629      	mov	r1, r5
 80025be:	eb43 0101 	adc.w	r1, r3, r1
 80025c2:	64f9      	str	r1, [r7, #76]	; 0x4c
 80025c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	643b      	str	r3, [r7, #64]	; 0x40
 80025cc:	647a      	str	r2, [r7, #68]	; 0x44
 80025ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80025d6:	f7fe fae7 	bl	8000ba8 <__aeabi_uldivmod>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4613      	mov	r3, r2
 80025e0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80025e2:	e06d      	b.n	80026c0 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80025e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	2200      	movs	r2, #0
 80025ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ee:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025f0:	4b6c      	ldr	r3, [pc, #432]	; (80027a4 <UART_SetConfig+0x5d4>)
 80025f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025f6:	4602      	mov	r2, r0
 80025f8:	18d3      	adds	r3, r2, r3
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30
 80025fc:	460b      	mov	r3, r1
 80025fe:	f143 0300 	adc.w	r3, r3, #0
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
 8002604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
 800260c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800260e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002612:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002616:	f7fe fac7 	bl	8000ba8 <__aeabi_uldivmod>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4613      	mov	r3, r2
 8002620:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8002622:	e04d      	b.n	80026c0 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002624:	f7ff fc2e 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8002628:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800262a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800262c:	2200      	movs	r2, #0
 800262e:	461c      	mov	r4, r3
 8002630:	4615      	mov	r5, r2
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	022b      	lsls	r3, r5, #8
 800263c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002640:	0222      	lsls	r2, r4, #8
 8002642:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002644:	6849      	ldr	r1, [r1, #4]
 8002646:	0849      	lsrs	r1, r1, #1
 8002648:	2000      	movs	r0, #0
 800264a:	6239      	str	r1, [r7, #32]
 800264c:	6278      	str	r0, [r7, #36]	; 0x24
 800264e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002652:	4621      	mov	r1, r4
 8002654:	1851      	adds	r1, r2, r1
 8002656:	61b9      	str	r1, [r7, #24]
 8002658:	4629      	mov	r1, r5
 800265a:	eb43 0101 	adc.w	r1, r3, r1
 800265e:	61f9      	str	r1, [r7, #28]
 8002660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	617a      	str	r2, [r7, #20]
 800266a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800266e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002672:	f7fe fa99 	bl	8000ba8 <__aeabi_uldivmod>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4613      	mov	r3, r2
 800267c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800267e:	e01f      	b.n	80026c0 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	2200      	movs	r2, #0
 8002688:	469a      	mov	sl, r3
 800268a:	4693      	mov	fp, r2
 800268c:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	f14b 0300 	adc.w	r3, fp, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026aa:	f7fe fa7d 	bl	8000ba8 <__aeabi_uldivmod>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4613      	mov	r3, r2
 80026b4:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80026b6:	e003      	b.n	80026c0 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 80026be:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026c6:	d308      	bcc.n	80026da <UART_SetConfig+0x50a>
 80026c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ce:	d204      	bcs.n	80026da <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 80026d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026d6:	60da      	str	r2, [r3, #12]
 80026d8:	e10c      	b.n	80028f4 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80026e0:	e108      	b.n	80028f4 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ea:	f040 808f 	bne.w	800280c <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 80026ee:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d864      	bhi.n	80027c0 <UART_SetConfig+0x5f0>
 80026f6:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <UART_SetConfig+0x52c>)
 80026f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fc:	08002721 	.word	0x08002721
 8002700:	08002741 	.word	0x08002741
 8002704:	08002761 	.word	0x08002761
 8002708:	080027c1 	.word	0x080027c1
 800270c:	0800277d 	.word	0x0800277d
 8002710:	080027c1 	.word	0x080027c1
 8002714:	080027c1 	.word	0x080027c1
 8002718:	080027c1 	.word	0x080027c1
 800271c:	080027a9 	.word	0x080027a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002720:	f7ff fc48 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8002724:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002728:	005a      	lsls	r2, r3, #1
 800272a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	441a      	add	r2, r3
 8002732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	b29b      	uxth	r3, r3
 800273c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800273e:	e043      	b.n	80027c8 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002740:	f7ff fc4e 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 8002744:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002746:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002748:	005a      	lsls	r2, r3, #1
 800274a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	441a      	add	r2, r3
 8002752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	b29b      	uxth	r3, r3
 800275c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800275e:	e033      	b.n	80027c8 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800276a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800276e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002770:	6852      	ldr	r2, [r2, #4]
 8002772:	fbb3 f3f2 	udiv	r3, r3, r2
 8002776:	b29b      	uxth	r3, r3
 8002778:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800277a:	e025      	b.n	80027c8 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800277c:	f7ff fb82 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8002780:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002784:	005a      	lsls	r2, r3, #1
 8002786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	441a      	add	r2, r3
 800278e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	b29b      	uxth	r3, r3
 8002798:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800279a:	e015      	b.n	80027c8 <UART_SetConfig+0x5f8>
 800279c:	40008000 	.word	0x40008000
 80027a0:	00f42400 	.word	0x00f42400
 80027a4:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80027a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80027b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80027be:	e003      	b.n	80027c8 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 80027c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ca:	2b0f      	cmp	r3, #15
 80027cc:	d91a      	bls.n	8002804 <UART_SetConfig+0x634>
 80027ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d4:	d216      	bcs.n	8002804 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f023 030f 	bic.w	r3, r3, #15
 80027de:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 80027f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	e077      	b.n	80028f4 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800280a:	e073      	b.n	80028f4 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 800280c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002810:	2b08      	cmp	r3, #8
 8002812:	d85c      	bhi.n	80028ce <UART_SetConfig+0x6fe>
 8002814:	a201      	add	r2, pc, #4	; (adr r2, 800281c <UART_SetConfig+0x64c>)
 8002816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281a:	bf00      	nop
 800281c:	08002841 	.word	0x08002841
 8002820:	0800285f 	.word	0x0800285f
 8002824:	0800287d 	.word	0x0800287d
 8002828:	080028cf 	.word	0x080028cf
 800282c:	08002899 	.word	0x08002899
 8002830:	080028cf 	.word	0x080028cf
 8002834:	080028cf 	.word	0x080028cf
 8002838:	080028cf 	.word	0x080028cf
 800283c:	080028b7 	.word	0x080028b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002840:	f7ff fbb8 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8002844:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	085a      	lsrs	r2, r3, #1
 800284c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800284e:	441a      	add	r2, r3
 8002850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	b29b      	uxth	r3, r3
 800285a:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800285c:	e03b      	b.n	80028d6 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800285e:	f7ff fbbf 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 8002862:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	085a      	lsrs	r2, r3, #1
 800286a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286c:	441a      	add	r2, r3
 800286e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	fbb2 f3f3 	udiv	r3, r2, r3
 8002876:	b29b      	uxth	r3, r3
 8002878:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800287a:	e02c      	b.n	80028d6 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800287c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002886:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800288a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800288c:	6852      	ldr	r2, [r2, #4]
 800288e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002892:	b29b      	uxth	r3, r3
 8002894:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8002896:	e01e      	b.n	80028d6 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002898:	f7ff faf4 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 800289c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800289e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	085a      	lsrs	r2, r3, #1
 80028a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a6:	441a      	add	r2, r3
 80028a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80028b4:	e00f      	b.n	80028d6 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80028b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80028c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80028cc:	e003      	b.n	80028d6 <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 80028d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d8:	2b0f      	cmp	r3, #15
 80028da:	d908      	bls.n	80028ee <UART_SetConfig+0x71e>
 80028dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e2:	d204      	bcs.n	80028ee <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 80028e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	e002      	b.n	80028f4 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f6:	2200      	movs	r2, #0
 80028f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80028fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028fc:	2200      	movs	r2, #0
 80028fe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002900:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8002904:	4618      	mov	r0, r3
 8002906:	3780      	adds	r7, #128	; 0x80
 8002908:	46bd      	mov	sp, r7
 800290a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800290e:	bf00      	nop

08002910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01a      	beq.n	8002a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0e:	d10a      	bne.n	8002a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	605a      	str	r2, [r3, #4]
  }
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002a62:	f7fe fefd 	bl	8001860 <HAL_GetTick>
 8002a66:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d10e      	bne.n	8002a94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f82a 	bl	8002ade <UART_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e020      	b.n	8002ad6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d10e      	bne.n	8002ac0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aa2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f814 	bl	8002ade <UART_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e00a      	b.n	8002ad6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	4613      	mov	r3, r2
 8002aec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aee:	e05d      	b.n	8002bac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af6:	d059      	beq.n	8002bac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af8:	f7fe feb2 	bl	8001860 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d302      	bcc.n	8002b0e <UART_WaitOnFlagUntilTimeout+0x30>
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d11b      	bne.n	8002b46 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b1c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e042      	b.n	8002bcc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d02b      	beq.n	8002bac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b62:	d123      	bne.n	8002bac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b6c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b7c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e00f      	b.n	8002bcc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d092      	beq.n	8002af0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <findslot>:
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <findslot+0x2c>)
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	4604      	mov	r4, r0
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	b118      	cbz	r0, 8002be6 <findslot+0x12>
 8002bde:	6983      	ldr	r3, [r0, #24]
 8002be0:	b90b      	cbnz	r3, 8002be6 <findslot+0x12>
 8002be2:	f000 faf9 	bl	80031d8 <__sinit>
 8002be6:	2c13      	cmp	r4, #19
 8002be8:	d807      	bhi.n	8002bfa <findslot+0x26>
 8002bea:	4806      	ldr	r0, [pc, #24]	; (8002c04 <findslot+0x30>)
 8002bec:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002bf0:	3201      	adds	r2, #1
 8002bf2:	d002      	beq.n	8002bfa <findslot+0x26>
 8002bf4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002bf8:	bd10      	pop	{r4, pc}
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	e7fc      	b.n	8002bf8 <findslot+0x24>
 8002bfe:	bf00      	nop
 8002c00:	2000001c 	.word	0x2000001c
 8002c04:	200002f0 	.word	0x200002f0

08002c08 <error>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	4604      	mov	r4, r0
 8002c0c:	f000 fa86 	bl	800311c <__errno>
 8002c10:	2613      	movs	r6, #19
 8002c12:	4605      	mov	r5, r0
 8002c14:	2700      	movs	r7, #0
 8002c16:	4630      	mov	r0, r6
 8002c18:	4639      	mov	r1, r7
 8002c1a:	beab      	bkpt	0x00ab
 8002c1c:	4606      	mov	r6, r0
 8002c1e:	602e      	str	r6, [r5, #0]
 8002c20:	4620      	mov	r0, r4
 8002c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c24 <checkerror>:
 8002c24:	1c43      	adds	r3, r0, #1
 8002c26:	d101      	bne.n	8002c2c <checkerror+0x8>
 8002c28:	f7ff bfee 	b.w	8002c08 <error>
 8002c2c:	4770      	bx	lr

08002c2e <_swiread>:
 8002c2e:	b530      	push	{r4, r5, lr}
 8002c30:	b085      	sub	sp, #20
 8002c32:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002c36:	9203      	str	r2, [sp, #12]
 8002c38:	2406      	movs	r4, #6
 8002c3a:	ad01      	add	r5, sp, #4
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	4629      	mov	r1, r5
 8002c40:	beab      	bkpt	0x00ab
 8002c42:	4604      	mov	r4, r0
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7ff ffed 	bl	8002c24 <checkerror>
 8002c4a:	b005      	add	sp, #20
 8002c4c:	bd30      	pop	{r4, r5, pc}

08002c4e <_read>:
 8002c4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c50:	4615      	mov	r5, r2
 8002c52:	9101      	str	r1, [sp, #4]
 8002c54:	f7ff ffbe 	bl	8002bd4 <findslot>
 8002c58:	9901      	ldr	r1, [sp, #4]
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	b938      	cbnz	r0, 8002c6e <_read+0x20>
 8002c5e:	f000 fa5d 	bl	800311c <__errno>
 8002c62:	2309      	movs	r3, #9
 8002c64:	6003      	str	r3, [r0, #0]
 8002c66:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6a:	b003      	add	sp, #12
 8002c6c:	bd30      	pop	{r4, r5, pc}
 8002c6e:	6800      	ldr	r0, [r0, #0]
 8002c70:	462a      	mov	r2, r5
 8002c72:	f7ff ffdc 	bl	8002c2e <_swiread>
 8002c76:	1c43      	adds	r3, r0, #1
 8002c78:	d0f7      	beq.n	8002c6a <_read+0x1c>
 8002c7a:	6863      	ldr	r3, [r4, #4]
 8002c7c:	1a2a      	subs	r2, r5, r0
 8002c7e:	4413      	add	r3, r2
 8002c80:	6063      	str	r3, [r4, #4]
 8002c82:	4610      	mov	r0, r2
 8002c84:	e7f1      	b.n	8002c6a <_read+0x1c>

08002c86 <_swilseek>:
 8002c86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c88:	460c      	mov	r4, r1
 8002c8a:	4616      	mov	r6, r2
 8002c8c:	f7ff ffa2 	bl	8002bd4 <findslot>
 8002c90:	4605      	mov	r5, r0
 8002c92:	b940      	cbnz	r0, 8002ca6 <_swilseek+0x20>
 8002c94:	f000 fa42 	bl	800311c <__errno>
 8002c98:	2309      	movs	r3, #9
 8002c9a:	6003      	str	r3, [r0, #0]
 8002c9c:	f04f 34ff 	mov.w	r4, #4294967295
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	b003      	add	sp, #12
 8002ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca6:	2e02      	cmp	r6, #2
 8002ca8:	d903      	bls.n	8002cb2 <_swilseek+0x2c>
 8002caa:	f000 fa37 	bl	800311c <__errno>
 8002cae:	2316      	movs	r3, #22
 8002cb0:	e7f3      	b.n	8002c9a <_swilseek+0x14>
 8002cb2:	2e01      	cmp	r6, #1
 8002cb4:	d112      	bne.n	8002cdc <_swilseek+0x56>
 8002cb6:	6843      	ldr	r3, [r0, #4]
 8002cb8:	18e4      	adds	r4, r4, r3
 8002cba:	d4f6      	bmi.n	8002caa <_swilseek+0x24>
 8002cbc:	682b      	ldr	r3, [r5, #0]
 8002cbe:	260a      	movs	r6, #10
 8002cc0:	e9cd 3400 	strd	r3, r4, [sp]
 8002cc4:	466f      	mov	r7, sp
 8002cc6:	4630      	mov	r0, r6
 8002cc8:	4639      	mov	r1, r7
 8002cca:	beab      	bkpt	0x00ab
 8002ccc:	4606      	mov	r6, r0
 8002cce:	4630      	mov	r0, r6
 8002cd0:	f7ff ffa8 	bl	8002c24 <checkerror>
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	dbe1      	blt.n	8002c9c <_swilseek+0x16>
 8002cd8:	606c      	str	r4, [r5, #4]
 8002cda:	e7e1      	b.n	8002ca0 <_swilseek+0x1a>
 8002cdc:	2e02      	cmp	r6, #2
 8002cde:	d1ed      	bne.n	8002cbc <_swilseek+0x36>
 8002ce0:	6803      	ldr	r3, [r0, #0]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	260c      	movs	r6, #12
 8002ce6:	466f      	mov	r7, sp
 8002ce8:	4630      	mov	r0, r6
 8002cea:	4639      	mov	r1, r7
 8002cec:	beab      	bkpt	0x00ab
 8002cee:	4606      	mov	r6, r0
 8002cf0:	4630      	mov	r0, r6
 8002cf2:	f7ff ff97 	bl	8002c24 <checkerror>
 8002cf6:	1c43      	adds	r3, r0, #1
 8002cf8:	d0d0      	beq.n	8002c9c <_swilseek+0x16>
 8002cfa:	4404      	add	r4, r0
 8002cfc:	e7de      	b.n	8002cbc <_swilseek+0x36>

08002cfe <_lseek>:
 8002cfe:	f7ff bfc2 	b.w	8002c86 <_swilseek>

08002d02 <_swiwrite>:
 8002d02:	b530      	push	{r4, r5, lr}
 8002d04:	b085      	sub	sp, #20
 8002d06:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002d0a:	9203      	str	r2, [sp, #12]
 8002d0c:	2405      	movs	r4, #5
 8002d0e:	ad01      	add	r5, sp, #4
 8002d10:	4620      	mov	r0, r4
 8002d12:	4629      	mov	r1, r5
 8002d14:	beab      	bkpt	0x00ab
 8002d16:	4604      	mov	r4, r0
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f7ff ff83 	bl	8002c24 <checkerror>
 8002d1e:	b005      	add	sp, #20
 8002d20:	bd30      	pop	{r4, r5, pc}

08002d22 <_write>:
 8002d22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d24:	4615      	mov	r5, r2
 8002d26:	9101      	str	r1, [sp, #4]
 8002d28:	f7ff ff54 	bl	8002bd4 <findslot>
 8002d2c:	9901      	ldr	r1, [sp, #4]
 8002d2e:	4604      	mov	r4, r0
 8002d30:	b930      	cbnz	r0, 8002d40 <_write+0x1e>
 8002d32:	f000 f9f3 	bl	800311c <__errno>
 8002d36:	2309      	movs	r3, #9
 8002d38:	6003      	str	r3, [r0, #0]
 8002d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3e:	e012      	b.n	8002d66 <_write+0x44>
 8002d40:	6800      	ldr	r0, [r0, #0]
 8002d42:	462a      	mov	r2, r5
 8002d44:	f7ff ffdd 	bl	8002d02 <_swiwrite>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	dbf6      	blt.n	8002d3a <_write+0x18>
 8002d4c:	6862      	ldr	r2, [r4, #4]
 8002d4e:	1a2b      	subs	r3, r5, r0
 8002d50:	441a      	add	r2, r3
 8002d52:	42a8      	cmp	r0, r5
 8002d54:	6062      	str	r2, [r4, #4]
 8002d56:	d105      	bne.n	8002d64 <_write+0x42>
 8002d58:	2000      	movs	r0, #0
 8002d5a:	b003      	add	sp, #12
 8002d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d60:	f7ff bf52 	b.w	8002c08 <error>
 8002d64:	4618      	mov	r0, r3
 8002d66:	b003      	add	sp, #12
 8002d68:	bd30      	pop	{r4, r5, pc}

08002d6a <_swiclose>:
 8002d6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d6c:	2402      	movs	r4, #2
 8002d6e:	9001      	str	r0, [sp, #4]
 8002d70:	ad01      	add	r5, sp, #4
 8002d72:	4620      	mov	r0, r4
 8002d74:	4629      	mov	r1, r5
 8002d76:	beab      	bkpt	0x00ab
 8002d78:	4604      	mov	r4, r0
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f7ff ff52 	bl	8002c24 <checkerror>
 8002d80:	b003      	add	sp, #12
 8002d82:	bd30      	pop	{r4, r5, pc}

08002d84 <_close>:
 8002d84:	b538      	push	{r3, r4, r5, lr}
 8002d86:	4605      	mov	r5, r0
 8002d88:	f7ff ff24 	bl	8002bd4 <findslot>
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	b930      	cbnz	r0, 8002d9e <_close+0x1a>
 8002d90:	f000 f9c4 	bl	800311c <__errno>
 8002d94:	2309      	movs	r3, #9
 8002d96:	6003      	str	r3, [r0, #0]
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	bd38      	pop	{r3, r4, r5, pc}
 8002d9e:	3d01      	subs	r5, #1
 8002da0:	2d01      	cmp	r5, #1
 8002da2:	d809      	bhi.n	8002db8 <_close+0x34>
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <_close+0x48>)
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d104      	bne.n	8002db8 <_close+0x34>
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	6003      	str	r3, [r0, #0]
 8002db4:	2000      	movs	r0, #0
 8002db6:	e7f1      	b.n	8002d9c <_close+0x18>
 8002db8:	6820      	ldr	r0, [r4, #0]
 8002dba:	f7ff ffd6 	bl	8002d6a <_swiclose>
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d1ec      	bne.n	8002d9c <_close+0x18>
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	6023      	str	r3, [r4, #0]
 8002dc8:	e7e8      	b.n	8002d9c <_close+0x18>
 8002dca:	bf00      	nop
 8002dcc:	200002f0 	.word	0x200002f0

08002dd0 <_getpid>:
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	4770      	bx	lr

08002dd4 <_swistat>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	f7ff fefc 	bl	8002bd4 <findslot>
 8002ddc:	4605      	mov	r5, r0
 8002dde:	b930      	cbnz	r0, 8002dee <_swistat+0x1a>
 8002de0:	f000 f99c 	bl	800311c <__errno>
 8002de4:	2309      	movs	r3, #9
 8002de6:	6003      	str	r3, [r0, #0]
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	bd70      	pop	{r4, r5, r6, pc}
 8002dee:	6863      	ldr	r3, [r4, #4]
 8002df0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002df4:	6063      	str	r3, [r4, #4]
 8002df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dfa:	64a3      	str	r3, [r4, #72]	; 0x48
 8002dfc:	260c      	movs	r6, #12
 8002dfe:	4630      	mov	r0, r6
 8002e00:	4629      	mov	r1, r5
 8002e02:	beab      	bkpt	0x00ab
 8002e04:	4605      	mov	r5, r0
 8002e06:	4628      	mov	r0, r5
 8002e08:	f7ff ff0c 	bl	8002c24 <checkerror>
 8002e0c:	1c43      	adds	r3, r0, #1
 8002e0e:	bf1c      	itt	ne
 8002e10:	6120      	strne	r0, [r4, #16]
 8002e12:	2000      	movne	r0, #0
 8002e14:	e7ea      	b.n	8002dec <_swistat+0x18>

08002e16 <_fstat>:
 8002e16:	460b      	mov	r3, r1
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4604      	mov	r4, r0
 8002e1e:	2258      	movs	r2, #88	; 0x58
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 faac 	bl	800337e <memset>
 8002e26:	4601      	mov	r1, r0
 8002e28:	4620      	mov	r0, r4
 8002e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e2e:	f7ff bfd1 	b.w	8002dd4 <_swistat>

08002e32 <_stat>:
 8002e32:	b538      	push	{r3, r4, r5, lr}
 8002e34:	460d      	mov	r5, r1
 8002e36:	4604      	mov	r4, r0
 8002e38:	2258      	movs	r2, #88	; 0x58
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	f000 fa9e 	bl	800337e <memset>
 8002e42:	4620      	mov	r0, r4
 8002e44:	2100      	movs	r1, #0
 8002e46:	f000 f811 	bl	8002e6c <_swiopen>
 8002e4a:	1c43      	adds	r3, r0, #1
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	d00b      	beq.n	8002e68 <_stat+0x36>
 8002e50:	686b      	ldr	r3, [r5, #4]
 8002e52:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002e56:	606b      	str	r3, [r5, #4]
 8002e58:	4629      	mov	r1, r5
 8002e5a:	f7ff ffbb 	bl	8002dd4 <_swistat>
 8002e5e:	4605      	mov	r5, r0
 8002e60:	4620      	mov	r0, r4
 8002e62:	f7ff ff8f 	bl	8002d84 <_close>
 8002e66:	462c      	mov	r4, r5
 8002e68:	4620      	mov	r0, r4
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}

08002e6c <_swiopen>:
 8002e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e70:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002f1c <_swiopen+0xb0>
 8002e74:	b097      	sub	sp, #92	; 0x5c
 8002e76:	4607      	mov	r7, r0
 8002e78:	460e      	mov	r6, r1
 8002e7a:	2500      	movs	r5, #0
 8002e7c:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8002e80:	1c61      	adds	r1, r4, #1
 8002e82:	d037      	beq.n	8002ef4 <_swiopen+0x88>
 8002e84:	3501      	adds	r5, #1
 8002e86:	2d14      	cmp	r5, #20
 8002e88:	d1f8      	bne.n	8002e7c <_swiopen+0x10>
 8002e8a:	f000 f947 	bl	800311c <__errno>
 8002e8e:	2318      	movs	r3, #24
 8002e90:	6003      	str	r3, [r0, #0]
 8002e92:	f04f 34ff 	mov.w	r4, #4294967295
 8002e96:	e03d      	b.n	8002f14 <_swiopen+0xa8>
 8002e98:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002e9c:	f240 6301 	movw	r3, #1537	; 0x601
 8002ea0:	07b2      	lsls	r2, r6, #30
 8002ea2:	bf48      	it	mi
 8002ea4:	f044 0402 	orrmi.w	r4, r4, #2
 8002ea8:	421e      	tst	r6, r3
 8002eaa:	bf18      	it	ne
 8002eac:	f044 0404 	orrne.w	r4, r4, #4
 8002eb0:	0733      	lsls	r3, r6, #28
 8002eb2:	bf48      	it	mi
 8002eb4:	f024 0404 	bicmi.w	r4, r4, #4
 8002eb8:	4638      	mov	r0, r7
 8002eba:	bf48      	it	mi
 8002ebc:	f044 0408 	orrmi.w	r4, r4, #8
 8002ec0:	9700      	str	r7, [sp, #0]
 8002ec2:	f7fd f985 	bl	80001d0 <strlen>
 8002ec6:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002eca:	2401      	movs	r4, #1
 8002ecc:	4620      	mov	r0, r4
 8002ece:	4649      	mov	r1, r9
 8002ed0:	beab      	bkpt	0x00ab
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	2c00      	cmp	r4, #0
 8002ed6:	db08      	blt.n	8002eea <_swiopen+0x7e>
 8002ed8:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002edc:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f8c8 3004 	str.w	r3, [r8, #4]
 8002ee6:	462c      	mov	r4, r5
 8002ee8:	e014      	b.n	8002f14 <_swiopen+0xa8>
 8002eea:	4620      	mov	r0, r4
 8002eec:	f7ff fe8c 	bl	8002c08 <error>
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	e00f      	b.n	8002f14 <_swiopen+0xa8>
 8002ef4:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002ef8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002efc:	46e9      	mov	r9, sp
 8002efe:	d1cb      	bne.n	8002e98 <_swiopen+0x2c>
 8002f00:	4649      	mov	r1, r9
 8002f02:	4638      	mov	r0, r7
 8002f04:	f7ff ff95 	bl	8002e32 <_stat>
 8002f08:	3001      	adds	r0, #1
 8002f0a:	d0c5      	beq.n	8002e98 <_swiopen+0x2c>
 8002f0c:	f000 f906 	bl	800311c <__errno>
 8002f10:	2311      	movs	r3, #17
 8002f12:	6003      	str	r3, [r0, #0]
 8002f14:	4620      	mov	r0, r4
 8002f16:	b017      	add	sp, #92	; 0x5c
 8002f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f1c:	200002f0 	.word	0x200002f0

08002f20 <_get_semihosting_exts>:
 8002f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002f24:	4606      	mov	r6, r0
 8002f26:	460f      	mov	r7, r1
 8002f28:	482a      	ldr	r0, [pc, #168]	; (8002fd4 <_get_semihosting_exts+0xb4>)
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4615      	mov	r5, r2
 8002f2e:	f7ff ff9d 	bl	8002e6c <_swiopen>
 8002f32:	462a      	mov	r2, r5
 8002f34:	4604      	mov	r4, r0
 8002f36:	2100      	movs	r1, #0
 8002f38:	4630      	mov	r0, r6
 8002f3a:	f000 fa20 	bl	800337e <memset>
 8002f3e:	1c63      	adds	r3, r4, #1
 8002f40:	d016      	beq.n	8002f70 <_get_semihosting_exts+0x50>
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff fe46 	bl	8002bd4 <findslot>
 8002f48:	f04f 090c 	mov.w	r9, #12
 8002f4c:	4680      	mov	r8, r0
 8002f4e:	4648      	mov	r0, r9
 8002f50:	4641      	mov	r1, r8
 8002f52:	beab      	bkpt	0x00ab
 8002f54:	4680      	mov	r8, r0
 8002f56:	4640      	mov	r0, r8
 8002f58:	f7ff fe64 	bl	8002c24 <checkerror>
 8002f5c:	2803      	cmp	r0, #3
 8002f5e:	dd02      	ble.n	8002f66 <_get_semihosting_exts+0x46>
 8002f60:	1ec3      	subs	r3, r0, #3
 8002f62:	42ab      	cmp	r3, r5
 8002f64:	dc08      	bgt.n	8002f78 <_get_semihosting_exts+0x58>
 8002f66:	4620      	mov	r0, r4
 8002f68:	f7ff ff0c 	bl	8002d84 <_close>
 8002f6c:	f04f 34ff 	mov.w	r4, #4294967295
 8002f70:	4620      	mov	r0, r4
 8002f72:	b003      	add	sp, #12
 8002f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f78:	2204      	movs	r2, #4
 8002f7a:	eb0d 0102 	add.w	r1, sp, r2
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f7ff fe65 	bl	8002c4e <_read>
 8002f84:	2803      	cmp	r0, #3
 8002f86:	ddee      	ble.n	8002f66 <_get_semihosting_exts+0x46>
 8002f88:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f8c:	2b53      	cmp	r3, #83	; 0x53
 8002f8e:	d1ea      	bne.n	8002f66 <_get_semihosting_exts+0x46>
 8002f90:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002f94:	2b48      	cmp	r3, #72	; 0x48
 8002f96:	d1e6      	bne.n	8002f66 <_get_semihosting_exts+0x46>
 8002f98:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002f9c:	2b46      	cmp	r3, #70	; 0x46
 8002f9e:	d1e2      	bne.n	8002f66 <_get_semihosting_exts+0x46>
 8002fa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002fa4:	2b42      	cmp	r3, #66	; 0x42
 8002fa6:	d1de      	bne.n	8002f66 <_get_semihosting_exts+0x46>
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4639      	mov	r1, r7
 8002fac:	4620      	mov	r0, r4
 8002fae:	f7ff fe6a 	bl	8002c86 <_swilseek>
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	dbd7      	blt.n	8002f66 <_get_semihosting_exts+0x46>
 8002fb6:	462a      	mov	r2, r5
 8002fb8:	4631      	mov	r1, r6
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f7ff fe47 	bl	8002c4e <_read>
 8002fc0:	4605      	mov	r5, r0
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7ff fede 	bl	8002d84 <_close>
 8002fc8:	4628      	mov	r0, r5
 8002fca:	f7ff fe2b 	bl	8002c24 <checkerror>
 8002fce:	4604      	mov	r4, r0
 8002fd0:	e7ce      	b.n	8002f70 <_get_semihosting_exts+0x50>
 8002fd2:	bf00      	nop
 8002fd4:	08006068 	.word	0x08006068

08002fd8 <initialise_semihosting_exts>:
 8002fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fda:	4d0a      	ldr	r5, [pc, #40]	; (8003004 <initialise_semihosting_exts+0x2c>)
 8002fdc:	4c0a      	ldr	r4, [pc, #40]	; (8003008 <initialise_semihosting_exts+0x30>)
 8002fde:	2100      	movs	r1, #0
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	a801      	add	r0, sp, #4
 8002fe4:	6029      	str	r1, [r5, #0]
 8002fe6:	6022      	str	r2, [r4, #0]
 8002fe8:	f7ff ff9a 	bl	8002f20 <_get_semihosting_exts>
 8002fec:	2800      	cmp	r0, #0
 8002fee:	dd07      	ble.n	8003000 <initialise_semihosting_exts+0x28>
 8002ff0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ff4:	f003 0201 	and.w	r2, r3, #1
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	602a      	str	r2, [r5, #0]
 8002ffe:	6023      	str	r3, [r4, #0]
 8003000:	b003      	add	sp, #12
 8003002:	bd30      	pop	{r4, r5, pc}
 8003004:	20000014 	.word	0x20000014
 8003008:	20000018 	.word	0x20000018

0800300c <_has_ext_stdout_stderr>:
 800300c:	b510      	push	{r4, lr}
 800300e:	4c04      	ldr	r4, [pc, #16]	; (8003020 <_has_ext_stdout_stderr+0x14>)
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	da01      	bge.n	800301a <_has_ext_stdout_stderr+0xe>
 8003016:	f7ff ffdf 	bl	8002fd8 <initialise_semihosting_exts>
 800301a:	6820      	ldr	r0, [r4, #0]
 800301c:	bd10      	pop	{r4, pc}
 800301e:	bf00      	nop
 8003020:	20000018 	.word	0x20000018

08003024 <initialise_monitor_handles>:
 8003024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003028:	b085      	sub	sp, #20
 800302a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80030dc <initialise_monitor_handles+0xb8>
 800302e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003032:	2303      	movs	r3, #3
 8003034:	2400      	movs	r4, #0
 8003036:	9303      	str	r3, [sp, #12]
 8003038:	af01      	add	r7, sp, #4
 800303a:	9402      	str	r4, [sp, #8]
 800303c:	2501      	movs	r5, #1
 800303e:	4628      	mov	r0, r5
 8003040:	4639      	mov	r1, r7
 8003042:	beab      	bkpt	0x00ab
 8003044:	4605      	mov	r5, r0
 8003046:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80030e0 <initialise_monitor_handles+0xbc>
 800304a:	4623      	mov	r3, r4
 800304c:	4c20      	ldr	r4, [pc, #128]	; (80030d0 <initialise_monitor_handles+0xac>)
 800304e:	f8c8 5000 	str.w	r5, [r8]
 8003052:	f04f 32ff 	mov.w	r2, #4294967295
 8003056:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800305a:	3301      	adds	r3, #1
 800305c:	2b14      	cmp	r3, #20
 800305e:	d1fa      	bne.n	8003056 <initialise_monitor_handles+0x32>
 8003060:	f7ff ffd4 	bl	800300c <_has_ext_stdout_stderr>
 8003064:	4d1b      	ldr	r5, [pc, #108]	; (80030d4 <initialise_monitor_handles+0xb0>)
 8003066:	b1d0      	cbz	r0, 800309e <initialise_monitor_handles+0x7a>
 8003068:	f04f 0a03 	mov.w	sl, #3
 800306c:	2304      	movs	r3, #4
 800306e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003072:	2601      	movs	r6, #1
 8003074:	f8cd a00c 	str.w	sl, [sp, #12]
 8003078:	9302      	str	r3, [sp, #8]
 800307a:	4630      	mov	r0, r6
 800307c:	4639      	mov	r1, r7
 800307e:	beab      	bkpt	0x00ab
 8003080:	4683      	mov	fp, r0
 8003082:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <initialise_monitor_handles+0xb4>)
 8003084:	f8cd 9004 	str.w	r9, [sp, #4]
 8003088:	f8c3 b000 	str.w	fp, [r3]
 800308c:	2308      	movs	r3, #8
 800308e:	f8cd a00c 	str.w	sl, [sp, #12]
 8003092:	9302      	str	r3, [sp, #8]
 8003094:	4630      	mov	r0, r6
 8003096:	4639      	mov	r1, r7
 8003098:	beab      	bkpt	0x00ab
 800309a:	4606      	mov	r6, r0
 800309c:	602e      	str	r6, [r5, #0]
 800309e:	682b      	ldr	r3, [r5, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	bf02      	ittt	eq
 80030a4:	4b0c      	ldreq	r3, [pc, #48]	; (80030d8 <initialise_monitor_handles+0xb4>)
 80030a6:	681b      	ldreq	r3, [r3, #0]
 80030a8:	602b      	streq	r3, [r5, #0]
 80030aa:	2600      	movs	r6, #0
 80030ac:	f8d8 3000 	ldr.w	r3, [r8]
 80030b0:	6023      	str	r3, [r4, #0]
 80030b2:	6066      	str	r6, [r4, #4]
 80030b4:	f7ff ffaa 	bl	800300c <_has_ext_stdout_stderr>
 80030b8:	b130      	cbz	r0, 80030c8 <initialise_monitor_handles+0xa4>
 80030ba:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <initialise_monitor_handles+0xb4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80030c2:	682b      	ldr	r3, [r5, #0]
 80030c4:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80030c8:	b005      	add	sp, #20
 80030ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ce:	bf00      	nop
 80030d0:	200002f0 	.word	0x200002f0
 80030d4:	200002e4 	.word	0x200002e4
 80030d8:	200002ec 	.word	0x200002ec
 80030dc:	0800607e 	.word	0x0800607e
 80030e0:	200002e8 	.word	0x200002e8

080030e4 <_isatty>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	f7ff fd75 	bl	8002bd4 <findslot>
 80030ea:	2509      	movs	r5, #9
 80030ec:	4604      	mov	r4, r0
 80030ee:	b920      	cbnz	r0, 80030fa <_isatty+0x16>
 80030f0:	f000 f814 	bl	800311c <__errno>
 80030f4:	6005      	str	r5, [r0, #0]
 80030f6:	4620      	mov	r0, r4
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
 80030fa:	4628      	mov	r0, r5
 80030fc:	4621      	mov	r1, r4
 80030fe:	beab      	bkpt	0x00ab
 8003100:	4604      	mov	r4, r0
 8003102:	2c01      	cmp	r4, #1
 8003104:	d0f7      	beq.n	80030f6 <_isatty+0x12>
 8003106:	f000 f809 	bl	800311c <__errno>
 800310a:	2400      	movs	r4, #0
 800310c:	4605      	mov	r5, r0
 800310e:	2613      	movs	r6, #19
 8003110:	4630      	mov	r0, r6
 8003112:	4621      	mov	r1, r4
 8003114:	beab      	bkpt	0x00ab
 8003116:	4606      	mov	r6, r0
 8003118:	602e      	str	r6, [r5, #0]
 800311a:	e7ec      	b.n	80030f6 <_isatty+0x12>

0800311c <__errno>:
 800311c:	4b01      	ldr	r3, [pc, #4]	; (8003124 <__errno+0x8>)
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	2000001c 	.word	0x2000001c

08003128 <std>:
 8003128:	2300      	movs	r3, #0
 800312a:	b510      	push	{r4, lr}
 800312c:	4604      	mov	r4, r0
 800312e:	e9c0 3300 	strd	r3, r3, [r0]
 8003132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003136:	6083      	str	r3, [r0, #8]
 8003138:	8181      	strh	r1, [r0, #12]
 800313a:	6643      	str	r3, [r0, #100]	; 0x64
 800313c:	81c2      	strh	r2, [r0, #14]
 800313e:	6183      	str	r3, [r0, #24]
 8003140:	4619      	mov	r1, r3
 8003142:	2208      	movs	r2, #8
 8003144:	305c      	adds	r0, #92	; 0x5c
 8003146:	f000 f91a 	bl	800337e <memset>
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <std+0x38>)
 800314c:	6263      	str	r3, [r4, #36]	; 0x24
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <std+0x3c>)
 8003150:	62a3      	str	r3, [r4, #40]	; 0x28
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <std+0x40>)
 8003154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <std+0x44>)
 8003158:	6224      	str	r4, [r4, #32]
 800315a:	6323      	str	r3, [r4, #48]	; 0x30
 800315c:	bd10      	pop	{r4, pc}
 800315e:	bf00      	nop
 8003160:	08003ded 	.word	0x08003ded
 8003164:	08003e0f 	.word	0x08003e0f
 8003168:	08003e47 	.word	0x08003e47
 800316c:	08003e6b 	.word	0x08003e6b

08003170 <_cleanup_r>:
 8003170:	4901      	ldr	r1, [pc, #4]	; (8003178 <_cleanup_r+0x8>)
 8003172:	f000 b8af 	b.w	80032d4 <_fwalk_reent>
 8003176:	bf00      	nop
 8003178:	08004e79 	.word	0x08004e79

0800317c <__sfmoreglue>:
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	2268      	movs	r2, #104	; 0x68
 8003180:	1e4d      	subs	r5, r1, #1
 8003182:	4355      	muls	r5, r2
 8003184:	460e      	mov	r6, r1
 8003186:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800318a:	f000 f921 	bl	80033d0 <_malloc_r>
 800318e:	4604      	mov	r4, r0
 8003190:	b140      	cbz	r0, 80031a4 <__sfmoreglue+0x28>
 8003192:	2100      	movs	r1, #0
 8003194:	e9c0 1600 	strd	r1, r6, [r0]
 8003198:	300c      	adds	r0, #12
 800319a:	60a0      	str	r0, [r4, #8]
 800319c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80031a0:	f000 f8ed 	bl	800337e <memset>
 80031a4:	4620      	mov	r0, r4
 80031a6:	bd70      	pop	{r4, r5, r6, pc}

080031a8 <__sfp_lock_acquire>:
 80031a8:	4801      	ldr	r0, [pc, #4]	; (80031b0 <__sfp_lock_acquire+0x8>)
 80031aa:	f000 b8d8 	b.w	800335e <__retarget_lock_acquire_recursive>
 80031ae:	bf00      	nop
 80031b0:	20000391 	.word	0x20000391

080031b4 <__sfp_lock_release>:
 80031b4:	4801      	ldr	r0, [pc, #4]	; (80031bc <__sfp_lock_release+0x8>)
 80031b6:	f000 b8d3 	b.w	8003360 <__retarget_lock_release_recursive>
 80031ba:	bf00      	nop
 80031bc:	20000391 	.word	0x20000391

080031c0 <__sinit_lock_acquire>:
 80031c0:	4801      	ldr	r0, [pc, #4]	; (80031c8 <__sinit_lock_acquire+0x8>)
 80031c2:	f000 b8cc 	b.w	800335e <__retarget_lock_acquire_recursive>
 80031c6:	bf00      	nop
 80031c8:	20000392 	.word	0x20000392

080031cc <__sinit_lock_release>:
 80031cc:	4801      	ldr	r0, [pc, #4]	; (80031d4 <__sinit_lock_release+0x8>)
 80031ce:	f000 b8c7 	b.w	8003360 <__retarget_lock_release_recursive>
 80031d2:	bf00      	nop
 80031d4:	20000392 	.word	0x20000392

080031d8 <__sinit>:
 80031d8:	b510      	push	{r4, lr}
 80031da:	4604      	mov	r4, r0
 80031dc:	f7ff fff0 	bl	80031c0 <__sinit_lock_acquire>
 80031e0:	69a3      	ldr	r3, [r4, #24]
 80031e2:	b11b      	cbz	r3, 80031ec <__sinit+0x14>
 80031e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031e8:	f7ff bff0 	b.w	80031cc <__sinit_lock_release>
 80031ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031f0:	6523      	str	r3, [r4, #80]	; 0x50
 80031f2:	4b13      	ldr	r3, [pc, #76]	; (8003240 <__sinit+0x68>)
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <__sinit+0x6c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80031fa:	42a3      	cmp	r3, r4
 80031fc:	bf04      	itt	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	61a3      	streq	r3, [r4, #24]
 8003202:	4620      	mov	r0, r4
 8003204:	f000 f820 	bl	8003248 <__sfp>
 8003208:	6060      	str	r0, [r4, #4]
 800320a:	4620      	mov	r0, r4
 800320c:	f000 f81c 	bl	8003248 <__sfp>
 8003210:	60a0      	str	r0, [r4, #8]
 8003212:	4620      	mov	r0, r4
 8003214:	f000 f818 	bl	8003248 <__sfp>
 8003218:	2200      	movs	r2, #0
 800321a:	60e0      	str	r0, [r4, #12]
 800321c:	2104      	movs	r1, #4
 800321e:	6860      	ldr	r0, [r4, #4]
 8003220:	f7ff ff82 	bl	8003128 <std>
 8003224:	68a0      	ldr	r0, [r4, #8]
 8003226:	2201      	movs	r2, #1
 8003228:	2109      	movs	r1, #9
 800322a:	f7ff ff7d 	bl	8003128 <std>
 800322e:	68e0      	ldr	r0, [r4, #12]
 8003230:	2202      	movs	r2, #2
 8003232:	2112      	movs	r1, #18
 8003234:	f7ff ff78 	bl	8003128 <std>
 8003238:	2301      	movs	r3, #1
 800323a:	61a3      	str	r3, [r4, #24]
 800323c:	e7d2      	b.n	80031e4 <__sinit+0xc>
 800323e:	bf00      	nop
 8003240:	080060e4 	.word	0x080060e4
 8003244:	08003171 	.word	0x08003171

08003248 <__sfp>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	4607      	mov	r7, r0
 800324c:	f7ff ffac 	bl	80031a8 <__sfp_lock_acquire>
 8003250:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <__sfp+0x84>)
 8003252:	681e      	ldr	r6, [r3, #0]
 8003254:	69b3      	ldr	r3, [r6, #24]
 8003256:	b913      	cbnz	r3, 800325e <__sfp+0x16>
 8003258:	4630      	mov	r0, r6
 800325a:	f7ff ffbd 	bl	80031d8 <__sinit>
 800325e:	3648      	adds	r6, #72	; 0x48
 8003260:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003264:	3b01      	subs	r3, #1
 8003266:	d503      	bpl.n	8003270 <__sfp+0x28>
 8003268:	6833      	ldr	r3, [r6, #0]
 800326a:	b30b      	cbz	r3, 80032b0 <__sfp+0x68>
 800326c:	6836      	ldr	r6, [r6, #0]
 800326e:	e7f7      	b.n	8003260 <__sfp+0x18>
 8003270:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003274:	b9d5      	cbnz	r5, 80032ac <__sfp+0x64>
 8003276:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <__sfp+0x88>)
 8003278:	60e3      	str	r3, [r4, #12]
 800327a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800327e:	6665      	str	r5, [r4, #100]	; 0x64
 8003280:	f000 f86c 	bl	800335c <__retarget_lock_init_recursive>
 8003284:	f7ff ff96 	bl	80031b4 <__sfp_lock_release>
 8003288:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800328c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003290:	6025      	str	r5, [r4, #0]
 8003292:	61a5      	str	r5, [r4, #24]
 8003294:	2208      	movs	r2, #8
 8003296:	4629      	mov	r1, r5
 8003298:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800329c:	f000 f86f 	bl	800337e <memset>
 80032a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80032a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80032a8:	4620      	mov	r0, r4
 80032aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032ac:	3468      	adds	r4, #104	; 0x68
 80032ae:	e7d9      	b.n	8003264 <__sfp+0x1c>
 80032b0:	2104      	movs	r1, #4
 80032b2:	4638      	mov	r0, r7
 80032b4:	f7ff ff62 	bl	800317c <__sfmoreglue>
 80032b8:	4604      	mov	r4, r0
 80032ba:	6030      	str	r0, [r6, #0]
 80032bc:	2800      	cmp	r0, #0
 80032be:	d1d5      	bne.n	800326c <__sfp+0x24>
 80032c0:	f7ff ff78 	bl	80031b4 <__sfp_lock_release>
 80032c4:	230c      	movs	r3, #12
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	e7ee      	b.n	80032a8 <__sfp+0x60>
 80032ca:	bf00      	nop
 80032cc:	080060e4 	.word	0x080060e4
 80032d0:	ffff0001 	.word	0xffff0001

080032d4 <_fwalk_reent>:
 80032d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d8:	4606      	mov	r6, r0
 80032da:	4688      	mov	r8, r1
 80032dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032e0:	2700      	movs	r7, #0
 80032e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032e6:	f1b9 0901 	subs.w	r9, r9, #1
 80032ea:	d505      	bpl.n	80032f8 <_fwalk_reent+0x24>
 80032ec:	6824      	ldr	r4, [r4, #0]
 80032ee:	2c00      	cmp	r4, #0
 80032f0:	d1f7      	bne.n	80032e2 <_fwalk_reent+0xe>
 80032f2:	4638      	mov	r0, r7
 80032f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032f8:	89ab      	ldrh	r3, [r5, #12]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d907      	bls.n	800330e <_fwalk_reent+0x3a>
 80032fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003302:	3301      	adds	r3, #1
 8003304:	d003      	beq.n	800330e <_fwalk_reent+0x3a>
 8003306:	4629      	mov	r1, r5
 8003308:	4630      	mov	r0, r6
 800330a:	47c0      	blx	r8
 800330c:	4307      	orrs	r7, r0
 800330e:	3568      	adds	r5, #104	; 0x68
 8003310:	e7e9      	b.n	80032e6 <_fwalk_reent+0x12>
	...

08003314 <__libc_init_array>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	4d0d      	ldr	r5, [pc, #52]	; (800334c <__libc_init_array+0x38>)
 8003318:	4c0d      	ldr	r4, [pc, #52]	; (8003350 <__libc_init_array+0x3c>)
 800331a:	1b64      	subs	r4, r4, r5
 800331c:	10a4      	asrs	r4, r4, #2
 800331e:	2600      	movs	r6, #0
 8003320:	42a6      	cmp	r6, r4
 8003322:	d109      	bne.n	8003338 <__libc_init_array+0x24>
 8003324:	4d0b      	ldr	r5, [pc, #44]	; (8003354 <__libc_init_array+0x40>)
 8003326:	4c0c      	ldr	r4, [pc, #48]	; (8003358 <__libc_init_array+0x44>)
 8003328:	f002 fe1c 	bl	8005f64 <_init>
 800332c:	1b64      	subs	r4, r4, r5
 800332e:	10a4      	asrs	r4, r4, #2
 8003330:	2600      	movs	r6, #0
 8003332:	42a6      	cmp	r6, r4
 8003334:	d105      	bne.n	8003342 <__libc_init_array+0x2e>
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	f855 3b04 	ldr.w	r3, [r5], #4
 800333c:	4798      	blx	r3
 800333e:	3601      	adds	r6, #1
 8003340:	e7ee      	b.n	8003320 <__libc_init_array+0xc>
 8003342:	f855 3b04 	ldr.w	r3, [r5], #4
 8003346:	4798      	blx	r3
 8003348:	3601      	adds	r6, #1
 800334a:	e7f2      	b.n	8003332 <__libc_init_array+0x1e>
 800334c:	08006468 	.word	0x08006468
 8003350:	08006468 	.word	0x08006468
 8003354:	08006468 	.word	0x08006468
 8003358:	0800646c 	.word	0x0800646c

0800335c <__retarget_lock_init_recursive>:
 800335c:	4770      	bx	lr

0800335e <__retarget_lock_acquire_recursive>:
 800335e:	4770      	bx	lr

08003360 <__retarget_lock_release_recursive>:
 8003360:	4770      	bx	lr

08003362 <memcpy>:
 8003362:	440a      	add	r2, r1
 8003364:	4291      	cmp	r1, r2
 8003366:	f100 33ff 	add.w	r3, r0, #4294967295
 800336a:	d100      	bne.n	800336e <memcpy+0xc>
 800336c:	4770      	bx	lr
 800336e:	b510      	push	{r4, lr}
 8003370:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003374:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003378:	4291      	cmp	r1, r2
 800337a:	d1f9      	bne.n	8003370 <memcpy+0xe>
 800337c:	bd10      	pop	{r4, pc}

0800337e <memset>:
 800337e:	4402      	add	r2, r0
 8003380:	4603      	mov	r3, r0
 8003382:	4293      	cmp	r3, r2
 8003384:	d100      	bne.n	8003388 <memset+0xa>
 8003386:	4770      	bx	lr
 8003388:	f803 1b01 	strb.w	r1, [r3], #1
 800338c:	e7f9      	b.n	8003382 <memset+0x4>
	...

08003390 <sbrk_aligned>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	4e0e      	ldr	r6, [pc, #56]	; (80033cc <sbrk_aligned+0x3c>)
 8003394:	460c      	mov	r4, r1
 8003396:	6831      	ldr	r1, [r6, #0]
 8003398:	4605      	mov	r5, r0
 800339a:	b911      	cbnz	r1, 80033a2 <sbrk_aligned+0x12>
 800339c:	f000 fcf6 	bl	8003d8c <_sbrk_r>
 80033a0:	6030      	str	r0, [r6, #0]
 80033a2:	4621      	mov	r1, r4
 80033a4:	4628      	mov	r0, r5
 80033a6:	f000 fcf1 	bl	8003d8c <_sbrk_r>
 80033aa:	1c43      	adds	r3, r0, #1
 80033ac:	d00a      	beq.n	80033c4 <sbrk_aligned+0x34>
 80033ae:	1cc4      	adds	r4, r0, #3
 80033b0:	f024 0403 	bic.w	r4, r4, #3
 80033b4:	42a0      	cmp	r0, r4
 80033b6:	d007      	beq.n	80033c8 <sbrk_aligned+0x38>
 80033b8:	1a21      	subs	r1, r4, r0
 80033ba:	4628      	mov	r0, r5
 80033bc:	f000 fce6 	bl	8003d8c <_sbrk_r>
 80033c0:	3001      	adds	r0, #1
 80033c2:	d101      	bne.n	80033c8 <sbrk_aligned+0x38>
 80033c4:	f04f 34ff 	mov.w	r4, #4294967295
 80033c8:	4620      	mov	r0, r4
 80033ca:	bd70      	pop	{r4, r5, r6, pc}
 80033cc:	20000398 	.word	0x20000398

080033d0 <_malloc_r>:
 80033d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d4:	1ccd      	adds	r5, r1, #3
 80033d6:	f025 0503 	bic.w	r5, r5, #3
 80033da:	3508      	adds	r5, #8
 80033dc:	2d0c      	cmp	r5, #12
 80033de:	bf38      	it	cc
 80033e0:	250c      	movcc	r5, #12
 80033e2:	2d00      	cmp	r5, #0
 80033e4:	4607      	mov	r7, r0
 80033e6:	db01      	blt.n	80033ec <_malloc_r+0x1c>
 80033e8:	42a9      	cmp	r1, r5
 80033ea:	d905      	bls.n	80033f8 <_malloc_r+0x28>
 80033ec:	230c      	movs	r3, #12
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	2600      	movs	r6, #0
 80033f2:	4630      	mov	r0, r6
 80033f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f8:	4e2e      	ldr	r6, [pc, #184]	; (80034b4 <_malloc_r+0xe4>)
 80033fa:	f001 fe0f 	bl	800501c <__malloc_lock>
 80033fe:	6833      	ldr	r3, [r6, #0]
 8003400:	461c      	mov	r4, r3
 8003402:	bb34      	cbnz	r4, 8003452 <_malloc_r+0x82>
 8003404:	4629      	mov	r1, r5
 8003406:	4638      	mov	r0, r7
 8003408:	f7ff ffc2 	bl	8003390 <sbrk_aligned>
 800340c:	1c43      	adds	r3, r0, #1
 800340e:	4604      	mov	r4, r0
 8003410:	d14d      	bne.n	80034ae <_malloc_r+0xde>
 8003412:	6834      	ldr	r4, [r6, #0]
 8003414:	4626      	mov	r6, r4
 8003416:	2e00      	cmp	r6, #0
 8003418:	d140      	bne.n	800349c <_malloc_r+0xcc>
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	4631      	mov	r1, r6
 800341e:	4638      	mov	r0, r7
 8003420:	eb04 0803 	add.w	r8, r4, r3
 8003424:	f000 fcb2 	bl	8003d8c <_sbrk_r>
 8003428:	4580      	cmp	r8, r0
 800342a:	d13a      	bne.n	80034a2 <_malloc_r+0xd2>
 800342c:	6821      	ldr	r1, [r4, #0]
 800342e:	3503      	adds	r5, #3
 8003430:	1a6d      	subs	r5, r5, r1
 8003432:	f025 0503 	bic.w	r5, r5, #3
 8003436:	3508      	adds	r5, #8
 8003438:	2d0c      	cmp	r5, #12
 800343a:	bf38      	it	cc
 800343c:	250c      	movcc	r5, #12
 800343e:	4629      	mov	r1, r5
 8003440:	4638      	mov	r0, r7
 8003442:	f7ff ffa5 	bl	8003390 <sbrk_aligned>
 8003446:	3001      	adds	r0, #1
 8003448:	d02b      	beq.n	80034a2 <_malloc_r+0xd2>
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	442b      	add	r3, r5
 800344e:	6023      	str	r3, [r4, #0]
 8003450:	e00e      	b.n	8003470 <_malloc_r+0xa0>
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	1b52      	subs	r2, r2, r5
 8003456:	d41e      	bmi.n	8003496 <_malloc_r+0xc6>
 8003458:	2a0b      	cmp	r2, #11
 800345a:	d916      	bls.n	800348a <_malloc_r+0xba>
 800345c:	1961      	adds	r1, r4, r5
 800345e:	42a3      	cmp	r3, r4
 8003460:	6025      	str	r5, [r4, #0]
 8003462:	bf18      	it	ne
 8003464:	6059      	strne	r1, [r3, #4]
 8003466:	6863      	ldr	r3, [r4, #4]
 8003468:	bf08      	it	eq
 800346a:	6031      	streq	r1, [r6, #0]
 800346c:	5162      	str	r2, [r4, r5]
 800346e:	604b      	str	r3, [r1, #4]
 8003470:	4638      	mov	r0, r7
 8003472:	f104 060b 	add.w	r6, r4, #11
 8003476:	f001 fdd7 	bl	8005028 <__malloc_unlock>
 800347a:	f026 0607 	bic.w	r6, r6, #7
 800347e:	1d23      	adds	r3, r4, #4
 8003480:	1af2      	subs	r2, r6, r3
 8003482:	d0b6      	beq.n	80033f2 <_malloc_r+0x22>
 8003484:	1b9b      	subs	r3, r3, r6
 8003486:	50a3      	str	r3, [r4, r2]
 8003488:	e7b3      	b.n	80033f2 <_malloc_r+0x22>
 800348a:	6862      	ldr	r2, [r4, #4]
 800348c:	42a3      	cmp	r3, r4
 800348e:	bf0c      	ite	eq
 8003490:	6032      	streq	r2, [r6, #0]
 8003492:	605a      	strne	r2, [r3, #4]
 8003494:	e7ec      	b.n	8003470 <_malloc_r+0xa0>
 8003496:	4623      	mov	r3, r4
 8003498:	6864      	ldr	r4, [r4, #4]
 800349a:	e7b2      	b.n	8003402 <_malloc_r+0x32>
 800349c:	4634      	mov	r4, r6
 800349e:	6876      	ldr	r6, [r6, #4]
 80034a0:	e7b9      	b.n	8003416 <_malloc_r+0x46>
 80034a2:	230c      	movs	r3, #12
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	4638      	mov	r0, r7
 80034a8:	f001 fdbe 	bl	8005028 <__malloc_unlock>
 80034ac:	e7a1      	b.n	80033f2 <_malloc_r+0x22>
 80034ae:	6025      	str	r5, [r4, #0]
 80034b0:	e7de      	b.n	8003470 <_malloc_r+0xa0>
 80034b2:	bf00      	nop
 80034b4:	20000394 	.word	0x20000394

080034b8 <__cvt>:
 80034b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034bc:	ec55 4b10 	vmov	r4, r5, d0
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	460e      	mov	r6, r1
 80034c4:	4619      	mov	r1, r3
 80034c6:	462b      	mov	r3, r5
 80034c8:	bfbb      	ittet	lt
 80034ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80034ce:	461d      	movlt	r5, r3
 80034d0:	2300      	movge	r3, #0
 80034d2:	232d      	movlt	r3, #45	; 0x2d
 80034d4:	700b      	strb	r3, [r1, #0]
 80034d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80034dc:	4691      	mov	r9, r2
 80034de:	f023 0820 	bic.w	r8, r3, #32
 80034e2:	bfbc      	itt	lt
 80034e4:	4622      	movlt	r2, r4
 80034e6:	4614      	movlt	r4, r2
 80034e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80034ec:	d005      	beq.n	80034fa <__cvt+0x42>
 80034ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80034f2:	d100      	bne.n	80034f6 <__cvt+0x3e>
 80034f4:	3601      	adds	r6, #1
 80034f6:	2102      	movs	r1, #2
 80034f8:	e000      	b.n	80034fc <__cvt+0x44>
 80034fa:	2103      	movs	r1, #3
 80034fc:	ab03      	add	r3, sp, #12
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	ab02      	add	r3, sp, #8
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	ec45 4b10 	vmov	d0, r4, r5
 8003508:	4653      	mov	r3, sl
 800350a:	4632      	mov	r2, r6
 800350c:	f000 fe40 	bl	8004190 <_dtoa_r>
 8003510:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003514:	4607      	mov	r7, r0
 8003516:	d102      	bne.n	800351e <__cvt+0x66>
 8003518:	f019 0f01 	tst.w	r9, #1
 800351c:	d022      	beq.n	8003564 <__cvt+0xac>
 800351e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003522:	eb07 0906 	add.w	r9, r7, r6
 8003526:	d110      	bne.n	800354a <__cvt+0x92>
 8003528:	783b      	ldrb	r3, [r7, #0]
 800352a:	2b30      	cmp	r3, #48	; 0x30
 800352c:	d10a      	bne.n	8003544 <__cvt+0x8c>
 800352e:	2200      	movs	r2, #0
 8003530:	2300      	movs	r3, #0
 8003532:	4620      	mov	r0, r4
 8003534:	4629      	mov	r1, r5
 8003536:	f7fd fac7 	bl	8000ac8 <__aeabi_dcmpeq>
 800353a:	b918      	cbnz	r0, 8003544 <__cvt+0x8c>
 800353c:	f1c6 0601 	rsb	r6, r6, #1
 8003540:	f8ca 6000 	str.w	r6, [sl]
 8003544:	f8da 3000 	ldr.w	r3, [sl]
 8003548:	4499      	add	r9, r3
 800354a:	2200      	movs	r2, #0
 800354c:	2300      	movs	r3, #0
 800354e:	4620      	mov	r0, r4
 8003550:	4629      	mov	r1, r5
 8003552:	f7fd fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 8003556:	b108      	cbz	r0, 800355c <__cvt+0xa4>
 8003558:	f8cd 900c 	str.w	r9, [sp, #12]
 800355c:	2230      	movs	r2, #48	; 0x30
 800355e:	9b03      	ldr	r3, [sp, #12]
 8003560:	454b      	cmp	r3, r9
 8003562:	d307      	bcc.n	8003574 <__cvt+0xbc>
 8003564:	9b03      	ldr	r3, [sp, #12]
 8003566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003568:	1bdb      	subs	r3, r3, r7
 800356a:	4638      	mov	r0, r7
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	b004      	add	sp, #16
 8003570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003574:	1c59      	adds	r1, r3, #1
 8003576:	9103      	str	r1, [sp, #12]
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	e7f0      	b.n	800355e <__cvt+0xa6>

0800357c <__exponent>:
 800357c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800357e:	4603      	mov	r3, r0
 8003580:	2900      	cmp	r1, #0
 8003582:	bfb8      	it	lt
 8003584:	4249      	neglt	r1, r1
 8003586:	f803 2b02 	strb.w	r2, [r3], #2
 800358a:	bfb4      	ite	lt
 800358c:	222d      	movlt	r2, #45	; 0x2d
 800358e:	222b      	movge	r2, #43	; 0x2b
 8003590:	2909      	cmp	r1, #9
 8003592:	7042      	strb	r2, [r0, #1]
 8003594:	dd2a      	ble.n	80035ec <__exponent+0x70>
 8003596:	f10d 0407 	add.w	r4, sp, #7
 800359a:	46a4      	mov	ip, r4
 800359c:	270a      	movs	r7, #10
 800359e:	46a6      	mov	lr, r4
 80035a0:	460a      	mov	r2, r1
 80035a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80035a6:	fb07 1516 	mls	r5, r7, r6, r1
 80035aa:	3530      	adds	r5, #48	; 0x30
 80035ac:	2a63      	cmp	r2, #99	; 0x63
 80035ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80035b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80035b6:	4631      	mov	r1, r6
 80035b8:	dcf1      	bgt.n	800359e <__exponent+0x22>
 80035ba:	3130      	adds	r1, #48	; 0x30
 80035bc:	f1ae 0502 	sub.w	r5, lr, #2
 80035c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80035c4:	1c44      	adds	r4, r0, #1
 80035c6:	4629      	mov	r1, r5
 80035c8:	4561      	cmp	r1, ip
 80035ca:	d30a      	bcc.n	80035e2 <__exponent+0x66>
 80035cc:	f10d 0209 	add.w	r2, sp, #9
 80035d0:	eba2 020e 	sub.w	r2, r2, lr
 80035d4:	4565      	cmp	r5, ip
 80035d6:	bf88      	it	hi
 80035d8:	2200      	movhi	r2, #0
 80035da:	4413      	add	r3, r2
 80035dc:	1a18      	subs	r0, r3, r0
 80035de:	b003      	add	sp, #12
 80035e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80035ea:	e7ed      	b.n	80035c8 <__exponent+0x4c>
 80035ec:	2330      	movs	r3, #48	; 0x30
 80035ee:	3130      	adds	r1, #48	; 0x30
 80035f0:	7083      	strb	r3, [r0, #2]
 80035f2:	70c1      	strb	r1, [r0, #3]
 80035f4:	1d03      	adds	r3, r0, #4
 80035f6:	e7f1      	b.n	80035dc <__exponent+0x60>

080035f8 <_printf_float>:
 80035f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035fc:	ed2d 8b02 	vpush	{d8}
 8003600:	b08d      	sub	sp, #52	; 0x34
 8003602:	460c      	mov	r4, r1
 8003604:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003608:	4616      	mov	r6, r2
 800360a:	461f      	mov	r7, r3
 800360c:	4605      	mov	r5, r0
 800360e:	f001 fc81 	bl	8004f14 <_localeconv_r>
 8003612:	f8d0 a000 	ldr.w	sl, [r0]
 8003616:	4650      	mov	r0, sl
 8003618:	f7fc fdda 	bl	80001d0 <strlen>
 800361c:	2300      	movs	r3, #0
 800361e:	930a      	str	r3, [sp, #40]	; 0x28
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	9305      	str	r3, [sp, #20]
 8003624:	f8d8 3000 	ldr.w	r3, [r8]
 8003628:	f894 b018 	ldrb.w	fp, [r4, #24]
 800362c:	3307      	adds	r3, #7
 800362e:	f023 0307 	bic.w	r3, r3, #7
 8003632:	f103 0208 	add.w	r2, r3, #8
 8003636:	f8c8 2000 	str.w	r2, [r8]
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003642:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003646:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800364a:	9307      	str	r3, [sp, #28]
 800364c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003650:	ee08 0a10 	vmov	s16, r0
 8003654:	4b9f      	ldr	r3, [pc, #636]	; (80038d4 <_printf_float+0x2dc>)
 8003656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800365a:	f04f 32ff 	mov.w	r2, #4294967295
 800365e:	f7fd fa65 	bl	8000b2c <__aeabi_dcmpun>
 8003662:	bb88      	cbnz	r0, 80036c8 <_printf_float+0xd0>
 8003664:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003668:	4b9a      	ldr	r3, [pc, #616]	; (80038d4 <_printf_float+0x2dc>)
 800366a:	f04f 32ff 	mov.w	r2, #4294967295
 800366e:	f7fd fa3f 	bl	8000af0 <__aeabi_dcmple>
 8003672:	bb48      	cbnz	r0, 80036c8 <_printf_float+0xd0>
 8003674:	2200      	movs	r2, #0
 8003676:	2300      	movs	r3, #0
 8003678:	4640      	mov	r0, r8
 800367a:	4649      	mov	r1, r9
 800367c:	f7fd fa2e 	bl	8000adc <__aeabi_dcmplt>
 8003680:	b110      	cbz	r0, 8003688 <_printf_float+0x90>
 8003682:	232d      	movs	r3, #45	; 0x2d
 8003684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003688:	4b93      	ldr	r3, [pc, #588]	; (80038d8 <_printf_float+0x2e0>)
 800368a:	4894      	ldr	r0, [pc, #592]	; (80038dc <_printf_float+0x2e4>)
 800368c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003690:	bf94      	ite	ls
 8003692:	4698      	movls	r8, r3
 8003694:	4680      	movhi	r8, r0
 8003696:	2303      	movs	r3, #3
 8003698:	6123      	str	r3, [r4, #16]
 800369a:	9b05      	ldr	r3, [sp, #20]
 800369c:	f023 0204 	bic.w	r2, r3, #4
 80036a0:	6022      	str	r2, [r4, #0]
 80036a2:	f04f 0900 	mov.w	r9, #0
 80036a6:	9700      	str	r7, [sp, #0]
 80036a8:	4633      	mov	r3, r6
 80036aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80036ac:	4621      	mov	r1, r4
 80036ae:	4628      	mov	r0, r5
 80036b0:	f000 f9d8 	bl	8003a64 <_printf_common>
 80036b4:	3001      	adds	r0, #1
 80036b6:	f040 8090 	bne.w	80037da <_printf_float+0x1e2>
 80036ba:	f04f 30ff 	mov.w	r0, #4294967295
 80036be:	b00d      	add	sp, #52	; 0x34
 80036c0:	ecbd 8b02 	vpop	{d8}
 80036c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c8:	4642      	mov	r2, r8
 80036ca:	464b      	mov	r3, r9
 80036cc:	4640      	mov	r0, r8
 80036ce:	4649      	mov	r1, r9
 80036d0:	f7fd fa2c 	bl	8000b2c <__aeabi_dcmpun>
 80036d4:	b140      	cbz	r0, 80036e8 <_printf_float+0xf0>
 80036d6:	464b      	mov	r3, r9
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bfbc      	itt	lt
 80036dc:	232d      	movlt	r3, #45	; 0x2d
 80036de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80036e2:	487f      	ldr	r0, [pc, #508]	; (80038e0 <_printf_float+0x2e8>)
 80036e4:	4b7f      	ldr	r3, [pc, #508]	; (80038e4 <_printf_float+0x2ec>)
 80036e6:	e7d1      	b.n	800368c <_printf_float+0x94>
 80036e8:	6863      	ldr	r3, [r4, #4]
 80036ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80036ee:	9206      	str	r2, [sp, #24]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	d13f      	bne.n	8003774 <_printf_float+0x17c>
 80036f4:	2306      	movs	r3, #6
 80036f6:	6063      	str	r3, [r4, #4]
 80036f8:	9b05      	ldr	r3, [sp, #20]
 80036fa:	6861      	ldr	r1, [r4, #4]
 80036fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003700:	2300      	movs	r3, #0
 8003702:	9303      	str	r3, [sp, #12]
 8003704:	ab0a      	add	r3, sp, #40	; 0x28
 8003706:	e9cd b301 	strd	fp, r3, [sp, #4]
 800370a:	ab09      	add	r3, sp, #36	; 0x24
 800370c:	ec49 8b10 	vmov	d0, r8, r9
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	6022      	str	r2, [r4, #0]
 8003714:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003718:	4628      	mov	r0, r5
 800371a:	f7ff fecd 	bl	80034b8 <__cvt>
 800371e:	9b06      	ldr	r3, [sp, #24]
 8003720:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003722:	2b47      	cmp	r3, #71	; 0x47
 8003724:	4680      	mov	r8, r0
 8003726:	d108      	bne.n	800373a <_printf_float+0x142>
 8003728:	1cc8      	adds	r0, r1, #3
 800372a:	db02      	blt.n	8003732 <_printf_float+0x13a>
 800372c:	6863      	ldr	r3, [r4, #4]
 800372e:	4299      	cmp	r1, r3
 8003730:	dd41      	ble.n	80037b6 <_printf_float+0x1be>
 8003732:	f1ab 0b02 	sub.w	fp, fp, #2
 8003736:	fa5f fb8b 	uxtb.w	fp, fp
 800373a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800373e:	d820      	bhi.n	8003782 <_printf_float+0x18a>
 8003740:	3901      	subs	r1, #1
 8003742:	465a      	mov	r2, fp
 8003744:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003748:	9109      	str	r1, [sp, #36]	; 0x24
 800374a:	f7ff ff17 	bl	800357c <__exponent>
 800374e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003750:	1813      	adds	r3, r2, r0
 8003752:	2a01      	cmp	r2, #1
 8003754:	4681      	mov	r9, r0
 8003756:	6123      	str	r3, [r4, #16]
 8003758:	dc02      	bgt.n	8003760 <_printf_float+0x168>
 800375a:	6822      	ldr	r2, [r4, #0]
 800375c:	07d2      	lsls	r2, r2, #31
 800375e:	d501      	bpl.n	8003764 <_printf_float+0x16c>
 8003760:	3301      	adds	r3, #1
 8003762:	6123      	str	r3, [r4, #16]
 8003764:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003768:	2b00      	cmp	r3, #0
 800376a:	d09c      	beq.n	80036a6 <_printf_float+0xae>
 800376c:	232d      	movs	r3, #45	; 0x2d
 800376e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003772:	e798      	b.n	80036a6 <_printf_float+0xae>
 8003774:	9a06      	ldr	r2, [sp, #24]
 8003776:	2a47      	cmp	r2, #71	; 0x47
 8003778:	d1be      	bne.n	80036f8 <_printf_float+0x100>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1bc      	bne.n	80036f8 <_printf_float+0x100>
 800377e:	2301      	movs	r3, #1
 8003780:	e7b9      	b.n	80036f6 <_printf_float+0xfe>
 8003782:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003786:	d118      	bne.n	80037ba <_printf_float+0x1c2>
 8003788:	2900      	cmp	r1, #0
 800378a:	6863      	ldr	r3, [r4, #4]
 800378c:	dd0b      	ble.n	80037a6 <_printf_float+0x1ae>
 800378e:	6121      	str	r1, [r4, #16]
 8003790:	b913      	cbnz	r3, 8003798 <_printf_float+0x1a0>
 8003792:	6822      	ldr	r2, [r4, #0]
 8003794:	07d0      	lsls	r0, r2, #31
 8003796:	d502      	bpl.n	800379e <_printf_float+0x1a6>
 8003798:	3301      	adds	r3, #1
 800379a:	440b      	add	r3, r1
 800379c:	6123      	str	r3, [r4, #16]
 800379e:	65a1      	str	r1, [r4, #88]	; 0x58
 80037a0:	f04f 0900 	mov.w	r9, #0
 80037a4:	e7de      	b.n	8003764 <_printf_float+0x16c>
 80037a6:	b913      	cbnz	r3, 80037ae <_printf_float+0x1b6>
 80037a8:	6822      	ldr	r2, [r4, #0]
 80037aa:	07d2      	lsls	r2, r2, #31
 80037ac:	d501      	bpl.n	80037b2 <_printf_float+0x1ba>
 80037ae:	3302      	adds	r3, #2
 80037b0:	e7f4      	b.n	800379c <_printf_float+0x1a4>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e7f2      	b.n	800379c <_printf_float+0x1a4>
 80037b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80037ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037bc:	4299      	cmp	r1, r3
 80037be:	db05      	blt.n	80037cc <_printf_float+0x1d4>
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	6121      	str	r1, [r4, #16]
 80037c4:	07d8      	lsls	r0, r3, #31
 80037c6:	d5ea      	bpl.n	800379e <_printf_float+0x1a6>
 80037c8:	1c4b      	adds	r3, r1, #1
 80037ca:	e7e7      	b.n	800379c <_printf_float+0x1a4>
 80037cc:	2900      	cmp	r1, #0
 80037ce:	bfd4      	ite	le
 80037d0:	f1c1 0202 	rsble	r2, r1, #2
 80037d4:	2201      	movgt	r2, #1
 80037d6:	4413      	add	r3, r2
 80037d8:	e7e0      	b.n	800379c <_printf_float+0x1a4>
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	055a      	lsls	r2, r3, #21
 80037de:	d407      	bmi.n	80037f0 <_printf_float+0x1f8>
 80037e0:	6923      	ldr	r3, [r4, #16]
 80037e2:	4642      	mov	r2, r8
 80037e4:	4631      	mov	r1, r6
 80037e6:	4628      	mov	r0, r5
 80037e8:	47b8      	blx	r7
 80037ea:	3001      	adds	r0, #1
 80037ec:	d12c      	bne.n	8003848 <_printf_float+0x250>
 80037ee:	e764      	b.n	80036ba <_printf_float+0xc2>
 80037f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80037f4:	f240 80e0 	bls.w	80039b8 <_printf_float+0x3c0>
 80037f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037fc:	2200      	movs	r2, #0
 80037fe:	2300      	movs	r3, #0
 8003800:	f7fd f962 	bl	8000ac8 <__aeabi_dcmpeq>
 8003804:	2800      	cmp	r0, #0
 8003806:	d034      	beq.n	8003872 <_printf_float+0x27a>
 8003808:	4a37      	ldr	r2, [pc, #220]	; (80038e8 <_printf_float+0x2f0>)
 800380a:	2301      	movs	r3, #1
 800380c:	4631      	mov	r1, r6
 800380e:	4628      	mov	r0, r5
 8003810:	47b8      	blx	r7
 8003812:	3001      	adds	r0, #1
 8003814:	f43f af51 	beq.w	80036ba <_printf_float+0xc2>
 8003818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800381c:	429a      	cmp	r2, r3
 800381e:	db02      	blt.n	8003826 <_printf_float+0x22e>
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	07d8      	lsls	r0, r3, #31
 8003824:	d510      	bpl.n	8003848 <_printf_float+0x250>
 8003826:	ee18 3a10 	vmov	r3, s16
 800382a:	4652      	mov	r2, sl
 800382c:	4631      	mov	r1, r6
 800382e:	4628      	mov	r0, r5
 8003830:	47b8      	blx	r7
 8003832:	3001      	adds	r0, #1
 8003834:	f43f af41 	beq.w	80036ba <_printf_float+0xc2>
 8003838:	f04f 0800 	mov.w	r8, #0
 800383c:	f104 091a 	add.w	r9, r4, #26
 8003840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	4543      	cmp	r3, r8
 8003846:	dc09      	bgt.n	800385c <_printf_float+0x264>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	079b      	lsls	r3, r3, #30
 800384c:	f100 8105 	bmi.w	8003a5a <_printf_float+0x462>
 8003850:	68e0      	ldr	r0, [r4, #12]
 8003852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003854:	4298      	cmp	r0, r3
 8003856:	bfb8      	it	lt
 8003858:	4618      	movlt	r0, r3
 800385a:	e730      	b.n	80036be <_printf_float+0xc6>
 800385c:	2301      	movs	r3, #1
 800385e:	464a      	mov	r2, r9
 8003860:	4631      	mov	r1, r6
 8003862:	4628      	mov	r0, r5
 8003864:	47b8      	blx	r7
 8003866:	3001      	adds	r0, #1
 8003868:	f43f af27 	beq.w	80036ba <_printf_float+0xc2>
 800386c:	f108 0801 	add.w	r8, r8, #1
 8003870:	e7e6      	b.n	8003840 <_printf_float+0x248>
 8003872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003874:	2b00      	cmp	r3, #0
 8003876:	dc39      	bgt.n	80038ec <_printf_float+0x2f4>
 8003878:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <_printf_float+0x2f0>)
 800387a:	2301      	movs	r3, #1
 800387c:	4631      	mov	r1, r6
 800387e:	4628      	mov	r0, r5
 8003880:	47b8      	blx	r7
 8003882:	3001      	adds	r0, #1
 8003884:	f43f af19 	beq.w	80036ba <_printf_float+0xc2>
 8003888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800388c:	4313      	orrs	r3, r2
 800388e:	d102      	bne.n	8003896 <_printf_float+0x29e>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	07d9      	lsls	r1, r3, #31
 8003894:	d5d8      	bpl.n	8003848 <_printf_float+0x250>
 8003896:	ee18 3a10 	vmov	r3, s16
 800389a:	4652      	mov	r2, sl
 800389c:	4631      	mov	r1, r6
 800389e:	4628      	mov	r0, r5
 80038a0:	47b8      	blx	r7
 80038a2:	3001      	adds	r0, #1
 80038a4:	f43f af09 	beq.w	80036ba <_printf_float+0xc2>
 80038a8:	f04f 0900 	mov.w	r9, #0
 80038ac:	f104 0a1a 	add.w	sl, r4, #26
 80038b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038b2:	425b      	negs	r3, r3
 80038b4:	454b      	cmp	r3, r9
 80038b6:	dc01      	bgt.n	80038bc <_printf_float+0x2c4>
 80038b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038ba:	e792      	b.n	80037e2 <_printf_float+0x1ea>
 80038bc:	2301      	movs	r3, #1
 80038be:	4652      	mov	r2, sl
 80038c0:	4631      	mov	r1, r6
 80038c2:	4628      	mov	r0, r5
 80038c4:	47b8      	blx	r7
 80038c6:	3001      	adds	r0, #1
 80038c8:	f43f aef7 	beq.w	80036ba <_printf_float+0xc2>
 80038cc:	f109 0901 	add.w	r9, r9, #1
 80038d0:	e7ee      	b.n	80038b0 <_printf_float+0x2b8>
 80038d2:	bf00      	nop
 80038d4:	7fefffff 	.word	0x7fefffff
 80038d8:	080060e8 	.word	0x080060e8
 80038dc:	080060ec 	.word	0x080060ec
 80038e0:	080060f4 	.word	0x080060f4
 80038e4:	080060f0 	.word	0x080060f0
 80038e8:	080060f8 	.word	0x080060f8
 80038ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038f0:	429a      	cmp	r2, r3
 80038f2:	bfa8      	it	ge
 80038f4:	461a      	movge	r2, r3
 80038f6:	2a00      	cmp	r2, #0
 80038f8:	4691      	mov	r9, r2
 80038fa:	dc37      	bgt.n	800396c <_printf_float+0x374>
 80038fc:	f04f 0b00 	mov.w	fp, #0
 8003900:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003904:	f104 021a 	add.w	r2, r4, #26
 8003908:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800390a:	9305      	str	r3, [sp, #20]
 800390c:	eba3 0309 	sub.w	r3, r3, r9
 8003910:	455b      	cmp	r3, fp
 8003912:	dc33      	bgt.n	800397c <_printf_float+0x384>
 8003914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003918:	429a      	cmp	r2, r3
 800391a:	db3b      	blt.n	8003994 <_printf_float+0x39c>
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	07da      	lsls	r2, r3, #31
 8003920:	d438      	bmi.n	8003994 <_printf_float+0x39c>
 8003922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003924:	9a05      	ldr	r2, [sp, #20]
 8003926:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003928:	1a9a      	subs	r2, r3, r2
 800392a:	eba3 0901 	sub.w	r9, r3, r1
 800392e:	4591      	cmp	r9, r2
 8003930:	bfa8      	it	ge
 8003932:	4691      	movge	r9, r2
 8003934:	f1b9 0f00 	cmp.w	r9, #0
 8003938:	dc35      	bgt.n	80039a6 <_printf_float+0x3ae>
 800393a:	f04f 0800 	mov.w	r8, #0
 800393e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003942:	f104 0a1a 	add.w	sl, r4, #26
 8003946:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	eba3 0309 	sub.w	r3, r3, r9
 8003950:	4543      	cmp	r3, r8
 8003952:	f77f af79 	ble.w	8003848 <_printf_float+0x250>
 8003956:	2301      	movs	r3, #1
 8003958:	4652      	mov	r2, sl
 800395a:	4631      	mov	r1, r6
 800395c:	4628      	mov	r0, r5
 800395e:	47b8      	blx	r7
 8003960:	3001      	adds	r0, #1
 8003962:	f43f aeaa 	beq.w	80036ba <_printf_float+0xc2>
 8003966:	f108 0801 	add.w	r8, r8, #1
 800396a:	e7ec      	b.n	8003946 <_printf_float+0x34e>
 800396c:	4613      	mov	r3, r2
 800396e:	4631      	mov	r1, r6
 8003970:	4642      	mov	r2, r8
 8003972:	4628      	mov	r0, r5
 8003974:	47b8      	blx	r7
 8003976:	3001      	adds	r0, #1
 8003978:	d1c0      	bne.n	80038fc <_printf_float+0x304>
 800397a:	e69e      	b.n	80036ba <_printf_float+0xc2>
 800397c:	2301      	movs	r3, #1
 800397e:	4631      	mov	r1, r6
 8003980:	4628      	mov	r0, r5
 8003982:	9205      	str	r2, [sp, #20]
 8003984:	47b8      	blx	r7
 8003986:	3001      	adds	r0, #1
 8003988:	f43f ae97 	beq.w	80036ba <_printf_float+0xc2>
 800398c:	9a05      	ldr	r2, [sp, #20]
 800398e:	f10b 0b01 	add.w	fp, fp, #1
 8003992:	e7b9      	b.n	8003908 <_printf_float+0x310>
 8003994:	ee18 3a10 	vmov	r3, s16
 8003998:	4652      	mov	r2, sl
 800399a:	4631      	mov	r1, r6
 800399c:	4628      	mov	r0, r5
 800399e:	47b8      	blx	r7
 80039a0:	3001      	adds	r0, #1
 80039a2:	d1be      	bne.n	8003922 <_printf_float+0x32a>
 80039a4:	e689      	b.n	80036ba <_printf_float+0xc2>
 80039a6:	9a05      	ldr	r2, [sp, #20]
 80039a8:	464b      	mov	r3, r9
 80039aa:	4442      	add	r2, r8
 80039ac:	4631      	mov	r1, r6
 80039ae:	4628      	mov	r0, r5
 80039b0:	47b8      	blx	r7
 80039b2:	3001      	adds	r0, #1
 80039b4:	d1c1      	bne.n	800393a <_printf_float+0x342>
 80039b6:	e680      	b.n	80036ba <_printf_float+0xc2>
 80039b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039ba:	2a01      	cmp	r2, #1
 80039bc:	dc01      	bgt.n	80039c2 <_printf_float+0x3ca>
 80039be:	07db      	lsls	r3, r3, #31
 80039c0:	d538      	bpl.n	8003a34 <_printf_float+0x43c>
 80039c2:	2301      	movs	r3, #1
 80039c4:	4642      	mov	r2, r8
 80039c6:	4631      	mov	r1, r6
 80039c8:	4628      	mov	r0, r5
 80039ca:	47b8      	blx	r7
 80039cc:	3001      	adds	r0, #1
 80039ce:	f43f ae74 	beq.w	80036ba <_printf_float+0xc2>
 80039d2:	ee18 3a10 	vmov	r3, s16
 80039d6:	4652      	mov	r2, sl
 80039d8:	4631      	mov	r1, r6
 80039da:	4628      	mov	r0, r5
 80039dc:	47b8      	blx	r7
 80039de:	3001      	adds	r0, #1
 80039e0:	f43f ae6b 	beq.w	80036ba <_printf_float+0xc2>
 80039e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039e8:	2200      	movs	r2, #0
 80039ea:	2300      	movs	r3, #0
 80039ec:	f7fd f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 80039f0:	b9d8      	cbnz	r0, 8003a2a <_printf_float+0x432>
 80039f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039f4:	f108 0201 	add.w	r2, r8, #1
 80039f8:	3b01      	subs	r3, #1
 80039fa:	4631      	mov	r1, r6
 80039fc:	4628      	mov	r0, r5
 80039fe:	47b8      	blx	r7
 8003a00:	3001      	adds	r0, #1
 8003a02:	d10e      	bne.n	8003a22 <_printf_float+0x42a>
 8003a04:	e659      	b.n	80036ba <_printf_float+0xc2>
 8003a06:	2301      	movs	r3, #1
 8003a08:	4652      	mov	r2, sl
 8003a0a:	4631      	mov	r1, r6
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	47b8      	blx	r7
 8003a10:	3001      	adds	r0, #1
 8003a12:	f43f ae52 	beq.w	80036ba <_printf_float+0xc2>
 8003a16:	f108 0801 	add.w	r8, r8, #1
 8003a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	4543      	cmp	r3, r8
 8003a20:	dcf1      	bgt.n	8003a06 <_printf_float+0x40e>
 8003a22:	464b      	mov	r3, r9
 8003a24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a28:	e6dc      	b.n	80037e4 <_printf_float+0x1ec>
 8003a2a:	f04f 0800 	mov.w	r8, #0
 8003a2e:	f104 0a1a 	add.w	sl, r4, #26
 8003a32:	e7f2      	b.n	8003a1a <_printf_float+0x422>
 8003a34:	2301      	movs	r3, #1
 8003a36:	4642      	mov	r2, r8
 8003a38:	e7df      	b.n	80039fa <_printf_float+0x402>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	464a      	mov	r2, r9
 8003a3e:	4631      	mov	r1, r6
 8003a40:	4628      	mov	r0, r5
 8003a42:	47b8      	blx	r7
 8003a44:	3001      	adds	r0, #1
 8003a46:	f43f ae38 	beq.w	80036ba <_printf_float+0xc2>
 8003a4a:	f108 0801 	add.w	r8, r8, #1
 8003a4e:	68e3      	ldr	r3, [r4, #12]
 8003a50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a52:	1a5b      	subs	r3, r3, r1
 8003a54:	4543      	cmp	r3, r8
 8003a56:	dcf0      	bgt.n	8003a3a <_printf_float+0x442>
 8003a58:	e6fa      	b.n	8003850 <_printf_float+0x258>
 8003a5a:	f04f 0800 	mov.w	r8, #0
 8003a5e:	f104 0919 	add.w	r9, r4, #25
 8003a62:	e7f4      	b.n	8003a4e <_printf_float+0x456>

08003a64 <_printf_common>:
 8003a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a68:	4616      	mov	r6, r2
 8003a6a:	4699      	mov	r9, r3
 8003a6c:	688a      	ldr	r2, [r1, #8]
 8003a6e:	690b      	ldr	r3, [r1, #16]
 8003a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a74:	4293      	cmp	r3, r2
 8003a76:	bfb8      	it	lt
 8003a78:	4613      	movlt	r3, r2
 8003a7a:	6033      	str	r3, [r6, #0]
 8003a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a80:	4607      	mov	r7, r0
 8003a82:	460c      	mov	r4, r1
 8003a84:	b10a      	cbz	r2, 8003a8a <_printf_common+0x26>
 8003a86:	3301      	adds	r3, #1
 8003a88:	6033      	str	r3, [r6, #0]
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	0699      	lsls	r1, r3, #26
 8003a8e:	bf42      	ittt	mi
 8003a90:	6833      	ldrmi	r3, [r6, #0]
 8003a92:	3302      	addmi	r3, #2
 8003a94:	6033      	strmi	r3, [r6, #0]
 8003a96:	6825      	ldr	r5, [r4, #0]
 8003a98:	f015 0506 	ands.w	r5, r5, #6
 8003a9c:	d106      	bne.n	8003aac <_printf_common+0x48>
 8003a9e:	f104 0a19 	add.w	sl, r4, #25
 8003aa2:	68e3      	ldr	r3, [r4, #12]
 8003aa4:	6832      	ldr	r2, [r6, #0]
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	42ab      	cmp	r3, r5
 8003aaa:	dc26      	bgt.n	8003afa <_printf_common+0x96>
 8003aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ab0:	1e13      	subs	r3, r2, #0
 8003ab2:	6822      	ldr	r2, [r4, #0]
 8003ab4:	bf18      	it	ne
 8003ab6:	2301      	movne	r3, #1
 8003ab8:	0692      	lsls	r2, r2, #26
 8003aba:	d42b      	bmi.n	8003b14 <_printf_common+0xb0>
 8003abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	47c0      	blx	r8
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	d01e      	beq.n	8003b08 <_printf_common+0xa4>
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	68e5      	ldr	r5, [r4, #12]
 8003ace:	6832      	ldr	r2, [r6, #0]
 8003ad0:	f003 0306 	and.w	r3, r3, #6
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	bf08      	it	eq
 8003ad8:	1aad      	subeq	r5, r5, r2
 8003ada:	68a3      	ldr	r3, [r4, #8]
 8003adc:	6922      	ldr	r2, [r4, #16]
 8003ade:	bf0c      	ite	eq
 8003ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ae4:	2500      	movne	r5, #0
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	bfc4      	itt	gt
 8003aea:	1a9b      	subgt	r3, r3, r2
 8003aec:	18ed      	addgt	r5, r5, r3
 8003aee:	2600      	movs	r6, #0
 8003af0:	341a      	adds	r4, #26
 8003af2:	42b5      	cmp	r5, r6
 8003af4:	d11a      	bne.n	8003b2c <_printf_common+0xc8>
 8003af6:	2000      	movs	r0, #0
 8003af8:	e008      	b.n	8003b0c <_printf_common+0xa8>
 8003afa:	2301      	movs	r3, #1
 8003afc:	4652      	mov	r2, sl
 8003afe:	4649      	mov	r1, r9
 8003b00:	4638      	mov	r0, r7
 8003b02:	47c0      	blx	r8
 8003b04:	3001      	adds	r0, #1
 8003b06:	d103      	bne.n	8003b10 <_printf_common+0xac>
 8003b08:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b10:	3501      	adds	r5, #1
 8003b12:	e7c6      	b.n	8003aa2 <_printf_common+0x3e>
 8003b14:	18e1      	adds	r1, r4, r3
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	2030      	movs	r0, #48	; 0x30
 8003b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b1e:	4422      	add	r2, r4
 8003b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b28:	3302      	adds	r3, #2
 8003b2a:	e7c7      	b.n	8003abc <_printf_common+0x58>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	4622      	mov	r2, r4
 8003b30:	4649      	mov	r1, r9
 8003b32:	4638      	mov	r0, r7
 8003b34:	47c0      	blx	r8
 8003b36:	3001      	adds	r0, #1
 8003b38:	d0e6      	beq.n	8003b08 <_printf_common+0xa4>
 8003b3a:	3601      	adds	r6, #1
 8003b3c:	e7d9      	b.n	8003af2 <_printf_common+0x8e>
	...

08003b40 <_printf_i>:
 8003b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b44:	7e0f      	ldrb	r7, [r1, #24]
 8003b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b48:	2f78      	cmp	r7, #120	; 0x78
 8003b4a:	4691      	mov	r9, r2
 8003b4c:	4680      	mov	r8, r0
 8003b4e:	460c      	mov	r4, r1
 8003b50:	469a      	mov	sl, r3
 8003b52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b56:	d807      	bhi.n	8003b68 <_printf_i+0x28>
 8003b58:	2f62      	cmp	r7, #98	; 0x62
 8003b5a:	d80a      	bhi.n	8003b72 <_printf_i+0x32>
 8003b5c:	2f00      	cmp	r7, #0
 8003b5e:	f000 80d8 	beq.w	8003d12 <_printf_i+0x1d2>
 8003b62:	2f58      	cmp	r7, #88	; 0x58
 8003b64:	f000 80a3 	beq.w	8003cae <_printf_i+0x16e>
 8003b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b70:	e03a      	b.n	8003be8 <_printf_i+0xa8>
 8003b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b76:	2b15      	cmp	r3, #21
 8003b78:	d8f6      	bhi.n	8003b68 <_printf_i+0x28>
 8003b7a:	a101      	add	r1, pc, #4	; (adr r1, 8003b80 <_printf_i+0x40>)
 8003b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b80:	08003bd9 	.word	0x08003bd9
 8003b84:	08003bed 	.word	0x08003bed
 8003b88:	08003b69 	.word	0x08003b69
 8003b8c:	08003b69 	.word	0x08003b69
 8003b90:	08003b69 	.word	0x08003b69
 8003b94:	08003b69 	.word	0x08003b69
 8003b98:	08003bed 	.word	0x08003bed
 8003b9c:	08003b69 	.word	0x08003b69
 8003ba0:	08003b69 	.word	0x08003b69
 8003ba4:	08003b69 	.word	0x08003b69
 8003ba8:	08003b69 	.word	0x08003b69
 8003bac:	08003cf9 	.word	0x08003cf9
 8003bb0:	08003c1d 	.word	0x08003c1d
 8003bb4:	08003cdb 	.word	0x08003cdb
 8003bb8:	08003b69 	.word	0x08003b69
 8003bbc:	08003b69 	.word	0x08003b69
 8003bc0:	08003d1b 	.word	0x08003d1b
 8003bc4:	08003b69 	.word	0x08003b69
 8003bc8:	08003c1d 	.word	0x08003c1d
 8003bcc:	08003b69 	.word	0x08003b69
 8003bd0:	08003b69 	.word	0x08003b69
 8003bd4:	08003ce3 	.word	0x08003ce3
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	1d1a      	adds	r2, r3, #4
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	602a      	str	r2, [r5, #0]
 8003be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0a3      	b.n	8003d34 <_printf_i+0x1f4>
 8003bec:	6820      	ldr	r0, [r4, #0]
 8003bee:	6829      	ldr	r1, [r5, #0]
 8003bf0:	0606      	lsls	r6, r0, #24
 8003bf2:	f101 0304 	add.w	r3, r1, #4
 8003bf6:	d50a      	bpl.n	8003c0e <_printf_i+0xce>
 8003bf8:	680e      	ldr	r6, [r1, #0]
 8003bfa:	602b      	str	r3, [r5, #0]
 8003bfc:	2e00      	cmp	r6, #0
 8003bfe:	da03      	bge.n	8003c08 <_printf_i+0xc8>
 8003c00:	232d      	movs	r3, #45	; 0x2d
 8003c02:	4276      	negs	r6, r6
 8003c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c08:	485e      	ldr	r0, [pc, #376]	; (8003d84 <_printf_i+0x244>)
 8003c0a:	230a      	movs	r3, #10
 8003c0c:	e019      	b.n	8003c42 <_printf_i+0x102>
 8003c0e:	680e      	ldr	r6, [r1, #0]
 8003c10:	602b      	str	r3, [r5, #0]
 8003c12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c16:	bf18      	it	ne
 8003c18:	b236      	sxthne	r6, r6
 8003c1a:	e7ef      	b.n	8003bfc <_printf_i+0xbc>
 8003c1c:	682b      	ldr	r3, [r5, #0]
 8003c1e:	6820      	ldr	r0, [r4, #0]
 8003c20:	1d19      	adds	r1, r3, #4
 8003c22:	6029      	str	r1, [r5, #0]
 8003c24:	0601      	lsls	r1, r0, #24
 8003c26:	d501      	bpl.n	8003c2c <_printf_i+0xec>
 8003c28:	681e      	ldr	r6, [r3, #0]
 8003c2a:	e002      	b.n	8003c32 <_printf_i+0xf2>
 8003c2c:	0646      	lsls	r6, r0, #25
 8003c2e:	d5fb      	bpl.n	8003c28 <_printf_i+0xe8>
 8003c30:	881e      	ldrh	r6, [r3, #0]
 8003c32:	4854      	ldr	r0, [pc, #336]	; (8003d84 <_printf_i+0x244>)
 8003c34:	2f6f      	cmp	r7, #111	; 0x6f
 8003c36:	bf0c      	ite	eq
 8003c38:	2308      	moveq	r3, #8
 8003c3a:	230a      	movne	r3, #10
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c42:	6865      	ldr	r5, [r4, #4]
 8003c44:	60a5      	str	r5, [r4, #8]
 8003c46:	2d00      	cmp	r5, #0
 8003c48:	bfa2      	ittt	ge
 8003c4a:	6821      	ldrge	r1, [r4, #0]
 8003c4c:	f021 0104 	bicge.w	r1, r1, #4
 8003c50:	6021      	strge	r1, [r4, #0]
 8003c52:	b90e      	cbnz	r6, 8003c58 <_printf_i+0x118>
 8003c54:	2d00      	cmp	r5, #0
 8003c56:	d04d      	beq.n	8003cf4 <_printf_i+0x1b4>
 8003c58:	4615      	mov	r5, r2
 8003c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8003c62:	5dc7      	ldrb	r7, [r0, r7]
 8003c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c68:	4637      	mov	r7, r6
 8003c6a:	42bb      	cmp	r3, r7
 8003c6c:	460e      	mov	r6, r1
 8003c6e:	d9f4      	bls.n	8003c5a <_printf_i+0x11a>
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d10b      	bne.n	8003c8c <_printf_i+0x14c>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	07de      	lsls	r6, r3, #31
 8003c78:	d508      	bpl.n	8003c8c <_printf_i+0x14c>
 8003c7a:	6923      	ldr	r3, [r4, #16]
 8003c7c:	6861      	ldr	r1, [r4, #4]
 8003c7e:	4299      	cmp	r1, r3
 8003c80:	bfde      	ittt	le
 8003c82:	2330      	movle	r3, #48	; 0x30
 8003c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c8c:	1b52      	subs	r2, r2, r5
 8003c8e:	6122      	str	r2, [r4, #16]
 8003c90:	f8cd a000 	str.w	sl, [sp]
 8003c94:	464b      	mov	r3, r9
 8003c96:	aa03      	add	r2, sp, #12
 8003c98:	4621      	mov	r1, r4
 8003c9a:	4640      	mov	r0, r8
 8003c9c:	f7ff fee2 	bl	8003a64 <_printf_common>
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	d14c      	bne.n	8003d3e <_printf_i+0x1fe>
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	b004      	add	sp, #16
 8003caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cae:	4835      	ldr	r0, [pc, #212]	; (8003d84 <_printf_i+0x244>)
 8003cb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003cb4:	6829      	ldr	r1, [r5, #0]
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cbc:	6029      	str	r1, [r5, #0]
 8003cbe:	061d      	lsls	r5, r3, #24
 8003cc0:	d514      	bpl.n	8003cec <_printf_i+0x1ac>
 8003cc2:	07df      	lsls	r7, r3, #31
 8003cc4:	bf44      	itt	mi
 8003cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8003cca:	6023      	strmi	r3, [r4, #0]
 8003ccc:	b91e      	cbnz	r6, 8003cd6 <_printf_i+0x196>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	f023 0320 	bic.w	r3, r3, #32
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	2310      	movs	r3, #16
 8003cd8:	e7b0      	b.n	8003c3c <_printf_i+0xfc>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	f043 0320 	orr.w	r3, r3, #32
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	2378      	movs	r3, #120	; 0x78
 8003ce4:	4828      	ldr	r0, [pc, #160]	; (8003d88 <_printf_i+0x248>)
 8003ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cea:	e7e3      	b.n	8003cb4 <_printf_i+0x174>
 8003cec:	0659      	lsls	r1, r3, #25
 8003cee:	bf48      	it	mi
 8003cf0:	b2b6      	uxthmi	r6, r6
 8003cf2:	e7e6      	b.n	8003cc2 <_printf_i+0x182>
 8003cf4:	4615      	mov	r5, r2
 8003cf6:	e7bb      	b.n	8003c70 <_printf_i+0x130>
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	6826      	ldr	r6, [r4, #0]
 8003cfc:	6961      	ldr	r1, [r4, #20]
 8003cfe:	1d18      	adds	r0, r3, #4
 8003d00:	6028      	str	r0, [r5, #0]
 8003d02:	0635      	lsls	r5, r6, #24
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	d501      	bpl.n	8003d0c <_printf_i+0x1cc>
 8003d08:	6019      	str	r1, [r3, #0]
 8003d0a:	e002      	b.n	8003d12 <_printf_i+0x1d2>
 8003d0c:	0670      	lsls	r0, r6, #25
 8003d0e:	d5fb      	bpl.n	8003d08 <_printf_i+0x1c8>
 8003d10:	8019      	strh	r1, [r3, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	6123      	str	r3, [r4, #16]
 8003d16:	4615      	mov	r5, r2
 8003d18:	e7ba      	b.n	8003c90 <_printf_i+0x150>
 8003d1a:	682b      	ldr	r3, [r5, #0]
 8003d1c:	1d1a      	adds	r2, r3, #4
 8003d1e:	602a      	str	r2, [r5, #0]
 8003d20:	681d      	ldr	r5, [r3, #0]
 8003d22:	6862      	ldr	r2, [r4, #4]
 8003d24:	2100      	movs	r1, #0
 8003d26:	4628      	mov	r0, r5
 8003d28:	f7fc fa5a 	bl	80001e0 <memchr>
 8003d2c:	b108      	cbz	r0, 8003d32 <_printf_i+0x1f2>
 8003d2e:	1b40      	subs	r0, r0, r5
 8003d30:	6060      	str	r0, [r4, #4]
 8003d32:	6863      	ldr	r3, [r4, #4]
 8003d34:	6123      	str	r3, [r4, #16]
 8003d36:	2300      	movs	r3, #0
 8003d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d3c:	e7a8      	b.n	8003c90 <_printf_i+0x150>
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	462a      	mov	r2, r5
 8003d42:	4649      	mov	r1, r9
 8003d44:	4640      	mov	r0, r8
 8003d46:	47d0      	blx	sl
 8003d48:	3001      	adds	r0, #1
 8003d4a:	d0ab      	beq.n	8003ca4 <_printf_i+0x164>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	079b      	lsls	r3, r3, #30
 8003d50:	d413      	bmi.n	8003d7a <_printf_i+0x23a>
 8003d52:	68e0      	ldr	r0, [r4, #12]
 8003d54:	9b03      	ldr	r3, [sp, #12]
 8003d56:	4298      	cmp	r0, r3
 8003d58:	bfb8      	it	lt
 8003d5a:	4618      	movlt	r0, r3
 8003d5c:	e7a4      	b.n	8003ca8 <_printf_i+0x168>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	4632      	mov	r2, r6
 8003d62:	4649      	mov	r1, r9
 8003d64:	4640      	mov	r0, r8
 8003d66:	47d0      	blx	sl
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d09b      	beq.n	8003ca4 <_printf_i+0x164>
 8003d6c:	3501      	adds	r5, #1
 8003d6e:	68e3      	ldr	r3, [r4, #12]
 8003d70:	9903      	ldr	r1, [sp, #12]
 8003d72:	1a5b      	subs	r3, r3, r1
 8003d74:	42ab      	cmp	r3, r5
 8003d76:	dcf2      	bgt.n	8003d5e <_printf_i+0x21e>
 8003d78:	e7eb      	b.n	8003d52 <_printf_i+0x212>
 8003d7a:	2500      	movs	r5, #0
 8003d7c:	f104 0619 	add.w	r6, r4, #25
 8003d80:	e7f5      	b.n	8003d6e <_printf_i+0x22e>
 8003d82:	bf00      	nop
 8003d84:	080060fa 	.word	0x080060fa
 8003d88:	0800610b 	.word	0x0800610b

08003d8c <_sbrk_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4d06      	ldr	r5, [pc, #24]	; (8003da8 <_sbrk_r+0x1c>)
 8003d90:	2300      	movs	r3, #0
 8003d92:	4604      	mov	r4, r0
 8003d94:	4608      	mov	r0, r1
 8003d96:	602b      	str	r3, [r5, #0]
 8003d98:	f7fd fbc0 	bl	800151c <_sbrk>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_sbrk_r+0x1a>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_sbrk_r+0x1a>
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	2000039c 	.word	0x2000039c

08003dac <siprintf>:
 8003dac:	b40e      	push	{r1, r2, r3}
 8003dae:	b500      	push	{lr}
 8003db0:	b09c      	sub	sp, #112	; 0x70
 8003db2:	ab1d      	add	r3, sp, #116	; 0x74
 8003db4:	9002      	str	r0, [sp, #8]
 8003db6:	9006      	str	r0, [sp, #24]
 8003db8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dbc:	4809      	ldr	r0, [pc, #36]	; (8003de4 <siprintf+0x38>)
 8003dbe:	9107      	str	r1, [sp, #28]
 8003dc0:	9104      	str	r1, [sp, #16]
 8003dc2:	4909      	ldr	r1, [pc, #36]	; (8003de8 <siprintf+0x3c>)
 8003dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dc8:	9105      	str	r1, [sp, #20]
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	a902      	add	r1, sp, #8
 8003dd0:	f001 fd72 	bl	80058b8 <_svfiprintf_r>
 8003dd4:	9b02      	ldr	r3, [sp, #8]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	b01c      	add	sp, #112	; 0x70
 8003ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003de0:	b003      	add	sp, #12
 8003de2:	4770      	bx	lr
 8003de4:	2000001c 	.word	0x2000001c
 8003de8:	ffff0208 	.word	0xffff0208

08003dec <__sread>:
 8003dec:	b510      	push	{r4, lr}
 8003dee:	460c      	mov	r4, r1
 8003df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df4:	f001 ffba 	bl	8005d6c <_read_r>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	bfab      	itete	ge
 8003dfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8003e00:	181b      	addge	r3, r3, r0
 8003e02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e06:	bfac      	ite	ge
 8003e08:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e0a:	81a3      	strhlt	r3, [r4, #12]
 8003e0c:	bd10      	pop	{r4, pc}

08003e0e <__swrite>:
 8003e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e12:	461f      	mov	r7, r3
 8003e14:	898b      	ldrh	r3, [r1, #12]
 8003e16:	05db      	lsls	r3, r3, #23
 8003e18:	4605      	mov	r5, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	4616      	mov	r6, r2
 8003e1e:	d505      	bpl.n	8003e2c <__swrite+0x1e>
 8003e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e24:	2302      	movs	r3, #2
 8003e26:	2200      	movs	r2, #0
 8003e28:	f001 f878 	bl	8004f1c <_lseek_r>
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e36:	81a3      	strh	r3, [r4, #12]
 8003e38:	4632      	mov	r2, r6
 8003e3a:	463b      	mov	r3, r7
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e42:	f000 b869 	b.w	8003f18 <_write_r>

08003e46 <__sseek>:
 8003e46:	b510      	push	{r4, lr}
 8003e48:	460c      	mov	r4, r1
 8003e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4e:	f001 f865 	bl	8004f1c <_lseek_r>
 8003e52:	1c43      	adds	r3, r0, #1
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	bf15      	itete	ne
 8003e58:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e62:	81a3      	strheq	r3, [r4, #12]
 8003e64:	bf18      	it	ne
 8003e66:	81a3      	strhne	r3, [r4, #12]
 8003e68:	bd10      	pop	{r4, pc}

08003e6a <__sclose>:
 8003e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6e:	f000 b8f1 	b.w	8004054 <_close_r>
	...

08003e74 <__swbuf_r>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	460e      	mov	r6, r1
 8003e78:	4614      	mov	r4, r2
 8003e7a:	4605      	mov	r5, r0
 8003e7c:	b118      	cbz	r0, 8003e86 <__swbuf_r+0x12>
 8003e7e:	6983      	ldr	r3, [r0, #24]
 8003e80:	b90b      	cbnz	r3, 8003e86 <__swbuf_r+0x12>
 8003e82:	f7ff f9a9 	bl	80031d8 <__sinit>
 8003e86:	4b21      	ldr	r3, [pc, #132]	; (8003f0c <__swbuf_r+0x98>)
 8003e88:	429c      	cmp	r4, r3
 8003e8a:	d12b      	bne.n	8003ee4 <__swbuf_r+0x70>
 8003e8c:	686c      	ldr	r4, [r5, #4]
 8003e8e:	69a3      	ldr	r3, [r4, #24]
 8003e90:	60a3      	str	r3, [r4, #8]
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	071a      	lsls	r2, r3, #28
 8003e96:	d52f      	bpl.n	8003ef8 <__swbuf_r+0x84>
 8003e98:	6923      	ldr	r3, [r4, #16]
 8003e9a:	b36b      	cbz	r3, 8003ef8 <__swbuf_r+0x84>
 8003e9c:	6923      	ldr	r3, [r4, #16]
 8003e9e:	6820      	ldr	r0, [r4, #0]
 8003ea0:	1ac0      	subs	r0, r0, r3
 8003ea2:	6963      	ldr	r3, [r4, #20]
 8003ea4:	b2f6      	uxtb	r6, r6
 8003ea6:	4283      	cmp	r3, r0
 8003ea8:	4637      	mov	r7, r6
 8003eaa:	dc04      	bgt.n	8003eb6 <__swbuf_r+0x42>
 8003eac:	4621      	mov	r1, r4
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f000 ffe2 	bl	8004e78 <_fflush_r>
 8003eb4:	bb30      	cbnz	r0, 8003f04 <__swbuf_r+0x90>
 8003eb6:	68a3      	ldr	r3, [r4, #8]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	60a3      	str	r3, [r4, #8]
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	6022      	str	r2, [r4, #0]
 8003ec2:	701e      	strb	r6, [r3, #0]
 8003ec4:	6963      	ldr	r3, [r4, #20]
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	4283      	cmp	r3, r0
 8003eca:	d004      	beq.n	8003ed6 <__swbuf_r+0x62>
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	07db      	lsls	r3, r3, #31
 8003ed0:	d506      	bpl.n	8003ee0 <__swbuf_r+0x6c>
 8003ed2:	2e0a      	cmp	r6, #10
 8003ed4:	d104      	bne.n	8003ee0 <__swbuf_r+0x6c>
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f000 ffcd 	bl	8004e78 <_fflush_r>
 8003ede:	b988      	cbnz	r0, 8003f04 <__swbuf_r+0x90>
 8003ee0:	4638      	mov	r0, r7
 8003ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <__swbuf_r+0x9c>)
 8003ee6:	429c      	cmp	r4, r3
 8003ee8:	d101      	bne.n	8003eee <__swbuf_r+0x7a>
 8003eea:	68ac      	ldr	r4, [r5, #8]
 8003eec:	e7cf      	b.n	8003e8e <__swbuf_r+0x1a>
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <__swbuf_r+0xa0>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	bf08      	it	eq
 8003ef4:	68ec      	ldreq	r4, [r5, #12]
 8003ef6:	e7ca      	b.n	8003e8e <__swbuf_r+0x1a>
 8003ef8:	4621      	mov	r1, r4
 8003efa:	4628      	mov	r0, r5
 8003efc:	f000 f81e 	bl	8003f3c <__swsetup_r>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d0cb      	beq.n	8003e9c <__swbuf_r+0x28>
 8003f04:	f04f 37ff 	mov.w	r7, #4294967295
 8003f08:	e7ea      	b.n	8003ee0 <__swbuf_r+0x6c>
 8003f0a:	bf00      	nop
 8003f0c:	080060a4 	.word	0x080060a4
 8003f10:	080060c4 	.word	0x080060c4
 8003f14:	08006084 	.word	0x08006084

08003f18 <_write_r>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	4d07      	ldr	r5, [pc, #28]	; (8003f38 <_write_r+0x20>)
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	4608      	mov	r0, r1
 8003f20:	4611      	mov	r1, r2
 8003f22:	2200      	movs	r2, #0
 8003f24:	602a      	str	r2, [r5, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	f7fe fefb 	bl	8002d22 <_write>
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	d102      	bne.n	8003f36 <_write_r+0x1e>
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	b103      	cbz	r3, 8003f36 <_write_r+0x1e>
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
 8003f38:	2000039c 	.word	0x2000039c

08003f3c <__swsetup_r>:
 8003f3c:	4b32      	ldr	r3, [pc, #200]	; (8004008 <__swsetup_r+0xcc>)
 8003f3e:	b570      	push	{r4, r5, r6, lr}
 8003f40:	681d      	ldr	r5, [r3, #0]
 8003f42:	4606      	mov	r6, r0
 8003f44:	460c      	mov	r4, r1
 8003f46:	b125      	cbz	r5, 8003f52 <__swsetup_r+0x16>
 8003f48:	69ab      	ldr	r3, [r5, #24]
 8003f4a:	b913      	cbnz	r3, 8003f52 <__swsetup_r+0x16>
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f7ff f943 	bl	80031d8 <__sinit>
 8003f52:	4b2e      	ldr	r3, [pc, #184]	; (800400c <__swsetup_r+0xd0>)
 8003f54:	429c      	cmp	r4, r3
 8003f56:	d10f      	bne.n	8003f78 <__swsetup_r+0x3c>
 8003f58:	686c      	ldr	r4, [r5, #4]
 8003f5a:	89a3      	ldrh	r3, [r4, #12]
 8003f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f60:	0719      	lsls	r1, r3, #28
 8003f62:	d42c      	bmi.n	8003fbe <__swsetup_r+0x82>
 8003f64:	06dd      	lsls	r5, r3, #27
 8003f66:	d411      	bmi.n	8003f8c <__swsetup_r+0x50>
 8003f68:	2309      	movs	r3, #9
 8003f6a:	6033      	str	r3, [r6, #0]
 8003f6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	f04f 30ff 	mov.w	r0, #4294967295
 8003f76:	e03e      	b.n	8003ff6 <__swsetup_r+0xba>
 8003f78:	4b25      	ldr	r3, [pc, #148]	; (8004010 <__swsetup_r+0xd4>)
 8003f7a:	429c      	cmp	r4, r3
 8003f7c:	d101      	bne.n	8003f82 <__swsetup_r+0x46>
 8003f7e:	68ac      	ldr	r4, [r5, #8]
 8003f80:	e7eb      	b.n	8003f5a <__swsetup_r+0x1e>
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <__swsetup_r+0xd8>)
 8003f84:	429c      	cmp	r4, r3
 8003f86:	bf08      	it	eq
 8003f88:	68ec      	ldreq	r4, [r5, #12]
 8003f8a:	e7e6      	b.n	8003f5a <__swsetup_r+0x1e>
 8003f8c:	0758      	lsls	r0, r3, #29
 8003f8e:	d512      	bpl.n	8003fb6 <__swsetup_r+0x7a>
 8003f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f92:	b141      	cbz	r1, 8003fa6 <__swsetup_r+0x6a>
 8003f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f98:	4299      	cmp	r1, r3
 8003f9a:	d002      	beq.n	8003fa2 <__swsetup_r+0x66>
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	f001 fbe3 	bl	8005768 <_free_r>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6363      	str	r3, [r4, #52]	; 0x34
 8003fa6:	89a3      	ldrh	r3, [r4, #12]
 8003fa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fac:	81a3      	strh	r3, [r4, #12]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	6063      	str	r3, [r4, #4]
 8003fb2:	6923      	ldr	r3, [r4, #16]
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	89a3      	ldrh	r3, [r4, #12]
 8003fb8:	f043 0308 	orr.w	r3, r3, #8
 8003fbc:	81a3      	strh	r3, [r4, #12]
 8003fbe:	6923      	ldr	r3, [r4, #16]
 8003fc0:	b94b      	cbnz	r3, 8003fd6 <__swsetup_r+0x9a>
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fcc:	d003      	beq.n	8003fd6 <__swsetup_r+0x9a>
 8003fce:	4621      	mov	r1, r4
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f000 ffdb 	bl	8004f8c <__smakebuf_r>
 8003fd6:	89a0      	ldrh	r0, [r4, #12]
 8003fd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fdc:	f010 0301 	ands.w	r3, r0, #1
 8003fe0:	d00a      	beq.n	8003ff8 <__swsetup_r+0xbc>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60a3      	str	r3, [r4, #8]
 8003fe6:	6963      	ldr	r3, [r4, #20]
 8003fe8:	425b      	negs	r3, r3
 8003fea:	61a3      	str	r3, [r4, #24]
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	b943      	cbnz	r3, 8004002 <__swsetup_r+0xc6>
 8003ff0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ff4:	d1ba      	bne.n	8003f6c <__swsetup_r+0x30>
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	0781      	lsls	r1, r0, #30
 8003ffa:	bf58      	it	pl
 8003ffc:	6963      	ldrpl	r3, [r4, #20]
 8003ffe:	60a3      	str	r3, [r4, #8]
 8004000:	e7f4      	b.n	8003fec <__swsetup_r+0xb0>
 8004002:	2000      	movs	r0, #0
 8004004:	e7f7      	b.n	8003ff6 <__swsetup_r+0xba>
 8004006:	bf00      	nop
 8004008:	2000001c 	.word	0x2000001c
 800400c:	080060a4 	.word	0x080060a4
 8004010:	080060c4 	.word	0x080060c4
 8004014:	08006084 	.word	0x08006084

08004018 <__assert_func>:
 8004018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800401a:	4614      	mov	r4, r2
 800401c:	461a      	mov	r2, r3
 800401e:	4b09      	ldr	r3, [pc, #36]	; (8004044 <__assert_func+0x2c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4605      	mov	r5, r0
 8004024:	68d8      	ldr	r0, [r3, #12]
 8004026:	b14c      	cbz	r4, 800403c <__assert_func+0x24>
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <__assert_func+0x30>)
 800402a:	9100      	str	r1, [sp, #0]
 800402c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004030:	4906      	ldr	r1, [pc, #24]	; (800404c <__assert_func+0x34>)
 8004032:	462b      	mov	r3, r5
 8004034:	f000 ff5c 	bl	8004ef0 <fiprintf>
 8004038:	f001 feaa 	bl	8005d90 <abort>
 800403c:	4b04      	ldr	r3, [pc, #16]	; (8004050 <__assert_func+0x38>)
 800403e:	461c      	mov	r4, r3
 8004040:	e7f3      	b.n	800402a <__assert_func+0x12>
 8004042:	bf00      	nop
 8004044:	2000001c 	.word	0x2000001c
 8004048:	0800611c 	.word	0x0800611c
 800404c:	08006129 	.word	0x08006129
 8004050:	08006157 	.word	0x08006157

08004054 <_close_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4d06      	ldr	r5, [pc, #24]	; (8004070 <_close_r+0x1c>)
 8004058:	2300      	movs	r3, #0
 800405a:	4604      	mov	r4, r0
 800405c:	4608      	mov	r0, r1
 800405e:	602b      	str	r3, [r5, #0]
 8004060:	f7fe fe90 	bl	8002d84 <_close>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_close_r+0x1a>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_close_r+0x1a>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	2000039c 	.word	0x2000039c

08004074 <quorem>:
 8004074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004078:	6903      	ldr	r3, [r0, #16]
 800407a:	690c      	ldr	r4, [r1, #16]
 800407c:	42a3      	cmp	r3, r4
 800407e:	4607      	mov	r7, r0
 8004080:	f2c0 8081 	blt.w	8004186 <quorem+0x112>
 8004084:	3c01      	subs	r4, #1
 8004086:	f101 0814 	add.w	r8, r1, #20
 800408a:	f100 0514 	add.w	r5, r0, #20
 800408e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004098:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800409c:	3301      	adds	r3, #1
 800409e:	429a      	cmp	r2, r3
 80040a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80040a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80040a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80040ac:	d331      	bcc.n	8004112 <quorem+0x9e>
 80040ae:	f04f 0e00 	mov.w	lr, #0
 80040b2:	4640      	mov	r0, r8
 80040b4:	46ac      	mov	ip, r5
 80040b6:	46f2      	mov	sl, lr
 80040b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80040bc:	b293      	uxth	r3, r2
 80040be:	fb06 e303 	mla	r3, r6, r3, lr
 80040c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	ebaa 0303 	sub.w	r3, sl, r3
 80040cc:	f8dc a000 	ldr.w	sl, [ip]
 80040d0:	0c12      	lsrs	r2, r2, #16
 80040d2:	fa13 f38a 	uxtah	r3, r3, sl
 80040d6:	fb06 e202 	mla	r2, r6, r2, lr
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	9b00      	ldr	r3, [sp, #0]
 80040de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80040e2:	b292      	uxth	r2, r2
 80040e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80040e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80040f0:	4581      	cmp	r9, r0
 80040f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040f6:	f84c 3b04 	str.w	r3, [ip], #4
 80040fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80040fe:	d2db      	bcs.n	80040b8 <quorem+0x44>
 8004100:	f855 300b 	ldr.w	r3, [r5, fp]
 8004104:	b92b      	cbnz	r3, 8004112 <quorem+0x9e>
 8004106:	9b01      	ldr	r3, [sp, #4]
 8004108:	3b04      	subs	r3, #4
 800410a:	429d      	cmp	r5, r3
 800410c:	461a      	mov	r2, r3
 800410e:	d32e      	bcc.n	800416e <quorem+0xfa>
 8004110:	613c      	str	r4, [r7, #16]
 8004112:	4638      	mov	r0, r7
 8004114:	f001 fa10 	bl	8005538 <__mcmp>
 8004118:	2800      	cmp	r0, #0
 800411a:	db24      	blt.n	8004166 <quorem+0xf2>
 800411c:	3601      	adds	r6, #1
 800411e:	4628      	mov	r0, r5
 8004120:	f04f 0c00 	mov.w	ip, #0
 8004124:	f858 2b04 	ldr.w	r2, [r8], #4
 8004128:	f8d0 e000 	ldr.w	lr, [r0]
 800412c:	b293      	uxth	r3, r2
 800412e:	ebac 0303 	sub.w	r3, ip, r3
 8004132:	0c12      	lsrs	r2, r2, #16
 8004134:	fa13 f38e 	uxtah	r3, r3, lr
 8004138:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800413c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004140:	b29b      	uxth	r3, r3
 8004142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004146:	45c1      	cmp	r9, r8
 8004148:	f840 3b04 	str.w	r3, [r0], #4
 800414c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004150:	d2e8      	bcs.n	8004124 <quorem+0xb0>
 8004152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800415a:	b922      	cbnz	r2, 8004166 <quorem+0xf2>
 800415c:	3b04      	subs	r3, #4
 800415e:	429d      	cmp	r5, r3
 8004160:	461a      	mov	r2, r3
 8004162:	d30a      	bcc.n	800417a <quorem+0x106>
 8004164:	613c      	str	r4, [r7, #16]
 8004166:	4630      	mov	r0, r6
 8004168:	b003      	add	sp, #12
 800416a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	3b04      	subs	r3, #4
 8004172:	2a00      	cmp	r2, #0
 8004174:	d1cc      	bne.n	8004110 <quorem+0x9c>
 8004176:	3c01      	subs	r4, #1
 8004178:	e7c7      	b.n	800410a <quorem+0x96>
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	3b04      	subs	r3, #4
 800417e:	2a00      	cmp	r2, #0
 8004180:	d1f0      	bne.n	8004164 <quorem+0xf0>
 8004182:	3c01      	subs	r4, #1
 8004184:	e7eb      	b.n	800415e <quorem+0xea>
 8004186:	2000      	movs	r0, #0
 8004188:	e7ee      	b.n	8004168 <quorem+0xf4>
 800418a:	0000      	movs	r0, r0
 800418c:	0000      	movs	r0, r0
	...

08004190 <_dtoa_r>:
 8004190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	ed2d 8b04 	vpush	{d8-d9}
 8004198:	ec57 6b10 	vmov	r6, r7, d0
 800419c:	b093      	sub	sp, #76	; 0x4c
 800419e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80041a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80041a4:	9106      	str	r1, [sp, #24]
 80041a6:	ee10 aa10 	vmov	sl, s0
 80041aa:	4604      	mov	r4, r0
 80041ac:	9209      	str	r2, [sp, #36]	; 0x24
 80041ae:	930c      	str	r3, [sp, #48]	; 0x30
 80041b0:	46bb      	mov	fp, r7
 80041b2:	b975      	cbnz	r5, 80041d2 <_dtoa_r+0x42>
 80041b4:	2010      	movs	r0, #16
 80041b6:	f000 ff29 	bl	800500c <malloc>
 80041ba:	4602      	mov	r2, r0
 80041bc:	6260      	str	r0, [r4, #36]	; 0x24
 80041be:	b920      	cbnz	r0, 80041ca <_dtoa_r+0x3a>
 80041c0:	4ba7      	ldr	r3, [pc, #668]	; (8004460 <_dtoa_r+0x2d0>)
 80041c2:	21ea      	movs	r1, #234	; 0xea
 80041c4:	48a7      	ldr	r0, [pc, #668]	; (8004464 <_dtoa_r+0x2d4>)
 80041c6:	f7ff ff27 	bl	8004018 <__assert_func>
 80041ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80041ce:	6005      	str	r5, [r0, #0]
 80041d0:	60c5      	str	r5, [r0, #12]
 80041d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041d4:	6819      	ldr	r1, [r3, #0]
 80041d6:	b151      	cbz	r1, 80041ee <_dtoa_r+0x5e>
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	604a      	str	r2, [r1, #4]
 80041dc:	2301      	movs	r3, #1
 80041de:	4093      	lsls	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
 80041e2:	4620      	mov	r0, r4
 80041e4:	f000 ff66 	bl	80050b4 <_Bfree>
 80041e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	1e3b      	subs	r3, r7, #0
 80041f0:	bfaa      	itet	ge
 80041f2:	2300      	movge	r3, #0
 80041f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80041f8:	f8c8 3000 	strge.w	r3, [r8]
 80041fc:	4b9a      	ldr	r3, [pc, #616]	; (8004468 <_dtoa_r+0x2d8>)
 80041fe:	bfbc      	itt	lt
 8004200:	2201      	movlt	r2, #1
 8004202:	f8c8 2000 	strlt.w	r2, [r8]
 8004206:	ea33 030b 	bics.w	r3, r3, fp
 800420a:	d11b      	bne.n	8004244 <_dtoa_r+0xb4>
 800420c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800420e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004218:	4333      	orrs	r3, r6
 800421a:	f000 8592 	beq.w	8004d42 <_dtoa_r+0xbb2>
 800421e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004220:	b963      	cbnz	r3, 800423c <_dtoa_r+0xac>
 8004222:	4b92      	ldr	r3, [pc, #584]	; (800446c <_dtoa_r+0x2dc>)
 8004224:	e022      	b.n	800426c <_dtoa_r+0xdc>
 8004226:	4b92      	ldr	r3, [pc, #584]	; (8004470 <_dtoa_r+0x2e0>)
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	3308      	adds	r3, #8
 800422c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	9801      	ldr	r0, [sp, #4]
 8004232:	b013      	add	sp, #76	; 0x4c
 8004234:	ecbd 8b04 	vpop	{d8-d9}
 8004238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800423c:	4b8b      	ldr	r3, [pc, #556]	; (800446c <_dtoa_r+0x2dc>)
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	3303      	adds	r3, #3
 8004242:	e7f3      	b.n	800422c <_dtoa_r+0x9c>
 8004244:	2200      	movs	r2, #0
 8004246:	2300      	movs	r3, #0
 8004248:	4650      	mov	r0, sl
 800424a:	4659      	mov	r1, fp
 800424c:	f7fc fc3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004250:	ec4b ab19 	vmov	d9, sl, fp
 8004254:	4680      	mov	r8, r0
 8004256:	b158      	cbz	r0, 8004270 <_dtoa_r+0xe0>
 8004258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800425a:	2301      	movs	r3, #1
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 856b 	beq.w	8004d3c <_dtoa_r+0xbac>
 8004266:	4883      	ldr	r0, [pc, #524]	; (8004474 <_dtoa_r+0x2e4>)
 8004268:	6018      	str	r0, [r3, #0]
 800426a:	1e43      	subs	r3, r0, #1
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	e7df      	b.n	8004230 <_dtoa_r+0xa0>
 8004270:	ec4b ab10 	vmov	d0, sl, fp
 8004274:	aa10      	add	r2, sp, #64	; 0x40
 8004276:	a911      	add	r1, sp, #68	; 0x44
 8004278:	4620      	mov	r0, r4
 800427a:	f001 fa03 	bl	8005684 <__d2b>
 800427e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004282:	ee08 0a10 	vmov	s16, r0
 8004286:	2d00      	cmp	r5, #0
 8004288:	f000 8084 	beq.w	8004394 <_dtoa_r+0x204>
 800428c:	ee19 3a90 	vmov	r3, s19
 8004290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004294:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004298:	4656      	mov	r6, sl
 800429a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800429e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80042a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80042a6:	4b74      	ldr	r3, [pc, #464]	; (8004478 <_dtoa_r+0x2e8>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	4630      	mov	r0, r6
 80042ac:	4639      	mov	r1, r7
 80042ae:	f7fb ffeb 	bl	8000288 <__aeabi_dsub>
 80042b2:	a365      	add	r3, pc, #404	; (adr r3, 8004448 <_dtoa_r+0x2b8>)
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f7fc f99e 	bl	80005f8 <__aeabi_dmul>
 80042bc:	a364      	add	r3, pc, #400	; (adr r3, 8004450 <_dtoa_r+0x2c0>)
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f7fb ffe3 	bl	800028c <__adddf3>
 80042c6:	4606      	mov	r6, r0
 80042c8:	4628      	mov	r0, r5
 80042ca:	460f      	mov	r7, r1
 80042cc:	f7fc f92a 	bl	8000524 <__aeabi_i2d>
 80042d0:	a361      	add	r3, pc, #388	; (adr r3, 8004458 <_dtoa_r+0x2c8>)
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f7fc f98f 	bl	80005f8 <__aeabi_dmul>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4630      	mov	r0, r6
 80042e0:	4639      	mov	r1, r7
 80042e2:	f7fb ffd3 	bl	800028c <__adddf3>
 80042e6:	4606      	mov	r6, r0
 80042e8:	460f      	mov	r7, r1
 80042ea:	f7fc fc35 	bl	8000b58 <__aeabi_d2iz>
 80042ee:	2200      	movs	r2, #0
 80042f0:	9000      	str	r0, [sp, #0]
 80042f2:	2300      	movs	r3, #0
 80042f4:	4630      	mov	r0, r6
 80042f6:	4639      	mov	r1, r7
 80042f8:	f7fc fbf0 	bl	8000adc <__aeabi_dcmplt>
 80042fc:	b150      	cbz	r0, 8004314 <_dtoa_r+0x184>
 80042fe:	9800      	ldr	r0, [sp, #0]
 8004300:	f7fc f910 	bl	8000524 <__aeabi_i2d>
 8004304:	4632      	mov	r2, r6
 8004306:	463b      	mov	r3, r7
 8004308:	f7fc fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 800430c:	b910      	cbnz	r0, 8004314 <_dtoa_r+0x184>
 800430e:	9b00      	ldr	r3, [sp, #0]
 8004310:	3b01      	subs	r3, #1
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	9b00      	ldr	r3, [sp, #0]
 8004316:	2b16      	cmp	r3, #22
 8004318:	d85a      	bhi.n	80043d0 <_dtoa_r+0x240>
 800431a:	9a00      	ldr	r2, [sp, #0]
 800431c:	4b57      	ldr	r3, [pc, #348]	; (800447c <_dtoa_r+0x2ec>)
 800431e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	ec51 0b19 	vmov	r0, r1, d9
 800432a:	f7fc fbd7 	bl	8000adc <__aeabi_dcmplt>
 800432e:	2800      	cmp	r0, #0
 8004330:	d050      	beq.n	80043d4 <_dtoa_r+0x244>
 8004332:	9b00      	ldr	r3, [sp, #0]
 8004334:	3b01      	subs	r3, #1
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	2300      	movs	r3, #0
 800433a:	930b      	str	r3, [sp, #44]	; 0x2c
 800433c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800433e:	1b5d      	subs	r5, r3, r5
 8004340:	1e6b      	subs	r3, r5, #1
 8004342:	9305      	str	r3, [sp, #20]
 8004344:	bf45      	ittet	mi
 8004346:	f1c5 0301 	rsbmi	r3, r5, #1
 800434a:	9304      	strmi	r3, [sp, #16]
 800434c:	2300      	movpl	r3, #0
 800434e:	2300      	movmi	r3, #0
 8004350:	bf4c      	ite	mi
 8004352:	9305      	strmi	r3, [sp, #20]
 8004354:	9304      	strpl	r3, [sp, #16]
 8004356:	9b00      	ldr	r3, [sp, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	db3d      	blt.n	80043d8 <_dtoa_r+0x248>
 800435c:	9b05      	ldr	r3, [sp, #20]
 800435e:	9a00      	ldr	r2, [sp, #0]
 8004360:	920a      	str	r2, [sp, #40]	; 0x28
 8004362:	4413      	add	r3, r2
 8004364:	9305      	str	r3, [sp, #20]
 8004366:	2300      	movs	r3, #0
 8004368:	9307      	str	r3, [sp, #28]
 800436a:	9b06      	ldr	r3, [sp, #24]
 800436c:	2b09      	cmp	r3, #9
 800436e:	f200 8089 	bhi.w	8004484 <_dtoa_r+0x2f4>
 8004372:	2b05      	cmp	r3, #5
 8004374:	bfc4      	itt	gt
 8004376:	3b04      	subgt	r3, #4
 8004378:	9306      	strgt	r3, [sp, #24]
 800437a:	9b06      	ldr	r3, [sp, #24]
 800437c:	f1a3 0302 	sub.w	r3, r3, #2
 8004380:	bfcc      	ite	gt
 8004382:	2500      	movgt	r5, #0
 8004384:	2501      	movle	r5, #1
 8004386:	2b03      	cmp	r3, #3
 8004388:	f200 8087 	bhi.w	800449a <_dtoa_r+0x30a>
 800438c:	e8df f003 	tbb	[pc, r3]
 8004390:	59383a2d 	.word	0x59383a2d
 8004394:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004398:	441d      	add	r5, r3
 800439a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800439e:	2b20      	cmp	r3, #32
 80043a0:	bfc1      	itttt	gt
 80043a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80043a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80043aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80043ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80043b2:	bfda      	itte	le
 80043b4:	f1c3 0320 	rsble	r3, r3, #32
 80043b8:	fa06 f003 	lslle.w	r0, r6, r3
 80043bc:	4318      	orrgt	r0, r3
 80043be:	f7fc f8a1 	bl	8000504 <__aeabi_ui2d>
 80043c2:	2301      	movs	r3, #1
 80043c4:	4606      	mov	r6, r0
 80043c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80043ca:	3d01      	subs	r5, #1
 80043cc:	930e      	str	r3, [sp, #56]	; 0x38
 80043ce:	e76a      	b.n	80042a6 <_dtoa_r+0x116>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e7b2      	b.n	800433a <_dtoa_r+0x1aa>
 80043d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80043d6:	e7b1      	b.n	800433c <_dtoa_r+0x1ac>
 80043d8:	9b04      	ldr	r3, [sp, #16]
 80043da:	9a00      	ldr	r2, [sp, #0]
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	9304      	str	r3, [sp, #16]
 80043e0:	4253      	negs	r3, r2
 80043e2:	9307      	str	r3, [sp, #28]
 80043e4:	2300      	movs	r3, #0
 80043e6:	930a      	str	r3, [sp, #40]	; 0x28
 80043e8:	e7bf      	b.n	800436a <_dtoa_r+0x1da>
 80043ea:	2300      	movs	r3, #0
 80043ec:	9308      	str	r3, [sp, #32]
 80043ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	dc55      	bgt.n	80044a0 <_dtoa_r+0x310>
 80043f4:	2301      	movs	r3, #1
 80043f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80043fa:	461a      	mov	r2, r3
 80043fc:	9209      	str	r2, [sp, #36]	; 0x24
 80043fe:	e00c      	b.n	800441a <_dtoa_r+0x28a>
 8004400:	2301      	movs	r3, #1
 8004402:	e7f3      	b.n	80043ec <_dtoa_r+0x25c>
 8004404:	2300      	movs	r3, #0
 8004406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004408:	9308      	str	r3, [sp, #32]
 800440a:	9b00      	ldr	r3, [sp, #0]
 800440c:	4413      	add	r3, r2
 800440e:	9302      	str	r3, [sp, #8]
 8004410:	3301      	adds	r3, #1
 8004412:	2b01      	cmp	r3, #1
 8004414:	9303      	str	r3, [sp, #12]
 8004416:	bfb8      	it	lt
 8004418:	2301      	movlt	r3, #1
 800441a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800441c:	2200      	movs	r2, #0
 800441e:	6042      	str	r2, [r0, #4]
 8004420:	2204      	movs	r2, #4
 8004422:	f102 0614 	add.w	r6, r2, #20
 8004426:	429e      	cmp	r6, r3
 8004428:	6841      	ldr	r1, [r0, #4]
 800442a:	d93d      	bls.n	80044a8 <_dtoa_r+0x318>
 800442c:	4620      	mov	r0, r4
 800442e:	f000 fe01 	bl	8005034 <_Balloc>
 8004432:	9001      	str	r0, [sp, #4]
 8004434:	2800      	cmp	r0, #0
 8004436:	d13b      	bne.n	80044b0 <_dtoa_r+0x320>
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <_dtoa_r+0x2f0>)
 800443a:	4602      	mov	r2, r0
 800443c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004440:	e6c0      	b.n	80041c4 <_dtoa_r+0x34>
 8004442:	2301      	movs	r3, #1
 8004444:	e7df      	b.n	8004406 <_dtoa_r+0x276>
 8004446:	bf00      	nop
 8004448:	636f4361 	.word	0x636f4361
 800444c:	3fd287a7 	.word	0x3fd287a7
 8004450:	8b60c8b3 	.word	0x8b60c8b3
 8004454:	3fc68a28 	.word	0x3fc68a28
 8004458:	509f79fb 	.word	0x509f79fb
 800445c:	3fd34413 	.word	0x3fd34413
 8004460:	08006165 	.word	0x08006165
 8004464:	0800617c 	.word	0x0800617c
 8004468:	7ff00000 	.word	0x7ff00000
 800446c:	08006161 	.word	0x08006161
 8004470:	08006158 	.word	0x08006158
 8004474:	080060f9 	.word	0x080060f9
 8004478:	3ff80000 	.word	0x3ff80000
 800447c:	08006270 	.word	0x08006270
 8004480:	080061d7 	.word	0x080061d7
 8004484:	2501      	movs	r5, #1
 8004486:	2300      	movs	r3, #0
 8004488:	9306      	str	r3, [sp, #24]
 800448a:	9508      	str	r5, [sp, #32]
 800448c:	f04f 33ff 	mov.w	r3, #4294967295
 8004490:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004494:	2200      	movs	r2, #0
 8004496:	2312      	movs	r3, #18
 8004498:	e7b0      	b.n	80043fc <_dtoa_r+0x26c>
 800449a:	2301      	movs	r3, #1
 800449c:	9308      	str	r3, [sp, #32]
 800449e:	e7f5      	b.n	800448c <_dtoa_r+0x2fc>
 80044a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80044a6:	e7b8      	b.n	800441a <_dtoa_r+0x28a>
 80044a8:	3101      	adds	r1, #1
 80044aa:	6041      	str	r1, [r0, #4]
 80044ac:	0052      	lsls	r2, r2, #1
 80044ae:	e7b8      	b.n	8004422 <_dtoa_r+0x292>
 80044b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044b2:	9a01      	ldr	r2, [sp, #4]
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	9b03      	ldr	r3, [sp, #12]
 80044b8:	2b0e      	cmp	r3, #14
 80044ba:	f200 809d 	bhi.w	80045f8 <_dtoa_r+0x468>
 80044be:	2d00      	cmp	r5, #0
 80044c0:	f000 809a 	beq.w	80045f8 <_dtoa_r+0x468>
 80044c4:	9b00      	ldr	r3, [sp, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	dd32      	ble.n	8004530 <_dtoa_r+0x3a0>
 80044ca:	4ab7      	ldr	r2, [pc, #732]	; (80047a8 <_dtoa_r+0x618>)
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80044d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044d8:	9b00      	ldr	r3, [sp, #0]
 80044da:	05d8      	lsls	r0, r3, #23
 80044dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80044e0:	d516      	bpl.n	8004510 <_dtoa_r+0x380>
 80044e2:	4bb2      	ldr	r3, [pc, #712]	; (80047ac <_dtoa_r+0x61c>)
 80044e4:	ec51 0b19 	vmov	r0, r1, d9
 80044e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044ec:	f7fc f9ae 	bl	800084c <__aeabi_ddiv>
 80044f0:	f007 070f 	and.w	r7, r7, #15
 80044f4:	4682      	mov	sl, r0
 80044f6:	468b      	mov	fp, r1
 80044f8:	2503      	movs	r5, #3
 80044fa:	4eac      	ldr	r6, [pc, #688]	; (80047ac <_dtoa_r+0x61c>)
 80044fc:	b957      	cbnz	r7, 8004514 <_dtoa_r+0x384>
 80044fe:	4642      	mov	r2, r8
 8004500:	464b      	mov	r3, r9
 8004502:	4650      	mov	r0, sl
 8004504:	4659      	mov	r1, fp
 8004506:	f7fc f9a1 	bl	800084c <__aeabi_ddiv>
 800450a:	4682      	mov	sl, r0
 800450c:	468b      	mov	fp, r1
 800450e:	e028      	b.n	8004562 <_dtoa_r+0x3d2>
 8004510:	2502      	movs	r5, #2
 8004512:	e7f2      	b.n	80044fa <_dtoa_r+0x36a>
 8004514:	07f9      	lsls	r1, r7, #31
 8004516:	d508      	bpl.n	800452a <_dtoa_r+0x39a>
 8004518:	4640      	mov	r0, r8
 800451a:	4649      	mov	r1, r9
 800451c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004520:	f7fc f86a 	bl	80005f8 <__aeabi_dmul>
 8004524:	3501      	adds	r5, #1
 8004526:	4680      	mov	r8, r0
 8004528:	4689      	mov	r9, r1
 800452a:	107f      	asrs	r7, r7, #1
 800452c:	3608      	adds	r6, #8
 800452e:	e7e5      	b.n	80044fc <_dtoa_r+0x36c>
 8004530:	f000 809b 	beq.w	800466a <_dtoa_r+0x4da>
 8004534:	9b00      	ldr	r3, [sp, #0]
 8004536:	4f9d      	ldr	r7, [pc, #628]	; (80047ac <_dtoa_r+0x61c>)
 8004538:	425e      	negs	r6, r3
 800453a:	4b9b      	ldr	r3, [pc, #620]	; (80047a8 <_dtoa_r+0x618>)
 800453c:	f006 020f 	and.w	r2, r6, #15
 8004540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	ec51 0b19 	vmov	r0, r1, d9
 800454c:	f7fc f854 	bl	80005f8 <__aeabi_dmul>
 8004550:	1136      	asrs	r6, r6, #4
 8004552:	4682      	mov	sl, r0
 8004554:	468b      	mov	fp, r1
 8004556:	2300      	movs	r3, #0
 8004558:	2502      	movs	r5, #2
 800455a:	2e00      	cmp	r6, #0
 800455c:	d17a      	bne.n	8004654 <_dtoa_r+0x4c4>
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1d3      	bne.n	800450a <_dtoa_r+0x37a>
 8004562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8082 	beq.w	800466e <_dtoa_r+0x4de>
 800456a:	4b91      	ldr	r3, [pc, #580]	; (80047b0 <_dtoa_r+0x620>)
 800456c:	2200      	movs	r2, #0
 800456e:	4650      	mov	r0, sl
 8004570:	4659      	mov	r1, fp
 8004572:	f7fc fab3 	bl	8000adc <__aeabi_dcmplt>
 8004576:	2800      	cmp	r0, #0
 8004578:	d079      	beq.n	800466e <_dtoa_r+0x4de>
 800457a:	9b03      	ldr	r3, [sp, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d076      	beq.n	800466e <_dtoa_r+0x4de>
 8004580:	9b02      	ldr	r3, [sp, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	dd36      	ble.n	80045f4 <_dtoa_r+0x464>
 8004586:	9b00      	ldr	r3, [sp, #0]
 8004588:	4650      	mov	r0, sl
 800458a:	4659      	mov	r1, fp
 800458c:	1e5f      	subs	r7, r3, #1
 800458e:	2200      	movs	r2, #0
 8004590:	4b88      	ldr	r3, [pc, #544]	; (80047b4 <_dtoa_r+0x624>)
 8004592:	f7fc f831 	bl	80005f8 <__aeabi_dmul>
 8004596:	9e02      	ldr	r6, [sp, #8]
 8004598:	4682      	mov	sl, r0
 800459a:	468b      	mov	fp, r1
 800459c:	3501      	adds	r5, #1
 800459e:	4628      	mov	r0, r5
 80045a0:	f7fb ffc0 	bl	8000524 <__aeabi_i2d>
 80045a4:	4652      	mov	r2, sl
 80045a6:	465b      	mov	r3, fp
 80045a8:	f7fc f826 	bl	80005f8 <__aeabi_dmul>
 80045ac:	4b82      	ldr	r3, [pc, #520]	; (80047b8 <_dtoa_r+0x628>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	f7fb fe6c 	bl	800028c <__adddf3>
 80045b4:	46d0      	mov	r8, sl
 80045b6:	46d9      	mov	r9, fp
 80045b8:	4682      	mov	sl, r0
 80045ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80045be:	2e00      	cmp	r6, #0
 80045c0:	d158      	bne.n	8004674 <_dtoa_r+0x4e4>
 80045c2:	4b7e      	ldr	r3, [pc, #504]	; (80047bc <_dtoa_r+0x62c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	4640      	mov	r0, r8
 80045c8:	4649      	mov	r1, r9
 80045ca:	f7fb fe5d 	bl	8000288 <__aeabi_dsub>
 80045ce:	4652      	mov	r2, sl
 80045d0:	465b      	mov	r3, fp
 80045d2:	4680      	mov	r8, r0
 80045d4:	4689      	mov	r9, r1
 80045d6:	f7fc fa9f 	bl	8000b18 <__aeabi_dcmpgt>
 80045da:	2800      	cmp	r0, #0
 80045dc:	f040 8295 	bne.w	8004b0a <_dtoa_r+0x97a>
 80045e0:	4652      	mov	r2, sl
 80045e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80045e6:	4640      	mov	r0, r8
 80045e8:	4649      	mov	r1, r9
 80045ea:	f7fc fa77 	bl	8000adc <__aeabi_dcmplt>
 80045ee:	2800      	cmp	r0, #0
 80045f0:	f040 8289 	bne.w	8004b06 <_dtoa_r+0x976>
 80045f4:	ec5b ab19 	vmov	sl, fp, d9
 80045f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f2c0 8148 	blt.w	8004890 <_dtoa_r+0x700>
 8004600:	9a00      	ldr	r2, [sp, #0]
 8004602:	2a0e      	cmp	r2, #14
 8004604:	f300 8144 	bgt.w	8004890 <_dtoa_r+0x700>
 8004608:	4b67      	ldr	r3, [pc, #412]	; (80047a8 <_dtoa_r+0x618>)
 800460a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800460e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	f280 80d5 	bge.w	80047c4 <_dtoa_r+0x634>
 800461a:	9b03      	ldr	r3, [sp, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f300 80d1 	bgt.w	80047c4 <_dtoa_r+0x634>
 8004622:	f040 826f 	bne.w	8004b04 <_dtoa_r+0x974>
 8004626:	4b65      	ldr	r3, [pc, #404]	; (80047bc <_dtoa_r+0x62c>)
 8004628:	2200      	movs	r2, #0
 800462a:	4640      	mov	r0, r8
 800462c:	4649      	mov	r1, r9
 800462e:	f7fb ffe3 	bl	80005f8 <__aeabi_dmul>
 8004632:	4652      	mov	r2, sl
 8004634:	465b      	mov	r3, fp
 8004636:	f7fc fa65 	bl	8000b04 <__aeabi_dcmpge>
 800463a:	9e03      	ldr	r6, [sp, #12]
 800463c:	4637      	mov	r7, r6
 800463e:	2800      	cmp	r0, #0
 8004640:	f040 8245 	bne.w	8004ace <_dtoa_r+0x93e>
 8004644:	9d01      	ldr	r5, [sp, #4]
 8004646:	2331      	movs	r3, #49	; 0x31
 8004648:	f805 3b01 	strb.w	r3, [r5], #1
 800464c:	9b00      	ldr	r3, [sp, #0]
 800464e:	3301      	adds	r3, #1
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	e240      	b.n	8004ad6 <_dtoa_r+0x946>
 8004654:	07f2      	lsls	r2, r6, #31
 8004656:	d505      	bpl.n	8004664 <_dtoa_r+0x4d4>
 8004658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800465c:	f7fb ffcc 	bl	80005f8 <__aeabi_dmul>
 8004660:	3501      	adds	r5, #1
 8004662:	2301      	movs	r3, #1
 8004664:	1076      	asrs	r6, r6, #1
 8004666:	3708      	adds	r7, #8
 8004668:	e777      	b.n	800455a <_dtoa_r+0x3ca>
 800466a:	2502      	movs	r5, #2
 800466c:	e779      	b.n	8004562 <_dtoa_r+0x3d2>
 800466e:	9f00      	ldr	r7, [sp, #0]
 8004670:	9e03      	ldr	r6, [sp, #12]
 8004672:	e794      	b.n	800459e <_dtoa_r+0x40e>
 8004674:	9901      	ldr	r1, [sp, #4]
 8004676:	4b4c      	ldr	r3, [pc, #304]	; (80047a8 <_dtoa_r+0x618>)
 8004678:	4431      	add	r1, r6
 800467a:	910d      	str	r1, [sp, #52]	; 0x34
 800467c:	9908      	ldr	r1, [sp, #32]
 800467e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004682:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004686:	2900      	cmp	r1, #0
 8004688:	d043      	beq.n	8004712 <_dtoa_r+0x582>
 800468a:	494d      	ldr	r1, [pc, #308]	; (80047c0 <_dtoa_r+0x630>)
 800468c:	2000      	movs	r0, #0
 800468e:	f7fc f8dd 	bl	800084c <__aeabi_ddiv>
 8004692:	4652      	mov	r2, sl
 8004694:	465b      	mov	r3, fp
 8004696:	f7fb fdf7 	bl	8000288 <__aeabi_dsub>
 800469a:	9d01      	ldr	r5, [sp, #4]
 800469c:	4682      	mov	sl, r0
 800469e:	468b      	mov	fp, r1
 80046a0:	4649      	mov	r1, r9
 80046a2:	4640      	mov	r0, r8
 80046a4:	f7fc fa58 	bl	8000b58 <__aeabi_d2iz>
 80046a8:	4606      	mov	r6, r0
 80046aa:	f7fb ff3b 	bl	8000524 <__aeabi_i2d>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4640      	mov	r0, r8
 80046b4:	4649      	mov	r1, r9
 80046b6:	f7fb fde7 	bl	8000288 <__aeabi_dsub>
 80046ba:	3630      	adds	r6, #48	; 0x30
 80046bc:	f805 6b01 	strb.w	r6, [r5], #1
 80046c0:	4652      	mov	r2, sl
 80046c2:	465b      	mov	r3, fp
 80046c4:	4680      	mov	r8, r0
 80046c6:	4689      	mov	r9, r1
 80046c8:	f7fc fa08 	bl	8000adc <__aeabi_dcmplt>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	d163      	bne.n	8004798 <_dtoa_r+0x608>
 80046d0:	4642      	mov	r2, r8
 80046d2:	464b      	mov	r3, r9
 80046d4:	4936      	ldr	r1, [pc, #216]	; (80047b0 <_dtoa_r+0x620>)
 80046d6:	2000      	movs	r0, #0
 80046d8:	f7fb fdd6 	bl	8000288 <__aeabi_dsub>
 80046dc:	4652      	mov	r2, sl
 80046de:	465b      	mov	r3, fp
 80046e0:	f7fc f9fc 	bl	8000adc <__aeabi_dcmplt>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	f040 80b5 	bne.w	8004854 <_dtoa_r+0x6c4>
 80046ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046ec:	429d      	cmp	r5, r3
 80046ee:	d081      	beq.n	80045f4 <_dtoa_r+0x464>
 80046f0:	4b30      	ldr	r3, [pc, #192]	; (80047b4 <_dtoa_r+0x624>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	4650      	mov	r0, sl
 80046f6:	4659      	mov	r1, fp
 80046f8:	f7fb ff7e 	bl	80005f8 <__aeabi_dmul>
 80046fc:	4b2d      	ldr	r3, [pc, #180]	; (80047b4 <_dtoa_r+0x624>)
 80046fe:	4682      	mov	sl, r0
 8004700:	468b      	mov	fp, r1
 8004702:	4640      	mov	r0, r8
 8004704:	4649      	mov	r1, r9
 8004706:	2200      	movs	r2, #0
 8004708:	f7fb ff76 	bl	80005f8 <__aeabi_dmul>
 800470c:	4680      	mov	r8, r0
 800470e:	4689      	mov	r9, r1
 8004710:	e7c6      	b.n	80046a0 <_dtoa_r+0x510>
 8004712:	4650      	mov	r0, sl
 8004714:	4659      	mov	r1, fp
 8004716:	f7fb ff6f 	bl	80005f8 <__aeabi_dmul>
 800471a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800471c:	9d01      	ldr	r5, [sp, #4]
 800471e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004720:	4682      	mov	sl, r0
 8004722:	468b      	mov	fp, r1
 8004724:	4649      	mov	r1, r9
 8004726:	4640      	mov	r0, r8
 8004728:	f7fc fa16 	bl	8000b58 <__aeabi_d2iz>
 800472c:	4606      	mov	r6, r0
 800472e:	f7fb fef9 	bl	8000524 <__aeabi_i2d>
 8004732:	3630      	adds	r6, #48	; 0x30
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4640      	mov	r0, r8
 800473a:	4649      	mov	r1, r9
 800473c:	f7fb fda4 	bl	8000288 <__aeabi_dsub>
 8004740:	f805 6b01 	strb.w	r6, [r5], #1
 8004744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004746:	429d      	cmp	r5, r3
 8004748:	4680      	mov	r8, r0
 800474a:	4689      	mov	r9, r1
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	d124      	bne.n	800479c <_dtoa_r+0x60c>
 8004752:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <_dtoa_r+0x630>)
 8004754:	4650      	mov	r0, sl
 8004756:	4659      	mov	r1, fp
 8004758:	f7fb fd98 	bl	800028c <__adddf3>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4640      	mov	r0, r8
 8004762:	4649      	mov	r1, r9
 8004764:	f7fc f9d8 	bl	8000b18 <__aeabi_dcmpgt>
 8004768:	2800      	cmp	r0, #0
 800476a:	d173      	bne.n	8004854 <_dtoa_r+0x6c4>
 800476c:	4652      	mov	r2, sl
 800476e:	465b      	mov	r3, fp
 8004770:	4913      	ldr	r1, [pc, #76]	; (80047c0 <_dtoa_r+0x630>)
 8004772:	2000      	movs	r0, #0
 8004774:	f7fb fd88 	bl	8000288 <__aeabi_dsub>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4640      	mov	r0, r8
 800477e:	4649      	mov	r1, r9
 8004780:	f7fc f9ac 	bl	8000adc <__aeabi_dcmplt>
 8004784:	2800      	cmp	r0, #0
 8004786:	f43f af35 	beq.w	80045f4 <_dtoa_r+0x464>
 800478a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800478c:	1e6b      	subs	r3, r5, #1
 800478e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004790:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004794:	2b30      	cmp	r3, #48	; 0x30
 8004796:	d0f8      	beq.n	800478a <_dtoa_r+0x5fa>
 8004798:	9700      	str	r7, [sp, #0]
 800479a:	e049      	b.n	8004830 <_dtoa_r+0x6a0>
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <_dtoa_r+0x624>)
 800479e:	f7fb ff2b 	bl	80005f8 <__aeabi_dmul>
 80047a2:	4680      	mov	r8, r0
 80047a4:	4689      	mov	r9, r1
 80047a6:	e7bd      	b.n	8004724 <_dtoa_r+0x594>
 80047a8:	08006270 	.word	0x08006270
 80047ac:	08006248 	.word	0x08006248
 80047b0:	3ff00000 	.word	0x3ff00000
 80047b4:	40240000 	.word	0x40240000
 80047b8:	401c0000 	.word	0x401c0000
 80047bc:	40140000 	.word	0x40140000
 80047c0:	3fe00000 	.word	0x3fe00000
 80047c4:	9d01      	ldr	r5, [sp, #4]
 80047c6:	4656      	mov	r6, sl
 80047c8:	465f      	mov	r7, fp
 80047ca:	4642      	mov	r2, r8
 80047cc:	464b      	mov	r3, r9
 80047ce:	4630      	mov	r0, r6
 80047d0:	4639      	mov	r1, r7
 80047d2:	f7fc f83b 	bl	800084c <__aeabi_ddiv>
 80047d6:	f7fc f9bf 	bl	8000b58 <__aeabi_d2iz>
 80047da:	4682      	mov	sl, r0
 80047dc:	f7fb fea2 	bl	8000524 <__aeabi_i2d>
 80047e0:	4642      	mov	r2, r8
 80047e2:	464b      	mov	r3, r9
 80047e4:	f7fb ff08 	bl	80005f8 <__aeabi_dmul>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4630      	mov	r0, r6
 80047ee:	4639      	mov	r1, r7
 80047f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80047f4:	f7fb fd48 	bl	8000288 <__aeabi_dsub>
 80047f8:	f805 6b01 	strb.w	r6, [r5], #1
 80047fc:	9e01      	ldr	r6, [sp, #4]
 80047fe:	9f03      	ldr	r7, [sp, #12]
 8004800:	1bae      	subs	r6, r5, r6
 8004802:	42b7      	cmp	r7, r6
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	d135      	bne.n	8004876 <_dtoa_r+0x6e6>
 800480a:	f7fb fd3f 	bl	800028c <__adddf3>
 800480e:	4642      	mov	r2, r8
 8004810:	464b      	mov	r3, r9
 8004812:	4606      	mov	r6, r0
 8004814:	460f      	mov	r7, r1
 8004816:	f7fc f97f 	bl	8000b18 <__aeabi_dcmpgt>
 800481a:	b9d0      	cbnz	r0, 8004852 <_dtoa_r+0x6c2>
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	4630      	mov	r0, r6
 8004822:	4639      	mov	r1, r7
 8004824:	f7fc f950 	bl	8000ac8 <__aeabi_dcmpeq>
 8004828:	b110      	cbz	r0, 8004830 <_dtoa_r+0x6a0>
 800482a:	f01a 0f01 	tst.w	sl, #1
 800482e:	d110      	bne.n	8004852 <_dtoa_r+0x6c2>
 8004830:	4620      	mov	r0, r4
 8004832:	ee18 1a10 	vmov	r1, s16
 8004836:	f000 fc3d 	bl	80050b4 <_Bfree>
 800483a:	2300      	movs	r3, #0
 800483c:	9800      	ldr	r0, [sp, #0]
 800483e:	702b      	strb	r3, [r5, #0]
 8004840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004842:	3001      	adds	r0, #1
 8004844:	6018      	str	r0, [r3, #0]
 8004846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004848:	2b00      	cmp	r3, #0
 800484a:	f43f acf1 	beq.w	8004230 <_dtoa_r+0xa0>
 800484e:	601d      	str	r5, [r3, #0]
 8004850:	e4ee      	b.n	8004230 <_dtoa_r+0xa0>
 8004852:	9f00      	ldr	r7, [sp, #0]
 8004854:	462b      	mov	r3, r5
 8004856:	461d      	mov	r5, r3
 8004858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800485c:	2a39      	cmp	r2, #57	; 0x39
 800485e:	d106      	bne.n	800486e <_dtoa_r+0x6de>
 8004860:	9a01      	ldr	r2, [sp, #4]
 8004862:	429a      	cmp	r2, r3
 8004864:	d1f7      	bne.n	8004856 <_dtoa_r+0x6c6>
 8004866:	9901      	ldr	r1, [sp, #4]
 8004868:	2230      	movs	r2, #48	; 0x30
 800486a:	3701      	adds	r7, #1
 800486c:	700a      	strb	r2, [r1, #0]
 800486e:	781a      	ldrb	r2, [r3, #0]
 8004870:	3201      	adds	r2, #1
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e790      	b.n	8004798 <_dtoa_r+0x608>
 8004876:	4ba6      	ldr	r3, [pc, #664]	; (8004b10 <_dtoa_r+0x980>)
 8004878:	2200      	movs	r2, #0
 800487a:	f7fb febd 	bl	80005f8 <__aeabi_dmul>
 800487e:	2200      	movs	r2, #0
 8004880:	2300      	movs	r3, #0
 8004882:	4606      	mov	r6, r0
 8004884:	460f      	mov	r7, r1
 8004886:	f7fc f91f 	bl	8000ac8 <__aeabi_dcmpeq>
 800488a:	2800      	cmp	r0, #0
 800488c:	d09d      	beq.n	80047ca <_dtoa_r+0x63a>
 800488e:	e7cf      	b.n	8004830 <_dtoa_r+0x6a0>
 8004890:	9a08      	ldr	r2, [sp, #32]
 8004892:	2a00      	cmp	r2, #0
 8004894:	f000 80d7 	beq.w	8004a46 <_dtoa_r+0x8b6>
 8004898:	9a06      	ldr	r2, [sp, #24]
 800489a:	2a01      	cmp	r2, #1
 800489c:	f300 80ba 	bgt.w	8004a14 <_dtoa_r+0x884>
 80048a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048a2:	2a00      	cmp	r2, #0
 80048a4:	f000 80b2 	beq.w	8004a0c <_dtoa_r+0x87c>
 80048a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80048ac:	9e07      	ldr	r6, [sp, #28]
 80048ae:	9d04      	ldr	r5, [sp, #16]
 80048b0:	9a04      	ldr	r2, [sp, #16]
 80048b2:	441a      	add	r2, r3
 80048b4:	9204      	str	r2, [sp, #16]
 80048b6:	9a05      	ldr	r2, [sp, #20]
 80048b8:	2101      	movs	r1, #1
 80048ba:	441a      	add	r2, r3
 80048bc:	4620      	mov	r0, r4
 80048be:	9205      	str	r2, [sp, #20]
 80048c0:	f000 fcb0 	bl	8005224 <__i2b>
 80048c4:	4607      	mov	r7, r0
 80048c6:	2d00      	cmp	r5, #0
 80048c8:	dd0c      	ble.n	80048e4 <_dtoa_r+0x754>
 80048ca:	9b05      	ldr	r3, [sp, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	dd09      	ble.n	80048e4 <_dtoa_r+0x754>
 80048d0:	42ab      	cmp	r3, r5
 80048d2:	9a04      	ldr	r2, [sp, #16]
 80048d4:	bfa8      	it	ge
 80048d6:	462b      	movge	r3, r5
 80048d8:	1ad2      	subs	r2, r2, r3
 80048da:	9204      	str	r2, [sp, #16]
 80048dc:	9a05      	ldr	r2, [sp, #20]
 80048de:	1aed      	subs	r5, r5, r3
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	9305      	str	r3, [sp, #20]
 80048e4:	9b07      	ldr	r3, [sp, #28]
 80048e6:	b31b      	cbz	r3, 8004930 <_dtoa_r+0x7a0>
 80048e8:	9b08      	ldr	r3, [sp, #32]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80af 	beq.w	8004a4e <_dtoa_r+0x8be>
 80048f0:	2e00      	cmp	r6, #0
 80048f2:	dd13      	ble.n	800491c <_dtoa_r+0x78c>
 80048f4:	4639      	mov	r1, r7
 80048f6:	4632      	mov	r2, r6
 80048f8:	4620      	mov	r0, r4
 80048fa:	f000 fd53 	bl	80053a4 <__pow5mult>
 80048fe:	ee18 2a10 	vmov	r2, s16
 8004902:	4601      	mov	r1, r0
 8004904:	4607      	mov	r7, r0
 8004906:	4620      	mov	r0, r4
 8004908:	f000 fca2 	bl	8005250 <__multiply>
 800490c:	ee18 1a10 	vmov	r1, s16
 8004910:	4680      	mov	r8, r0
 8004912:	4620      	mov	r0, r4
 8004914:	f000 fbce 	bl	80050b4 <_Bfree>
 8004918:	ee08 8a10 	vmov	s16, r8
 800491c:	9b07      	ldr	r3, [sp, #28]
 800491e:	1b9a      	subs	r2, r3, r6
 8004920:	d006      	beq.n	8004930 <_dtoa_r+0x7a0>
 8004922:	ee18 1a10 	vmov	r1, s16
 8004926:	4620      	mov	r0, r4
 8004928:	f000 fd3c 	bl	80053a4 <__pow5mult>
 800492c:	ee08 0a10 	vmov	s16, r0
 8004930:	2101      	movs	r1, #1
 8004932:	4620      	mov	r0, r4
 8004934:	f000 fc76 	bl	8005224 <__i2b>
 8004938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	4606      	mov	r6, r0
 800493e:	f340 8088 	ble.w	8004a52 <_dtoa_r+0x8c2>
 8004942:	461a      	mov	r2, r3
 8004944:	4601      	mov	r1, r0
 8004946:	4620      	mov	r0, r4
 8004948:	f000 fd2c 	bl	80053a4 <__pow5mult>
 800494c:	9b06      	ldr	r3, [sp, #24]
 800494e:	2b01      	cmp	r3, #1
 8004950:	4606      	mov	r6, r0
 8004952:	f340 8081 	ble.w	8004a58 <_dtoa_r+0x8c8>
 8004956:	f04f 0800 	mov.w	r8, #0
 800495a:	6933      	ldr	r3, [r6, #16]
 800495c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004960:	6918      	ldr	r0, [r3, #16]
 8004962:	f000 fc0f 	bl	8005184 <__hi0bits>
 8004966:	f1c0 0020 	rsb	r0, r0, #32
 800496a:	9b05      	ldr	r3, [sp, #20]
 800496c:	4418      	add	r0, r3
 800496e:	f010 001f 	ands.w	r0, r0, #31
 8004972:	f000 8092 	beq.w	8004a9a <_dtoa_r+0x90a>
 8004976:	f1c0 0320 	rsb	r3, r0, #32
 800497a:	2b04      	cmp	r3, #4
 800497c:	f340 808a 	ble.w	8004a94 <_dtoa_r+0x904>
 8004980:	f1c0 001c 	rsb	r0, r0, #28
 8004984:	9b04      	ldr	r3, [sp, #16]
 8004986:	4403      	add	r3, r0
 8004988:	9304      	str	r3, [sp, #16]
 800498a:	9b05      	ldr	r3, [sp, #20]
 800498c:	4403      	add	r3, r0
 800498e:	4405      	add	r5, r0
 8004990:	9305      	str	r3, [sp, #20]
 8004992:	9b04      	ldr	r3, [sp, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	dd07      	ble.n	80049a8 <_dtoa_r+0x818>
 8004998:	ee18 1a10 	vmov	r1, s16
 800499c:	461a      	mov	r2, r3
 800499e:	4620      	mov	r0, r4
 80049a0:	f000 fd5a 	bl	8005458 <__lshift>
 80049a4:	ee08 0a10 	vmov	s16, r0
 80049a8:	9b05      	ldr	r3, [sp, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	dd05      	ble.n	80049ba <_dtoa_r+0x82a>
 80049ae:	4631      	mov	r1, r6
 80049b0:	461a      	mov	r2, r3
 80049b2:	4620      	mov	r0, r4
 80049b4:	f000 fd50 	bl	8005458 <__lshift>
 80049b8:	4606      	mov	r6, r0
 80049ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d06e      	beq.n	8004a9e <_dtoa_r+0x90e>
 80049c0:	ee18 0a10 	vmov	r0, s16
 80049c4:	4631      	mov	r1, r6
 80049c6:	f000 fdb7 	bl	8005538 <__mcmp>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	da67      	bge.n	8004a9e <_dtoa_r+0x90e>
 80049ce:	9b00      	ldr	r3, [sp, #0]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	ee18 1a10 	vmov	r1, s16
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	220a      	movs	r2, #10
 80049da:	2300      	movs	r3, #0
 80049dc:	4620      	mov	r0, r4
 80049de:	f000 fb8b 	bl	80050f8 <__multadd>
 80049e2:	9b08      	ldr	r3, [sp, #32]
 80049e4:	ee08 0a10 	vmov	s16, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 81b1 	beq.w	8004d50 <_dtoa_r+0xbc0>
 80049ee:	2300      	movs	r3, #0
 80049f0:	4639      	mov	r1, r7
 80049f2:	220a      	movs	r2, #10
 80049f4:	4620      	mov	r0, r4
 80049f6:	f000 fb7f 	bl	80050f8 <__multadd>
 80049fa:	9b02      	ldr	r3, [sp, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	4607      	mov	r7, r0
 8004a00:	f300 808e 	bgt.w	8004b20 <_dtoa_r+0x990>
 8004a04:	9b06      	ldr	r3, [sp, #24]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	dc51      	bgt.n	8004aae <_dtoa_r+0x91e>
 8004a0a:	e089      	b.n	8004b20 <_dtoa_r+0x990>
 8004a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a12:	e74b      	b.n	80048ac <_dtoa_r+0x71c>
 8004a14:	9b03      	ldr	r3, [sp, #12]
 8004a16:	1e5e      	subs	r6, r3, #1
 8004a18:	9b07      	ldr	r3, [sp, #28]
 8004a1a:	42b3      	cmp	r3, r6
 8004a1c:	bfbf      	itttt	lt
 8004a1e:	9b07      	ldrlt	r3, [sp, #28]
 8004a20:	9607      	strlt	r6, [sp, #28]
 8004a22:	1af2      	sublt	r2, r6, r3
 8004a24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004a26:	bfb6      	itet	lt
 8004a28:	189b      	addlt	r3, r3, r2
 8004a2a:	1b9e      	subge	r6, r3, r6
 8004a2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004a2e:	9b03      	ldr	r3, [sp, #12]
 8004a30:	bfb8      	it	lt
 8004a32:	2600      	movlt	r6, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bfb7      	itett	lt
 8004a38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004a3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004a40:	1a9d      	sublt	r5, r3, r2
 8004a42:	2300      	movlt	r3, #0
 8004a44:	e734      	b.n	80048b0 <_dtoa_r+0x720>
 8004a46:	9e07      	ldr	r6, [sp, #28]
 8004a48:	9d04      	ldr	r5, [sp, #16]
 8004a4a:	9f08      	ldr	r7, [sp, #32]
 8004a4c:	e73b      	b.n	80048c6 <_dtoa_r+0x736>
 8004a4e:	9a07      	ldr	r2, [sp, #28]
 8004a50:	e767      	b.n	8004922 <_dtoa_r+0x792>
 8004a52:	9b06      	ldr	r3, [sp, #24]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	dc18      	bgt.n	8004a8a <_dtoa_r+0x8fa>
 8004a58:	f1ba 0f00 	cmp.w	sl, #0
 8004a5c:	d115      	bne.n	8004a8a <_dtoa_r+0x8fa>
 8004a5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a62:	b993      	cbnz	r3, 8004a8a <_dtoa_r+0x8fa>
 8004a64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a68:	0d1b      	lsrs	r3, r3, #20
 8004a6a:	051b      	lsls	r3, r3, #20
 8004a6c:	b183      	cbz	r3, 8004a90 <_dtoa_r+0x900>
 8004a6e:	9b04      	ldr	r3, [sp, #16]
 8004a70:	3301      	adds	r3, #1
 8004a72:	9304      	str	r3, [sp, #16]
 8004a74:	9b05      	ldr	r3, [sp, #20]
 8004a76:	3301      	adds	r3, #1
 8004a78:	9305      	str	r3, [sp, #20]
 8004a7a:	f04f 0801 	mov.w	r8, #1
 8004a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f47f af6a 	bne.w	800495a <_dtoa_r+0x7ca>
 8004a86:	2001      	movs	r0, #1
 8004a88:	e76f      	b.n	800496a <_dtoa_r+0x7da>
 8004a8a:	f04f 0800 	mov.w	r8, #0
 8004a8e:	e7f6      	b.n	8004a7e <_dtoa_r+0x8ee>
 8004a90:	4698      	mov	r8, r3
 8004a92:	e7f4      	b.n	8004a7e <_dtoa_r+0x8ee>
 8004a94:	f43f af7d 	beq.w	8004992 <_dtoa_r+0x802>
 8004a98:	4618      	mov	r0, r3
 8004a9a:	301c      	adds	r0, #28
 8004a9c:	e772      	b.n	8004984 <_dtoa_r+0x7f4>
 8004a9e:	9b03      	ldr	r3, [sp, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	dc37      	bgt.n	8004b14 <_dtoa_r+0x984>
 8004aa4:	9b06      	ldr	r3, [sp, #24]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	dd34      	ble.n	8004b14 <_dtoa_r+0x984>
 8004aaa:	9b03      	ldr	r3, [sp, #12]
 8004aac:	9302      	str	r3, [sp, #8]
 8004aae:	9b02      	ldr	r3, [sp, #8]
 8004ab0:	b96b      	cbnz	r3, 8004ace <_dtoa_r+0x93e>
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	2205      	movs	r2, #5
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f000 fb1e 	bl	80050f8 <__multadd>
 8004abc:	4601      	mov	r1, r0
 8004abe:	4606      	mov	r6, r0
 8004ac0:	ee18 0a10 	vmov	r0, s16
 8004ac4:	f000 fd38 	bl	8005538 <__mcmp>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	f73f adbb 	bgt.w	8004644 <_dtoa_r+0x4b4>
 8004ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad0:	9d01      	ldr	r5, [sp, #4]
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	f04f 0800 	mov.w	r8, #0
 8004ada:	4631      	mov	r1, r6
 8004adc:	4620      	mov	r0, r4
 8004ade:	f000 fae9 	bl	80050b4 <_Bfree>
 8004ae2:	2f00      	cmp	r7, #0
 8004ae4:	f43f aea4 	beq.w	8004830 <_dtoa_r+0x6a0>
 8004ae8:	f1b8 0f00 	cmp.w	r8, #0
 8004aec:	d005      	beq.n	8004afa <_dtoa_r+0x96a>
 8004aee:	45b8      	cmp	r8, r7
 8004af0:	d003      	beq.n	8004afa <_dtoa_r+0x96a>
 8004af2:	4641      	mov	r1, r8
 8004af4:	4620      	mov	r0, r4
 8004af6:	f000 fadd 	bl	80050b4 <_Bfree>
 8004afa:	4639      	mov	r1, r7
 8004afc:	4620      	mov	r0, r4
 8004afe:	f000 fad9 	bl	80050b4 <_Bfree>
 8004b02:	e695      	b.n	8004830 <_dtoa_r+0x6a0>
 8004b04:	2600      	movs	r6, #0
 8004b06:	4637      	mov	r7, r6
 8004b08:	e7e1      	b.n	8004ace <_dtoa_r+0x93e>
 8004b0a:	9700      	str	r7, [sp, #0]
 8004b0c:	4637      	mov	r7, r6
 8004b0e:	e599      	b.n	8004644 <_dtoa_r+0x4b4>
 8004b10:	40240000 	.word	0x40240000
 8004b14:	9b08      	ldr	r3, [sp, #32]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 80ca 	beq.w	8004cb0 <_dtoa_r+0xb20>
 8004b1c:	9b03      	ldr	r3, [sp, #12]
 8004b1e:	9302      	str	r3, [sp, #8]
 8004b20:	2d00      	cmp	r5, #0
 8004b22:	dd05      	ble.n	8004b30 <_dtoa_r+0x9a0>
 8004b24:	4639      	mov	r1, r7
 8004b26:	462a      	mov	r2, r5
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f000 fc95 	bl	8005458 <__lshift>
 8004b2e:	4607      	mov	r7, r0
 8004b30:	f1b8 0f00 	cmp.w	r8, #0
 8004b34:	d05b      	beq.n	8004bee <_dtoa_r+0xa5e>
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f000 fa7b 	bl	8005034 <_Balloc>
 8004b3e:	4605      	mov	r5, r0
 8004b40:	b928      	cbnz	r0, 8004b4e <_dtoa_r+0x9be>
 8004b42:	4b87      	ldr	r3, [pc, #540]	; (8004d60 <_dtoa_r+0xbd0>)
 8004b44:	4602      	mov	r2, r0
 8004b46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004b4a:	f7ff bb3b 	b.w	80041c4 <_dtoa_r+0x34>
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	3202      	adds	r2, #2
 8004b52:	0092      	lsls	r2, r2, #2
 8004b54:	f107 010c 	add.w	r1, r7, #12
 8004b58:	300c      	adds	r0, #12
 8004b5a:	f7fe fc02 	bl	8003362 <memcpy>
 8004b5e:	2201      	movs	r2, #1
 8004b60:	4629      	mov	r1, r5
 8004b62:	4620      	mov	r0, r4
 8004b64:	f000 fc78 	bl	8005458 <__lshift>
 8004b68:	9b01      	ldr	r3, [sp, #4]
 8004b6a:	f103 0901 	add.w	r9, r3, #1
 8004b6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004b72:	4413      	add	r3, r2
 8004b74:	9305      	str	r3, [sp, #20]
 8004b76:	f00a 0301 	and.w	r3, sl, #1
 8004b7a:	46b8      	mov	r8, r7
 8004b7c:	9304      	str	r3, [sp, #16]
 8004b7e:	4607      	mov	r7, r0
 8004b80:	4631      	mov	r1, r6
 8004b82:	ee18 0a10 	vmov	r0, s16
 8004b86:	f7ff fa75 	bl	8004074 <quorem>
 8004b8a:	4641      	mov	r1, r8
 8004b8c:	9002      	str	r0, [sp, #8]
 8004b8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004b92:	ee18 0a10 	vmov	r0, s16
 8004b96:	f000 fccf 	bl	8005538 <__mcmp>
 8004b9a:	463a      	mov	r2, r7
 8004b9c:	9003      	str	r0, [sp, #12]
 8004b9e:	4631      	mov	r1, r6
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 fce5 	bl	8005570 <__mdiff>
 8004ba6:	68c2      	ldr	r2, [r0, #12]
 8004ba8:	f109 3bff 	add.w	fp, r9, #4294967295
 8004bac:	4605      	mov	r5, r0
 8004bae:	bb02      	cbnz	r2, 8004bf2 <_dtoa_r+0xa62>
 8004bb0:	4601      	mov	r1, r0
 8004bb2:	ee18 0a10 	vmov	r0, s16
 8004bb6:	f000 fcbf 	bl	8005538 <__mcmp>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	9207      	str	r2, [sp, #28]
 8004bc2:	f000 fa77 	bl	80050b4 <_Bfree>
 8004bc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004bca:	ea43 0102 	orr.w	r1, r3, r2
 8004bce:	9b04      	ldr	r3, [sp, #16]
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	464d      	mov	r5, r9
 8004bd4:	d10f      	bne.n	8004bf6 <_dtoa_r+0xa66>
 8004bd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004bda:	d02a      	beq.n	8004c32 <_dtoa_r+0xaa2>
 8004bdc:	9b03      	ldr	r3, [sp, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	dd02      	ble.n	8004be8 <_dtoa_r+0xa58>
 8004be2:	9b02      	ldr	r3, [sp, #8]
 8004be4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004be8:	f88b a000 	strb.w	sl, [fp]
 8004bec:	e775      	b.n	8004ada <_dtoa_r+0x94a>
 8004bee:	4638      	mov	r0, r7
 8004bf0:	e7ba      	b.n	8004b68 <_dtoa_r+0x9d8>
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	e7e2      	b.n	8004bbc <_dtoa_r+0xa2c>
 8004bf6:	9b03      	ldr	r3, [sp, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	db04      	blt.n	8004c06 <_dtoa_r+0xa76>
 8004bfc:	9906      	ldr	r1, [sp, #24]
 8004bfe:	430b      	orrs	r3, r1
 8004c00:	9904      	ldr	r1, [sp, #16]
 8004c02:	430b      	orrs	r3, r1
 8004c04:	d122      	bne.n	8004c4c <_dtoa_r+0xabc>
 8004c06:	2a00      	cmp	r2, #0
 8004c08:	ddee      	ble.n	8004be8 <_dtoa_r+0xa58>
 8004c0a:	ee18 1a10 	vmov	r1, s16
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4620      	mov	r0, r4
 8004c12:	f000 fc21 	bl	8005458 <__lshift>
 8004c16:	4631      	mov	r1, r6
 8004c18:	ee08 0a10 	vmov	s16, r0
 8004c1c:	f000 fc8c 	bl	8005538 <__mcmp>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	dc03      	bgt.n	8004c2c <_dtoa_r+0xa9c>
 8004c24:	d1e0      	bne.n	8004be8 <_dtoa_r+0xa58>
 8004c26:	f01a 0f01 	tst.w	sl, #1
 8004c2a:	d0dd      	beq.n	8004be8 <_dtoa_r+0xa58>
 8004c2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c30:	d1d7      	bne.n	8004be2 <_dtoa_r+0xa52>
 8004c32:	2339      	movs	r3, #57	; 0x39
 8004c34:	f88b 3000 	strb.w	r3, [fp]
 8004c38:	462b      	mov	r3, r5
 8004c3a:	461d      	mov	r5, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004c42:	2a39      	cmp	r2, #57	; 0x39
 8004c44:	d071      	beq.n	8004d2a <_dtoa_r+0xb9a>
 8004c46:	3201      	adds	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e746      	b.n	8004ada <_dtoa_r+0x94a>
 8004c4c:	2a00      	cmp	r2, #0
 8004c4e:	dd07      	ble.n	8004c60 <_dtoa_r+0xad0>
 8004c50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c54:	d0ed      	beq.n	8004c32 <_dtoa_r+0xaa2>
 8004c56:	f10a 0301 	add.w	r3, sl, #1
 8004c5a:	f88b 3000 	strb.w	r3, [fp]
 8004c5e:	e73c      	b.n	8004ada <_dtoa_r+0x94a>
 8004c60:	9b05      	ldr	r3, [sp, #20]
 8004c62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004c66:	4599      	cmp	r9, r3
 8004c68:	d047      	beq.n	8004cfa <_dtoa_r+0xb6a>
 8004c6a:	ee18 1a10 	vmov	r1, s16
 8004c6e:	2300      	movs	r3, #0
 8004c70:	220a      	movs	r2, #10
 8004c72:	4620      	mov	r0, r4
 8004c74:	f000 fa40 	bl	80050f8 <__multadd>
 8004c78:	45b8      	cmp	r8, r7
 8004c7a:	ee08 0a10 	vmov	s16, r0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	f04f 020a 	mov.w	r2, #10
 8004c86:	4641      	mov	r1, r8
 8004c88:	4620      	mov	r0, r4
 8004c8a:	d106      	bne.n	8004c9a <_dtoa_r+0xb0a>
 8004c8c:	f000 fa34 	bl	80050f8 <__multadd>
 8004c90:	4680      	mov	r8, r0
 8004c92:	4607      	mov	r7, r0
 8004c94:	f109 0901 	add.w	r9, r9, #1
 8004c98:	e772      	b.n	8004b80 <_dtoa_r+0x9f0>
 8004c9a:	f000 fa2d 	bl	80050f8 <__multadd>
 8004c9e:	4639      	mov	r1, r7
 8004ca0:	4680      	mov	r8, r0
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	220a      	movs	r2, #10
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f000 fa26 	bl	80050f8 <__multadd>
 8004cac:	4607      	mov	r7, r0
 8004cae:	e7f1      	b.n	8004c94 <_dtoa_r+0xb04>
 8004cb0:	9b03      	ldr	r3, [sp, #12]
 8004cb2:	9302      	str	r3, [sp, #8]
 8004cb4:	9d01      	ldr	r5, [sp, #4]
 8004cb6:	ee18 0a10 	vmov	r0, s16
 8004cba:	4631      	mov	r1, r6
 8004cbc:	f7ff f9da 	bl	8004074 <quorem>
 8004cc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004cc4:	9b01      	ldr	r3, [sp, #4]
 8004cc6:	f805 ab01 	strb.w	sl, [r5], #1
 8004cca:	1aea      	subs	r2, r5, r3
 8004ccc:	9b02      	ldr	r3, [sp, #8]
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	dd09      	ble.n	8004ce6 <_dtoa_r+0xb56>
 8004cd2:	ee18 1a10 	vmov	r1, s16
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	220a      	movs	r2, #10
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f000 fa0c 	bl	80050f8 <__multadd>
 8004ce0:	ee08 0a10 	vmov	s16, r0
 8004ce4:	e7e7      	b.n	8004cb6 <_dtoa_r+0xb26>
 8004ce6:	9b02      	ldr	r3, [sp, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bfc8      	it	gt
 8004cec:	461d      	movgt	r5, r3
 8004cee:	9b01      	ldr	r3, [sp, #4]
 8004cf0:	bfd8      	it	le
 8004cf2:	2501      	movle	r5, #1
 8004cf4:	441d      	add	r5, r3
 8004cf6:	f04f 0800 	mov.w	r8, #0
 8004cfa:	ee18 1a10 	vmov	r1, s16
 8004cfe:	2201      	movs	r2, #1
 8004d00:	4620      	mov	r0, r4
 8004d02:	f000 fba9 	bl	8005458 <__lshift>
 8004d06:	4631      	mov	r1, r6
 8004d08:	ee08 0a10 	vmov	s16, r0
 8004d0c:	f000 fc14 	bl	8005538 <__mcmp>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	dc91      	bgt.n	8004c38 <_dtoa_r+0xaa8>
 8004d14:	d102      	bne.n	8004d1c <_dtoa_r+0xb8c>
 8004d16:	f01a 0f01 	tst.w	sl, #1
 8004d1a:	d18d      	bne.n	8004c38 <_dtoa_r+0xaa8>
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	461d      	mov	r5, r3
 8004d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d24:	2a30      	cmp	r2, #48	; 0x30
 8004d26:	d0fa      	beq.n	8004d1e <_dtoa_r+0xb8e>
 8004d28:	e6d7      	b.n	8004ada <_dtoa_r+0x94a>
 8004d2a:	9a01      	ldr	r2, [sp, #4]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d184      	bne.n	8004c3a <_dtoa_r+0xaaa>
 8004d30:	9b00      	ldr	r3, [sp, #0]
 8004d32:	3301      	adds	r3, #1
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	2331      	movs	r3, #49	; 0x31
 8004d38:	7013      	strb	r3, [r2, #0]
 8004d3a:	e6ce      	b.n	8004ada <_dtoa_r+0x94a>
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <_dtoa_r+0xbd4>)
 8004d3e:	f7ff ba95 	b.w	800426c <_dtoa_r+0xdc>
 8004d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f47f aa6e 	bne.w	8004226 <_dtoa_r+0x96>
 8004d4a:	4b07      	ldr	r3, [pc, #28]	; (8004d68 <_dtoa_r+0xbd8>)
 8004d4c:	f7ff ba8e 	b.w	800426c <_dtoa_r+0xdc>
 8004d50:	9b02      	ldr	r3, [sp, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	dcae      	bgt.n	8004cb4 <_dtoa_r+0xb24>
 8004d56:	9b06      	ldr	r3, [sp, #24]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	f73f aea8 	bgt.w	8004aae <_dtoa_r+0x91e>
 8004d5e:	e7a9      	b.n	8004cb4 <_dtoa_r+0xb24>
 8004d60:	080061d7 	.word	0x080061d7
 8004d64:	080060f8 	.word	0x080060f8
 8004d68:	08006158 	.word	0x08006158

08004d6c <__sflush_r>:
 8004d6c:	898a      	ldrh	r2, [r1, #12]
 8004d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d72:	4605      	mov	r5, r0
 8004d74:	0710      	lsls	r0, r2, #28
 8004d76:	460c      	mov	r4, r1
 8004d78:	d458      	bmi.n	8004e2c <__sflush_r+0xc0>
 8004d7a:	684b      	ldr	r3, [r1, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	dc05      	bgt.n	8004d8c <__sflush_r+0x20>
 8004d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	dc02      	bgt.n	8004d8c <__sflush_r+0x20>
 8004d86:	2000      	movs	r0, #0
 8004d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	d0f9      	beq.n	8004d86 <__sflush_r+0x1a>
 8004d92:	2300      	movs	r3, #0
 8004d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d98:	682f      	ldr	r7, [r5, #0]
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	d032      	beq.n	8004e04 <__sflush_r+0x98>
 8004d9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	075a      	lsls	r2, r3, #29
 8004da4:	d505      	bpl.n	8004db2 <__sflush_r+0x46>
 8004da6:	6863      	ldr	r3, [r4, #4]
 8004da8:	1ac0      	subs	r0, r0, r3
 8004daa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dac:	b10b      	cbz	r3, 8004db2 <__sflush_r+0x46>
 8004dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004db0:	1ac0      	subs	r0, r0, r3
 8004db2:	2300      	movs	r3, #0
 8004db4:	4602      	mov	r2, r0
 8004db6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004db8:	6a21      	ldr	r1, [r4, #32]
 8004dba:	4628      	mov	r0, r5
 8004dbc:	47b0      	blx	r6
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	d106      	bne.n	8004dd2 <__sflush_r+0x66>
 8004dc4:	6829      	ldr	r1, [r5, #0]
 8004dc6:	291d      	cmp	r1, #29
 8004dc8:	d82c      	bhi.n	8004e24 <__sflush_r+0xb8>
 8004dca:	4a2a      	ldr	r2, [pc, #168]	; (8004e74 <__sflush_r+0x108>)
 8004dcc:	40ca      	lsrs	r2, r1
 8004dce:	07d6      	lsls	r6, r2, #31
 8004dd0:	d528      	bpl.n	8004e24 <__sflush_r+0xb8>
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	6062      	str	r2, [r4, #4]
 8004dd6:	04d9      	lsls	r1, r3, #19
 8004dd8:	6922      	ldr	r2, [r4, #16]
 8004dda:	6022      	str	r2, [r4, #0]
 8004ddc:	d504      	bpl.n	8004de8 <__sflush_r+0x7c>
 8004dde:	1c42      	adds	r2, r0, #1
 8004de0:	d101      	bne.n	8004de6 <__sflush_r+0x7a>
 8004de2:	682b      	ldr	r3, [r5, #0]
 8004de4:	b903      	cbnz	r3, 8004de8 <__sflush_r+0x7c>
 8004de6:	6560      	str	r0, [r4, #84]	; 0x54
 8004de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dea:	602f      	str	r7, [r5, #0]
 8004dec:	2900      	cmp	r1, #0
 8004dee:	d0ca      	beq.n	8004d86 <__sflush_r+0x1a>
 8004df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004df4:	4299      	cmp	r1, r3
 8004df6:	d002      	beq.n	8004dfe <__sflush_r+0x92>
 8004df8:	4628      	mov	r0, r5
 8004dfa:	f000 fcb5 	bl	8005768 <_free_r>
 8004dfe:	2000      	movs	r0, #0
 8004e00:	6360      	str	r0, [r4, #52]	; 0x34
 8004e02:	e7c1      	b.n	8004d88 <__sflush_r+0x1c>
 8004e04:	6a21      	ldr	r1, [r4, #32]
 8004e06:	2301      	movs	r3, #1
 8004e08:	4628      	mov	r0, r5
 8004e0a:	47b0      	blx	r6
 8004e0c:	1c41      	adds	r1, r0, #1
 8004e0e:	d1c7      	bne.n	8004da0 <__sflush_r+0x34>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0c4      	beq.n	8004da0 <__sflush_r+0x34>
 8004e16:	2b1d      	cmp	r3, #29
 8004e18:	d001      	beq.n	8004e1e <__sflush_r+0xb2>
 8004e1a:	2b16      	cmp	r3, #22
 8004e1c:	d101      	bne.n	8004e22 <__sflush_r+0xb6>
 8004e1e:	602f      	str	r7, [r5, #0]
 8004e20:	e7b1      	b.n	8004d86 <__sflush_r+0x1a>
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	e7ad      	b.n	8004d88 <__sflush_r+0x1c>
 8004e2c:	690f      	ldr	r7, [r1, #16]
 8004e2e:	2f00      	cmp	r7, #0
 8004e30:	d0a9      	beq.n	8004d86 <__sflush_r+0x1a>
 8004e32:	0793      	lsls	r3, r2, #30
 8004e34:	680e      	ldr	r6, [r1, #0]
 8004e36:	bf08      	it	eq
 8004e38:	694b      	ldreq	r3, [r1, #20]
 8004e3a:	600f      	str	r7, [r1, #0]
 8004e3c:	bf18      	it	ne
 8004e3e:	2300      	movne	r3, #0
 8004e40:	eba6 0807 	sub.w	r8, r6, r7
 8004e44:	608b      	str	r3, [r1, #8]
 8004e46:	f1b8 0f00 	cmp.w	r8, #0
 8004e4a:	dd9c      	ble.n	8004d86 <__sflush_r+0x1a>
 8004e4c:	6a21      	ldr	r1, [r4, #32]
 8004e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e50:	4643      	mov	r3, r8
 8004e52:	463a      	mov	r2, r7
 8004e54:	4628      	mov	r0, r5
 8004e56:	47b0      	blx	r6
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	dc06      	bgt.n	8004e6a <__sflush_r+0xfe>
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	f04f 30ff 	mov.w	r0, #4294967295
 8004e68:	e78e      	b.n	8004d88 <__sflush_r+0x1c>
 8004e6a:	4407      	add	r7, r0
 8004e6c:	eba8 0800 	sub.w	r8, r8, r0
 8004e70:	e7e9      	b.n	8004e46 <__sflush_r+0xda>
 8004e72:	bf00      	nop
 8004e74:	20400001 	.word	0x20400001

08004e78 <_fflush_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	690b      	ldr	r3, [r1, #16]
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	460c      	mov	r4, r1
 8004e80:	b913      	cbnz	r3, 8004e88 <_fflush_r+0x10>
 8004e82:	2500      	movs	r5, #0
 8004e84:	4628      	mov	r0, r5
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	b118      	cbz	r0, 8004e92 <_fflush_r+0x1a>
 8004e8a:	6983      	ldr	r3, [r0, #24]
 8004e8c:	b90b      	cbnz	r3, 8004e92 <_fflush_r+0x1a>
 8004e8e:	f7fe f9a3 	bl	80031d8 <__sinit>
 8004e92:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <_fflush_r+0x6c>)
 8004e94:	429c      	cmp	r4, r3
 8004e96:	d11b      	bne.n	8004ed0 <_fflush_r+0x58>
 8004e98:	686c      	ldr	r4, [r5, #4]
 8004e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0ef      	beq.n	8004e82 <_fflush_r+0xa>
 8004ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ea4:	07d0      	lsls	r0, r2, #31
 8004ea6:	d404      	bmi.n	8004eb2 <_fflush_r+0x3a>
 8004ea8:	0599      	lsls	r1, r3, #22
 8004eaa:	d402      	bmi.n	8004eb2 <_fflush_r+0x3a>
 8004eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eae:	f7fe fa56 	bl	800335e <__retarget_lock_acquire_recursive>
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	f7ff ff59 	bl	8004d6c <__sflush_r>
 8004eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ebc:	07da      	lsls	r2, r3, #31
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	d4e0      	bmi.n	8004e84 <_fflush_r+0xc>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	059b      	lsls	r3, r3, #22
 8004ec6:	d4dd      	bmi.n	8004e84 <_fflush_r+0xc>
 8004ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eca:	f7fe fa49 	bl	8003360 <__retarget_lock_release_recursive>
 8004ece:	e7d9      	b.n	8004e84 <_fflush_r+0xc>
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <_fflush_r+0x70>)
 8004ed2:	429c      	cmp	r4, r3
 8004ed4:	d101      	bne.n	8004eda <_fflush_r+0x62>
 8004ed6:	68ac      	ldr	r4, [r5, #8]
 8004ed8:	e7df      	b.n	8004e9a <_fflush_r+0x22>
 8004eda:	4b04      	ldr	r3, [pc, #16]	; (8004eec <_fflush_r+0x74>)
 8004edc:	429c      	cmp	r4, r3
 8004ede:	bf08      	it	eq
 8004ee0:	68ec      	ldreq	r4, [r5, #12]
 8004ee2:	e7da      	b.n	8004e9a <_fflush_r+0x22>
 8004ee4:	080060a4 	.word	0x080060a4
 8004ee8:	080060c4 	.word	0x080060c4
 8004eec:	08006084 	.word	0x08006084

08004ef0 <fiprintf>:
 8004ef0:	b40e      	push	{r1, r2, r3}
 8004ef2:	b503      	push	{r0, r1, lr}
 8004ef4:	4601      	mov	r1, r0
 8004ef6:	ab03      	add	r3, sp, #12
 8004ef8:	4805      	ldr	r0, [pc, #20]	; (8004f10 <fiprintf+0x20>)
 8004efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8004efe:	6800      	ldr	r0, [r0, #0]
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	f000 fe03 	bl	8005b0c <_vfiprintf_r>
 8004f06:	b002      	add	sp, #8
 8004f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f0c:	b003      	add	sp, #12
 8004f0e:	4770      	bx	lr
 8004f10:	2000001c 	.word	0x2000001c

08004f14 <_localeconv_r>:
 8004f14:	4800      	ldr	r0, [pc, #0]	; (8004f18 <_localeconv_r+0x4>)
 8004f16:	4770      	bx	lr
 8004f18:	20000170 	.word	0x20000170

08004f1c <_lseek_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4d07      	ldr	r5, [pc, #28]	; (8004f3c <_lseek_r+0x20>)
 8004f20:	4604      	mov	r4, r0
 8004f22:	4608      	mov	r0, r1
 8004f24:	4611      	mov	r1, r2
 8004f26:	2200      	movs	r2, #0
 8004f28:	602a      	str	r2, [r5, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f7fd fee7 	bl	8002cfe <_lseek>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_lseek_r+0x1e>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_lseek_r+0x1e>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	2000039c 	.word	0x2000039c

08004f40 <__swhatbuf_r>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	460e      	mov	r6, r1
 8004f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f48:	2900      	cmp	r1, #0
 8004f4a:	b096      	sub	sp, #88	; 0x58
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	461d      	mov	r5, r3
 8004f50:	da08      	bge.n	8004f64 <__swhatbuf_r+0x24>
 8004f52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	602a      	str	r2, [r5, #0]
 8004f5a:	061a      	lsls	r2, r3, #24
 8004f5c:	d410      	bmi.n	8004f80 <__swhatbuf_r+0x40>
 8004f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f62:	e00e      	b.n	8004f82 <__swhatbuf_r+0x42>
 8004f64:	466a      	mov	r2, sp
 8004f66:	f000 ff1b 	bl	8005da0 <_fstat_r>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	dbf1      	blt.n	8004f52 <__swhatbuf_r+0x12>
 8004f6e:	9a01      	ldr	r2, [sp, #4]
 8004f70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f78:	425a      	negs	r2, r3
 8004f7a:	415a      	adcs	r2, r3
 8004f7c:	602a      	str	r2, [r5, #0]
 8004f7e:	e7ee      	b.n	8004f5e <__swhatbuf_r+0x1e>
 8004f80:	2340      	movs	r3, #64	; 0x40
 8004f82:	2000      	movs	r0, #0
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	b016      	add	sp, #88	; 0x58
 8004f88:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f8c <__smakebuf_r>:
 8004f8c:	898b      	ldrh	r3, [r1, #12]
 8004f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f90:	079d      	lsls	r5, r3, #30
 8004f92:	4606      	mov	r6, r0
 8004f94:	460c      	mov	r4, r1
 8004f96:	d507      	bpl.n	8004fa8 <__smakebuf_r+0x1c>
 8004f98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	6123      	str	r3, [r4, #16]
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	6163      	str	r3, [r4, #20]
 8004fa4:	b002      	add	sp, #8
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	ab01      	add	r3, sp, #4
 8004faa:	466a      	mov	r2, sp
 8004fac:	f7ff ffc8 	bl	8004f40 <__swhatbuf_r>
 8004fb0:	9900      	ldr	r1, [sp, #0]
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f7fe fa0b 	bl	80033d0 <_malloc_r>
 8004fba:	b948      	cbnz	r0, 8004fd0 <__smakebuf_r+0x44>
 8004fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc0:	059a      	lsls	r2, r3, #22
 8004fc2:	d4ef      	bmi.n	8004fa4 <__smakebuf_r+0x18>
 8004fc4:	f023 0303 	bic.w	r3, r3, #3
 8004fc8:	f043 0302 	orr.w	r3, r3, #2
 8004fcc:	81a3      	strh	r3, [r4, #12]
 8004fce:	e7e3      	b.n	8004f98 <__smakebuf_r+0xc>
 8004fd0:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <__smakebuf_r+0x7c>)
 8004fd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	6020      	str	r0, [r4, #0]
 8004fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fdc:	81a3      	strh	r3, [r4, #12]
 8004fde:	9b00      	ldr	r3, [sp, #0]
 8004fe0:	6163      	str	r3, [r4, #20]
 8004fe2:	9b01      	ldr	r3, [sp, #4]
 8004fe4:	6120      	str	r0, [r4, #16]
 8004fe6:	b15b      	cbz	r3, 8005000 <__smakebuf_r+0x74>
 8004fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fec:	4630      	mov	r0, r6
 8004fee:	f000 fee9 	bl	8005dc4 <_isatty_r>
 8004ff2:	b128      	cbz	r0, 8005000 <__smakebuf_r+0x74>
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	81a3      	strh	r3, [r4, #12]
 8005000:	89a0      	ldrh	r0, [r4, #12]
 8005002:	4305      	orrs	r5, r0
 8005004:	81a5      	strh	r5, [r4, #12]
 8005006:	e7cd      	b.n	8004fa4 <__smakebuf_r+0x18>
 8005008:	08003171 	.word	0x08003171

0800500c <malloc>:
 800500c:	4b02      	ldr	r3, [pc, #8]	; (8005018 <malloc+0xc>)
 800500e:	4601      	mov	r1, r0
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	f7fe b9dd 	b.w	80033d0 <_malloc_r>
 8005016:	bf00      	nop
 8005018:	2000001c 	.word	0x2000001c

0800501c <__malloc_lock>:
 800501c:	4801      	ldr	r0, [pc, #4]	; (8005024 <__malloc_lock+0x8>)
 800501e:	f7fe b99e 	b.w	800335e <__retarget_lock_acquire_recursive>
 8005022:	bf00      	nop
 8005024:	20000390 	.word	0x20000390

08005028 <__malloc_unlock>:
 8005028:	4801      	ldr	r0, [pc, #4]	; (8005030 <__malloc_unlock+0x8>)
 800502a:	f7fe b999 	b.w	8003360 <__retarget_lock_release_recursive>
 800502e:	bf00      	nop
 8005030:	20000390 	.word	0x20000390

08005034 <_Balloc>:
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005038:	4604      	mov	r4, r0
 800503a:	460d      	mov	r5, r1
 800503c:	b976      	cbnz	r6, 800505c <_Balloc+0x28>
 800503e:	2010      	movs	r0, #16
 8005040:	f7ff ffe4 	bl	800500c <malloc>
 8005044:	4602      	mov	r2, r0
 8005046:	6260      	str	r0, [r4, #36]	; 0x24
 8005048:	b920      	cbnz	r0, 8005054 <_Balloc+0x20>
 800504a:	4b18      	ldr	r3, [pc, #96]	; (80050ac <_Balloc+0x78>)
 800504c:	4818      	ldr	r0, [pc, #96]	; (80050b0 <_Balloc+0x7c>)
 800504e:	2166      	movs	r1, #102	; 0x66
 8005050:	f7fe ffe2 	bl	8004018 <__assert_func>
 8005054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005058:	6006      	str	r6, [r0, #0]
 800505a:	60c6      	str	r6, [r0, #12]
 800505c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800505e:	68f3      	ldr	r3, [r6, #12]
 8005060:	b183      	cbz	r3, 8005084 <_Balloc+0x50>
 8005062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800506a:	b9b8      	cbnz	r0, 800509c <_Balloc+0x68>
 800506c:	2101      	movs	r1, #1
 800506e:	fa01 f605 	lsl.w	r6, r1, r5
 8005072:	1d72      	adds	r2, r6, #5
 8005074:	0092      	lsls	r2, r2, #2
 8005076:	4620      	mov	r0, r4
 8005078:	f000 fb60 	bl	800573c <_calloc_r>
 800507c:	b160      	cbz	r0, 8005098 <_Balloc+0x64>
 800507e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005082:	e00e      	b.n	80050a2 <_Balloc+0x6e>
 8005084:	2221      	movs	r2, #33	; 0x21
 8005086:	2104      	movs	r1, #4
 8005088:	4620      	mov	r0, r4
 800508a:	f000 fb57 	bl	800573c <_calloc_r>
 800508e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005090:	60f0      	str	r0, [r6, #12]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e4      	bne.n	8005062 <_Balloc+0x2e>
 8005098:	2000      	movs	r0, #0
 800509a:	bd70      	pop	{r4, r5, r6, pc}
 800509c:	6802      	ldr	r2, [r0, #0]
 800509e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050a2:	2300      	movs	r3, #0
 80050a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050a8:	e7f7      	b.n	800509a <_Balloc+0x66>
 80050aa:	bf00      	nop
 80050ac:	08006165 	.word	0x08006165
 80050b0:	080061e8 	.word	0x080061e8

080050b4 <_Bfree>:
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050b8:	4605      	mov	r5, r0
 80050ba:	460c      	mov	r4, r1
 80050bc:	b976      	cbnz	r6, 80050dc <_Bfree+0x28>
 80050be:	2010      	movs	r0, #16
 80050c0:	f7ff ffa4 	bl	800500c <malloc>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6268      	str	r0, [r5, #36]	; 0x24
 80050c8:	b920      	cbnz	r0, 80050d4 <_Bfree+0x20>
 80050ca:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <_Bfree+0x3c>)
 80050cc:	4809      	ldr	r0, [pc, #36]	; (80050f4 <_Bfree+0x40>)
 80050ce:	218a      	movs	r1, #138	; 0x8a
 80050d0:	f7fe ffa2 	bl	8004018 <__assert_func>
 80050d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050d8:	6006      	str	r6, [r0, #0]
 80050da:	60c6      	str	r6, [r0, #12]
 80050dc:	b13c      	cbz	r4, 80050ee <_Bfree+0x3a>
 80050de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050e0:	6862      	ldr	r2, [r4, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050e8:	6021      	str	r1, [r4, #0]
 80050ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80050ee:	bd70      	pop	{r4, r5, r6, pc}
 80050f0:	08006165 	.word	0x08006165
 80050f4:	080061e8 	.word	0x080061e8

080050f8 <__multadd>:
 80050f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fc:	690d      	ldr	r5, [r1, #16]
 80050fe:	4607      	mov	r7, r0
 8005100:	460c      	mov	r4, r1
 8005102:	461e      	mov	r6, r3
 8005104:	f101 0c14 	add.w	ip, r1, #20
 8005108:	2000      	movs	r0, #0
 800510a:	f8dc 3000 	ldr.w	r3, [ip]
 800510e:	b299      	uxth	r1, r3
 8005110:	fb02 6101 	mla	r1, r2, r1, r6
 8005114:	0c1e      	lsrs	r6, r3, #16
 8005116:	0c0b      	lsrs	r3, r1, #16
 8005118:	fb02 3306 	mla	r3, r2, r6, r3
 800511c:	b289      	uxth	r1, r1
 800511e:	3001      	adds	r0, #1
 8005120:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005124:	4285      	cmp	r5, r0
 8005126:	f84c 1b04 	str.w	r1, [ip], #4
 800512a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800512e:	dcec      	bgt.n	800510a <__multadd+0x12>
 8005130:	b30e      	cbz	r6, 8005176 <__multadd+0x7e>
 8005132:	68a3      	ldr	r3, [r4, #8]
 8005134:	42ab      	cmp	r3, r5
 8005136:	dc19      	bgt.n	800516c <__multadd+0x74>
 8005138:	6861      	ldr	r1, [r4, #4]
 800513a:	4638      	mov	r0, r7
 800513c:	3101      	adds	r1, #1
 800513e:	f7ff ff79 	bl	8005034 <_Balloc>
 8005142:	4680      	mov	r8, r0
 8005144:	b928      	cbnz	r0, 8005152 <__multadd+0x5a>
 8005146:	4602      	mov	r2, r0
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <__multadd+0x84>)
 800514a:	480d      	ldr	r0, [pc, #52]	; (8005180 <__multadd+0x88>)
 800514c:	21b5      	movs	r1, #181	; 0xb5
 800514e:	f7fe ff63 	bl	8004018 <__assert_func>
 8005152:	6922      	ldr	r2, [r4, #16]
 8005154:	3202      	adds	r2, #2
 8005156:	f104 010c 	add.w	r1, r4, #12
 800515a:	0092      	lsls	r2, r2, #2
 800515c:	300c      	adds	r0, #12
 800515e:	f7fe f900 	bl	8003362 <memcpy>
 8005162:	4621      	mov	r1, r4
 8005164:	4638      	mov	r0, r7
 8005166:	f7ff ffa5 	bl	80050b4 <_Bfree>
 800516a:	4644      	mov	r4, r8
 800516c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005170:	3501      	adds	r5, #1
 8005172:	615e      	str	r6, [r3, #20]
 8005174:	6125      	str	r5, [r4, #16]
 8005176:	4620      	mov	r0, r4
 8005178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800517c:	080061d7 	.word	0x080061d7
 8005180:	080061e8 	.word	0x080061e8

08005184 <__hi0bits>:
 8005184:	0c03      	lsrs	r3, r0, #16
 8005186:	041b      	lsls	r3, r3, #16
 8005188:	b9d3      	cbnz	r3, 80051c0 <__hi0bits+0x3c>
 800518a:	0400      	lsls	r0, r0, #16
 800518c:	2310      	movs	r3, #16
 800518e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005192:	bf04      	itt	eq
 8005194:	0200      	lsleq	r0, r0, #8
 8005196:	3308      	addeq	r3, #8
 8005198:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800519c:	bf04      	itt	eq
 800519e:	0100      	lsleq	r0, r0, #4
 80051a0:	3304      	addeq	r3, #4
 80051a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80051a6:	bf04      	itt	eq
 80051a8:	0080      	lsleq	r0, r0, #2
 80051aa:	3302      	addeq	r3, #2
 80051ac:	2800      	cmp	r0, #0
 80051ae:	db05      	blt.n	80051bc <__hi0bits+0x38>
 80051b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80051b4:	f103 0301 	add.w	r3, r3, #1
 80051b8:	bf08      	it	eq
 80051ba:	2320      	moveq	r3, #32
 80051bc:	4618      	mov	r0, r3
 80051be:	4770      	bx	lr
 80051c0:	2300      	movs	r3, #0
 80051c2:	e7e4      	b.n	800518e <__hi0bits+0xa>

080051c4 <__lo0bits>:
 80051c4:	6803      	ldr	r3, [r0, #0]
 80051c6:	f013 0207 	ands.w	r2, r3, #7
 80051ca:	4601      	mov	r1, r0
 80051cc:	d00b      	beq.n	80051e6 <__lo0bits+0x22>
 80051ce:	07da      	lsls	r2, r3, #31
 80051d0:	d423      	bmi.n	800521a <__lo0bits+0x56>
 80051d2:	0798      	lsls	r0, r3, #30
 80051d4:	bf49      	itett	mi
 80051d6:	085b      	lsrmi	r3, r3, #1
 80051d8:	089b      	lsrpl	r3, r3, #2
 80051da:	2001      	movmi	r0, #1
 80051dc:	600b      	strmi	r3, [r1, #0]
 80051de:	bf5c      	itt	pl
 80051e0:	600b      	strpl	r3, [r1, #0]
 80051e2:	2002      	movpl	r0, #2
 80051e4:	4770      	bx	lr
 80051e6:	b298      	uxth	r0, r3
 80051e8:	b9a8      	cbnz	r0, 8005216 <__lo0bits+0x52>
 80051ea:	0c1b      	lsrs	r3, r3, #16
 80051ec:	2010      	movs	r0, #16
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	b90a      	cbnz	r2, 80051f6 <__lo0bits+0x32>
 80051f2:	3008      	adds	r0, #8
 80051f4:	0a1b      	lsrs	r3, r3, #8
 80051f6:	071a      	lsls	r2, r3, #28
 80051f8:	bf04      	itt	eq
 80051fa:	091b      	lsreq	r3, r3, #4
 80051fc:	3004      	addeq	r0, #4
 80051fe:	079a      	lsls	r2, r3, #30
 8005200:	bf04      	itt	eq
 8005202:	089b      	lsreq	r3, r3, #2
 8005204:	3002      	addeq	r0, #2
 8005206:	07da      	lsls	r2, r3, #31
 8005208:	d403      	bmi.n	8005212 <__lo0bits+0x4e>
 800520a:	085b      	lsrs	r3, r3, #1
 800520c:	f100 0001 	add.w	r0, r0, #1
 8005210:	d005      	beq.n	800521e <__lo0bits+0x5a>
 8005212:	600b      	str	r3, [r1, #0]
 8005214:	4770      	bx	lr
 8005216:	4610      	mov	r0, r2
 8005218:	e7e9      	b.n	80051ee <__lo0bits+0x2a>
 800521a:	2000      	movs	r0, #0
 800521c:	4770      	bx	lr
 800521e:	2020      	movs	r0, #32
 8005220:	4770      	bx	lr
	...

08005224 <__i2b>:
 8005224:	b510      	push	{r4, lr}
 8005226:	460c      	mov	r4, r1
 8005228:	2101      	movs	r1, #1
 800522a:	f7ff ff03 	bl	8005034 <_Balloc>
 800522e:	4602      	mov	r2, r0
 8005230:	b928      	cbnz	r0, 800523e <__i2b+0x1a>
 8005232:	4b05      	ldr	r3, [pc, #20]	; (8005248 <__i2b+0x24>)
 8005234:	4805      	ldr	r0, [pc, #20]	; (800524c <__i2b+0x28>)
 8005236:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800523a:	f7fe feed 	bl	8004018 <__assert_func>
 800523e:	2301      	movs	r3, #1
 8005240:	6144      	str	r4, [r0, #20]
 8005242:	6103      	str	r3, [r0, #16]
 8005244:	bd10      	pop	{r4, pc}
 8005246:	bf00      	nop
 8005248:	080061d7 	.word	0x080061d7
 800524c:	080061e8 	.word	0x080061e8

08005250 <__multiply>:
 8005250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005254:	4691      	mov	r9, r2
 8005256:	690a      	ldr	r2, [r1, #16]
 8005258:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800525c:	429a      	cmp	r2, r3
 800525e:	bfb8      	it	lt
 8005260:	460b      	movlt	r3, r1
 8005262:	460c      	mov	r4, r1
 8005264:	bfbc      	itt	lt
 8005266:	464c      	movlt	r4, r9
 8005268:	4699      	movlt	r9, r3
 800526a:	6927      	ldr	r7, [r4, #16]
 800526c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005270:	68a3      	ldr	r3, [r4, #8]
 8005272:	6861      	ldr	r1, [r4, #4]
 8005274:	eb07 060a 	add.w	r6, r7, sl
 8005278:	42b3      	cmp	r3, r6
 800527a:	b085      	sub	sp, #20
 800527c:	bfb8      	it	lt
 800527e:	3101      	addlt	r1, #1
 8005280:	f7ff fed8 	bl	8005034 <_Balloc>
 8005284:	b930      	cbnz	r0, 8005294 <__multiply+0x44>
 8005286:	4602      	mov	r2, r0
 8005288:	4b44      	ldr	r3, [pc, #272]	; (800539c <__multiply+0x14c>)
 800528a:	4845      	ldr	r0, [pc, #276]	; (80053a0 <__multiply+0x150>)
 800528c:	f240 115d 	movw	r1, #349	; 0x15d
 8005290:	f7fe fec2 	bl	8004018 <__assert_func>
 8005294:	f100 0514 	add.w	r5, r0, #20
 8005298:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800529c:	462b      	mov	r3, r5
 800529e:	2200      	movs	r2, #0
 80052a0:	4543      	cmp	r3, r8
 80052a2:	d321      	bcc.n	80052e8 <__multiply+0x98>
 80052a4:	f104 0314 	add.w	r3, r4, #20
 80052a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80052ac:	f109 0314 	add.w	r3, r9, #20
 80052b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80052b4:	9202      	str	r2, [sp, #8]
 80052b6:	1b3a      	subs	r2, r7, r4
 80052b8:	3a15      	subs	r2, #21
 80052ba:	f022 0203 	bic.w	r2, r2, #3
 80052be:	3204      	adds	r2, #4
 80052c0:	f104 0115 	add.w	r1, r4, #21
 80052c4:	428f      	cmp	r7, r1
 80052c6:	bf38      	it	cc
 80052c8:	2204      	movcc	r2, #4
 80052ca:	9201      	str	r2, [sp, #4]
 80052cc:	9a02      	ldr	r2, [sp, #8]
 80052ce:	9303      	str	r3, [sp, #12]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d80c      	bhi.n	80052ee <__multiply+0x9e>
 80052d4:	2e00      	cmp	r6, #0
 80052d6:	dd03      	ble.n	80052e0 <__multiply+0x90>
 80052d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d05a      	beq.n	8005396 <__multiply+0x146>
 80052e0:	6106      	str	r6, [r0, #16]
 80052e2:	b005      	add	sp, #20
 80052e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e8:	f843 2b04 	str.w	r2, [r3], #4
 80052ec:	e7d8      	b.n	80052a0 <__multiply+0x50>
 80052ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80052f2:	f1ba 0f00 	cmp.w	sl, #0
 80052f6:	d024      	beq.n	8005342 <__multiply+0xf2>
 80052f8:	f104 0e14 	add.w	lr, r4, #20
 80052fc:	46a9      	mov	r9, r5
 80052fe:	f04f 0c00 	mov.w	ip, #0
 8005302:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005306:	f8d9 1000 	ldr.w	r1, [r9]
 800530a:	fa1f fb82 	uxth.w	fp, r2
 800530e:	b289      	uxth	r1, r1
 8005310:	fb0a 110b 	mla	r1, sl, fp, r1
 8005314:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005318:	f8d9 2000 	ldr.w	r2, [r9]
 800531c:	4461      	add	r1, ip
 800531e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005322:	fb0a c20b 	mla	r2, sl, fp, ip
 8005326:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800532a:	b289      	uxth	r1, r1
 800532c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005330:	4577      	cmp	r7, lr
 8005332:	f849 1b04 	str.w	r1, [r9], #4
 8005336:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800533a:	d8e2      	bhi.n	8005302 <__multiply+0xb2>
 800533c:	9a01      	ldr	r2, [sp, #4]
 800533e:	f845 c002 	str.w	ip, [r5, r2]
 8005342:	9a03      	ldr	r2, [sp, #12]
 8005344:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005348:	3304      	adds	r3, #4
 800534a:	f1b9 0f00 	cmp.w	r9, #0
 800534e:	d020      	beq.n	8005392 <__multiply+0x142>
 8005350:	6829      	ldr	r1, [r5, #0]
 8005352:	f104 0c14 	add.w	ip, r4, #20
 8005356:	46ae      	mov	lr, r5
 8005358:	f04f 0a00 	mov.w	sl, #0
 800535c:	f8bc b000 	ldrh.w	fp, [ip]
 8005360:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005364:	fb09 220b 	mla	r2, r9, fp, r2
 8005368:	4492      	add	sl, r2
 800536a:	b289      	uxth	r1, r1
 800536c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005370:	f84e 1b04 	str.w	r1, [lr], #4
 8005374:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005378:	f8be 1000 	ldrh.w	r1, [lr]
 800537c:	0c12      	lsrs	r2, r2, #16
 800537e:	fb09 1102 	mla	r1, r9, r2, r1
 8005382:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005386:	4567      	cmp	r7, ip
 8005388:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800538c:	d8e6      	bhi.n	800535c <__multiply+0x10c>
 800538e:	9a01      	ldr	r2, [sp, #4]
 8005390:	50a9      	str	r1, [r5, r2]
 8005392:	3504      	adds	r5, #4
 8005394:	e79a      	b.n	80052cc <__multiply+0x7c>
 8005396:	3e01      	subs	r6, #1
 8005398:	e79c      	b.n	80052d4 <__multiply+0x84>
 800539a:	bf00      	nop
 800539c:	080061d7 	.word	0x080061d7
 80053a0:	080061e8 	.word	0x080061e8

080053a4 <__pow5mult>:
 80053a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a8:	4615      	mov	r5, r2
 80053aa:	f012 0203 	ands.w	r2, r2, #3
 80053ae:	4606      	mov	r6, r0
 80053b0:	460f      	mov	r7, r1
 80053b2:	d007      	beq.n	80053c4 <__pow5mult+0x20>
 80053b4:	4c25      	ldr	r4, [pc, #148]	; (800544c <__pow5mult+0xa8>)
 80053b6:	3a01      	subs	r2, #1
 80053b8:	2300      	movs	r3, #0
 80053ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053be:	f7ff fe9b 	bl	80050f8 <__multadd>
 80053c2:	4607      	mov	r7, r0
 80053c4:	10ad      	asrs	r5, r5, #2
 80053c6:	d03d      	beq.n	8005444 <__pow5mult+0xa0>
 80053c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80053ca:	b97c      	cbnz	r4, 80053ec <__pow5mult+0x48>
 80053cc:	2010      	movs	r0, #16
 80053ce:	f7ff fe1d 	bl	800500c <malloc>
 80053d2:	4602      	mov	r2, r0
 80053d4:	6270      	str	r0, [r6, #36]	; 0x24
 80053d6:	b928      	cbnz	r0, 80053e4 <__pow5mult+0x40>
 80053d8:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <__pow5mult+0xac>)
 80053da:	481e      	ldr	r0, [pc, #120]	; (8005454 <__pow5mult+0xb0>)
 80053dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80053e0:	f7fe fe1a 	bl	8004018 <__assert_func>
 80053e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053e8:	6004      	str	r4, [r0, #0]
 80053ea:	60c4      	str	r4, [r0, #12]
 80053ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80053f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053f4:	b94c      	cbnz	r4, 800540a <__pow5mult+0x66>
 80053f6:	f240 2171 	movw	r1, #625	; 0x271
 80053fa:	4630      	mov	r0, r6
 80053fc:	f7ff ff12 	bl	8005224 <__i2b>
 8005400:	2300      	movs	r3, #0
 8005402:	f8c8 0008 	str.w	r0, [r8, #8]
 8005406:	4604      	mov	r4, r0
 8005408:	6003      	str	r3, [r0, #0]
 800540a:	f04f 0900 	mov.w	r9, #0
 800540e:	07eb      	lsls	r3, r5, #31
 8005410:	d50a      	bpl.n	8005428 <__pow5mult+0x84>
 8005412:	4639      	mov	r1, r7
 8005414:	4622      	mov	r2, r4
 8005416:	4630      	mov	r0, r6
 8005418:	f7ff ff1a 	bl	8005250 <__multiply>
 800541c:	4639      	mov	r1, r7
 800541e:	4680      	mov	r8, r0
 8005420:	4630      	mov	r0, r6
 8005422:	f7ff fe47 	bl	80050b4 <_Bfree>
 8005426:	4647      	mov	r7, r8
 8005428:	106d      	asrs	r5, r5, #1
 800542a:	d00b      	beq.n	8005444 <__pow5mult+0xa0>
 800542c:	6820      	ldr	r0, [r4, #0]
 800542e:	b938      	cbnz	r0, 8005440 <__pow5mult+0x9c>
 8005430:	4622      	mov	r2, r4
 8005432:	4621      	mov	r1, r4
 8005434:	4630      	mov	r0, r6
 8005436:	f7ff ff0b 	bl	8005250 <__multiply>
 800543a:	6020      	str	r0, [r4, #0]
 800543c:	f8c0 9000 	str.w	r9, [r0]
 8005440:	4604      	mov	r4, r0
 8005442:	e7e4      	b.n	800540e <__pow5mult+0x6a>
 8005444:	4638      	mov	r0, r7
 8005446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800544a:	bf00      	nop
 800544c:	08006338 	.word	0x08006338
 8005450:	08006165 	.word	0x08006165
 8005454:	080061e8 	.word	0x080061e8

08005458 <__lshift>:
 8005458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800545c:	460c      	mov	r4, r1
 800545e:	6849      	ldr	r1, [r1, #4]
 8005460:	6923      	ldr	r3, [r4, #16]
 8005462:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005466:	68a3      	ldr	r3, [r4, #8]
 8005468:	4607      	mov	r7, r0
 800546a:	4691      	mov	r9, r2
 800546c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005470:	f108 0601 	add.w	r6, r8, #1
 8005474:	42b3      	cmp	r3, r6
 8005476:	db0b      	blt.n	8005490 <__lshift+0x38>
 8005478:	4638      	mov	r0, r7
 800547a:	f7ff fddb 	bl	8005034 <_Balloc>
 800547e:	4605      	mov	r5, r0
 8005480:	b948      	cbnz	r0, 8005496 <__lshift+0x3e>
 8005482:	4602      	mov	r2, r0
 8005484:	4b2a      	ldr	r3, [pc, #168]	; (8005530 <__lshift+0xd8>)
 8005486:	482b      	ldr	r0, [pc, #172]	; (8005534 <__lshift+0xdc>)
 8005488:	f240 11d9 	movw	r1, #473	; 0x1d9
 800548c:	f7fe fdc4 	bl	8004018 <__assert_func>
 8005490:	3101      	adds	r1, #1
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	e7ee      	b.n	8005474 <__lshift+0x1c>
 8005496:	2300      	movs	r3, #0
 8005498:	f100 0114 	add.w	r1, r0, #20
 800549c:	f100 0210 	add.w	r2, r0, #16
 80054a0:	4618      	mov	r0, r3
 80054a2:	4553      	cmp	r3, sl
 80054a4:	db37      	blt.n	8005516 <__lshift+0xbe>
 80054a6:	6920      	ldr	r0, [r4, #16]
 80054a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054ac:	f104 0314 	add.w	r3, r4, #20
 80054b0:	f019 091f 	ands.w	r9, r9, #31
 80054b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80054bc:	d02f      	beq.n	800551e <__lshift+0xc6>
 80054be:	f1c9 0e20 	rsb	lr, r9, #32
 80054c2:	468a      	mov	sl, r1
 80054c4:	f04f 0c00 	mov.w	ip, #0
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	fa02 f209 	lsl.w	r2, r2, r9
 80054ce:	ea42 020c 	orr.w	r2, r2, ip
 80054d2:	f84a 2b04 	str.w	r2, [sl], #4
 80054d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80054da:	4298      	cmp	r0, r3
 80054dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80054e0:	d8f2      	bhi.n	80054c8 <__lshift+0x70>
 80054e2:	1b03      	subs	r3, r0, r4
 80054e4:	3b15      	subs	r3, #21
 80054e6:	f023 0303 	bic.w	r3, r3, #3
 80054ea:	3304      	adds	r3, #4
 80054ec:	f104 0215 	add.w	r2, r4, #21
 80054f0:	4290      	cmp	r0, r2
 80054f2:	bf38      	it	cc
 80054f4:	2304      	movcc	r3, #4
 80054f6:	f841 c003 	str.w	ip, [r1, r3]
 80054fa:	f1bc 0f00 	cmp.w	ip, #0
 80054fe:	d001      	beq.n	8005504 <__lshift+0xac>
 8005500:	f108 0602 	add.w	r6, r8, #2
 8005504:	3e01      	subs	r6, #1
 8005506:	4638      	mov	r0, r7
 8005508:	612e      	str	r6, [r5, #16]
 800550a:	4621      	mov	r1, r4
 800550c:	f7ff fdd2 	bl	80050b4 <_Bfree>
 8005510:	4628      	mov	r0, r5
 8005512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005516:	f842 0f04 	str.w	r0, [r2, #4]!
 800551a:	3301      	adds	r3, #1
 800551c:	e7c1      	b.n	80054a2 <__lshift+0x4a>
 800551e:	3904      	subs	r1, #4
 8005520:	f853 2b04 	ldr.w	r2, [r3], #4
 8005524:	f841 2f04 	str.w	r2, [r1, #4]!
 8005528:	4298      	cmp	r0, r3
 800552a:	d8f9      	bhi.n	8005520 <__lshift+0xc8>
 800552c:	e7ea      	b.n	8005504 <__lshift+0xac>
 800552e:	bf00      	nop
 8005530:	080061d7 	.word	0x080061d7
 8005534:	080061e8 	.word	0x080061e8

08005538 <__mcmp>:
 8005538:	b530      	push	{r4, r5, lr}
 800553a:	6902      	ldr	r2, [r0, #16]
 800553c:	690c      	ldr	r4, [r1, #16]
 800553e:	1b12      	subs	r2, r2, r4
 8005540:	d10e      	bne.n	8005560 <__mcmp+0x28>
 8005542:	f100 0314 	add.w	r3, r0, #20
 8005546:	3114      	adds	r1, #20
 8005548:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800554c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005550:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005554:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005558:	42a5      	cmp	r5, r4
 800555a:	d003      	beq.n	8005564 <__mcmp+0x2c>
 800555c:	d305      	bcc.n	800556a <__mcmp+0x32>
 800555e:	2201      	movs	r2, #1
 8005560:	4610      	mov	r0, r2
 8005562:	bd30      	pop	{r4, r5, pc}
 8005564:	4283      	cmp	r3, r0
 8005566:	d3f3      	bcc.n	8005550 <__mcmp+0x18>
 8005568:	e7fa      	b.n	8005560 <__mcmp+0x28>
 800556a:	f04f 32ff 	mov.w	r2, #4294967295
 800556e:	e7f7      	b.n	8005560 <__mcmp+0x28>

08005570 <__mdiff>:
 8005570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005574:	460c      	mov	r4, r1
 8005576:	4606      	mov	r6, r0
 8005578:	4611      	mov	r1, r2
 800557a:	4620      	mov	r0, r4
 800557c:	4690      	mov	r8, r2
 800557e:	f7ff ffdb 	bl	8005538 <__mcmp>
 8005582:	1e05      	subs	r5, r0, #0
 8005584:	d110      	bne.n	80055a8 <__mdiff+0x38>
 8005586:	4629      	mov	r1, r5
 8005588:	4630      	mov	r0, r6
 800558a:	f7ff fd53 	bl	8005034 <_Balloc>
 800558e:	b930      	cbnz	r0, 800559e <__mdiff+0x2e>
 8005590:	4b3a      	ldr	r3, [pc, #232]	; (800567c <__mdiff+0x10c>)
 8005592:	4602      	mov	r2, r0
 8005594:	f240 2132 	movw	r1, #562	; 0x232
 8005598:	4839      	ldr	r0, [pc, #228]	; (8005680 <__mdiff+0x110>)
 800559a:	f7fe fd3d 	bl	8004018 <__assert_func>
 800559e:	2301      	movs	r3, #1
 80055a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80055a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a8:	bfa4      	itt	ge
 80055aa:	4643      	movge	r3, r8
 80055ac:	46a0      	movge	r8, r4
 80055ae:	4630      	mov	r0, r6
 80055b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80055b4:	bfa6      	itte	ge
 80055b6:	461c      	movge	r4, r3
 80055b8:	2500      	movge	r5, #0
 80055ba:	2501      	movlt	r5, #1
 80055bc:	f7ff fd3a 	bl	8005034 <_Balloc>
 80055c0:	b920      	cbnz	r0, 80055cc <__mdiff+0x5c>
 80055c2:	4b2e      	ldr	r3, [pc, #184]	; (800567c <__mdiff+0x10c>)
 80055c4:	4602      	mov	r2, r0
 80055c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80055ca:	e7e5      	b.n	8005598 <__mdiff+0x28>
 80055cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80055d0:	6926      	ldr	r6, [r4, #16]
 80055d2:	60c5      	str	r5, [r0, #12]
 80055d4:	f104 0914 	add.w	r9, r4, #20
 80055d8:	f108 0514 	add.w	r5, r8, #20
 80055dc:	f100 0e14 	add.w	lr, r0, #20
 80055e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80055e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80055e8:	f108 0210 	add.w	r2, r8, #16
 80055ec:	46f2      	mov	sl, lr
 80055ee:	2100      	movs	r1, #0
 80055f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80055f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80055f8:	fa1f f883 	uxth.w	r8, r3
 80055fc:	fa11 f18b 	uxtah	r1, r1, fp
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	eba1 0808 	sub.w	r8, r1, r8
 8005606:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800560a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800560e:	fa1f f888 	uxth.w	r8, r8
 8005612:	1419      	asrs	r1, r3, #16
 8005614:	454e      	cmp	r6, r9
 8005616:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800561a:	f84a 3b04 	str.w	r3, [sl], #4
 800561e:	d8e7      	bhi.n	80055f0 <__mdiff+0x80>
 8005620:	1b33      	subs	r3, r6, r4
 8005622:	3b15      	subs	r3, #21
 8005624:	f023 0303 	bic.w	r3, r3, #3
 8005628:	3304      	adds	r3, #4
 800562a:	3415      	adds	r4, #21
 800562c:	42a6      	cmp	r6, r4
 800562e:	bf38      	it	cc
 8005630:	2304      	movcc	r3, #4
 8005632:	441d      	add	r5, r3
 8005634:	4473      	add	r3, lr
 8005636:	469e      	mov	lr, r3
 8005638:	462e      	mov	r6, r5
 800563a:	4566      	cmp	r6, ip
 800563c:	d30e      	bcc.n	800565c <__mdiff+0xec>
 800563e:	f10c 0203 	add.w	r2, ip, #3
 8005642:	1b52      	subs	r2, r2, r5
 8005644:	f022 0203 	bic.w	r2, r2, #3
 8005648:	3d03      	subs	r5, #3
 800564a:	45ac      	cmp	ip, r5
 800564c:	bf38      	it	cc
 800564e:	2200      	movcc	r2, #0
 8005650:	441a      	add	r2, r3
 8005652:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005656:	b17b      	cbz	r3, 8005678 <__mdiff+0x108>
 8005658:	6107      	str	r7, [r0, #16]
 800565a:	e7a3      	b.n	80055a4 <__mdiff+0x34>
 800565c:	f856 8b04 	ldr.w	r8, [r6], #4
 8005660:	fa11 f288 	uxtah	r2, r1, r8
 8005664:	1414      	asrs	r4, r2, #16
 8005666:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800566a:	b292      	uxth	r2, r2
 800566c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005670:	f84e 2b04 	str.w	r2, [lr], #4
 8005674:	1421      	asrs	r1, r4, #16
 8005676:	e7e0      	b.n	800563a <__mdiff+0xca>
 8005678:	3f01      	subs	r7, #1
 800567a:	e7ea      	b.n	8005652 <__mdiff+0xe2>
 800567c:	080061d7 	.word	0x080061d7
 8005680:	080061e8 	.word	0x080061e8

08005684 <__d2b>:
 8005684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005688:	4689      	mov	r9, r1
 800568a:	2101      	movs	r1, #1
 800568c:	ec57 6b10 	vmov	r6, r7, d0
 8005690:	4690      	mov	r8, r2
 8005692:	f7ff fccf 	bl	8005034 <_Balloc>
 8005696:	4604      	mov	r4, r0
 8005698:	b930      	cbnz	r0, 80056a8 <__d2b+0x24>
 800569a:	4602      	mov	r2, r0
 800569c:	4b25      	ldr	r3, [pc, #148]	; (8005734 <__d2b+0xb0>)
 800569e:	4826      	ldr	r0, [pc, #152]	; (8005738 <__d2b+0xb4>)
 80056a0:	f240 310a 	movw	r1, #778	; 0x30a
 80056a4:	f7fe fcb8 	bl	8004018 <__assert_func>
 80056a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80056ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056b0:	bb35      	cbnz	r5, 8005700 <__d2b+0x7c>
 80056b2:	2e00      	cmp	r6, #0
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	d028      	beq.n	800570a <__d2b+0x86>
 80056b8:	4668      	mov	r0, sp
 80056ba:	9600      	str	r6, [sp, #0]
 80056bc:	f7ff fd82 	bl	80051c4 <__lo0bits>
 80056c0:	9900      	ldr	r1, [sp, #0]
 80056c2:	b300      	cbz	r0, 8005706 <__d2b+0x82>
 80056c4:	9a01      	ldr	r2, [sp, #4]
 80056c6:	f1c0 0320 	rsb	r3, r0, #32
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	430b      	orrs	r3, r1
 80056d0:	40c2      	lsrs	r2, r0
 80056d2:	6163      	str	r3, [r4, #20]
 80056d4:	9201      	str	r2, [sp, #4]
 80056d6:	9b01      	ldr	r3, [sp, #4]
 80056d8:	61a3      	str	r3, [r4, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bf14      	ite	ne
 80056de:	2202      	movne	r2, #2
 80056e0:	2201      	moveq	r2, #1
 80056e2:	6122      	str	r2, [r4, #16]
 80056e4:	b1d5      	cbz	r5, 800571c <__d2b+0x98>
 80056e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80056ea:	4405      	add	r5, r0
 80056ec:	f8c9 5000 	str.w	r5, [r9]
 80056f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80056f4:	f8c8 0000 	str.w	r0, [r8]
 80056f8:	4620      	mov	r0, r4
 80056fa:	b003      	add	sp, #12
 80056fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005700:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005704:	e7d5      	b.n	80056b2 <__d2b+0x2e>
 8005706:	6161      	str	r1, [r4, #20]
 8005708:	e7e5      	b.n	80056d6 <__d2b+0x52>
 800570a:	a801      	add	r0, sp, #4
 800570c:	f7ff fd5a 	bl	80051c4 <__lo0bits>
 8005710:	9b01      	ldr	r3, [sp, #4]
 8005712:	6163      	str	r3, [r4, #20]
 8005714:	2201      	movs	r2, #1
 8005716:	6122      	str	r2, [r4, #16]
 8005718:	3020      	adds	r0, #32
 800571a:	e7e3      	b.n	80056e4 <__d2b+0x60>
 800571c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005720:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005724:	f8c9 0000 	str.w	r0, [r9]
 8005728:	6918      	ldr	r0, [r3, #16]
 800572a:	f7ff fd2b 	bl	8005184 <__hi0bits>
 800572e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005732:	e7df      	b.n	80056f4 <__d2b+0x70>
 8005734:	080061d7 	.word	0x080061d7
 8005738:	080061e8 	.word	0x080061e8

0800573c <_calloc_r>:
 800573c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800573e:	fba1 2402 	umull	r2, r4, r1, r2
 8005742:	b94c      	cbnz	r4, 8005758 <_calloc_r+0x1c>
 8005744:	4611      	mov	r1, r2
 8005746:	9201      	str	r2, [sp, #4]
 8005748:	f7fd fe42 	bl	80033d0 <_malloc_r>
 800574c:	9a01      	ldr	r2, [sp, #4]
 800574e:	4605      	mov	r5, r0
 8005750:	b930      	cbnz	r0, 8005760 <_calloc_r+0x24>
 8005752:	4628      	mov	r0, r5
 8005754:	b003      	add	sp, #12
 8005756:	bd30      	pop	{r4, r5, pc}
 8005758:	220c      	movs	r2, #12
 800575a:	6002      	str	r2, [r0, #0]
 800575c:	2500      	movs	r5, #0
 800575e:	e7f8      	b.n	8005752 <_calloc_r+0x16>
 8005760:	4621      	mov	r1, r4
 8005762:	f7fd fe0c 	bl	800337e <memset>
 8005766:	e7f4      	b.n	8005752 <_calloc_r+0x16>

08005768 <_free_r>:
 8005768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800576a:	2900      	cmp	r1, #0
 800576c:	d044      	beq.n	80057f8 <_free_r+0x90>
 800576e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005772:	9001      	str	r0, [sp, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f1a1 0404 	sub.w	r4, r1, #4
 800577a:	bfb8      	it	lt
 800577c:	18e4      	addlt	r4, r4, r3
 800577e:	f7ff fc4d 	bl	800501c <__malloc_lock>
 8005782:	4a1e      	ldr	r2, [pc, #120]	; (80057fc <_free_r+0x94>)
 8005784:	9801      	ldr	r0, [sp, #4]
 8005786:	6813      	ldr	r3, [r2, #0]
 8005788:	b933      	cbnz	r3, 8005798 <_free_r+0x30>
 800578a:	6063      	str	r3, [r4, #4]
 800578c:	6014      	str	r4, [r2, #0]
 800578e:	b003      	add	sp, #12
 8005790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005794:	f7ff bc48 	b.w	8005028 <__malloc_unlock>
 8005798:	42a3      	cmp	r3, r4
 800579a:	d908      	bls.n	80057ae <_free_r+0x46>
 800579c:	6825      	ldr	r5, [r4, #0]
 800579e:	1961      	adds	r1, r4, r5
 80057a0:	428b      	cmp	r3, r1
 80057a2:	bf01      	itttt	eq
 80057a4:	6819      	ldreq	r1, [r3, #0]
 80057a6:	685b      	ldreq	r3, [r3, #4]
 80057a8:	1949      	addeq	r1, r1, r5
 80057aa:	6021      	streq	r1, [r4, #0]
 80057ac:	e7ed      	b.n	800578a <_free_r+0x22>
 80057ae:	461a      	mov	r2, r3
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	b10b      	cbz	r3, 80057b8 <_free_r+0x50>
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	d9fa      	bls.n	80057ae <_free_r+0x46>
 80057b8:	6811      	ldr	r1, [r2, #0]
 80057ba:	1855      	adds	r5, r2, r1
 80057bc:	42a5      	cmp	r5, r4
 80057be:	d10b      	bne.n	80057d8 <_free_r+0x70>
 80057c0:	6824      	ldr	r4, [r4, #0]
 80057c2:	4421      	add	r1, r4
 80057c4:	1854      	adds	r4, r2, r1
 80057c6:	42a3      	cmp	r3, r4
 80057c8:	6011      	str	r1, [r2, #0]
 80057ca:	d1e0      	bne.n	800578e <_free_r+0x26>
 80057cc:	681c      	ldr	r4, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	6053      	str	r3, [r2, #4]
 80057d2:	4421      	add	r1, r4
 80057d4:	6011      	str	r1, [r2, #0]
 80057d6:	e7da      	b.n	800578e <_free_r+0x26>
 80057d8:	d902      	bls.n	80057e0 <_free_r+0x78>
 80057da:	230c      	movs	r3, #12
 80057dc:	6003      	str	r3, [r0, #0]
 80057de:	e7d6      	b.n	800578e <_free_r+0x26>
 80057e0:	6825      	ldr	r5, [r4, #0]
 80057e2:	1961      	adds	r1, r4, r5
 80057e4:	428b      	cmp	r3, r1
 80057e6:	bf04      	itt	eq
 80057e8:	6819      	ldreq	r1, [r3, #0]
 80057ea:	685b      	ldreq	r3, [r3, #4]
 80057ec:	6063      	str	r3, [r4, #4]
 80057ee:	bf04      	itt	eq
 80057f0:	1949      	addeq	r1, r1, r5
 80057f2:	6021      	streq	r1, [r4, #0]
 80057f4:	6054      	str	r4, [r2, #4]
 80057f6:	e7ca      	b.n	800578e <_free_r+0x26>
 80057f8:	b003      	add	sp, #12
 80057fa:	bd30      	pop	{r4, r5, pc}
 80057fc:	20000394 	.word	0x20000394

08005800 <__ssputs_r>:
 8005800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	688e      	ldr	r6, [r1, #8]
 8005806:	429e      	cmp	r6, r3
 8005808:	4682      	mov	sl, r0
 800580a:	460c      	mov	r4, r1
 800580c:	4690      	mov	r8, r2
 800580e:	461f      	mov	r7, r3
 8005810:	d838      	bhi.n	8005884 <__ssputs_r+0x84>
 8005812:	898a      	ldrh	r2, [r1, #12]
 8005814:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005818:	d032      	beq.n	8005880 <__ssputs_r+0x80>
 800581a:	6825      	ldr	r5, [r4, #0]
 800581c:	6909      	ldr	r1, [r1, #16]
 800581e:	eba5 0901 	sub.w	r9, r5, r1
 8005822:	6965      	ldr	r5, [r4, #20]
 8005824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800582c:	3301      	adds	r3, #1
 800582e:	444b      	add	r3, r9
 8005830:	106d      	asrs	r5, r5, #1
 8005832:	429d      	cmp	r5, r3
 8005834:	bf38      	it	cc
 8005836:	461d      	movcc	r5, r3
 8005838:	0553      	lsls	r3, r2, #21
 800583a:	d531      	bpl.n	80058a0 <__ssputs_r+0xa0>
 800583c:	4629      	mov	r1, r5
 800583e:	f7fd fdc7 	bl	80033d0 <_malloc_r>
 8005842:	4606      	mov	r6, r0
 8005844:	b950      	cbnz	r0, 800585c <__ssputs_r+0x5c>
 8005846:	230c      	movs	r3, #12
 8005848:	f8ca 3000 	str.w	r3, [sl]
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	f04f 30ff 	mov.w	r0, #4294967295
 8005858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800585c:	6921      	ldr	r1, [r4, #16]
 800585e:	464a      	mov	r2, r9
 8005860:	f7fd fd7f 	bl	8003362 <memcpy>
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800586a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586e:	81a3      	strh	r3, [r4, #12]
 8005870:	6126      	str	r6, [r4, #16]
 8005872:	6165      	str	r5, [r4, #20]
 8005874:	444e      	add	r6, r9
 8005876:	eba5 0509 	sub.w	r5, r5, r9
 800587a:	6026      	str	r6, [r4, #0]
 800587c:	60a5      	str	r5, [r4, #8]
 800587e:	463e      	mov	r6, r7
 8005880:	42be      	cmp	r6, r7
 8005882:	d900      	bls.n	8005886 <__ssputs_r+0x86>
 8005884:	463e      	mov	r6, r7
 8005886:	6820      	ldr	r0, [r4, #0]
 8005888:	4632      	mov	r2, r6
 800588a:	4641      	mov	r1, r8
 800588c:	f000 fabc 	bl	8005e08 <memmove>
 8005890:	68a3      	ldr	r3, [r4, #8]
 8005892:	1b9b      	subs	r3, r3, r6
 8005894:	60a3      	str	r3, [r4, #8]
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	4433      	add	r3, r6
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	2000      	movs	r0, #0
 800589e:	e7db      	b.n	8005858 <__ssputs_r+0x58>
 80058a0:	462a      	mov	r2, r5
 80058a2:	f000 facb 	bl	8005e3c <_realloc_r>
 80058a6:	4606      	mov	r6, r0
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d1e1      	bne.n	8005870 <__ssputs_r+0x70>
 80058ac:	6921      	ldr	r1, [r4, #16]
 80058ae:	4650      	mov	r0, sl
 80058b0:	f7ff ff5a 	bl	8005768 <_free_r>
 80058b4:	e7c7      	b.n	8005846 <__ssputs_r+0x46>
	...

080058b8 <_svfiprintf_r>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	4698      	mov	r8, r3
 80058be:	898b      	ldrh	r3, [r1, #12]
 80058c0:	061b      	lsls	r3, r3, #24
 80058c2:	b09d      	sub	sp, #116	; 0x74
 80058c4:	4607      	mov	r7, r0
 80058c6:	460d      	mov	r5, r1
 80058c8:	4614      	mov	r4, r2
 80058ca:	d50e      	bpl.n	80058ea <_svfiprintf_r+0x32>
 80058cc:	690b      	ldr	r3, [r1, #16]
 80058ce:	b963      	cbnz	r3, 80058ea <_svfiprintf_r+0x32>
 80058d0:	2140      	movs	r1, #64	; 0x40
 80058d2:	f7fd fd7d 	bl	80033d0 <_malloc_r>
 80058d6:	6028      	str	r0, [r5, #0]
 80058d8:	6128      	str	r0, [r5, #16]
 80058da:	b920      	cbnz	r0, 80058e6 <_svfiprintf_r+0x2e>
 80058dc:	230c      	movs	r3, #12
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295
 80058e4:	e0d1      	b.n	8005a8a <_svfiprintf_r+0x1d2>
 80058e6:	2340      	movs	r3, #64	; 0x40
 80058e8:	616b      	str	r3, [r5, #20]
 80058ea:	2300      	movs	r3, #0
 80058ec:	9309      	str	r3, [sp, #36]	; 0x24
 80058ee:	2320      	movs	r3, #32
 80058f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80058f8:	2330      	movs	r3, #48	; 0x30
 80058fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005aa4 <_svfiprintf_r+0x1ec>
 80058fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005902:	f04f 0901 	mov.w	r9, #1
 8005906:	4623      	mov	r3, r4
 8005908:	469a      	mov	sl, r3
 800590a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800590e:	b10a      	cbz	r2, 8005914 <_svfiprintf_r+0x5c>
 8005910:	2a25      	cmp	r2, #37	; 0x25
 8005912:	d1f9      	bne.n	8005908 <_svfiprintf_r+0x50>
 8005914:	ebba 0b04 	subs.w	fp, sl, r4
 8005918:	d00b      	beq.n	8005932 <_svfiprintf_r+0x7a>
 800591a:	465b      	mov	r3, fp
 800591c:	4622      	mov	r2, r4
 800591e:	4629      	mov	r1, r5
 8005920:	4638      	mov	r0, r7
 8005922:	f7ff ff6d 	bl	8005800 <__ssputs_r>
 8005926:	3001      	adds	r0, #1
 8005928:	f000 80aa 	beq.w	8005a80 <_svfiprintf_r+0x1c8>
 800592c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800592e:	445a      	add	r2, fp
 8005930:	9209      	str	r2, [sp, #36]	; 0x24
 8005932:	f89a 3000 	ldrb.w	r3, [sl]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 80a2 	beq.w	8005a80 <_svfiprintf_r+0x1c8>
 800593c:	2300      	movs	r3, #0
 800593e:	f04f 32ff 	mov.w	r2, #4294967295
 8005942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005946:	f10a 0a01 	add.w	sl, sl, #1
 800594a:	9304      	str	r3, [sp, #16]
 800594c:	9307      	str	r3, [sp, #28]
 800594e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005952:	931a      	str	r3, [sp, #104]	; 0x68
 8005954:	4654      	mov	r4, sl
 8005956:	2205      	movs	r2, #5
 8005958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800595c:	4851      	ldr	r0, [pc, #324]	; (8005aa4 <_svfiprintf_r+0x1ec>)
 800595e:	f7fa fc3f 	bl	80001e0 <memchr>
 8005962:	9a04      	ldr	r2, [sp, #16]
 8005964:	b9d8      	cbnz	r0, 800599e <_svfiprintf_r+0xe6>
 8005966:	06d0      	lsls	r0, r2, #27
 8005968:	bf44      	itt	mi
 800596a:	2320      	movmi	r3, #32
 800596c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005970:	0711      	lsls	r1, r2, #28
 8005972:	bf44      	itt	mi
 8005974:	232b      	movmi	r3, #43	; 0x2b
 8005976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800597a:	f89a 3000 	ldrb.w	r3, [sl]
 800597e:	2b2a      	cmp	r3, #42	; 0x2a
 8005980:	d015      	beq.n	80059ae <_svfiprintf_r+0xf6>
 8005982:	9a07      	ldr	r2, [sp, #28]
 8005984:	4654      	mov	r4, sl
 8005986:	2000      	movs	r0, #0
 8005988:	f04f 0c0a 	mov.w	ip, #10
 800598c:	4621      	mov	r1, r4
 800598e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005992:	3b30      	subs	r3, #48	; 0x30
 8005994:	2b09      	cmp	r3, #9
 8005996:	d94e      	bls.n	8005a36 <_svfiprintf_r+0x17e>
 8005998:	b1b0      	cbz	r0, 80059c8 <_svfiprintf_r+0x110>
 800599a:	9207      	str	r2, [sp, #28]
 800599c:	e014      	b.n	80059c8 <_svfiprintf_r+0x110>
 800599e:	eba0 0308 	sub.w	r3, r0, r8
 80059a2:	fa09 f303 	lsl.w	r3, r9, r3
 80059a6:	4313      	orrs	r3, r2
 80059a8:	9304      	str	r3, [sp, #16]
 80059aa:	46a2      	mov	sl, r4
 80059ac:	e7d2      	b.n	8005954 <_svfiprintf_r+0x9c>
 80059ae:	9b03      	ldr	r3, [sp, #12]
 80059b0:	1d19      	adds	r1, r3, #4
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	9103      	str	r1, [sp, #12]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	bfbb      	ittet	lt
 80059ba:	425b      	neglt	r3, r3
 80059bc:	f042 0202 	orrlt.w	r2, r2, #2
 80059c0:	9307      	strge	r3, [sp, #28]
 80059c2:	9307      	strlt	r3, [sp, #28]
 80059c4:	bfb8      	it	lt
 80059c6:	9204      	strlt	r2, [sp, #16]
 80059c8:	7823      	ldrb	r3, [r4, #0]
 80059ca:	2b2e      	cmp	r3, #46	; 0x2e
 80059cc:	d10c      	bne.n	80059e8 <_svfiprintf_r+0x130>
 80059ce:	7863      	ldrb	r3, [r4, #1]
 80059d0:	2b2a      	cmp	r3, #42	; 0x2a
 80059d2:	d135      	bne.n	8005a40 <_svfiprintf_r+0x188>
 80059d4:	9b03      	ldr	r3, [sp, #12]
 80059d6:	1d1a      	adds	r2, r3, #4
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	9203      	str	r2, [sp, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	bfb8      	it	lt
 80059e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80059e4:	3402      	adds	r4, #2
 80059e6:	9305      	str	r3, [sp, #20]
 80059e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ab4 <_svfiprintf_r+0x1fc>
 80059ec:	7821      	ldrb	r1, [r4, #0]
 80059ee:	2203      	movs	r2, #3
 80059f0:	4650      	mov	r0, sl
 80059f2:	f7fa fbf5 	bl	80001e0 <memchr>
 80059f6:	b140      	cbz	r0, 8005a0a <_svfiprintf_r+0x152>
 80059f8:	2340      	movs	r3, #64	; 0x40
 80059fa:	eba0 000a 	sub.w	r0, r0, sl
 80059fe:	fa03 f000 	lsl.w	r0, r3, r0
 8005a02:	9b04      	ldr	r3, [sp, #16]
 8005a04:	4303      	orrs	r3, r0
 8005a06:	3401      	adds	r4, #1
 8005a08:	9304      	str	r3, [sp, #16]
 8005a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a0e:	4826      	ldr	r0, [pc, #152]	; (8005aa8 <_svfiprintf_r+0x1f0>)
 8005a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a14:	2206      	movs	r2, #6
 8005a16:	f7fa fbe3 	bl	80001e0 <memchr>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d038      	beq.n	8005a90 <_svfiprintf_r+0x1d8>
 8005a1e:	4b23      	ldr	r3, [pc, #140]	; (8005aac <_svfiprintf_r+0x1f4>)
 8005a20:	bb1b      	cbnz	r3, 8005a6a <_svfiprintf_r+0x1b2>
 8005a22:	9b03      	ldr	r3, [sp, #12]
 8005a24:	3307      	adds	r3, #7
 8005a26:	f023 0307 	bic.w	r3, r3, #7
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	9303      	str	r3, [sp, #12]
 8005a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a30:	4433      	add	r3, r6
 8005a32:	9309      	str	r3, [sp, #36]	; 0x24
 8005a34:	e767      	b.n	8005906 <_svfiprintf_r+0x4e>
 8005a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	2001      	movs	r0, #1
 8005a3e:	e7a5      	b.n	800598c <_svfiprintf_r+0xd4>
 8005a40:	2300      	movs	r3, #0
 8005a42:	3401      	adds	r4, #1
 8005a44:	9305      	str	r3, [sp, #20]
 8005a46:	4619      	mov	r1, r3
 8005a48:	f04f 0c0a 	mov.w	ip, #10
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a52:	3a30      	subs	r2, #48	; 0x30
 8005a54:	2a09      	cmp	r2, #9
 8005a56:	d903      	bls.n	8005a60 <_svfiprintf_r+0x1a8>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0c5      	beq.n	80059e8 <_svfiprintf_r+0x130>
 8005a5c:	9105      	str	r1, [sp, #20]
 8005a5e:	e7c3      	b.n	80059e8 <_svfiprintf_r+0x130>
 8005a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a64:	4604      	mov	r4, r0
 8005a66:	2301      	movs	r3, #1
 8005a68:	e7f0      	b.n	8005a4c <_svfiprintf_r+0x194>
 8005a6a:	ab03      	add	r3, sp, #12
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	462a      	mov	r2, r5
 8005a70:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <_svfiprintf_r+0x1f8>)
 8005a72:	a904      	add	r1, sp, #16
 8005a74:	4638      	mov	r0, r7
 8005a76:	f7fd fdbf 	bl	80035f8 <_printf_float>
 8005a7a:	1c42      	adds	r2, r0, #1
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	d1d6      	bne.n	8005a2e <_svfiprintf_r+0x176>
 8005a80:	89ab      	ldrh	r3, [r5, #12]
 8005a82:	065b      	lsls	r3, r3, #25
 8005a84:	f53f af2c 	bmi.w	80058e0 <_svfiprintf_r+0x28>
 8005a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a8a:	b01d      	add	sp, #116	; 0x74
 8005a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a90:	ab03      	add	r3, sp, #12
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	462a      	mov	r2, r5
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <_svfiprintf_r+0x1f8>)
 8005a98:	a904      	add	r1, sp, #16
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	f7fe f850 	bl	8003b40 <_printf_i>
 8005aa0:	e7eb      	b.n	8005a7a <_svfiprintf_r+0x1c2>
 8005aa2:	bf00      	nop
 8005aa4:	08006344 	.word	0x08006344
 8005aa8:	0800634e 	.word	0x0800634e
 8005aac:	080035f9 	.word	0x080035f9
 8005ab0:	08005801 	.word	0x08005801
 8005ab4:	0800634a 	.word	0x0800634a

08005ab8 <__sfputc_r>:
 8005ab8:	6893      	ldr	r3, [r2, #8]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	b410      	push	{r4}
 8005ac0:	6093      	str	r3, [r2, #8]
 8005ac2:	da08      	bge.n	8005ad6 <__sfputc_r+0x1e>
 8005ac4:	6994      	ldr	r4, [r2, #24]
 8005ac6:	42a3      	cmp	r3, r4
 8005ac8:	db01      	blt.n	8005ace <__sfputc_r+0x16>
 8005aca:	290a      	cmp	r1, #10
 8005acc:	d103      	bne.n	8005ad6 <__sfputc_r+0x1e>
 8005ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ad2:	f7fe b9cf 	b.w	8003e74 <__swbuf_r>
 8005ad6:	6813      	ldr	r3, [r2, #0]
 8005ad8:	1c58      	adds	r0, r3, #1
 8005ada:	6010      	str	r0, [r2, #0]
 8005adc:	7019      	strb	r1, [r3, #0]
 8005ade:	4608      	mov	r0, r1
 8005ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <__sfputs_r>:
 8005ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae8:	4606      	mov	r6, r0
 8005aea:	460f      	mov	r7, r1
 8005aec:	4614      	mov	r4, r2
 8005aee:	18d5      	adds	r5, r2, r3
 8005af0:	42ac      	cmp	r4, r5
 8005af2:	d101      	bne.n	8005af8 <__sfputs_r+0x12>
 8005af4:	2000      	movs	r0, #0
 8005af6:	e007      	b.n	8005b08 <__sfputs_r+0x22>
 8005af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afc:	463a      	mov	r2, r7
 8005afe:	4630      	mov	r0, r6
 8005b00:	f7ff ffda 	bl	8005ab8 <__sfputc_r>
 8005b04:	1c43      	adds	r3, r0, #1
 8005b06:	d1f3      	bne.n	8005af0 <__sfputs_r+0xa>
 8005b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b0c <_vfiprintf_r>:
 8005b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	460d      	mov	r5, r1
 8005b12:	b09d      	sub	sp, #116	; 0x74
 8005b14:	4614      	mov	r4, r2
 8005b16:	4698      	mov	r8, r3
 8005b18:	4606      	mov	r6, r0
 8005b1a:	b118      	cbz	r0, 8005b24 <_vfiprintf_r+0x18>
 8005b1c:	6983      	ldr	r3, [r0, #24]
 8005b1e:	b90b      	cbnz	r3, 8005b24 <_vfiprintf_r+0x18>
 8005b20:	f7fd fb5a 	bl	80031d8 <__sinit>
 8005b24:	4b89      	ldr	r3, [pc, #548]	; (8005d4c <_vfiprintf_r+0x240>)
 8005b26:	429d      	cmp	r5, r3
 8005b28:	d11b      	bne.n	8005b62 <_vfiprintf_r+0x56>
 8005b2a:	6875      	ldr	r5, [r6, #4]
 8005b2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b2e:	07d9      	lsls	r1, r3, #31
 8005b30:	d405      	bmi.n	8005b3e <_vfiprintf_r+0x32>
 8005b32:	89ab      	ldrh	r3, [r5, #12]
 8005b34:	059a      	lsls	r2, r3, #22
 8005b36:	d402      	bmi.n	8005b3e <_vfiprintf_r+0x32>
 8005b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b3a:	f7fd fc10 	bl	800335e <__retarget_lock_acquire_recursive>
 8005b3e:	89ab      	ldrh	r3, [r5, #12]
 8005b40:	071b      	lsls	r3, r3, #28
 8005b42:	d501      	bpl.n	8005b48 <_vfiprintf_r+0x3c>
 8005b44:	692b      	ldr	r3, [r5, #16]
 8005b46:	b9eb      	cbnz	r3, 8005b84 <_vfiprintf_r+0x78>
 8005b48:	4629      	mov	r1, r5
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f7fe f9f6 	bl	8003f3c <__swsetup_r>
 8005b50:	b1c0      	cbz	r0, 8005b84 <_vfiprintf_r+0x78>
 8005b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b54:	07dc      	lsls	r4, r3, #31
 8005b56:	d50e      	bpl.n	8005b76 <_vfiprintf_r+0x6a>
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	b01d      	add	sp, #116	; 0x74
 8005b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b62:	4b7b      	ldr	r3, [pc, #492]	; (8005d50 <_vfiprintf_r+0x244>)
 8005b64:	429d      	cmp	r5, r3
 8005b66:	d101      	bne.n	8005b6c <_vfiprintf_r+0x60>
 8005b68:	68b5      	ldr	r5, [r6, #8]
 8005b6a:	e7df      	b.n	8005b2c <_vfiprintf_r+0x20>
 8005b6c:	4b79      	ldr	r3, [pc, #484]	; (8005d54 <_vfiprintf_r+0x248>)
 8005b6e:	429d      	cmp	r5, r3
 8005b70:	bf08      	it	eq
 8005b72:	68f5      	ldreq	r5, [r6, #12]
 8005b74:	e7da      	b.n	8005b2c <_vfiprintf_r+0x20>
 8005b76:	89ab      	ldrh	r3, [r5, #12]
 8005b78:	0598      	lsls	r0, r3, #22
 8005b7a:	d4ed      	bmi.n	8005b58 <_vfiprintf_r+0x4c>
 8005b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b7e:	f7fd fbef 	bl	8003360 <__retarget_lock_release_recursive>
 8005b82:	e7e9      	b.n	8005b58 <_vfiprintf_r+0x4c>
 8005b84:	2300      	movs	r3, #0
 8005b86:	9309      	str	r3, [sp, #36]	; 0x24
 8005b88:	2320      	movs	r3, #32
 8005b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b92:	2330      	movs	r3, #48	; 0x30
 8005b94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d58 <_vfiprintf_r+0x24c>
 8005b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b9c:	f04f 0901 	mov.w	r9, #1
 8005ba0:	4623      	mov	r3, r4
 8005ba2:	469a      	mov	sl, r3
 8005ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ba8:	b10a      	cbz	r2, 8005bae <_vfiprintf_r+0xa2>
 8005baa:	2a25      	cmp	r2, #37	; 0x25
 8005bac:	d1f9      	bne.n	8005ba2 <_vfiprintf_r+0x96>
 8005bae:	ebba 0b04 	subs.w	fp, sl, r4
 8005bb2:	d00b      	beq.n	8005bcc <_vfiprintf_r+0xc0>
 8005bb4:	465b      	mov	r3, fp
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	4629      	mov	r1, r5
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7ff ff93 	bl	8005ae6 <__sfputs_r>
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	f000 80aa 	beq.w	8005d1a <_vfiprintf_r+0x20e>
 8005bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc8:	445a      	add	r2, fp
 8005bca:	9209      	str	r2, [sp, #36]	; 0x24
 8005bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80a2 	beq.w	8005d1a <_vfiprintf_r+0x20e>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005be0:	f10a 0a01 	add.w	sl, sl, #1
 8005be4:	9304      	str	r3, [sp, #16]
 8005be6:	9307      	str	r3, [sp, #28]
 8005be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bec:	931a      	str	r3, [sp, #104]	; 0x68
 8005bee:	4654      	mov	r4, sl
 8005bf0:	2205      	movs	r2, #5
 8005bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf6:	4858      	ldr	r0, [pc, #352]	; (8005d58 <_vfiprintf_r+0x24c>)
 8005bf8:	f7fa faf2 	bl	80001e0 <memchr>
 8005bfc:	9a04      	ldr	r2, [sp, #16]
 8005bfe:	b9d8      	cbnz	r0, 8005c38 <_vfiprintf_r+0x12c>
 8005c00:	06d1      	lsls	r1, r2, #27
 8005c02:	bf44      	itt	mi
 8005c04:	2320      	movmi	r3, #32
 8005c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c0a:	0713      	lsls	r3, r2, #28
 8005c0c:	bf44      	itt	mi
 8005c0e:	232b      	movmi	r3, #43	; 0x2b
 8005c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c14:	f89a 3000 	ldrb.w	r3, [sl]
 8005c18:	2b2a      	cmp	r3, #42	; 0x2a
 8005c1a:	d015      	beq.n	8005c48 <_vfiprintf_r+0x13c>
 8005c1c:	9a07      	ldr	r2, [sp, #28]
 8005c1e:	4654      	mov	r4, sl
 8005c20:	2000      	movs	r0, #0
 8005c22:	f04f 0c0a 	mov.w	ip, #10
 8005c26:	4621      	mov	r1, r4
 8005c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c2c:	3b30      	subs	r3, #48	; 0x30
 8005c2e:	2b09      	cmp	r3, #9
 8005c30:	d94e      	bls.n	8005cd0 <_vfiprintf_r+0x1c4>
 8005c32:	b1b0      	cbz	r0, 8005c62 <_vfiprintf_r+0x156>
 8005c34:	9207      	str	r2, [sp, #28]
 8005c36:	e014      	b.n	8005c62 <_vfiprintf_r+0x156>
 8005c38:	eba0 0308 	sub.w	r3, r0, r8
 8005c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c40:	4313      	orrs	r3, r2
 8005c42:	9304      	str	r3, [sp, #16]
 8005c44:	46a2      	mov	sl, r4
 8005c46:	e7d2      	b.n	8005bee <_vfiprintf_r+0xe2>
 8005c48:	9b03      	ldr	r3, [sp, #12]
 8005c4a:	1d19      	adds	r1, r3, #4
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	9103      	str	r1, [sp, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bfbb      	ittet	lt
 8005c54:	425b      	neglt	r3, r3
 8005c56:	f042 0202 	orrlt.w	r2, r2, #2
 8005c5a:	9307      	strge	r3, [sp, #28]
 8005c5c:	9307      	strlt	r3, [sp, #28]
 8005c5e:	bfb8      	it	lt
 8005c60:	9204      	strlt	r2, [sp, #16]
 8005c62:	7823      	ldrb	r3, [r4, #0]
 8005c64:	2b2e      	cmp	r3, #46	; 0x2e
 8005c66:	d10c      	bne.n	8005c82 <_vfiprintf_r+0x176>
 8005c68:	7863      	ldrb	r3, [r4, #1]
 8005c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c6c:	d135      	bne.n	8005cda <_vfiprintf_r+0x1ce>
 8005c6e:	9b03      	ldr	r3, [sp, #12]
 8005c70:	1d1a      	adds	r2, r3, #4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	9203      	str	r2, [sp, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	bfb8      	it	lt
 8005c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c7e:	3402      	adds	r4, #2
 8005c80:	9305      	str	r3, [sp, #20]
 8005c82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d68 <_vfiprintf_r+0x25c>
 8005c86:	7821      	ldrb	r1, [r4, #0]
 8005c88:	2203      	movs	r2, #3
 8005c8a:	4650      	mov	r0, sl
 8005c8c:	f7fa faa8 	bl	80001e0 <memchr>
 8005c90:	b140      	cbz	r0, 8005ca4 <_vfiprintf_r+0x198>
 8005c92:	2340      	movs	r3, #64	; 0x40
 8005c94:	eba0 000a 	sub.w	r0, r0, sl
 8005c98:	fa03 f000 	lsl.w	r0, r3, r0
 8005c9c:	9b04      	ldr	r3, [sp, #16]
 8005c9e:	4303      	orrs	r3, r0
 8005ca0:	3401      	adds	r4, #1
 8005ca2:	9304      	str	r3, [sp, #16]
 8005ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca8:	482c      	ldr	r0, [pc, #176]	; (8005d5c <_vfiprintf_r+0x250>)
 8005caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cae:	2206      	movs	r2, #6
 8005cb0:	f7fa fa96 	bl	80001e0 <memchr>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d03f      	beq.n	8005d38 <_vfiprintf_r+0x22c>
 8005cb8:	4b29      	ldr	r3, [pc, #164]	; (8005d60 <_vfiprintf_r+0x254>)
 8005cba:	bb1b      	cbnz	r3, 8005d04 <_vfiprintf_r+0x1f8>
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	3307      	adds	r3, #7
 8005cc0:	f023 0307 	bic.w	r3, r3, #7
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	9303      	str	r3, [sp, #12]
 8005cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cca:	443b      	add	r3, r7
 8005ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cce:	e767      	b.n	8005ba0 <_vfiprintf_r+0x94>
 8005cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	e7a5      	b.n	8005c26 <_vfiprintf_r+0x11a>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	3401      	adds	r4, #1
 8005cde:	9305      	str	r3, [sp, #20]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f04f 0c0a 	mov.w	ip, #10
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cec:	3a30      	subs	r2, #48	; 0x30
 8005cee:	2a09      	cmp	r2, #9
 8005cf0:	d903      	bls.n	8005cfa <_vfiprintf_r+0x1ee>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0c5      	beq.n	8005c82 <_vfiprintf_r+0x176>
 8005cf6:	9105      	str	r1, [sp, #20]
 8005cf8:	e7c3      	b.n	8005c82 <_vfiprintf_r+0x176>
 8005cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cfe:	4604      	mov	r4, r0
 8005d00:	2301      	movs	r3, #1
 8005d02:	e7f0      	b.n	8005ce6 <_vfiprintf_r+0x1da>
 8005d04:	ab03      	add	r3, sp, #12
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	462a      	mov	r2, r5
 8005d0a:	4b16      	ldr	r3, [pc, #88]	; (8005d64 <_vfiprintf_r+0x258>)
 8005d0c:	a904      	add	r1, sp, #16
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f7fd fc72 	bl	80035f8 <_printf_float>
 8005d14:	4607      	mov	r7, r0
 8005d16:	1c78      	adds	r0, r7, #1
 8005d18:	d1d6      	bne.n	8005cc8 <_vfiprintf_r+0x1bc>
 8005d1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d1c:	07d9      	lsls	r1, r3, #31
 8005d1e:	d405      	bmi.n	8005d2c <_vfiprintf_r+0x220>
 8005d20:	89ab      	ldrh	r3, [r5, #12]
 8005d22:	059a      	lsls	r2, r3, #22
 8005d24:	d402      	bmi.n	8005d2c <_vfiprintf_r+0x220>
 8005d26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d28:	f7fd fb1a 	bl	8003360 <__retarget_lock_release_recursive>
 8005d2c:	89ab      	ldrh	r3, [r5, #12]
 8005d2e:	065b      	lsls	r3, r3, #25
 8005d30:	f53f af12 	bmi.w	8005b58 <_vfiprintf_r+0x4c>
 8005d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d36:	e711      	b.n	8005b5c <_vfiprintf_r+0x50>
 8005d38:	ab03      	add	r3, sp, #12
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	462a      	mov	r2, r5
 8005d3e:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <_vfiprintf_r+0x258>)
 8005d40:	a904      	add	r1, sp, #16
 8005d42:	4630      	mov	r0, r6
 8005d44:	f7fd fefc 	bl	8003b40 <_printf_i>
 8005d48:	e7e4      	b.n	8005d14 <_vfiprintf_r+0x208>
 8005d4a:	bf00      	nop
 8005d4c:	080060a4 	.word	0x080060a4
 8005d50:	080060c4 	.word	0x080060c4
 8005d54:	08006084 	.word	0x08006084
 8005d58:	08006344 	.word	0x08006344
 8005d5c:	0800634e 	.word	0x0800634e
 8005d60:	080035f9 	.word	0x080035f9
 8005d64:	08005ae7 	.word	0x08005ae7
 8005d68:	0800634a 	.word	0x0800634a

08005d6c <_read_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d07      	ldr	r5, [pc, #28]	; (8005d8c <_read_r+0x20>)
 8005d70:	4604      	mov	r4, r0
 8005d72:	4608      	mov	r0, r1
 8005d74:	4611      	mov	r1, r2
 8005d76:	2200      	movs	r2, #0
 8005d78:	602a      	str	r2, [r5, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f7fc ff67 	bl	8002c4e <_read>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d102      	bne.n	8005d8a <_read_r+0x1e>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	b103      	cbz	r3, 8005d8a <_read_r+0x1e>
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	2000039c 	.word	0x2000039c

08005d90 <abort>:
 8005d90:	b508      	push	{r3, lr}
 8005d92:	2006      	movs	r0, #6
 8005d94:	f000 f8aa 	bl	8005eec <raise>
 8005d98:	2001      	movs	r0, #1
 8005d9a:	f000 f8e1 	bl	8005f60 <_exit>
	...

08005da0 <_fstat_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4d07      	ldr	r5, [pc, #28]	; (8005dc0 <_fstat_r+0x20>)
 8005da4:	2300      	movs	r3, #0
 8005da6:	4604      	mov	r4, r0
 8005da8:	4608      	mov	r0, r1
 8005daa:	4611      	mov	r1, r2
 8005dac:	602b      	str	r3, [r5, #0]
 8005dae:	f7fd f832 	bl	8002e16 <_fstat>
 8005db2:	1c43      	adds	r3, r0, #1
 8005db4:	d102      	bne.n	8005dbc <_fstat_r+0x1c>
 8005db6:	682b      	ldr	r3, [r5, #0]
 8005db8:	b103      	cbz	r3, 8005dbc <_fstat_r+0x1c>
 8005dba:	6023      	str	r3, [r4, #0]
 8005dbc:	bd38      	pop	{r3, r4, r5, pc}
 8005dbe:	bf00      	nop
 8005dc0:	2000039c 	.word	0x2000039c

08005dc4 <_isatty_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4d06      	ldr	r5, [pc, #24]	; (8005de0 <_isatty_r+0x1c>)
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4608      	mov	r0, r1
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	f7fd f988 	bl	80030e4 <_isatty>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d102      	bne.n	8005dde <_isatty_r+0x1a>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	b103      	cbz	r3, 8005dde <_isatty_r+0x1a>
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	2000039c 	.word	0x2000039c

08005de4 <__ascii_mbtowc>:
 8005de4:	b082      	sub	sp, #8
 8005de6:	b901      	cbnz	r1, 8005dea <__ascii_mbtowc+0x6>
 8005de8:	a901      	add	r1, sp, #4
 8005dea:	b142      	cbz	r2, 8005dfe <__ascii_mbtowc+0x1a>
 8005dec:	b14b      	cbz	r3, 8005e02 <__ascii_mbtowc+0x1e>
 8005dee:	7813      	ldrb	r3, [r2, #0]
 8005df0:	600b      	str	r3, [r1, #0]
 8005df2:	7812      	ldrb	r2, [r2, #0]
 8005df4:	1e10      	subs	r0, r2, #0
 8005df6:	bf18      	it	ne
 8005df8:	2001      	movne	r0, #1
 8005dfa:	b002      	add	sp, #8
 8005dfc:	4770      	bx	lr
 8005dfe:	4610      	mov	r0, r2
 8005e00:	e7fb      	b.n	8005dfa <__ascii_mbtowc+0x16>
 8005e02:	f06f 0001 	mvn.w	r0, #1
 8005e06:	e7f8      	b.n	8005dfa <__ascii_mbtowc+0x16>

08005e08 <memmove>:
 8005e08:	4288      	cmp	r0, r1
 8005e0a:	b510      	push	{r4, lr}
 8005e0c:	eb01 0402 	add.w	r4, r1, r2
 8005e10:	d902      	bls.n	8005e18 <memmove+0x10>
 8005e12:	4284      	cmp	r4, r0
 8005e14:	4623      	mov	r3, r4
 8005e16:	d807      	bhi.n	8005e28 <memmove+0x20>
 8005e18:	1e43      	subs	r3, r0, #1
 8005e1a:	42a1      	cmp	r1, r4
 8005e1c:	d008      	beq.n	8005e30 <memmove+0x28>
 8005e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e26:	e7f8      	b.n	8005e1a <memmove+0x12>
 8005e28:	4402      	add	r2, r0
 8005e2a:	4601      	mov	r1, r0
 8005e2c:	428a      	cmp	r2, r1
 8005e2e:	d100      	bne.n	8005e32 <memmove+0x2a>
 8005e30:	bd10      	pop	{r4, pc}
 8005e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e3a:	e7f7      	b.n	8005e2c <memmove+0x24>

08005e3c <_realloc_r>:
 8005e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e40:	4680      	mov	r8, r0
 8005e42:	4614      	mov	r4, r2
 8005e44:	460e      	mov	r6, r1
 8005e46:	b921      	cbnz	r1, 8005e52 <_realloc_r+0x16>
 8005e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	f7fd babf 	b.w	80033d0 <_malloc_r>
 8005e52:	b92a      	cbnz	r2, 8005e60 <_realloc_r+0x24>
 8005e54:	f7ff fc88 	bl	8005768 <_free_r>
 8005e58:	4625      	mov	r5, r4
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e60:	f000 f86d 	bl	8005f3e <_malloc_usable_size_r>
 8005e64:	4284      	cmp	r4, r0
 8005e66:	4607      	mov	r7, r0
 8005e68:	d802      	bhi.n	8005e70 <_realloc_r+0x34>
 8005e6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e6e:	d812      	bhi.n	8005e96 <_realloc_r+0x5a>
 8005e70:	4621      	mov	r1, r4
 8005e72:	4640      	mov	r0, r8
 8005e74:	f7fd faac 	bl	80033d0 <_malloc_r>
 8005e78:	4605      	mov	r5, r0
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d0ed      	beq.n	8005e5a <_realloc_r+0x1e>
 8005e7e:	42bc      	cmp	r4, r7
 8005e80:	4622      	mov	r2, r4
 8005e82:	4631      	mov	r1, r6
 8005e84:	bf28      	it	cs
 8005e86:	463a      	movcs	r2, r7
 8005e88:	f7fd fa6b 	bl	8003362 <memcpy>
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4640      	mov	r0, r8
 8005e90:	f7ff fc6a 	bl	8005768 <_free_r>
 8005e94:	e7e1      	b.n	8005e5a <_realloc_r+0x1e>
 8005e96:	4635      	mov	r5, r6
 8005e98:	e7df      	b.n	8005e5a <_realloc_r+0x1e>

08005e9a <_raise_r>:
 8005e9a:	291f      	cmp	r1, #31
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	460d      	mov	r5, r1
 8005ea2:	d904      	bls.n	8005eae <_raise_r+0x14>
 8005ea4:	2316      	movs	r3, #22
 8005ea6:	6003      	str	r3, [r0, #0]
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	bd38      	pop	{r3, r4, r5, pc}
 8005eae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005eb0:	b112      	cbz	r2, 8005eb8 <_raise_r+0x1e>
 8005eb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005eb6:	b94b      	cbnz	r3, 8005ecc <_raise_r+0x32>
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f000 f831 	bl	8005f20 <_getpid_r>
 8005ebe:	462a      	mov	r2, r5
 8005ec0:	4601      	mov	r1, r0
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ec8:	f000 b818 	b.w	8005efc <_kill_r>
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d00a      	beq.n	8005ee6 <_raise_r+0x4c>
 8005ed0:	1c59      	adds	r1, r3, #1
 8005ed2:	d103      	bne.n	8005edc <_raise_r+0x42>
 8005ed4:	2316      	movs	r3, #22
 8005ed6:	6003      	str	r3, [r0, #0]
 8005ed8:	2001      	movs	r0, #1
 8005eda:	e7e7      	b.n	8005eac <_raise_r+0x12>
 8005edc:	2400      	movs	r4, #0
 8005ede:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	4798      	blx	r3
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	e7e0      	b.n	8005eac <_raise_r+0x12>
	...

08005eec <raise>:
 8005eec:	4b02      	ldr	r3, [pc, #8]	; (8005ef8 <raise+0xc>)
 8005eee:	4601      	mov	r1, r0
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	f7ff bfd2 	b.w	8005e9a <_raise_r>
 8005ef6:	bf00      	nop
 8005ef8:	2000001c 	.word	0x2000001c

08005efc <_kill_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4d07      	ldr	r5, [pc, #28]	; (8005f1c <_kill_r+0x20>)
 8005f00:	2300      	movs	r3, #0
 8005f02:	4604      	mov	r4, r0
 8005f04:	4608      	mov	r0, r1
 8005f06:	4611      	mov	r1, r2
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	f000 f821 	bl	8005f50 <_kill>
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	d102      	bne.n	8005f18 <_kill_r+0x1c>
 8005f12:	682b      	ldr	r3, [r5, #0]
 8005f14:	b103      	cbz	r3, 8005f18 <_kill_r+0x1c>
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	bd38      	pop	{r3, r4, r5, pc}
 8005f1a:	bf00      	nop
 8005f1c:	2000039c 	.word	0x2000039c

08005f20 <_getpid_r>:
 8005f20:	f7fc bf56 	b.w	8002dd0 <_getpid>

08005f24 <__ascii_wctomb>:
 8005f24:	b149      	cbz	r1, 8005f3a <__ascii_wctomb+0x16>
 8005f26:	2aff      	cmp	r2, #255	; 0xff
 8005f28:	bf85      	ittet	hi
 8005f2a:	238a      	movhi	r3, #138	; 0x8a
 8005f2c:	6003      	strhi	r3, [r0, #0]
 8005f2e:	700a      	strbls	r2, [r1, #0]
 8005f30:	f04f 30ff 	movhi.w	r0, #4294967295
 8005f34:	bf98      	it	ls
 8005f36:	2001      	movls	r0, #1
 8005f38:	4770      	bx	lr
 8005f3a:	4608      	mov	r0, r1
 8005f3c:	4770      	bx	lr

08005f3e <_malloc_usable_size_r>:
 8005f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f42:	1f18      	subs	r0, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	bfbc      	itt	lt
 8005f48:	580b      	ldrlt	r3, [r1, r0]
 8005f4a:	18c0      	addlt	r0, r0, r3
 8005f4c:	4770      	bx	lr
	...

08005f50 <_kill>:
 8005f50:	4b02      	ldr	r3, [pc, #8]	; (8005f5c <_kill+0xc>)
 8005f52:	2258      	movs	r2, #88	; 0x58
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5a:	4770      	bx	lr
 8005f5c:	2000039c 	.word	0x2000039c

08005f60 <_exit>:
 8005f60:	e7fe      	b.n	8005f60 <_exit>
	...

08005f64 <_init>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	bf00      	nop
 8005f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6a:	bc08      	pop	{r3}
 8005f6c:	469e      	mov	lr, r3
 8005f6e:	4770      	bx	lr

08005f70 <_fini>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	bf00      	nop
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr
