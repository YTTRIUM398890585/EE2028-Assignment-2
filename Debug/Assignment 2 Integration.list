
Assignment 2 Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  0800a838  0800a838  0001a838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b078  0800b078  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800b078  0800b078  0001b078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b080  0800b080  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b080  0800b080  0001b080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b084  0800b084  0001b084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800b088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000244  0800b2cc  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  0800b2cc  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ae8  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a73  00000000  00000000  00037d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003b7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  0003cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c46c  00000000  00000000  0003e478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001971c  00000000  00000000  0006a8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104d95  00000000  00000000  00084000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188d95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007524  00000000  00000000  00188de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0019030c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  00190330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000244 	.word	0x20000244
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a820 	.word	0x0800a820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000248 	.word	0x20000248
 80001cc:	0800a820 	.word	0x0800a820

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:

static void RF_GPIO_Init();
static void RF_SPI3_Init();

int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af04      	add	r7, sp, #16
    HAL_Init();
 8000ef2:	f003 fc9f 	bl	8004834 <HAL_Init>
    UART1_Init();
 8000ef6:	f000 f867 	bl	8000fc8 <UART1_Init>

    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000efa:	2101      	movs	r1, #1
 8000efc:	2000      	movs	r0, #0
 8000efe:	f000 fe83 	bl	8001c08 <BSP_PB_Init>
    BSP_LED_Init(LED2);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 fe50 	bl	8001ba8 <BSP_LED_Init>

    // must init this for I2C to configure the sensors
    SENSOR_IO_Init();
 8000f08:	f000 ffc4 	bl	8001e94 <SENSOR_IO_Init>

    LSM6DSL_AccGyroInit();
 8000f0c:	f000 f90c 	bl	8001128 <LSM6DSL_AccGyroInit>
    HTS221_HumTempInit(&h0_lsb, &h1_lsb, &h0_rh, &h1_rh, &t0_lsb, &t1_lsb, &t0_degc, &t1_degc);
 8000f10:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <main+0xa8>)
 8000f12:	9303      	str	r3, [sp, #12]
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <main+0xac>)
 8000f16:	9302      	str	r3, [sp, #8]
 8000f18:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <main+0xb0>)
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <main+0xb4>)
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <main+0xb8>)
 8000f22:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <main+0xbc>)
 8000f24:	4921      	ldr	r1, [pc, #132]	; (8000fac <main+0xc0>)
 8000f26:	4822      	ldr	r0, [pc, #136]	; (8000fb0 <main+0xc4>)
 8000f28:	f000 f9a6 	bl	8001278 <HTS221_HumTempInit>
    BSP_MAGNETO_Init();
 8000f2c:	f001 f812 	bl	8001f54 <BSP_MAGNETO_Init>
    BSP_PSENSOR_Init();
 8000f30:	f001 f83c 	bl	8001fac <BSP_PSENSOR_Init>

    // init for rf
    RF_GPIO_Init();
 8000f34:	f000 fa8a 	bl	800144c <RF_GPIO_Init>
    RF_SPI3_Init();
 8000f38:	f000 fb0c 	bl	8001554 <RF_SPI3_Init>

    SPSGRF_Init();
 8000f3c:	f000 fb3c 	bl	80015b8 <SPSGRF_Init>
    SpiritPktBasicSetDestinationAddress(0x44);
 8000f40:	2044      	movs	r0, #68	; 0x44
 8000f42:	f002 f84b 	bl	8002fdc <SpiritPktCommonSetDestinationAddress>

    // print Entering STANDBY MODE when going to STANDBY_MODE
    sprintf(uart_buffer, "Entering STANDBY MODE\r\n");
 8000f46:	491b      	ldr	r1, [pc, #108]	; (8000fb4 <main+0xc8>)
 8000f48:	481b      	ldr	r0, [pc, #108]	; (8000fb8 <main+0xcc>)
 8000f4a:	f007 fb47 	bl	80085dc <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8000f4e:	481a      	ldr	r0, [pc, #104]	; (8000fb8 <main+0xcc>)
 8000f50:	f7ff f93e 	bl	80001d0 <strlen>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f5c:	4916      	ldr	r1, [pc, #88]	; (8000fb8 <main+0xcc>)
 8000f5e:	4817      	ldr	r0, [pc, #92]	; (8000fbc <main+0xd0>)
 8000f60:	f005 fe12 	bl	8006b88 <HAL_UART_Transmit>

    while (1) {
#ifdef APPLICATION_TRANSMITTER
        // Send the payload
        xTxDoneFlag = S_RESET;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <main+0xd4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
        SPSGRF_StartTx(payload, strlen(payload));
 8000f6a:	4816      	ldr	r0, [pc, #88]	; (8000fc4 <main+0xd8>)
 8000f6c:	f7ff f930 	bl	80001d0 <strlen>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4619      	mov	r1, r3
 8000f76:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <main+0xd8>)
 8000f78:	f000 fbd0 	bl	800171c <SPSGRF_StartTx>
        while (!xTxDoneFlag)
 8000f7c:	bf00      	nop
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <main+0xd4>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0fa      	beq.n	8000f7e <main+0x92>
            ;

        HAL_Delay(2000); // Block for 2000 ms
 8000f88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f8c:	f003 fcc2 	bl	8004914 <HAL_Delay>
        xTxDoneFlag = S_RESET;
 8000f90:	e7e8      	b.n	8000f64 <main+0x78>
 8000f92:	bf00      	nop
 8000f94:	200003de 	.word	0x200003de
 8000f98:	200003dc 	.word	0x200003dc
 8000f9c:	200003da 	.word	0x200003da
 8000fa0:	200003d8 	.word	0x200003d8
 8000fa4:	200003d6 	.word	0x200003d6
 8000fa8:	200003d4 	.word	0x200003d4
 8000fac:	200003d2 	.word	0x200003d2
 8000fb0:	200003d0 	.word	0x200003d0
 8000fb4:	0800a838 	.word	0x0800a838
 8000fb8:	20000268 	.word	0x20000268
 8000fbc:	200002e8 	.word	0x200002e8
 8000fc0:	20000369 	.word	0x20000369
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <UART1_Init>:
        single_press = BOOL_CLR;
    }
}

static void UART1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
    /* Pin configuration for UART. BSP_COM_Init() can do this automatically */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <UART1_Init+0xa0>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a25      	ldr	r2, [pc, #148]	; (8001068 <UART1_Init+0xa0>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <UART1_Init+0xa0>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 8000ff8:	23c0      	movs	r3, #192	; 0xc0
 8000ffa:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	4619      	mov	r1, r3
 800100c:	4817      	ldr	r0, [pc, #92]	; (800106c <UART1_Init+0xa4>)
 800100e:	f003 fde7 	bl	8004be0 <HAL_GPIO_Init>

    /* Configuring UART1 */
    huart1.Instance = USART1;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <UART1_Init+0xa8>)
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <UART1_Init+0xac>)
 8001016:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <UART1_Init+0xa8>)
 800101a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800101e:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <UART1_Init+0xa8>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <UART1_Init+0xa8>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <UART1_Init+0xa8>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <UART1_Init+0xa8>)
 8001034:	220c      	movs	r2, #12
 8001036:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <UART1_Init+0xa8>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <UART1_Init+0xa8>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <UART1_Init+0xa8>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <UART1_Init+0xa8>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001050:	4807      	ldr	r0, [pc, #28]	; (8001070 <UART1_Init+0xa8>)
 8001052:	f005 fd4b 	bl	8006aec <HAL_UART_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d000      	beq.n	800105e <UART1_Init+0x96>
        while (1) { }
 800105c:	e7fe      	b.n	800105c <UART1_Init+0x94>
    }
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000
 800106c:	48000400 	.word	0x48000400
 8001070:	200002e8 	.word	0x200002e8
 8001074:	40013800 	.word	0x40013800

08001078 <HAL_GPIO_EXTI_Callback>:
 * @brief ISR for GPIO
 * @param uint16_t GPIO_Pin
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	80fb      	strh	r3, [r7, #6]
    // button
    if (GPIO_Pin == USER_BUTTON_PIN) {
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001088:	d107      	bne.n	800109a <HAL_GPIO_EXTI_Callback+0x22>
        button_press_tick = HAL_GetTick();
 800108a:	f003 fc37 	bl	80048fc <HAL_GetTick>
 800108e:	4603      	mov	r3, r0
 8001090:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <HAL_GPIO_EXTI_Callback+0x98>)
 8001092:	6013      	str	r3, [r2, #0]
        button_flag = BOOL_SET;
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
    }

    // EXTI from LSM6DSL, flag to read Accel Data, Gyro Data and LSM6DSL_ACC_GYRO_D6D_SRC
    if (GPIO_Pin == GPIO_PIN_11) {
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a0:	d102      	bne.n	80010a8 <HAL_GPIO_EXTI_Callback+0x30>
        acc_gyro_d6d_ready = BOOL_SET;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_GPIO_EXTI_Callback+0xa0>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
    }

    // EXTI from HTS221, flag to read Humidity and Temperature
    if (GPIO_Pin == GPIO_PIN_15) {
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010ae:	d102      	bne.n	80010b6 <HAL_GPIO_EXTI_Callback+0x3e>
        hum_temp_ready = BOOL_SET;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_GPIO_EXTI_Callback+0xa4>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
    }

    // rf
    SpiritIrqs xIrqStatus;

    SpiritIrqGetStatus(&xIrqStatus);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fb04 	bl	80026c8 <SpiritIrqGetStatus>
    if (xIrqStatus.IRQ_TX_DATA_SENT) {
 80010c0:	7b3b      	ldrb	r3, [r7, #12]
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <HAL_GPIO_EXTI_Callback+0x5a>
        xTxDoneFlag = S_SET;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_GPIO_EXTI_Callback+0xa8>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
    }
    if (xIrqStatus.IRQ_RX_DATA_READY) {
 80010d2:	7b3b      	ldrb	r3, [r7, #12]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <HAL_GPIO_EXTI_Callback+0x6c>
        xRxDoneFlag = S_SET;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_GPIO_EXTI_Callback+0xac>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
    }
    if (xIrqStatus.IRQ_RX_DATA_DISC || xIrqStatus.IRQ_RX_TIMEOUT) {
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d105      	bne.n	80010fc <HAL_GPIO_EXTI_Callback+0x84>
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	f003 0320 	and.w	r3, r3, #32
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <HAL_GPIO_EXTI_Callback+0x8e>
        SpiritCmdStrobeRx();
 80010fc:	f001 fd28 	bl	8002b50 <SpiritManagementWaCmdStrobeRx>
 8001100:	2061      	movs	r0, #97	; 0x61
 8001102:	f001 fa13 	bl	800252c <SpiritCmdStrobeCommand>
    }
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000260 	.word	0x20000260
 8001114:	20000264 	.word	0x20000264
 8001118:	20000368 	.word	0x20000368
 800111c:	20000000 	.word	0x20000000
 8001120:	20000369 	.word	0x20000369
 8001124:	2000036a 	.word	0x2000036a

08001128 <LSM6DSL_AccGyroInit>:
 *        also init GPIO PD11 for the EXTI
 * @param None
 * @retval None
 */
static void LSM6DSL_AccGyroInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
    /*
    configuring the GPIO for EXTI from LSM6DSL at PD11
    */
    GPIO_InitTypeDef gpio_init_structure;

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800112e:	4b4f      	ldr	r3, [pc, #316]	; (800126c <LSM6DSL_AccGyroInit+0x144>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a4e      	ldr	r2, [pc, #312]	; (800126c <LSM6DSL_AccGyroInit+0x144>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b4c      	ldr	r3, [pc, #304]	; (800126c <LSM6DSL_AccGyroInit+0x144>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

    // Configure PD11 pin as input with External interrupt
    gpio_init_structure.Pin = GPIO_PIN_11;
 8001146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800114a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 800114c:	2302      	movs	r3, #2
 800114e:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	617b      	str	r3, [r7, #20]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING; // interupt is active high
 8001154:	4b46      	ldr	r3, [pc, #280]	; (8001270 <LSM6DSL_AccGyroInit+0x148>)
 8001156:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	4845      	ldr	r0, [pc, #276]	; (8001274 <LSM6DSL_AccGyroInit+0x14c>)
 8001160:	f003 fd3e 	bl	8004be0 <HAL_GPIO_Init>

    // Enable and set EXTI Interrupt priority
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQn_PREEMPT_PRIO, EXTI15_10_IRQn_SUB_PRIO);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2028      	movs	r0, #40	; 0x28
 800116a:	f003 fcf4 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800116e:	2028      	movs	r0, #40	; 0x28
 8001170:	f003 fd0d 	bl	8004b8e <HAL_NVIC_EnableIRQ>

    //////////////////////////////////////////////////////////////////////////////////////////
    uint8_t ctrl = 0x00;
 8001174:	2300      	movs	r3, #0
 8001176:	77fb      	strb	r3, [r7, #31]

    /*
    configuring the LSM6DSL for 6D EXTI through INT1
    */
    // write 0x60 to 0x10 CTRL1_XL to set ODR_XL = 416 Hz and turn on device, FS_XL = ±2 g
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, 0x60);
 8001178:	2260      	movs	r2, #96	; 0x60
 800117a:	2110      	movs	r1, #16
 800117c:	20d4      	movs	r0, #212	; 0xd4
 800117e:	f000 fe93 	bl	8001ea8 <SENSOR_IO_Write>

    // Write 0x80 to 0x58 TAP_CFG Enable interrupts; latched mode disabled
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_CFG1, 0x80);
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	2158      	movs	r1, #88	; 0x58
 8001186:	20d4      	movs	r0, #212	; 0xd4
 8001188:	f000 fe8e 	bl	8001ea8 <SENSOR_IO_Write>

    // thershold at 50 deg seems good
    // Write 0x60 to 0x59 TAP_THS_6D Set 6D threshold (SIXD_THS[1:0] = 11b = 50 degrees), D4D disable
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_THS_6D, 0x60);
 800118c:	2260      	movs	r2, #96	; 0x60
 800118e:	2159      	movs	r1, #89	; 0x59
 8001190:	20d4      	movs	r0, #212	; 0xd4
 8001192:	f000 fe89 	bl	8001ea8 <SENSOR_IO_Write>
    //	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_THS_6D, 0x00);

    // Write set HPCF_XL[1:0] to 11, INPUT_COMPOSITE = 1, LOW_PASS_ON_6D = 1 in CTRL8_XL to
    // to config LPF2 filter to 6D functionality
    // this LPF has a very low BW, to avoid triggering of 6d when shaking the board
    tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL);
 8001196:	2117      	movs	r1, #23
 8001198:	20d4      	movs	r0, #212	; 0xd4
 800119a:	f000 fe9f 	bl	8001edc <SENSOR_IO_Read>
 800119e:	4603      	mov	r3, r0
 80011a0:	77bb      	strb	r3, [r7, #30]

    ctrl = 0x69;
 80011a2:	2369      	movs	r3, #105	; 0x69
 80011a4:	77fb      	strb	r3, [r7, #31]
    tmp &= ~(0x6B);
 80011a6:	7fbb      	ldrb	r3, [r7, #30]
 80011a8:	f023 036b 	bic.w	r3, r3, #107	; 0x6b
 80011ac:	77bb      	strb	r3, [r7, #30]
    tmp |= ctrl;
 80011ae:	7fba      	ldrb	r2, [r7, #30]
 80011b0:	7ffb      	ldrb	r3, [r7, #31]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	77bb      	strb	r3, [r7, #30]
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL, tmp);
 80011b6:	7fbb      	ldrb	r3, [r7, #30]
 80011b8:	461a      	mov	r2, r3
 80011ba:	2117      	movs	r1, #23
 80011bc:	20d4      	movs	r0, #212	; 0xd4
 80011be:	f000 fe73 	bl	8001ea8 <SENSOR_IO_Write>

    // Write 04h to 0x5E MD1_CFG 6D interrupt driven to INT1 pin
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, 0x04);
 80011c2:	2204      	movs	r2, #4
 80011c4:	215e      	movs	r1, #94	; 0x5e
 80011c6:	20d4      	movs	r0, #212	; 0xd4
 80011c8:	f000 fe6e 	bl	8001ea8 <SENSOR_IO_Write>
    // all necessary config are done along with the d6d

    /*
    configuring the LSM6DSL for gyro
    */
    tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80011cc:	2111      	movs	r1, #17
 80011ce:	20d4      	movs	r0, #212	; 0xd4
 80011d0:	f000 fe84 	bl	8001edc <SENSOR_IO_Read>
 80011d4:	4603      	mov	r3, r0
 80011d6:	77bb      	strb	r3, [r7, #30]

    // Write value to GYRO MEMS CTRL2_G register: FS = 2000 dps and Data Rate 52 Hz
    ctrl = LSM6DSL_GYRO_FS_2000 | LSM6DSL_ODR_52Hz;
 80011d8:	233c      	movs	r3, #60	; 0x3c
 80011da:	77fb      	strb	r3, [r7, #31]
    tmp &= ~(0xFC);
 80011dc:	7fbb      	ldrb	r3, [r7, #30]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	77bb      	strb	r3, [r7, #30]
    tmp |= ctrl;
 80011e4:	7fba      	ldrb	r2, [r7, #30]
 80011e6:	7ffb      	ldrb	r3, [r7, #31]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	77bb      	strb	r3, [r7, #30]
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80011ec:	7fbb      	ldrb	r3, [r7, #30]
 80011ee:	461a      	mov	r2, r3
 80011f0:	2111      	movs	r1, #17
 80011f2:	20d4      	movs	r0, #212	; 0xd4
 80011f4:	f000 fe58 	bl	8001ea8 <SENSOR_IO_Write>
    /*
    Write value to CTRL3_C register: BDU and Auto-increment and active high int
    the same register to configure for both acc nd gyro
    */
    // Read CTRL3_C
    tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80011f8:	2112      	movs	r1, #18
 80011fa:	20d4      	movs	r0, #212	; 0xd4
 80011fc:	f000 fe6e 	bl	8001edc <SENSOR_IO_Read>
 8001200:	4603      	mov	r3, r0
 8001202:	77bb      	strb	r3, [r7, #30]

    ctrl = LSM6DSL_BDU_BLOCK_UPDATE | LSM6DSL_ACC_GYRO_IF_INC_ENABLED;
 8001204:	2344      	movs	r3, #68	; 0x44
 8001206:	77fb      	strb	r3, [r7, #31]
    tmp &= ~(0x64); // clear BDU, IF_INC and H_LACTIVE (for interrupt to be active high)
 8001208:	7fbb      	ldrb	r3, [r7, #30]
 800120a:	f023 0364 	bic.w	r3, r3, #100	; 0x64
 800120e:	77bb      	strb	r3, [r7, #30]
    tmp |= ctrl;
 8001210:	7fba      	ldrb	r2, [r7, #30]
 8001212:	7ffb      	ldrb	r3, [r7, #31]
 8001214:	4313      	orrs	r3, r2
 8001216:	77bb      	strb	r3, [r7, #30]
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001218:	7fbb      	ldrb	r3, [r7, #30]
 800121a:	461a      	mov	r2, r3
 800121c:	2112      	movs	r1, #18
 800121e:	20d4      	movs	r0, #212	; 0xd4
 8001220:	f000 fe42 	bl	8001ea8 <SENSOR_IO_Write>

    /*
    configuring the LSM6DSL for accel gyro DRDY INT1
    */
    // Write 0x03 to 0x0D INT1_CTRL, DRDY for both accel and gyro interrupt driven to INT1 pin
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, 0x03);
 8001224:	2203      	movs	r2, #3
 8001226:	210d      	movs	r1, #13
 8001228:	20d4      	movs	r0, #212	; 0xd4
 800122a:	f000 fe3d 	bl	8001ea8 <SENSOR_IO_Write>

    // Write 0x80 to DRDY_PULSE_CFG_G (0Bh) to make DRDY be a pulse and not latched
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, 0x80);
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	210b      	movs	r1, #11
 8001232:	20d4      	movs	r0, #212	; 0xd4
 8001234:	f000 fe38 	bl	8001ea8 <SENSOR_IO_Write>

    // set DRDY_MASK to 1 in CTRL4_C (13h) to wait LPF before DRDY
    tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL4_C);
 8001238:	2113      	movs	r1, #19
 800123a:	20d4      	movs	r0, #212	; 0xd4
 800123c:	f000 fe4e 	bl	8001edc <SENSOR_IO_Read>
 8001240:	4603      	mov	r3, r0
 8001242:	77bb      	strb	r3, [r7, #30]

    ctrl = 0x08;
 8001244:	2308      	movs	r3, #8
 8001246:	77fb      	strb	r3, [r7, #31]
    tmp &= ~(0x09); // clear DRDY_MASK and bit 0 must set to 0
 8001248:	7fbb      	ldrb	r3, [r7, #30]
 800124a:	f023 0309 	bic.w	r3, r3, #9
 800124e:	77bb      	strb	r3, [r7, #30]
    tmp |= ctrl;
 8001250:	7fba      	ldrb	r2, [r7, #30]
 8001252:	7ffb      	ldrb	r3, [r7, #31]
 8001254:	4313      	orrs	r3, r2
 8001256:	77bb      	strb	r3, [r7, #30]
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL4_C, tmp);
 8001258:	7fbb      	ldrb	r3, [r7, #30]
 800125a:	461a      	mov	r2, r3
 800125c:	2113      	movs	r1, #19
 800125e:	20d4      	movs	r0, #212	; 0xd4
 8001260:	f000 fe22 	bl	8001ea8 <SENSOR_IO_Write>
}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000
 8001270:	10110000 	.word	0x10110000
 8001274:	48000c00 	.word	0x48000c00

08001278 <HTS221_HumTempInit>:
 *        also init GPIO PD15 for the EXTI
 * @param None
 * @retval None
 */
static void HTS221_HumTempInit(int16_t* p_h0_lsb, int16_t* p_h1_lsb, int16_t* p_h0_rh, int16_t* p_h1_rh, int16_t* p_t0_lsb, int16_t* p_t1_lsb, int16_t* p_t0_degc, int16_t* p_t1_degc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	; 0x30
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
    /*
    configuring the GPIO for EXTI from LSM6DSL at PD15
    */
    GPIO_InitTypeDef gpio_init_structure;

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	4b6e      	ldr	r3, [pc, #440]	; (8001440 <HTS221_HumTempInit+0x1c8>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a6d      	ldr	r2, [pc, #436]	; (8001440 <HTS221_HumTempInit+0x1c8>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b6b      	ldr	r3, [pc, #428]	; (8001440 <HTS221_HumTempInit+0x1c8>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    // Configure PD15 pin as input with External interrupt
    gpio_init_structure.Pin = GPIO_PIN_15;
 800129e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012a2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80012a4:	2302      	movs	r3, #2
 80012a6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING; // interupt is active high
 80012ac:	4b65      	ldr	r3, [pc, #404]	; (8001444 <HTS221_HumTempInit+0x1cc>)
 80012ae:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	4619      	mov	r1, r3
 80012b6:	4864      	ldr	r0, [pc, #400]	; (8001448 <HTS221_HumTempInit+0x1d0>)
 80012b8:	f003 fc92 	bl	8004be0 <HAL_GPIO_Init>

    // Enable and set EXTI Interrupt priority
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQn_PREEMPT_PRIO, EXTI15_10_IRQn_SUB_PRIO);
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	2028      	movs	r0, #40	; 0x28
 80012c2:	f003 fc48 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012c6:	2028      	movs	r0, #40	; 0x28
 80012c8:	f003 fc61 	bl	8004b8e <HAL_NVIC_EnableIRQ>
    // DRDY_H_L 0 active high
    // PP_OD 0 push pull
    // DRDY_EN 1 enabled
    // clear 0xC4
    // set 0x04
    tmp = SENSOR_IO_Read(HTS221_I2C_ADDRESS, HTS221_CTRL_REG3);
 80012cc:	2122      	movs	r1, #34	; 0x22
 80012ce:	20be      	movs	r0, #190	; 0xbe
 80012d0:	f000 fe04 	bl	8001edc <SENSOR_IO_Read>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    tmp &= ~0xC4;
 80012da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012de:	f003 033b 	and.w	r3, r3, #59	; 0x3b
 80012e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    tmp |= 0x04;
 80012e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    SENSOR_IO_Write(HTS221_I2C_ADDRESS, HTS221_CTRL_REG3, tmp);
 80012f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012f6:	461a      	mov	r2, r3
 80012f8:	2122      	movs	r1, #34	; 0x22
 80012fa:	20be      	movs	r0, #190	; 0xbe
 80012fc:	f000 fdd4 	bl	8001ea8 <SENSOR_IO_Write>

    /*
    Init for H and T
    */
    /* Read CTRL_REG1 */
    tmp = SENSOR_IO_Read(HTS221_I2C_ADDRESS, HTS221_CTRL_REG1);
 8001300:	2120      	movs	r1, #32
 8001302:	20be      	movs	r0, #190	; 0xbe
 8001304:	f000 fdea 	bl	8001edc <SENSOR_IO_Read>
 8001308:	4603      	mov	r3, r0
 800130a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Enable BDU */
    tmp &= ~HTS221_BDU_MASK;
 800130e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001312:	f023 0304 	bic.w	r3, r3, #4
 8001316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    tmp |= (1 << HTS221_BDU_BIT);
 800131a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Set default ODR */
    tmp &= ~HTS221_ODR_MASK;
 8001326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800132a:	f023 0303 	bic.w	r3, r3, #3
 800132e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Activate the device */
    tmp |= HTS221_PD_MASK;
 800133e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001342:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Apply settings to CTRL_REG1 */
    SENSOR_IO_Write(HTS221_I2C_ADDRESS, HTS221_CTRL_REG1, tmp);
 800134a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800134e:	461a      	mov	r2, r3
 8001350:	2120      	movs	r1, #32
 8001352:	20be      	movs	r0, #190	; 0xbe
 8001354:	f000 fda8 	bl	8001ea8 <SENSOR_IO_Write>
    */
    uint8_t buffer[4];

    // for hum
    // H0 * 2 and H1 * 2 in %
    SENSOR_IO_ReadMultiple(HTS221_I2C_ADDRESS, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001358:	f107 0214 	add.w	r2, r7, #20
 800135c:	2302      	movs	r3, #2
 800135e:	21b0      	movs	r1, #176	; 0xb0
 8001360:	20be      	movs	r0, #190	; 0xbe
 8001362:	f000 fdd9 	bl	8001f18 <SENSOR_IO_ReadMultiple>

    // get H0 and H1 in %, rh = relative humidity
    *p_h0_rh = buffer[0] >> 1;
 8001366:	7d3b      	ldrb	r3, [r7, #20]
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	b21a      	sxth	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	801a      	strh	r2, [r3, #0]
    *p_h1_rh = buffer[1] >> 1;
 8001372:	7d7b      	ldrb	r3, [r7, #21]
 8001374:	085b      	lsrs	r3, r3, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	b21a      	sxth	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	801a      	strh	r2, [r3, #0]

    // get H0 in LSB
    SENSOR_IO_ReadMultiple(HTS221_I2C_ADDRESS, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800137e:	f107 0214 	add.w	r2, r7, #20
 8001382:	2302      	movs	r3, #2
 8001384:	21b6      	movs	r1, #182	; 0xb6
 8001386:	20be      	movs	r0, #190	; 0xbe
 8001388:	f000 fdc6 	bl	8001f18 <SENSOR_IO_ReadMultiple>
    *p_h0_lsb = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800138c:	7d7b      	ldrb	r3, [r7, #21]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	b21a      	sxth	r2, r3
 8001392:	7d3b      	ldrb	r3, [r7, #20]
 8001394:	b21b      	sxth	r3, r3
 8001396:	4313      	orrs	r3, r2
 8001398:	b21a      	sxth	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	801a      	strh	r2, [r3, #0]

    // get H1 in LSB
    SENSOR_IO_ReadMultiple(HTS221_I2C_ADDRESS, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800139e:	f107 0214 	add.w	r2, r7, #20
 80013a2:	2302      	movs	r3, #2
 80013a4:	21ba      	movs	r1, #186	; 0xba
 80013a6:	20be      	movs	r0, #190	; 0xbe
 80013a8:	f000 fdb6 	bl	8001f18 <SENSOR_IO_ReadMultiple>
    *p_h1_lsb = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80013ac:	7d7b      	ldrb	r3, [r7, #21]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	7d3b      	ldrb	r3, [r7, #20]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	801a      	strh	r2, [r3, #0]

    // for temp
    // get T0 and T1 in degC, concat to 10 bits and divide 8
    SENSOR_IO_ReadMultiple(HTS221_I2C_ADDRESS, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80013be:	f107 0214 	add.w	r2, r7, #20
 80013c2:	2302      	movs	r3, #2
 80013c4:	21b2      	movs	r1, #178	; 0xb2
 80013c6:	20be      	movs	r0, #190	; 0xbe
 80013c8:	f000 fda6 	bl	8001f18 <SENSOR_IO_ReadMultiple>
    tmp = SENSOR_IO_Read(HTS221_I2C_ADDRESS, HTS221_T0_T1_DEGC_H2);
 80013cc:	2135      	movs	r1, #53	; 0x35
 80013ce:	20be      	movs	r0, #190	; 0xbe
 80013d0:	f000 fd84 	bl	8001edc <SENSOR_IO_Read>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    *p_t0_degc = ((((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0])) >> 3;
 80013da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013e4:	7d3a      	ldrb	r2, [r7, #20]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	10db      	asrs	r3, r3, #3
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013ee:	801a      	strh	r2, [r3, #0]
    *p_t1_degc = ((((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1])) >> 3;
 80013f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013fa:	7d7a      	ldrb	r2, [r7, #21]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	10db      	asrs	r3, r3, #3
 8001400:	b21a      	sxth	r2, r3
 8001402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001404:	801a      	strh	r2, [r3, #0]

    // get T0 and T1 in lsb
    SENSOR_IO_ReadMultiple(HTS221_I2C_ADDRESS, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001406:	f107 0214 	add.w	r2, r7, #20
 800140a:	2304      	movs	r3, #4
 800140c:	21bc      	movs	r1, #188	; 0xbc
 800140e:	20be      	movs	r0, #190	; 0xbe
 8001410:	f000 fd82 	bl	8001f18 <SENSOR_IO_ReadMultiple>

    *p_t0_lsb = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001414:	7d7b      	ldrb	r3, [r7, #21]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	b21a      	sxth	r2, r3
 800141a:	7d3b      	ldrb	r3, [r7, #20]
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21a      	sxth	r2, r3
 8001422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001424:	801a      	strh	r2, [r3, #0]
    *p_t1_lsb = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21a      	sxth	r2, r3
 800142c:	7dbb      	ldrb	r3, [r7, #22]
 800142e:	b21b      	sxth	r3, r3
 8001430:	4313      	orrs	r3, r2
 8001432:	b21a      	sxth	r2, r3
 8001434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001436:	801a      	strh	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	3730      	adds	r7, #48	; 0x30
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	10110000 	.word	0x10110000
 8001448:	48000c00 	.word	0x48000c00

0800144c <RF_GPIO_Init>:

static void RF_GPIO_Init()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b38      	ldr	r3, [pc, #224]	; (8001544 <RF_GPIO_Init+0xf8>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	4a37      	ldr	r2, [pc, #220]	; (8001544 <RF_GPIO_Init+0xf8>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <RF_GPIO_Init+0xf8>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	4b32      	ldr	r3, [pc, #200]	; (8001544 <RF_GPIO_Init+0xf8>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	4a31      	ldr	r2, [pc, #196]	; (8001544 <RF_GPIO_Init+0xf8>)
 8001480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001486:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <RF_GPIO_Init+0xf8>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <RF_GPIO_Init+0xf8>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	4a2b      	ldr	r2, [pc, #172]	; (8001544 <RF_GPIO_Init+0xf8>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149e:	4b29      	ldr	r3, [pc, #164]	; (8001544 <RF_GPIO_Init+0xf8>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <RF_GPIO_Init+0xf8>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4a25      	ldr	r2, [pc, #148]	; (8001544 <RF_GPIO_Init+0xf8>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <RF_GPIO_Init+0xf8>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SPSGRF_915_SDN_GPIO_Port, SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c8:	481f      	ldr	r0, [pc, #124]	; (8001548 <RF_GPIO_Init+0xfc>)
 80014ca:	f003 fe27 	bl	800511c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2120      	movs	r1, #32
 80014d2:	481d      	ldr	r0, [pc, #116]	; (8001548 <RF_GPIO_Init+0xfc>)
 80014d4:	f003 fe22 	bl	800511c <HAL_GPIO_WritePin>

    /*Configure GPIO pins : Shutdown Pin on SPSGRF SDN */
    GPIO_InitStruct.Pin = SPSGRF_915_SDN_Pin;
 80014d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SPSGRF_915_SDN_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	4815      	ldr	r0, [pc, #84]	; (8001548 <RF_GPIO_Init+0xfc>)
 80014f2:	f003 fb75 	bl	8004be0 <HAL_GPIO_Init>

    /*Configure GPIO pin : SPSGRF CS */
    GPIO_InitStruct.Pin = SPSGRF_915_SPI3_CSN_Pin;
 80014f6:	2320      	movs	r3, #32
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SPSGRF_915_SPI3_CSN_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	480e      	ldr	r0, [pc, #56]	; (8001548 <RF_GPIO_Init+0xfc>)
 800150e:	f003 fb67 	bl	8004be0 <HAL_GPIO_Init>

    /*Configure GPIO pin : SPSGRF GPIO3 for EXTI */
    GPIO_InitStruct.Pin = SPSGRF_915_GPIO3_EXTI5_Pin;
 8001512:	2320      	movs	r3, #32
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <RF_GPIO_Init+0x100>)
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480a      	ldr	r0, [pc, #40]	; (8001550 <RF_GPIO_Init+0x104>)
 8001526:	f003 fb5b 	bl	8004be0 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2017      	movs	r0, #23
 8001530:	f003 fb11 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001534:	2017      	movs	r0, #23
 8001536:	f003 fb2a 	bl	8004b8e <HAL_NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	48000400 	.word	0x48000400
 800154c:	10210000 	.word	0x10210000
 8001550:	48001000 	.word	0x48001000

08001554 <RF_SPI3_Init>:

static void RF_SPI3_Init()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
    spi3.Instance = SPI3;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <RF_SPI3_Init+0x5c>)
 800155a:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <RF_SPI3_Init+0x60>)
 800155c:	601a      	str	r2, [r3, #0]
    spi3.Init.Mode = SPI_MODE_MASTER;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <RF_SPI3_Init+0x5c>)
 8001560:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001564:	605a      	str	r2, [r3, #4]
    spi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <RF_SPI3_Init+0x5c>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
    spi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800156c:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <RF_SPI3_Init+0x5c>)
 800156e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001572:	60da      	str	r2, [r3, #12]
    spi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <RF_SPI3_Init+0x5c>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
    spi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <RF_SPI3_Init+0x5c>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
    spi3.Init.NSS = SPI_NSS_SOFT;
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <RF_SPI3_Init+0x5c>)
 8001582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001586:	619a      	str	r2, [r3, #24]
    spi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <RF_SPI3_Init+0x5c>)
 800158a:	2208      	movs	r2, #8
 800158c:	61da      	str	r2, [r3, #28]
    spi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <RF_SPI3_Init+0x5c>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
    spi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <RF_SPI3_Init+0x5c>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
    spi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <RF_SPI3_Init+0x5c>)
 800159c:	2200      	movs	r2, #0
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
    spi3.Init.CRCPolynomial = 10;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <RF_SPI3_Init+0x5c>)
 80015a2:	220a      	movs	r2, #10
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_SPI_Init(&spi3);
 80015a6:	4802      	ldr	r0, [pc, #8]	; (80015b0 <RF_SPI3_Init+0x5c>)
 80015a8:	f004 fc00 	bl	8005dac <HAL_SPI_Init>
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000036c 	.word	0x2000036c
 80015b4:	40003c00 	.word	0x40003c00

080015b8 <SPSGRF_Init>:
* @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
* @param  None
* @retval None
*/
void SPSGRF_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b090      	sub	sp, #64	; 0x40
 80015bc:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 80015be:	f002 fff5 	bl	80045ac <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 80015c2:	f003 f91b 	bl	80047fc <RadioEnterShutdown>
  SpiritExitShutdown();
 80015c6:	f003 f925 	bl	8004814 <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 80015ca:	f001 faf1 	bl	8002bb0 <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 80015ce:	2300      	movs	r3, #0
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	e004      	b.n	80015de <SPSGRF_Init+0x26>
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	3301      	adds	r3, #1
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	71fb      	strb	r3, [r7, #7]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2bff      	cmp	r3, #255	; 0xff
 80015e4:	d1f6      	bne.n	80015d4 <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 80015e6:	f002 ffbf 	bl	8004568 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 80015ea:	4b47      	ldr	r3, [pc, #284]	; (8001708 <SPSGRF_Init+0x150>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d1ea      	bne.n	80015ce <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 80015f8:	2300      	movs	r3, #0
 80015fa:	84bb      	strh	r3, [r7, #36]	; 0x24
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <SPSGRF_Init+0x154>)
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 8001600:	4b43      	ldr	r3, [pc, #268]	; (8001710 <SPSGRF_Init+0x158>)
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  xRadioInit.lDatarate = DATARATE;
 8001610:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 8001616:	f644 6320 	movw	r3, #20000	; 0x4e20
 800161a:	63bb      	str	r3, [r7, #56]	; 0x38
  xRadioInit.lBandwidth = BANDWIDTH;
 800161c:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <SPSGRF_Init+0x158>)
 800161e:	63fb      	str	r3, [r7, #60]	; 0x3c
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 8001620:	483c      	ldr	r0, [pc, #240]	; (8001714 <SPSGRF_Init+0x15c>)
 8001622:	f002 ff2f 	bl	8004484 <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 8001626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fd7c 	bl	8003128 <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 8001630:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8001718 <SPSGRF_Init+0x160>
 8001634:	2007      	movs	r0, #7
 8001636:	f002 fdc1 	bl	80041bc <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 800163a:	2007      	movs	r0, #7
 800163c:	f002 fe14 	bl	8004268 <SpiritRadioSetPALevelMaxIndex>

  // Configure packet handler to use the Basic packet format
  xBasicInit.xPreambleLength = PREAMBLE_LENGTH;
 8001640:	2318      	movs	r3, #24
 8001642:	753b      	strb	r3, [r7, #20]
  xBasicInit.xSyncLength = SYNC_LENGTH;
 8001644:	2306      	movs	r3, #6
 8001646:	757b      	strb	r3, [r7, #21]
  xBasicInit.lSyncWords = SYNC_WORD;
 8001648:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 800164c:	61bb      	str	r3, [r7, #24]
  xBasicInit.xFixVarLength = LENGTH_TYPE;
 800164e:	2301      	movs	r3, #1
 8001650:	773b      	strb	r3, [r7, #28]
  xBasicInit.cPktLengthWidth = LENGTH_WIDTH;
 8001652:	2307      	movs	r3, #7
 8001654:	777b      	strb	r3, [r7, #29]
  xBasicInit.xCrcMode = CRC_MODE;
 8001656:	2320      	movs	r3, #32
 8001658:	77bb      	strb	r3, [r7, #30]
  xBasicInit.xControlLength = CONTROL_LENGTH;
 800165a:	2300      	movs	r3, #0
 800165c:	77fb      	strb	r3, [r7, #31]
  xBasicInit.xAddressField = EN_ADDRESS;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 3020 	strb.w	r3, [r7, #32]
  xBasicInit.xFec = EN_FEC;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  xBasicInit.xDataWhitening = EN_WHITENING;
 800166a:	2301      	movs	r3, #1
 800166c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  SpiritPktBasicInit(&xBasicInit);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4618      	mov	r0, r3
 8001676:	f001 fac1 	bl	8002bfc <SpiritPktBasicInit>

  // Configure destination address criteria for automatic packet filtering
  xBasicAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 800167a:	2301      	movs	r3, #1
 800167c:	733b      	strb	r3, [r7, #12]
  xBasicAddress.cMyAddress = MY_ADDRESS;
 800167e:	2344      	movs	r3, #68	; 0x44
 8001680:	737b      	strb	r3, [r7, #13]
  xBasicAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8001682:	2301      	movs	r3, #1
 8001684:	73bb      	strb	r3, [r7, #14]
  xBasicAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8001686:	23ee      	movs	r3, #238	; 0xee
 8001688:	73fb      	strb	r3, [r7, #15]
  xBasicAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 800168a:	2301      	movs	r3, #1
 800168c:	743b      	strb	r3, [r7, #16]
  xBasicAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 800168e:	23ff      	movs	r3, #255	; 0xff
 8001690:	747b      	strb	r3, [r7, #17]
  SpiritPktBasicAddressesInit(&xBasicAddress);
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	4618      	mov	r0, r3
 8001698:	f001 fb86 	bl	8002da8 <SpiritPktBasicAddressesInit>

  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 800169c:	2302      	movs	r3, #2
 800169e:	723b      	strb	r3, [r7, #8]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	727b      	strb	r3, [r7, #9]
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 80016a4:	2300      	movs	r3, #0
 80016a6:	72bb      	strb	r3, [r7, #10]
  SpiritGpioInit(&xGpioInit);
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 ff55 	bl	800255c <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 ff76 	bl	80025a4 <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 80016b8:	2101      	movs	r1, #1
 80016ba:	2004      	movs	r0, #4
 80016bc:	f000 ff9e 	bl	80025fc <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 80016c0:	2101      	movs	r1, #1
 80016c2:	2001      	movs	r0, #1
 80016c4:	f000 ff9a 	bl	80025fc <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 80016c8:	2101      	movs	r1, #1
 80016ca:	2002      	movs	r0, #2
 80016cc:	f000 ff96 	bl	80025fc <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 80016d0:	2101      	movs	r1, #1
 80016d2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80016d6:	f000 ff91 	bl	80025fc <SpiritIrq>
  SpiritIrqClearStatus();
 80016da:	f001 f827 	bl	800272c <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 80016de:	2000      	movs	r0, #0
 80016e0:	f001 fcce 	bl	8003080 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 80016e4:	2001      	movs	r0, #1
 80016e6:	f001 fc93 	bl	8003010 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80016ea:	f06f 0077 	mvn.w	r0, #119	; 0x77
 80016ee:	f001 fcfb 	bl	80030e8 <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(2000.0);
#else
  SET_INFINITE_RX_TIMEOUT();
 80016f2:	2000      	movs	r0, #0
 80016f4:	f002 fed6 	bl	80044a4 <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 80016f8:	2002      	movs	r0, #2
 80016fa:	f002 feed 	bl	80044d8 <SpiritTimerSetRxTimeoutStopCondition>
}
 80016fe:	bf00      	nop
 8001700:	3740      	adds	r7, #64	; 0x40
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000440 	.word	0x20000440
 800170c:	3689cac0 	.word	0x3689cac0
 8001710:	000186a0 	.word	0x000186a0
 8001714:	02faf080 	.word	0x02faf080
 8001718:	4139999a 	.word	0x4139999a

0800171c <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 8001728:	2072      	movs	r0, #114	; 0x72
 800172a:	f000 feff 	bl	800252c <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	2b60      	cmp	r3, #96	; 0x60
 8001732:	bf28      	it	cs
 8001734:	2360      	movcs	r3, #96	; 0x60
 8001736:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4618      	mov	r0, r3
 800173e:	f003 f815 	bl	800476c <RadioSpiWriteFifo>
  SpiritPktBasicSetPayloadLength(txLen);
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	b29b      	uxth	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fbbc 	bl	8002ec4 <SpiritPktBasicSetPayloadLength>
  SpiritCmdStrobeTx();
 800174c:	f001 f9c8 	bl	8002ae0 <SpiritManagementWaCmdStrobeTx>
 8001750:	2060      	movs	r0, #96	; 0x60
 8001752:	f000 feeb 	bl	800252c <SpiritCmdStrobeCommand>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_MspInit+0x44>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_MspInit+0x44>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6613      	str	r3, [r2, #96]	; 0x60
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_MspInit+0x44>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_MspInit+0x44>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <HAL_MspInit+0x44>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	6593      	str	r3, [r2, #88]	; 0x58
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_MspInit+0x44>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000

080017a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a17      	ldr	r2, [pc, #92]	; (8001824 <HAL_I2C_MspInit+0x7c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d128      	bne.n	800181c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_I2C_MspInit+0x80>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a16      	ldr	r2, [pc, #88]	; (8001828 <HAL_I2C_MspInit+0x80>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <HAL_I2C_MspInit+0x80>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80017e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e8:	2312      	movs	r3, #18
 80017ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017f4:	2304      	movs	r3, #4
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	480b      	ldr	r0, [pc, #44]	; (800182c <HAL_I2C_MspInit+0x84>)
 8001800:	f003 f9ee 	bl	8004be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <HAL_I2C_MspInit+0x80>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <HAL_I2C_MspInit+0x80>)
 800180a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800180e:	6593      	str	r3, [r2, #88]	; 0x58
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_I2C_MspInit+0x80>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40005800 	.word	0x40005800
 8001828:	40021000 	.word	0x40021000
 800182c:	48000400 	.word	0x48000400

08001830 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_I2C_MspDeInit+0x30>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10a      	bne.n	8001858 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_I2C_MspDeInit+0x34>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_I2C_MspDeInit+0x34>)
 8001848:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800184c:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 800184e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_I2C_MspDeInit+0x38>)
 8001854:	f003 fb6e 	bl	8004f34 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40005800 	.word	0x40005800
 8001864:	40021000 	.word	0x40021000
 8001868:	48000400 	.word	0x48000400

0800186c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <HAL_SPI_MspInit+0x7c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d128      	bne.n	80018e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <HAL_SPI_MspInit+0x80>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	4a16      	ldr	r2, [pc, #88]	; (80018ec <HAL_SPI_MspInit+0x80>)
 8001894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001898:	6593      	str	r3, [r2, #88]	; 0x58
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <HAL_SPI_MspInit+0x80>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_SPI_MspInit+0x80>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <HAL_SPI_MspInit+0x80>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_SPI_MspInit+0x80>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80018be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018d0:	2306      	movs	r3, #6
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <HAL_SPI_MspInit+0x84>)
 80018dc:	f003 f980 	bl	8004be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	; 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40003c00 	.word	0x40003c00
 80018ec:	40021000 	.word	0x40021000
 80018f0:	48000800 	.word	0x48000800

080018f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	; 0x30
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a2e      	ldr	r2, [pc, #184]	; (80019cc <HAL_UART_MspInit+0xd8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d128      	bne.n	8001968 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <HAL_UART_MspInit+0xdc>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191a:	4a2d      	ldr	r2, [pc, #180]	; (80019d0 <HAL_UART_MspInit+0xdc>)
 800191c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001920:	6613      	str	r3, [r2, #96]	; 0x60
 8001922:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_UART_MspInit+0xdc>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <HAL_UART_MspInit+0xdc>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4a27      	ldr	r2, [pc, #156]	; (80019d0 <HAL_UART_MspInit+0xdc>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <HAL_UART_MspInit+0xdc>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001946:	23c0      	movs	r3, #192	; 0xc0
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001956:	2307      	movs	r3, #7
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	481c      	ldr	r0, [pc, #112]	; (80019d4 <HAL_UART_MspInit+0xe0>)
 8001962:	f003 f93d 	bl	8004be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001966:	e02d      	b.n	80019c4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1a      	ldr	r2, [pc, #104]	; (80019d8 <HAL_UART_MspInit+0xe4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d128      	bne.n	80019c4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_UART_MspInit+0xdc>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	4a16      	ldr	r2, [pc, #88]	; (80019d0 <HAL_UART_MspInit+0xdc>)
 8001978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800197c:	6593      	str	r3, [r2, #88]	; 0x58
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_UART_MspInit+0xdc>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_UART_MspInit+0xdc>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	4a10      	ldr	r2, [pc, #64]	; (80019d0 <HAL_UART_MspInit+0xdc>)
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_UART_MspInit+0xdc>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80019a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019b4:	2307      	movs	r3, #7
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4807      	ldr	r0, [pc, #28]	; (80019dc <HAL_UART_MspInit+0xe8>)
 80019c0:	f003 f90e 	bl	8004be0 <HAL_GPIO_Init>
}
 80019c4:	bf00      	nop
 80019c6:	3730      	adds	r7, #48	; 0x30
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40021000 	.word	0x40021000
 80019d4:	48000400 	.word	0x48000400
 80019d8:	40004800 	.word	0x40004800
 80019dc:	48000c00 	.word	0x48000c00

080019e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f002 ff50 	bl	80048d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001a40:	2020      	movs	r0, #32
 8001a42:	f003 fb83 	bl	800514c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001a46:	2040      	movs	r0, #64	; 0x40
 8001a48:	f003 fb80 	bl	800514c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a4c:	2080      	movs	r0, #128	; 0x80
 8001a4e:	f003 fb7d 	bl	800514c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a56:	f003 fb79 	bl	800514c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001a62:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a66:	f003 fb71 	bl	800514c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001a6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a6e:	f003 fb6d 	bl	800514c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a76:	f003 fb69 	bl	800514c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001a7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a7e:	f003 fb65 	bl	800514c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001a82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a86:	f003 fb61 	bl	800514c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <_sbrk+0x50>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x16>
		heap_end = &end;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <_sbrk+0x50>)
 8001aa2:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <_sbrk+0x54>)
 8001aa4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <_sbrk+0x50>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <_sbrk+0x50>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	466a      	mov	r2, sp
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d907      	bls.n	8001aca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001aba:	f005 ff47 	bl	800794c <__errno>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	220c      	movs	r2, #12
 8001ac2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac8:	e006      	b.n	8001ad8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <_sbrk+0x50>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a03      	ldr	r2, [pc, #12]	; (8001ae0 <_sbrk+0x50>)
 8001ad4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200003e0 	.word	0x200003e0
 8001ae4:	200004f8 	.word	0x200004f8

08001ae8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <SystemInit+0x64>)
 8001aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af2:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <SystemInit+0x64>)
 8001af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <SystemInit+0x68>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a13      	ldr	r2, [pc, #76]	; (8001b50 <SystemInit+0x68>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <SystemInit+0x68>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <SystemInit+0x68>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <SystemInit+0x68>)
 8001b14:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b18:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <SystemInit+0x68>)
 8001b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <SystemInit+0x68>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <SystemInit+0x68>)
 8001b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <SystemInit+0x68>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <SystemInit+0x64>)
 8001b3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b3e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00
 8001b50:	40021000 	.word	0x40021000

08001b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b5a:	e003      	b.n	8001b64 <LoopCopyDataInit>

08001b5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b62:	3104      	adds	r1, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b64:	480b      	ldr	r0, [pc, #44]	; (8001b94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b6c:	d3f6      	bcc.n	8001b5c <CopyDataInit>
	ldr	r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b70:	e002      	b.n	8001b78 <LoopFillZerobss>

08001b72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b74:	f842 3b04 	str.w	r3, [r2], #4

08001b78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <LoopForever+0x16>)
	cmp	r2, r3
 8001b7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b7c:	d3f9      	bcc.n	8001b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b7e:	f7ff ffb3 	bl	8001ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f005 ffdf 	bl	8007b44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b86:	f7ff f9b1 	bl	8000eec <main>

08001b8a <LoopForever>:

LoopForever:
    b LoopForever
 8001b8a:	e7fe      	b.n	8001b8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b8c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b90:	0800b088 	.word	0x0800b088
	ldr	r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b98:	20000244 	.word	0x20000244
	ldr	r2, =_sbss
 8001b9c:	20000244 	.word	0x20000244
	ldr	r3, = _ebss
 8001ba0:	200004f8 	.word	0x200004f8

08001ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC1_2_IRQHandler>
	...

08001ba8 <BSP_LED_Init>:
  * @param  Led: LED to be configured. 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10b      	bne.n	8001bd0 <BSP_LED_Init+0x28>
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <BSP_LED_Init+0x58>)
 8001bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbc:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <BSP_LED_Init+0x58>)
 8001bbe:	f043 0302 	orr.w	r3, r3, #2
 8001bc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <BSP_LED_Init+0x58>)
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8001bd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bd4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bde:	2302      	movs	r3, #2
 8001be0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <BSP_LED_Init+0x5c>)
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	f107 020c 	add.w	r2, r7, #12
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 fff5 	bl	8004be0 <HAL_GPIO_Init>
}
 8001bf6:	bf00      	nop
 8001bf8:	3720      	adds	r7, #32
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000
 8001c04:	2000001c 	.word	0x2000001c

08001c08 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460a      	mov	r2, r1
 8001c12:	71fb      	strb	r3, [r7, #7]
 8001c14:	4613      	mov	r3, r2
 8001c16:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001c18:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <BSP_PB_Init+0xa0>)
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1c:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <BSP_PB_Init+0xa0>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c24:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <BSP_PB_Init+0xa0>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001c30:	79bb      	ldrb	r3, [r7, #6]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d112      	bne.n	8001c5c <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4a18      	ldr	r2, [pc, #96]	; (8001cac <BSP_PB_Init+0xa4>)
 8001c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c50:	f107 020c 	add.w	r2, r7, #12
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 ffc2 	bl	8004be0 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001c5c:	79bb      	ldrb	r3, [r7, #6]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d11e      	bne.n	8001ca0 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c66:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <BSP_PB_Init+0xa8>)
 8001c72:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <BSP_PB_Init+0xa4>)
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	f107 020c 	add.w	r2, r7, #12
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 ffac 	bl	8004be0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001c88:	2328      	movs	r3, #40	; 0x28
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	210f      	movs	r1, #15
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 ff60 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001c96:	2328      	movs	r3, #40	; 0x28
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 ff77 	bl	8004b8e <HAL_NVIC_EnableIRQ>
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	20000020 	.word	0x20000020
 8001cb0:	10110000 	.word	0x10110000

08001cb4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <I2Cx_MspInit+0xa8>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <I2Cx_MspInit+0xa8>)
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <I2Cx_MspInit+0xa8>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001cd4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cd8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001cda:	2312      	movs	r3, #18
 8001cdc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	481b      	ldr	r0, [pc, #108]	; (8001d60 <I2Cx_MspInit+0xac>)
 8001cf2:	f002 ff75 	bl	8004be0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4818      	ldr	r0, [pc, #96]	; (8001d60 <I2Cx_MspInit+0xac>)
 8001cfe:	f002 ff6f 	bl	8004be0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <I2Cx_MspInit+0xa8>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <I2Cx_MspInit+0xa8>)
 8001d08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <I2Cx_MspInit+0xa8>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <I2Cx_MspInit+0xa8>)
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1e:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <I2Cx_MspInit+0xa8>)
 8001d20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d24:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <I2Cx_MspInit+0xa8>)
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <I2Cx_MspInit+0xa8>)
 8001d2c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d30:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	210f      	movs	r1, #15
 8001d36:	2021      	movs	r0, #33	; 0x21
 8001d38:	f002 ff0d 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001d3c:	2021      	movs	r0, #33	; 0x21
 8001d3e:	f002 ff26 	bl	8004b8e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	210f      	movs	r1, #15
 8001d46:	2022      	movs	r0, #34	; 0x22
 8001d48:	f002 ff05 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001d4c:	2022      	movs	r0, #34	; 0x22
 8001d4e:	f002 ff1e 	bl	8004b8e <HAL_NVIC_EnableIRQ>
}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	; 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	48000400 	.word	0x48000400

08001d64 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <I2Cx_Init+0x54>)
 8001d70:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <I2Cx_Init+0x58>)
 8001d76:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff89 	bl	8001cb4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f003 f9ea 	bl	800517c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001da8:	2100      	movs	r1, #0
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f003 feee 	bl	8005b8c <HAL_I2CEx_ConfigAnalogFilter>
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40005800 	.word	0x40005800
 8001dbc:	00702681 	.word	0x00702681

08001dc0 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af04      	add	r7, sp, #16
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	4608      	mov	r0, r1
 8001dca:	4611      	mov	r1, r2
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	72fb      	strb	r3, [r7, #11]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	813b      	strh	r3, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001dde:	7afb      	ldrb	r3, [r7, #11]
 8001de0:	b299      	uxth	r1, r3
 8001de2:	88f8      	ldrh	r0, [r7, #6]
 8001de4:	893a      	ldrh	r2, [r7, #8]
 8001de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dea:	9302      	str	r3, [sp, #8]
 8001dec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	4603      	mov	r3, r0
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f003 fb92 	bl	8005520 <HAL_I2C_Mem_Read>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d004      	beq.n	8001e10 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001e06:	7afb      	ldrb	r3, [r7, #11]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f832 	bl	8001e74 <I2Cx_Error>
  }
  return status;
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b08a      	sub	sp, #40	; 0x28
 8001e1e:	af04      	add	r7, sp, #16
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	4608      	mov	r0, r1
 8001e24:	4611      	mov	r1, r2
 8001e26:	461a      	mov	r2, r3
 8001e28:	4603      	mov	r3, r0
 8001e2a:	72fb      	strb	r3, [r7, #11]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	813b      	strh	r3, [r7, #8]
 8001e30:	4613      	mov	r3, r2
 8001e32:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e38:	7afb      	ldrb	r3, [r7, #11]
 8001e3a:	b299      	uxth	r1, r3
 8001e3c:	88f8      	ldrh	r0, [r7, #6]
 8001e3e:	893a      	ldrh	r2, [r7, #8]
 8001e40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e44:	9302      	str	r3, [sp, #8]
 8001e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	4603      	mov	r3, r0
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f003 fa51 	bl	80052f8 <HAL_I2C_Mem_Write>
 8001e56:	4603      	mov	r3, r0
 8001e58:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001e60:	7afb      	ldrb	r3, [r7, #11]
 8001e62:	4619      	mov	r1, r3
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 f805 	bl	8001e74 <I2Cx_Error>
  }
  return status;
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f003 fa0a 	bl	800529a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ff6c 	bl	8001d64 <I2Cx_Init>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <SENSOR_IO_Init+0x10>)
 8001e9a:	f7ff ff63 	bl	8001d64 <I2Cx_Init>
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200003e4 	.word	0x200003e4

08001ea8 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	71bb      	strb	r3, [r7, #6]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001eba:	79bb      	ldrb	r3, [r7, #6]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	79f9      	ldrb	r1, [r7, #7]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	1d7b      	adds	r3, r7, #5
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2301      	movs	r3, #1
 8001eca:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <SENSOR_IO_Write+0x30>)
 8001ecc:	f7ff ffa5 	bl	8001e1a <I2Cx_WriteMultiple>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200003e4 	.word	0x200003e4

08001edc <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001ef0:	79bb      	ldrb	r3, [r7, #6]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	79f9      	ldrb	r1, [r7, #7]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	f107 030f 	add.w	r3, r7, #15
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	2301      	movs	r3, #1
 8001f02:	4804      	ldr	r0, [pc, #16]	; (8001f14 <SENSOR_IO_Read+0x38>)
 8001f04:	f7ff ff5c 	bl	8001dc0 <I2Cx_ReadMultiple>

  return read_value;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200003e4 	.word	0x200003e4

08001f18 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	603a      	str	r2, [r7, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	460b      	mov	r3, r1
 8001f28:	71bb      	strb	r3, [r7, #6]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001f2e:	79bb      	ldrb	r3, [r7, #6]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	79f9      	ldrb	r1, [r7, #7]
 8001f34:	88bb      	ldrh	r3, [r7, #4]
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	4804      	ldr	r0, [pc, #16]	; (8001f50 <SENSOR_IO_ReadMultiple+0x38>)
 8001f40:	f7ff ff3e 	bl	8001dc0 <I2Cx_ReadMultiple>
 8001f44:	4603      	mov	r3, r0
 8001f46:	b29b      	uxth	r3, r3
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200003e4 	.word	0x200003e4

08001f54 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <BSP_MAGNETO_Init+0x50>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	4798      	blx	r3
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b3d      	cmp	r3, #61	; 0x3d
 8001f68:	d002      	beq.n	8001f70 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	71fb      	strb	r3, [r7, #7]
 8001f6e:	e013      	b.n	8001f98 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <BSP_MAGNETO_Init+0x54>)
 8001f72:	4a0c      	ldr	r2, [pc, #48]	; (8001fa4 <BSP_MAGNETO_Init+0x50>)
 8001f74:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001f76:	2358      	movs	r3, #88	; 0x58
 8001f78:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001f82:	2308      	movs	r3, #8
 8001f84:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001f86:	2340      	movs	r3, #64	; 0x40
 8001f88:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <BSP_MAGNETO_Init+0x54>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	463a      	mov	r2, r7
 8001f92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f96:	4798      	blx	r3
  } 

  return ret;  
 8001f98:	79fb      	ldrb	r3, [r7, #7]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000024 	.word	0x20000024
 8001fa8:	20000430 	.word	0x20000430

08001fac <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <BSP_PSENSOR_Init+0x38>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	20ba      	movs	r0, #186	; 0xba
 8001fb8:	4798      	blx	r3
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2bb1      	cmp	r3, #177	; 0xb1
 8001fbe:	d002      	beq.n	8001fc6 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	e009      	b.n	8001fda <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <BSP_PSENSOR_Init+0x3c>)
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <BSP_PSENSOR_Init+0x38>)
 8001fca:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <BSP_PSENSOR_Init+0x3c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	20ba      	movs	r0, #186	; 0xba
 8001fd4:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001fda:	687b      	ldr	r3, [r7, #4]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000058 	.word	0x20000058
 8001fe8:	20000434 	.word	0x20000434

08001fec <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001ff8:	783b      	ldrb	r3, [r7, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	203c      	movs	r0, #60	; 0x3c
 8002000:	f7ff ff52 	bl	8001ea8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002004:	787b      	ldrb	r3, [r7, #1]
 8002006:	461a      	mov	r2, r3
 8002008:	2121      	movs	r1, #33	; 0x21
 800200a:	203c      	movs	r0, #60	; 0x3c
 800200c:	f7ff ff4c 	bl	8001ea8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002010:	78bb      	ldrb	r3, [r7, #2]
 8002012:	461a      	mov	r2, r3
 8002014:	2122      	movs	r1, #34	; 0x22
 8002016:	203c      	movs	r0, #60	; 0x3c
 8002018:	f7ff ff46 	bl	8001ea8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	461a      	mov	r2, r3
 8002020:	2123      	movs	r1, #35	; 0x23
 8002022:	203c      	movs	r0, #60	; 0x3c
 8002024:	f7ff ff40 	bl	8001ea8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002028:	793b      	ldrb	r3, [r7, #4]
 800202a:	461a      	mov	r2, r3
 800202c:	2124      	movs	r1, #36	; 0x24
 800202e:	203c      	movs	r0, #60	; 0x3c
 8002030:	f7ff ff3a 	bl	8001ea8 <SENSOR_IO_Write>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002042:	2300      	movs	r3, #0
 8002044:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002046:	2122      	movs	r1, #34	; 0x22
 8002048:	203c      	movs	r0, #60	; 0x3c
 800204a:	f7ff ff47 	bl	8001edc <SENSOR_IO_Read>
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f023 0303 	bic.w	r3, r3, #3
 8002058:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f043 0303 	orr.w	r3, r3, #3
 8002060:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	461a      	mov	r2, r3
 8002066:	2122      	movs	r1, #34	; 0x22
 8002068:	203c      	movs	r0, #60	; 0x3c
 800206a:	f7ff ff1d 	bl	8001ea8 <SENSOR_IO_Write>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800207a:	f7ff ff0b 	bl	8001e94 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800207e:	210f      	movs	r1, #15
 8002080:	203c      	movs	r0, #60	; 0x3c
 8002082:	f7ff ff2b 	bl	8001edc <SENSOR_IO_Read>
 8002086:	4603      	mov	r3, r0
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}

0800208c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800209a:	2122      	movs	r1, #34	; 0x22
 800209c:	203c      	movs	r0, #60	; 0x3c
 800209e:	f7ff ff1d 	bl	8001edc <SENSOR_IO_Read>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	f023 0320 	bic.w	r3, r3, #32
 80020ac:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	f043 0320 	orr.w	r3, r3, #32
 80020ba:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	461a      	mov	r2, r3
 80020c0:	2122      	movs	r1, #34	; 0x22
 80020c2:	203c      	movs	r0, #60	; 0x3c
 80020c4:	f7ff fef0 	bl	8001ea8 <SENSOR_IO_Write>
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80020e6:	2121      	movs	r1, #33	; 0x21
 80020e8:	203c      	movs	r0, #60	; 0x3c
 80020ea:	f7ff fef7 	bl	8001edc <SENSOR_IO_Read>
 80020ee:	4603      	mov	r3, r0
 80020f0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80020f2:	f107 0208 	add.w	r2, r7, #8
 80020f6:	2306      	movs	r3, #6
 80020f8:	21a8      	movs	r1, #168	; 0xa8
 80020fa:	203c      	movs	r0, #60	; 0x3c
 80020fc:	f7ff ff0c 	bl	8001f18 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002100:	2300      	movs	r3, #0
 8002102:	77fb      	strb	r3, [r7, #31]
 8002104:	e01c      	b.n	8002140 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002106:	7ffb      	ldrb	r3, [r7, #31]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	3301      	adds	r3, #1
 800210c:	3320      	adds	r3, #32
 800210e:	443b      	add	r3, r7
 8002110:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002114:	b29b      	uxth	r3, r3
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	b29a      	uxth	r2, r3
 800211a:	7ffb      	ldrb	r3, [r7, #31]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	3320      	adds	r3, #32
 8002120:	443b      	add	r3, r7
 8002122:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002126:	b29b      	uxth	r3, r3
 8002128:	4413      	add	r3, r2
 800212a:	b29a      	uxth	r2, r3
 800212c:	7ffb      	ldrb	r3, [r7, #31]
 800212e:	b212      	sxth	r2, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	3320      	adds	r3, #32
 8002134:	443b      	add	r3, r7
 8002136:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800213a:	7ffb      	ldrb	r3, [r7, #31]
 800213c:	3301      	adds	r3, #1
 800213e:	77fb      	strb	r3, [r7, #31]
 8002140:	7ffb      	ldrb	r3, [r7, #31]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d9df      	bls.n	8002106 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002146:	7dfb      	ldrb	r3, [r7, #23]
 8002148:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800214c:	2b60      	cmp	r3, #96	; 0x60
 800214e:	d013      	beq.n	8002178 <LIS3MDL_MagReadXYZ+0xa8>
 8002150:	2b60      	cmp	r3, #96	; 0x60
 8002152:	dc14      	bgt.n	800217e <LIS3MDL_MagReadXYZ+0xae>
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d00c      	beq.n	8002172 <LIS3MDL_MagReadXYZ+0xa2>
 8002158:	2b40      	cmp	r3, #64	; 0x40
 800215a:	dc10      	bgt.n	800217e <LIS3MDL_MagReadXYZ+0xae>
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <LIS3MDL_MagReadXYZ+0x96>
 8002160:	2b20      	cmp	r3, #32
 8002162:	d003      	beq.n	800216c <LIS3MDL_MagReadXYZ+0x9c>
 8002164:	e00b      	b.n	800217e <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <LIS3MDL_MagReadXYZ+0xfc>)
 8002168:	61bb      	str	r3, [r7, #24]
    break;
 800216a:	e008      	b.n	800217e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <LIS3MDL_MagReadXYZ+0x100>)
 800216e:	61bb      	str	r3, [r7, #24]
    break;
 8002170:	e005      	b.n	800217e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <LIS3MDL_MagReadXYZ+0x104>)
 8002174:	61bb      	str	r3, [r7, #24]
    break;
 8002176:	e002      	b.n	800217e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <LIS3MDL_MagReadXYZ+0x108>)
 800217a:	61bb      	str	r3, [r7, #24]
    break;    
 800217c:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800217e:	2300      	movs	r3, #0
 8002180:	77fb      	strb	r3, [r7, #31]
 8002182:	e01a      	b.n	80021ba <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002184:	7ffb      	ldrb	r3, [r7, #31]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	3320      	adds	r3, #32
 800218a:	443b      	add	r3, r7
 800218c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002190:	ee07 3a90 	vmov	s15, r3
 8002194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002198:	edd7 7a06 	vldr	s15, [r7, #24]
 800219c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a0:	7ffb      	ldrb	r3, [r7, #31]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ac:	ee17 2a90 	vmov	r2, s15
 80021b0:	b212      	sxth	r2, r2
 80021b2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80021b4:	7ffb      	ldrb	r3, [r7, #31]
 80021b6:	3301      	adds	r3, #1
 80021b8:	77fb      	strb	r3, [r7, #31]
 80021ba:	7ffb      	ldrb	r3, [r7, #31]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d9e1      	bls.n	8002184 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	3e0f5c29 	.word	0x3e0f5c29
 80021d0:	3e947ae1 	.word	0x3e947ae1
 80021d4:	3edc28f6 	.word	0x3edc28f6
 80021d8:	3f147ae1 	.word	0x3f147ae1

080021dc <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 f879 	bl	80022e0 <LPS22HB_Init>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002204:	f7ff fe46 	bl	8001e94 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	210f      	movs	r1, #15
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fe64 	bl	8001edc <SENSOR_IO_Read>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002232:	2300      	movs	r3, #0
 8002234:	74fb      	strb	r3, [r7, #19]
 8002236:	e013      	b.n	8002260 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	3328      	adds	r3, #40	; 0x28
 8002240:	b2db      	uxtb	r3, r3
 8002242:	7cfc      	ldrb	r4, [r7, #19]
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f7ff fe48 	bl	8001edc <SENSOR_IO_Read>
 800224c:	4603      	mov	r3, r0
 800224e:	461a      	mov	r2, r3
 8002250:	f104 0318 	add.w	r3, r4, #24
 8002254:	443b      	add	r3, r7
 8002256:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	3301      	adds	r3, #1
 800225e:	74fb      	strb	r3, [r7, #19]
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d9e8      	bls.n	8002238 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002266:	2300      	movs	r3, #0
 8002268:	74fb      	strb	r3, [r7, #19]
 800226a:	e00f      	b.n	800228c <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	3318      	adds	r3, #24
 8002270:	443b      	add	r3, r7
 8002272:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002276:	461a      	mov	r2, r3
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	3301      	adds	r3, #1
 800228a:	74fb      	strb	r3, [r7, #19]
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d9ec      	bls.n	800226c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022a2:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2264      	movs	r2, #100	; 0x64
 80022ac:	fb02 f303 	mul.w	r3, r2, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da01      	bge.n	80022b8 <LPS22HB_P_ReadPressure+0x94>
 80022b4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80022b8:	131b      	asrs	r3, r3, #12
 80022ba:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80022dc <LPS22HB_P_ReadPressure+0xb8>
 80022ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022ce:	eef0 7a66 	vmov.f32	s15, s13
}
 80022d2:	eeb0 0a67 	vmov.f32	s0, s15
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}
 80022dc:	42c80000 	.word	0x42c80000

080022e0 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	211a      	movs	r1, #26
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fdf3 	bl	8001edc <SENSOR_IO_Read>
 80022f6:	4603      	mov	r3, r0
 80022f8:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	211a      	movs	r1, #26
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fdc8 	bl	8001ea8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2110      	movs	r1, #16
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fddc 	bl	8001edc <SENSOR_IO_Read>
 8002324:	4603      	mov	r3, r0
 8002326:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002336:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	f023 0302 	bic.w	r3, r3, #2
 800233e:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	f043 0302 	orr.w	r3, r3, #2
 8002346:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	2110      	movs	r1, #16
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fda9 	bl	8001ea8 <SENSOR_IO_Write>
}  
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 800236a:	f107 030f 	add.w	r3, r7, #15
 800236e:	461a      	mov	r2, r3
 8002370:	2101      	movs	r1, #1
 8002372:	2050      	movs	r0, #80	; 0x50
 8002374:	f002 f96e 	bl	8004654 <RadioSpiReadRegisters>
 8002378:	4602      	mov	r2, r0
 800237a:	4b14      	ldr	r3, [pc, #80]	; (80023cc <SpiritCalibrationVco+0x6c>)
 800237c:	b212      	sxth	r2, r2
 800237e:	4611      	mov	r1, r2
 8002380:	7019      	strb	r1, [r3, #0]
 8002382:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002386:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d105      	bne.n	800239a <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	b2db      	uxtb	r3, r3
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e004      	b.n	80023a4 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	f023 0302 	bic.w	r3, r3, #2
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 80023a4:	f107 030f 	add.w	r3, r7, #15
 80023a8:	461a      	mov	r2, r3
 80023aa:	2101      	movs	r1, #1
 80023ac:	2050      	movs	r0, #80	; 0x50
 80023ae:	f002 f905 	bl	80045bc <RadioSpiWriteRegisters>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SpiritCalibrationVco+0x6c>)
 80023b6:	b212      	sxth	r2, r2
 80023b8:	4611      	mov	r1, r2
 80023ba:	7019      	strb	r1, [r3, #0]
 80023bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023c0:	705a      	strb	r2, [r3, #1]

}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000440 	.word	0x20000440

080023d0 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	461a      	mov	r2, r3
 80023da:	2101      	movs	r1, #1
 80023dc:	20e5      	movs	r0, #229	; 0xe5
 80023de:	f002 f939 	bl	8004654 <RadioSpiReadRegisters>
 80023e2:	4602      	mov	r2, r0
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <SpiritCalibrationGetVcoCalData+0x34>)
 80023e6:	b212      	sxth	r2, r2
 80023e8:	4611      	mov	r1, r2
 80023ea:	7019      	strb	r1, [r3, #0]
 80023ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023f0:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023f8:	b2db      	uxtb	r3, r3

}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000440 	.word	0x20000440

08002408 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8002412:	f107 030f 	add.w	r3, r7, #15
 8002416:	461a      	mov	r2, r3
 8002418:	2101      	movs	r1, #1
 800241a:	206e      	movs	r0, #110	; 0x6e
 800241c:	f002 f91a 	bl	8004654 <RadioSpiReadRegisters>
 8002420:	4602      	mov	r2, r0
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8002424:	b212      	sxth	r2, r2
 8002426:	4611      	mov	r1, r2
 8002428:	7019      	strb	r1, [r3, #0]
 800242a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800242e:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002436:	b2db      	uxtb	r3, r3
 8002438:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	4313      	orrs	r3, r2
 8002440:	b2db      	uxtb	r3, r3
 8002442:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8002444:	f107 030f 	add.w	r3, r7, #15
 8002448:	461a      	mov	r2, r3
 800244a:	2101      	movs	r1, #1
 800244c:	206e      	movs	r0, #110	; 0x6e
 800244e:	f002 f8b5 	bl	80045bc <RadioSpiWriteRegisters>
 8002452:	4602      	mov	r2, r0
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8002456:	b212      	sxth	r2, r2
 8002458:	4611      	mov	r1, r2
 800245a:	7019      	strb	r1, [r3, #0]
 800245c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002460:	705a      	strb	r2, [r3, #1]

}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000440 	.word	0x20000440

08002470 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 800247a:	f107 030f 	add.w	r3, r7, #15
 800247e:	461a      	mov	r2, r3
 8002480:	2101      	movs	r1, #1
 8002482:	206f      	movs	r0, #111	; 0x6f
 8002484:	f002 f8e6 	bl	8004654 <RadioSpiReadRegisters>
 8002488:	4602      	mov	r2, r0
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 800248c:	b212      	sxth	r2, r2
 800248e:	4611      	mov	r1, r2
 8002490:	7019      	strb	r1, [r3, #0]
 8002492:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002496:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 80024ac:	f107 030f 	add.w	r3, r7, #15
 80024b0:	461a      	mov	r2, r3
 80024b2:	2101      	movs	r1, #1
 80024b4:	206f      	movs	r0, #111	; 0x6f
 80024b6:	f002 f881 	bl	80045bc <RadioSpiWriteRegisters>
 80024ba:	4602      	mov	r2, r0
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 80024be:	b212      	sxth	r2, r2
 80024c0:	4611      	mov	r1, r2
 80024c2:	7019      	strb	r1, [r3, #0]
 80024c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024c8:	705a      	strb	r2, [r3, #1]

}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000440 	.word	0x20000440

080024d8 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80024e2:	f107 030f 	add.w	r3, r7, #15
 80024e6:	461a      	mov	r2, r3
 80024e8:	2101      	movs	r1, #1
 80024ea:	209e      	movs	r0, #158	; 0x9e
 80024ec:	f002 f8b2 	bl	8004654 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	f023 0306 	bic.w	r3, r3, #6
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	f043 0302 	orr.w	r3, r3, #2
 8002506:	b2db      	uxtb	r3, r3
 8002508:	73fb      	strb	r3, [r7, #15]
 800250a:	e004      	b.n	8002516 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	b2db      	uxtb	r3, r3
 8002514:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8002516:	f107 030f 	add.w	r3, r7, #15
 800251a:	461a      	mov	r2, r3
 800251c:	2101      	movs	r1, #1
 800251e:	209e      	movs	r0, #158	; 0x9e
 8002520:	f002 f84c 	bl	80045bc <RadioSpiWriteRegisters>
  
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	4618      	mov	r0, r3
 800253a:	f002 f8d7 	bl	80046ec <RadioSpiCommandStrobes>
 800253e:	4602      	mov	r2, r0
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <SpiritCmdStrobeCommand+0x2c>)
 8002542:	b212      	sxth	r2, r2
 8002544:	4611      	mov	r1, r2
 8002546:	7019      	strb	r1, [r3, #0]
 8002548:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800254c:	705a      	strb	r2, [r3, #1]
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000440 	.word	0x20000440

0800255c <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	785a      	ldrb	r2, [r3, #1]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	789b      	ldrb	r3, [r3, #2]
 8002570:	4313      	orrs	r3, r2
 8002572:	b2db      	uxtb	r3, r3
 8002574:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	f107 020f 	add.w	r2, r7, #15
 800257e:	2101      	movs	r1, #1
 8002580:	4618      	mov	r0, r3
 8002582:	f002 f81b 	bl	80045bc <RadioSpiWriteRegisters>
 8002586:	4602      	mov	r2, r0
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <SpiritGpioInit+0x44>)
 800258a:	b212      	sxth	r2, r2
 800258c:	4611      	mov	r1, r2
 800258e:	7019      	strb	r1, [r3, #0]
 8002590:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002594:	705a      	strb	r2, [r3, #1]

}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000440 	.word	0x20000440

080025a4 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00c      	beq.n	80025d0 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	2204      	movs	r2, #4
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f005 faf5 	bl	8007bae <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80025d0:	f107 030c 	add.w	r3, r7, #12
 80025d4:	461a      	mov	r2, r3
 80025d6:	2104      	movs	r1, #4
 80025d8:	2090      	movs	r0, #144	; 0x90
 80025da:	f001 ffef 	bl	80045bc <RadioSpiWriteRegisters>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <SpiritIrqDeInit+0x54>)
 80025e2:	b212      	sxth	r2, r2
 80025e4:	4611      	mov	r1, r2
 80025e6:	7019      	strb	r1, [r3, #0]
 80025e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025ec:	705a      	strb	r2, [r3, #1]
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000440 	.word	0x20000440

080025fc <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	461a      	mov	r2, r3
 8002612:	2104      	movs	r1, #4
 8002614:	2090      	movs	r0, #144	; 0x90
 8002616:	f002 f81d 	bl	8004654 <RadioSpiReadRegisters>
 800261a:	4602      	mov	r2, r0
 800261c:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <SpiritIrq+0xc8>)
 800261e:	b212      	sxth	r2, r2
 8002620:	4611      	mov	r1, r2
 8002622:	7019      	strb	r1, [r3, #0]
 8002624:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002628:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 800262a:	2300      	movs	r3, #0
 800262c:	74fb      	strb	r3, [r7, #19]
 800262e:	e011      	b.n	8002654 <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	3318      	adds	r3, #24
 8002634:	443b      	add	r3, r7
 8002636:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800263a:	461a      	mov	r2, r3
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	f1c3 0303 	rsb	r3, r3, #3
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4413      	add	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	3301      	adds	r3, #1
 8002652:	74fb      	strb	r3, [r7, #19]
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b03      	cmp	r3, #3
 8002658:	d9ea      	bls.n	8002630 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	43db      	mvns	r3, r3
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4013      	ands	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	e003      	b.n	8002674 <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8002674:	2300      	movs	r3, #0
 8002676:	74bb      	strb	r3, [r7, #18]
 8002678:	e00e      	b.n	8002698 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 800267a:	7cbb      	ldrb	r3, [r7, #18]
 800267c:	f1c3 0303 	rsb	r3, r3, #3
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	40da      	lsrs	r2, r3
 8002686:	7cbb      	ldrb	r3, [r7, #18]
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	3318      	adds	r3, #24
 800268c:	443b      	add	r3, r7
 800268e:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8002692:	7cbb      	ldrb	r3, [r7, #18]
 8002694:	3301      	adds	r3, #1
 8002696:	74bb      	strb	r3, [r7, #18]
 8002698:	7cbb      	ldrb	r3, [r7, #18]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d9ed      	bls.n	800267a <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800269e:	f107 030c 	add.w	r3, r7, #12
 80026a2:	461a      	mov	r2, r3
 80026a4:	2104      	movs	r1, #4
 80026a6:	2090      	movs	r0, #144	; 0x90
 80026a8:	f001 ff88 	bl	80045bc <RadioSpiWriteRegisters>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <SpiritIrq+0xc8>)
 80026b0:	b212      	sxth	r2, r2
 80026b2:	4611      	mov	r1, r2
 80026b4:	7019      	strb	r1, [r3, #0]
 80026b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026ba:	705a      	strb	r2, [r3, #1]

}
 80026bc:	bf00      	nop
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000440 	.word	0x20000440

080026c8 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 80026d4:	f107 030c 	add.w	r3, r7, #12
 80026d8:	461a      	mov	r2, r3
 80026da:	2104      	movs	r1, #4
 80026dc:	20fa      	movs	r0, #250	; 0xfa
 80026de:	f001 ffb9 	bl	8004654 <RadioSpiReadRegisters>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4b10      	ldr	r3, [pc, #64]	; (8002728 <SpiritIrqGetStatus+0x60>)
 80026e6:	b212      	sxth	r2, r2
 80026e8:	4611      	mov	r1, r2
 80026ea:	7019      	strb	r1, [r3, #0]
 80026ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026f0:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	74fb      	strb	r3, [r7, #19]
 80026f6:	e00e      	b.n	8002716 <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	f1c3 0303 	rsb	r3, r3, #3
 80026fe:	3318      	adds	r3, #24
 8002700:	443b      	add	r3, r7
 8002702:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3301      	adds	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	3301      	adds	r3, #1
 8002714:	74fb      	strb	r3, [r7, #19]
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d9ed      	bls.n	80026f8 <SpiritIrqGetStatus+0x30>
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000440 	.word	0x20000440

0800272c <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	461a      	mov	r2, r3
 8002736:	2104      	movs	r1, #4
 8002738:	20fa      	movs	r0, #250	; 0xfa
 800273a:	f001 ff8b 	bl	8004654 <RadioSpiReadRegisters>
 800273e:	4602      	mov	r2, r0
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SpiritIrqClearStatus+0x2c>)
 8002742:	b212      	sxth	r2, r2
 8002744:	4611      	mov	r1, r2
 8002746:	7019      	strb	r1, [r3, #0]
 8002748:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800274c:	705a      	strb	r2, [r3, #1]

}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000440 	.word	0x20000440

0800275c <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 800275c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002760:	b08a      	sub	sp, #40	; 0x28
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a70      	ldr	r2, [pc, #448]	; (800292c <SpiritManagementSetFrequencyBase+0x1d0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d307      	bcc.n	800277e <SpiritManagementSetFrequencyBase+0x22>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a6f      	ldr	r2, [pc, #444]	; (8002930 <SpiritManagementSetFrequencyBase+0x1d4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d803      	bhi.n	800277e <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8002776:	2300      	movs	r3, #0
 8002778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800277c:	e01a      	b.n	80027b4 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a6c      	ldr	r2, [pc, #432]	; (8002934 <SpiritManagementSetFrequencyBase+0x1d8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d907      	bls.n	8002796 <SpiritManagementSetFrequencyBase+0x3a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a6b      	ldr	r2, [pc, #428]	; (8002938 <SpiritManagementSetFrequencyBase+0x1dc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d803      	bhi.n	8002796 <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002794:	e00e      	b.n	80027b4 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a68      	ldr	r2, [pc, #416]	; (800293c <SpiritManagementSetFrequencyBase+0x1e0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d907      	bls.n	80027ae <SpiritManagementSetFrequencyBase+0x52>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a67      	ldr	r2, [pc, #412]	; (8002940 <SpiritManagementSetFrequencyBase+0x1e4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d803      	bhi.n	80027ae <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 80027a6:	2302      	movs	r3, #2
 80027a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80027ac:	e002      	b.n	80027b4 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 80027ae:	2303      	movs	r3, #3
 80027b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80027b4:	f000 fff6 	bl	80037a4 <SpiritRadioGetFrequencyOffset>
 80027b8:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80027ba:	f000 ffd3 	bl	8003764 <SpiritRadioGetChannelSpace>
 80027be:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80027c0:	f000 ffb8 	bl	8003734 <SpiritRadioGetChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80027c8:	6a3a      	ldr	r2, [r7, #32]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	441a      	add	r2, r3
 80027ce:	7efb      	ldrb	r3, [r7, #27]
 80027d0:	69f9      	ldr	r1, [r7, #28]
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80027da:	f001 fdd3 	bl	8004384 <SpiritRadioGetRefDiv>
 80027de:	4603      	mov	r3, r0
 80027e0:	3301      	adds	r3, #1
 80027e2:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 80027e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d83a      	bhi.n	8002862 <SpiritManagementSetFrequencyBase+0x106>
 80027ec:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <SpiritManagementSetFrequencyBase+0x98>)
 80027ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f2:	bf00      	nop
 80027f4:	0800284d 	.word	0x0800284d
 80027f8:	08002835 	.word	0x08002835
 80027fc:	0800281d 	.word	0x0800281d
 8002800:	08002805 	.word	0x08002805
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	4a4f      	ldr	r2, [pc, #316]	; (8002944 <SpiritManagementSetFrequencyBase+0x1e8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d803      	bhi.n	8002814 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800280c:	2000      	movs	r0, #0
 800280e:	f7ff fe63 	bl	80024d8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002812:	e026      	b.n	8002862 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002814:	2001      	movs	r0, #1
 8002816:	f7ff fe5f 	bl	80024d8 <SpiritCalibrationSelectVco>
    break;
 800281a:	e022      	b.n	8002862 <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	4a4a      	ldr	r2, [pc, #296]	; (8002948 <SpiritManagementSetFrequencyBase+0x1ec>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d803      	bhi.n	800282c <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002824:	2000      	movs	r0, #0
 8002826:	f7ff fe57 	bl	80024d8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800282a:	e01a      	b.n	8002862 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 800282c:	2001      	movs	r0, #1
 800282e:	f7ff fe53 	bl	80024d8 <SpiritCalibrationSelectVco>
    break;
 8002832:	e016      	b.n	8002862 <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	4a45      	ldr	r2, [pc, #276]	; (800294c <SpiritManagementSetFrequencyBase+0x1f0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d803      	bhi.n	8002844 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800283c:	2000      	movs	r0, #0
 800283e:	f7ff fe4b 	bl	80024d8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002842:	e00e      	b.n	8002862 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002844:	2001      	movs	r0, #1
 8002846:	f7ff fe47 	bl	80024d8 <SpiritCalibrationSelectVco>
    break;
 800284a:	e00a      	b.n	8002862 <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4a40      	ldr	r2, [pc, #256]	; (8002950 <SpiritManagementSetFrequencyBase+0x1f4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d803      	bhi.n	800285c <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002854:	2000      	movs	r0, #0
 8002856:	f7ff fe3f 	bl	80024d8 <SpiritCalibrationSelectVco>
 800285a:	e002      	b.n	8002862 <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 800285c:	2001      	movs	r0, #1
 800285e:	f7ff fe3b 	bl	80024d8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f000 fe7e 	bl	8003564 <SpiritRadioSearchWCP>
 8002868:	4603      	mov	r3, r0
 800286a:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7fd fe49 	bl	8000504 <__aeabi_ui2d>
 8002872:	4604      	mov	r4, r0
 8002874:	460d      	mov	r5, r1
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800287c:	4935      	ldr	r1, [pc, #212]	; (8002954 <SpiritManagementSetFrequencyBase+0x1f8>)
 800287e:	5c8a      	ldrb	r2, [r1, r2]
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	049b      	lsls	r3, r3, #18
 8002886:	4618      	mov	r0, r3
 8002888:	f7fd fe4c 	bl	8000524 <__aeabi_i2d>
 800288c:	4680      	mov	r8, r0
 800288e:	4689      	mov	r9, r1
 8002890:	f001 fdec 	bl	800446c <SpiritRadioGetXtalFrequency>
 8002894:	4603      	mov	r3, r0
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe34 	bl	8000504 <__aeabi_ui2d>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4640      	mov	r0, r8
 80028a2:	4649      	mov	r1, r9
 80028a4:	f7fd ffd2 	bl	800084c <__aeabi_ddiv>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4620      	mov	r0, r4
 80028ae:	4629      	mov	r1, r5
 80028b0:	f7fd fea2 	bl	80005f8 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	f7fe f974 	bl	8000ba8 <__aeabi_d2uiz>
 80028c0:	4603      	mov	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	0d5b      	lsrs	r3, r3, #21
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	7cbb      	ldrb	r3, [r7, #18]
 80028d2:	015b      	lsls	r3, r3, #5
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	4313      	orrs	r3, r2
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	0b5b      	lsrs	r3, r3, #13
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f8:	4917      	ldr	r1, [pc, #92]	; (8002958 <SpiritManagementSetFrequencyBase+0x1fc>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8002902:	f107 0308 	add.w	r3, r7, #8
 8002906:	461a      	mov	r2, r3
 8002908:	2104      	movs	r1, #4
 800290a:	2008      	movs	r0, #8
 800290c:	f001 fe56 	bl	80045bc <RadioSpiWriteRegisters>
 8002910:	4602      	mov	r2, r0
 8002912:	4b12      	ldr	r3, [pc, #72]	; (800295c <SpiritManagementSetFrequencyBase+0x200>)
 8002914:	b212      	sxth	r2, r2
 8002916:	4611      	mov	r1, r2
 8002918:	7019      	strb	r1, [r3, #0]
 800291a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800291e:	705a      	strb	r2, [r3, #1]
}
 8002920:	bf00      	nop
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800292a:	bf00      	nop
 800292c:	2e5f5680 	.word	0x2e5f5680
 8002930:	390c2fe0 	.word	0x390c2fe0
 8002934:	1701e47f 	.word	0x1701e47f
 8002938:	1c146a60 	.word	0x1c146a60
 800293c:	11d260bf 	.word	0x11d260bf
 8002940:	14ced7e0 	.word	0x14ced7e0
 8002944:	099cf4e1 	.word	0x099cf4e1
 8002948:	1339e9c3 	.word	0x1339e9c3
 800294c:	19a28d05 	.word	0x19a28d05
 8002950:	33451a0a 	.word	0x33451a0a
 8002954:	0800ab48 	.word	0x0800ab48
 8002958:	0800ab44 	.word	0x0800ab44
 800295c:	20000440 	.word	0x20000440

08002960 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 800296e:	f001 fd7d 	bl	800446c <SpiritRadioGetXtalFrequency>
 8002972:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8002974:	2300      	movs	r3, #0
 8002976:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4a57      	ldr	r2, [pc, #348]	; (8002ad8 <SpiritManagementWaVcoCalibration+0x178>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d90f      	bls.n	80029a0 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002980:	f001 fd00 	bl	8004384 <SpiritRadioGetRefDiv>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 800298e:	f001 f86b 	bl	8003a68 <SpiritRadioGetFrequencyBase>
 8002992:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8002994:	2001      	movs	r0, #1
 8002996:	f001 fcc5 	bl	8004324 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fede 	bl	800275c <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 80029a0:	f001 f862 	bl	8003a68 <SpiritRadioGetFrequencyBase>
 80029a4:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 80029a6:	2325      	movs	r3, #37	; 0x25
 80029a8:	707b      	strb	r3, [r7, #1]
 80029aa:	1c7b      	adds	r3, r7, #1
 80029ac:	461a      	mov	r2, r3
 80029ae:	2101      	movs	r1, #1
 80029b0:	20a1      	movs	r0, #161	; 0xa1
 80029b2:	f001 fe03 	bl	80045bc <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7ff fcd2 	bl	8002360 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 80029bc:	f001 fdd4 	bl	8004568 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 80029c0:	4b46      	ldr	r3, [pc, #280]	; (8002adc <SpiritManagementWaVcoCalibration+0x17c>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d10d      	bne.n	80029ea <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 80029d2:	2062      	movs	r0, #98	; 0x62
 80029d4:	f7ff fdaa 	bl	800252c <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 80029d8:	f001 fdc6 	bl	8004568 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80029dc:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <SpiritManagementWaVcoCalibration+0x17c>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d1f6      	bne.n	80029d8 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80029ea:	2066      	movs	r0, #102	; 0x66
 80029ec:	f7ff fd9e 	bl	800252c <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80029f4:	f001 fdb8 	bl	8004568 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80029f8:	4b38      	ldr	r3, [pc, #224]	; (8002adc <SpiritManagementWaVcoCalibration+0x17c>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b13      	cmp	r3, #19
 8002a04:	d106      	bne.n	8002a14 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 8002a06:	7b7b      	ldrb	r3, [r7, #13]
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	737a      	strb	r2, [r7, #13]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d101      	bne.n	8002a14 <SpiritManagementWaVcoCalibration+0xb4>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e05d      	b.n	8002ad0 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002a14:	4b31      	ldr	r3, [pc, #196]	; (8002adc <SpiritManagementWaVcoCalibration+0x17c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	d1e8      	bne.n	80029f4 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 8002a22:	f7ff fcd5 	bl	80023d0 <SpiritCalibrationGetVcoCalData>
 8002a26:	4603      	mov	r3, r0
 8002a28:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 8002a2a:	2062      	movs	r0, #98	; 0x62
 8002a2c:	f7ff fd7e 	bl	800252c <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002a30:	f001 fd9a 	bl	8004568 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <SpiritManagementWaVcoCalibration+0x17c>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d1f6      	bne.n	8002a30 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 8002a42:	2065      	movs	r0, #101	; 0x65
 8002a44:	f7ff fd72 	bl	800252c <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002a4c:	f001 fd8c 	bl	8004568 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002a50:	4b22      	ldr	r3, [pc, #136]	; (8002adc <SpiritManagementWaVcoCalibration+0x17c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b13      	cmp	r3, #19
 8002a5c:	d106      	bne.n	8002a6c <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 8002a5e:	7b7b      	ldrb	r3, [r7, #13]
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	737a      	strb	r2, [r7, #13]
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d101      	bne.n	8002a6c <SpiritManagementWaVcoCalibration+0x10c>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e031      	b.n	8002ad0 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <SpiritManagementWaVcoCalibration+0x17c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b0f      	cmp	r3, #15
 8002a78:	d1e8      	bne.n	8002a4c <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8002a7a:	f7ff fca9 	bl	80023d0 <SpiritCalibrationGetVcoCalData>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 8002a82:	2062      	movs	r0, #98	; 0x62
 8002a84:	f7ff fd52 	bl	800252c <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002a88:	f001 fd6e 	bl	8004568 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002a8c:	4b13      	ldr	r3, [pc, #76]	; (8002adc <SpiritManagementWaVcoCalibration+0x17c>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d1f6      	bne.n	8002a88 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8002a9a:	7bbb      	ldrb	r3, [r7, #14]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d102      	bne.n	8002aa6 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002aa0:	2063      	movs	r0, #99	; 0x63
 8002aa2:	f7ff fd43 	bl	800252c <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7ff fc5a 	bl	8002360 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f001 fc36 	bl	8004324 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff fe4f 	bl	800275c <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fca1 	bl	8002408 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8002ac6:	78bb      	ldrb	r3, [r7, #2]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fcd1 	bl	8002470 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	01c9c380 	.word	0x01c9c380
 8002adc:	20000440 	.word	0x20000440

08002ae0 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <SpiritManagementWaCmdStrobeTx+0x60>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d023      	beq.n	8002b38 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <SpiritManagementWaCmdStrobeTx+0x68>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d908      	bls.n	8002b0c <SpiritManagementWaCmdStrobeTx+0x2c>
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <SpiritManagementWaCmdStrobeTx+0x6c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d803      	bhi.n	8002b0c <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 8002b04:	20c0      	movs	r0, #192	; 0xc0
 8002b06:	f001 fb83 	bl	8004210 <SpiritRadioSetPACwc>
 8002b0a:	e002      	b.n	8002b12 <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f001 fb7f 	bl	8004210 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 8002b12:	2311      	movs	r3, #17
 8002b14:	71fb      	strb	r3, [r7, #7]
 8002b16:	1dfb      	adds	r3, r7, #7
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	20a9      	movs	r0, #169	; 0xa9
 8002b1e:	f001 fd4d 	bl	80045bc <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 8002b22:	2320      	movs	r3, #32
 8002b24:	71fb      	strb	r3, [r7, #7]
 8002b26:	1dfb      	adds	r3, r7, #7
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	20a5      	movs	r0, #165	; 0xa5
 8002b2e:	f001 fd45 	bl	80045bc <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 8002b32:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <SpiritManagementWaCmdStrobeTx+0x60>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000064 	.word	0x20000064
 8002b44:	20000438 	.word	0x20000438
 8002b48:	08f0d17f 	.word	0x08f0d17f
 8002b4c:	1c03a180 	.word	0x1c03a180

08002b50 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d00d      	beq.n	8002b7c <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002b60:	2398      	movs	r3, #152	; 0x98
 8002b62:	71fb      	strb	r3, [r7, #7]
 8002b64:	1dfb      	adds	r3, r7, #7
 8002b66:	461a      	mov	r2, r3
 8002b68:	2101      	movs	r1, #1
 8002b6a:	20a5      	movs	r0, #165	; 0xa5
 8002b6c:	f001 fd26 	bl	80045bc <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002b70:	2000      	movs	r0, #0
 8002b72:	f001 fb4d 	bl	8004210 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8002b76:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000064 	.word	0x20000064

08002b88 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <SpiritManagementWaTRxFcMem+0x20>)
 8002b92:	2202      	movs	r2, #2
 8002b94:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8002b96:	4a05      	ldr	r2, [pc, #20]	; (8002bac <SpiritManagementWaTRxFcMem+0x24>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6013      	str	r3, [r2, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	20000064 	.word	0x20000064
 8002bac:	20000438 	.word	0x20000438

08002bb0 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8002bb6:	23ca      	movs	r3, #202	; 0xca
 8002bb8:	71fb      	strb	r3, [r7, #7]
 8002bba:	1dfb      	adds	r3, r7, #7
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	20b2      	movs	r0, #178	; 0xb2
 8002bc2:	f001 fcfb 	bl	80045bc <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	71fb      	strb	r3, [r7, #7]
 8002bca:	1dfb      	adds	r3, r7, #7
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2101      	movs	r1, #1
 8002bd0:	20a8      	movs	r0, #168	; 0xa8
 8002bd2:	f001 fcf3 	bl	80045bc <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 8002bd6:	1dfb      	adds	r3, r7, #7
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2101      	movs	r1, #1
 8002bdc:	20a8      	movs	r0, #168	; 0xa8
 8002bde:	f001 fd39 	bl	8004654 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002be2:	2300      	movs	r3, #0
 8002be4:	71fb      	strb	r3, [r7, #7]
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	461a      	mov	r2, r3
 8002bea:	2101      	movs	r1, #1
 8002bec:	20a8      	movs	r0, #168	; 0xa8
 8002bee:	f001 fce5 	bl	80045bc <RadioSpiWriteRegisters>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	2051      	movs	r0, #81	; 0x51
 8002c0e:	f001 fd21 	bl	8004654 <RadioSpiReadRegisters>
 8002c12:	4602      	mov	r2, r0
 8002c14:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <SpiritPktBasicInit+0x1a8>)
 8002c16:	b212      	sxth	r2, r2
 8002c18:	4611      	mov	r1, r2
 8002c1a:	7019      	strb	r1, [r3, #0]
 8002c1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c20:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8002c22:	7a3b      	ldrb	r3, [r7, #8]
 8002c24:	f023 0320 	bic.w	r3, r3, #32
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	723b      	strb	r3, [r7, #8]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002c2c:	7a3b      	ldrb	r3, [r7, #8]
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002c36:	f107 0308 	add.w	r3, r7, #8
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	2051      	movs	r0, #81	; 0x51
 8002c40:	f001 fcbc 	bl	80045bc <RadioSpiWriteRegisters>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b57      	ldr	r3, [pc, #348]	; (8002da4 <SpiritPktBasicInit+0x1a8>)
 8002c48:	b212      	sxth	r2, r2
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	7019      	strb	r1, [r3, #0]
 8002c4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c52:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002c54:	f107 0308 	add.w	r3, r7, #8
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	204f      	movs	r0, #79	; 0x4f
 8002c5e:	f001 fcf9 	bl	8004654 <RadioSpiReadRegisters>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b4f      	ldr	r3, [pc, #316]	; (8002da4 <SpiritPktBasicInit+0x1a8>)
 8002c66:	b212      	sxth	r2, r2
 8002c68:	4611      	mov	r1, r2
 8002c6a:	7019      	strb	r1, [r3, #0]
 8002c6c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c70:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002c72:	7a3b      	ldrb	r3, [r7, #8]
 8002c74:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002c7c:	f107 0308 	add.w	r3, r7, #8
 8002c80:	461a      	mov	r2, r3
 8002c82:	2101      	movs	r1, #1
 8002c84:	204f      	movs	r0, #79	; 0x4f
 8002c86:	f001 fc99 	bl	80045bc <RadioSpiWriteRegisters>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b45      	ldr	r3, [pc, #276]	; (8002da4 <SpiritPktBasicInit+0x1a8>)
 8002c8e:	b212      	sxth	r2, r2
 8002c90:	4611      	mov	r1, r2
 8002c92:	7019      	strb	r1, [r3, #0]
 8002c94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c98:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7b1b      	ldrb	r3, [r3, #12]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d102      	bne.n	8002ca8 <SpiritPktBasicInit+0xac>
  {
    tempRegValue[0]=0x08;
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	723b      	strb	r3, [r7, #8]
 8002ca6:	e001      	b.n	8002cac <SpiritPktBasicInit+0xb0>
  }
  else
  {
    tempRegValue[0]=0x00;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	723b      	strb	r3, [r7, #8]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 8002cac:	7a3a      	ldrb	r2, [r7, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7adb      	ldrb	r3, [r3, #11]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	723b      	strb	r3, [r7, #8]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7a5b      	ldrb	r3, [r3, #9]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <SpiritPktBasicInit+0xca>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7a5b      	ldrb	r3, [r3, #9]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	785b      	ldrb	r3, [r3, #1]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7a9b      	ldrb	r3, [r3, #10]
 8002cea:	72fb      	strb	r3, [r7, #11]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7b9b      	ldrb	r3, [r3, #14]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d104      	bne.n	8002cfe <SpiritPktBasicInit+0x102>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002cf4:	7afb      	ldrb	r3, [r7, #11]
 8002cf6:	f043 0310 	orr.w	r3, r3, #16
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	7b5b      	ldrb	r3, [r3, #13]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d104      	bne.n	8002d10 <SpiritPktBasicInit+0x114>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002d06:	7afb      	ldrb	r3, [r7, #11]
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	72fb      	strb	r3, [r7, #11]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002d10:	f107 0308 	add.w	r3, r7, #8
 8002d14:	461a      	mov	r2, r3
 8002d16:	2104      	movs	r1, #4
 8002d18:	2030      	movs	r0, #48	; 0x30
 8002d1a:	f001 fc4f 	bl	80045bc <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e01d      	b.n	8002d60 <SpiritPktBasicInit+0x164>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	785b      	ldrb	r3, [r3, #1]
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f1c3 0303 	rsb	r3, r3, #3
 8002d32:	429a      	cmp	r2, r3
 8002d34:	da06      	bge.n	8002d44 <SpiritPktBasicInit+0x148>
    {
      tempRegValue[i]=0;
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	3310      	adds	r3, #16
 8002d3a:	443b      	add	r3, r7
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002d42:	e00a      	b.n	8002d5a <SpiritPktBasicInit+0x15e>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	40da      	lsrs	r2, r3
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	3310      	adds	r3, #16
 8002d54:	443b      	add	r3, r7
 8002d56:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d9de      	bls.n	8002d24 <SpiritPktBasicInit+0x128>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7a9b      	ldrb	r3, [r3, #10]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <SpiritPktBasicInit+0x17a>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f000 f8fc 	bl	8002f6c <SpiritPktCommonFilterOnCrc>
 8002d74:	e002      	b.n	8002d7c <SpiritPktBasicInit+0x180>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 8002d76:	2001      	movs	r0, #1
 8002d78:	f000 f8f8 	bl	8002f6c <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002d7c:	f107 0308 	add.w	r3, r7, #8
 8002d80:	461a      	mov	r2, r3
 8002d82:	2104      	movs	r1, #4
 8002d84:	2036      	movs	r0, #54	; 0x36
 8002d86:	f001 fc19 	bl	80045bc <RadioSpiWriteRegisters>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <SpiritPktBasicInit+0x1a8>)
 8002d8e:	b212      	sxth	r2, r2
 8002d90:	4611      	mov	r1, r2
 8002d92:	7019      	strb	r1, [r3, #0]
 8002d94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d98:	705a      	strb	r2, [r3, #1]

}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000440 	.word	0x20000440

08002da8 <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002db0:	f107 030c 	add.w	r3, r7, #12
 8002db4:	461a      	mov	r2, r3
 8002db6:	2101      	movs	r1, #1
 8002db8:	204f      	movs	r0, #79	; 0x4f
 8002dba:	f001 fc4b 	bl	8004654 <RadioSpiReadRegisters>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <SpiritPktBasicAddressesInit+0xd8>)
 8002dc2:	b212      	sxth	r2, r2
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	7019      	strb	r1, [r3, #0]
 8002dc8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002dcc:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d105      	bne.n	8002de2 <SpiritPktBasicAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002dd6:	7b3b      	ldrb	r3, [r7, #12]
 8002dd8:	f043 0308 	orr.w	r3, r3, #8
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	733b      	strb	r3, [r7, #12]
 8002de0:	e004      	b.n	8002dec <SpiritPktBasicAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002de2:	7b3b      	ldrb	r3, [r7, #12]
 8002de4:	f023 0308 	bic.w	r3, r3, #8
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	789b      	ldrb	r3, [r3, #2]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <SpiritPktBasicAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002df4:	7b3b      	ldrb	r3, [r7, #12]
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	733b      	strb	r3, [r7, #12]
 8002dfe:	e004      	b.n	8002e0a <SpiritPktBasicAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002e00:	7b3b      	ldrb	r3, [r7, #12]
 8002e02:	f023 0304 	bic.w	r3, r3, #4
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	791b      	ldrb	r3, [r3, #4]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d105      	bne.n	8002e1e <SpiritPktBasicAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002e12:	7b3b      	ldrb	r3, [r7, #12]
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	733b      	strb	r3, [r7, #12]
 8002e1c:	e004      	b.n	8002e28 <SpiritPktBasicAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002e1e:	7b3b      	ldrb	r3, [r7, #12]
 8002e20:	f023 0302 	bic.w	r3, r3, #2
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2101      	movs	r1, #1
 8002e30:	204f      	movs	r0, #79	; 0x4f
 8002e32:	f001 fbc3 	bl	80045bc <RadioSpiWriteRegisters>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <SpiritPktBasicAddressesInit+0xd8>)
 8002e3a:	b212      	sxth	r2, r2
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	7019      	strb	r1, [r3, #0]
 8002e40:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e44:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	795b      	ldrb	r3, [r3, #5]
 8002e4a:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	78db      	ldrb	r3, [r3, #3]
 8002e50:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	785b      	ldrb	r3, [r3, #1]
 8002e56:	73bb      	strb	r3, [r7, #14]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002e58:	f107 030c 	add.w	r3, r7, #12
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2103      	movs	r1, #3
 8002e60:	204c      	movs	r0, #76	; 0x4c
 8002e62:	f001 fbab 	bl	80045bc <RadioSpiWriteRegisters>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <SpiritPktBasicAddressesInit+0xd8>)
 8002e6a:	b212      	sxth	r2, r2
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	7019      	strb	r1, [r3, #0]
 8002e70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e74:	705a      	strb	r2, [r3, #1]
  
  
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000440 	.word	0x20000440

08002e84 <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002e8a:	1dfb      	adds	r3, r7, #7
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	2101      	movs	r1, #1
 8002e90:	2030      	movs	r0, #48	; 0x30
 8002e92:	f001 fbdf 	bl	8004654 <RadioSpiReadRegisters>
 8002e96:	4602      	mov	r2, r0
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <SpiritPktBasicGetAddressField+0x3c>)
 8002e9a:	b212      	sxth	r2, r2
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	7019      	strb	r1, [r3, #0]
 8002ea0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ea4:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 0318 	and.w	r3, r3, #24
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 8002eb4:	2300      	movs	r3, #0
  }

}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000440 	.word	0x20000440

08002ec4 <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 8002ed2:	f7ff ffd7 	bl	8002e84 <SpiritPktBasicGetAddressField>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 8002edc:	2301      	movs	r3, #1
 8002ede:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 8002ee0:	f000 f828 	bl	8002f34 <SpiritPktCommonGetControlLength>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	89fb      	ldrh	r3, [r7, #14]
 8002eea:	4413      	add	r3, r2
 8002eec:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	89fb      	ldrh	r3, [r7, #14]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002efc:	88fa      	ldrh	r2, [r7, #6]
 8002efe:	89fb      	ldrh	r3, [r7, #14]
 8002f00:	4413      	add	r3, r2
 8002f02:	121b      	asrs	r3, r3, #8
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002f08:	f107 030c 	add.w	r3, r7, #12
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2102      	movs	r1, #2
 8002f10:	2034      	movs	r0, #52	; 0x34
 8002f12:	f001 fb53 	bl	80045bc <RadioSpiWriteRegisters>
 8002f16:	4602      	mov	r2, r0
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <SpiritPktBasicSetPayloadLength+0x6c>)
 8002f1a:	b212      	sxth	r2, r2
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	7019      	strb	r1, [r3, #0]
 8002f20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f24:	705a      	strb	r2, [r3, #1]

}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000440 	.word	0x20000440

08002f34 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002f3a:	1dfb      	adds	r3, r7, #7
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2101      	movs	r1, #1
 8002f40:	2030      	movs	r0, #48	; 0x30
 8002f42:	f001 fb87 	bl	8004654 <RadioSpiReadRegisters>
 8002f46:	4602      	mov	r2, r0
 8002f48:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <SpiritPktCommonGetControlLength+0x34>)
 8002f4a:	b212      	sxth	r2, r2
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	7019      	strb	r1, [r3, #0]
 8002f50:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f54:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	b2db      	uxtb	r3, r3

}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000440 	.word	0x20000440

08002f6c <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002f76:	f107 030f 	add.w	r3, r7, #15
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	204f      	movs	r0, #79	; 0x4f
 8002f80:	f001 fb68 	bl	8004654 <RadioSpiReadRegisters>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002f88:	b212      	sxth	r2, r2
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	7019      	strb	r1, [r3, #0]
 8002f8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f92:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d105      	bne.n	8002fa6 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	73fb      	strb	r3, [r7, #15]
 8002fa4:	e004      	b.n	8002fb0 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002fb0:	f107 030f 	add.w	r3, r7, #15
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	204f      	movs	r0, #79	; 0x4f
 8002fba:	f001 faff 	bl	80045bc <RadioSpiWriteRegisters>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002fc2:	b212      	sxth	r2, r2
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	7019      	strb	r1, [r3, #0]
 8002fc8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fcc:	705a      	strb	r2, [r3, #1]

}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000440 	.word	0x20000440

08002fdc <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002fe6:	1dfb      	adds	r3, r7, #7
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2101      	movs	r1, #1
 8002fec:	204b      	movs	r0, #75	; 0x4b
 8002fee:	f001 fae5 	bl	80045bc <RadioSpiWriteRegisters>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <SpiritPktCommonSetDestinationAddress+0x30>)
 8002ff6:	b212      	sxth	r2, r2
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	7019      	strb	r1, [r3, #0]
 8002ffc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003000:	705a      	strb	r2, [r3, #1]

}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000440 	.word	0x20000440

08003010 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 800301a:	f107 030f 	add.w	r3, r7, #15
 800301e:	461a      	mov	r2, r3
 8003020:	2101      	movs	r1, #1
 8003022:	203a      	movs	r0, #58	; 0x3a
 8003024:	f001 fb16 	bl	8004654 <RadioSpiReadRegisters>
 8003028:	4602      	mov	r2, r0
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <SpiritQiSqiCheck+0x6c>)
 800302c:	b212      	sxth	r2, r2
 800302e:	4611      	mov	r1, r2
 8003030:	7019      	strb	r1, [r3, #0]
 8003032:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003036:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	b2db      	uxtb	r3, r3
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	e004      	b.n	8003054 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	f023 0302 	bic.w	r3, r3, #2
 8003050:	b2db      	uxtb	r3, r3
 8003052:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8003054:	f107 030f 	add.w	r3, r7, #15
 8003058:	461a      	mov	r2, r3
 800305a:	2101      	movs	r1, #1
 800305c:	203a      	movs	r0, #58	; 0x3a
 800305e:	f001 faad 	bl	80045bc <RadioSpiWriteRegisters>
 8003062:	4602      	mov	r2, r0
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <SpiritQiSqiCheck+0x6c>)
 8003066:	b212      	sxth	r2, r2
 8003068:	4611      	mov	r1, r2
 800306a:	7019      	strb	r1, [r3, #0]
 800306c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003070:	705a      	strb	r2, [r3, #1]

}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000440 	.word	0x20000440

08003080 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 800308a:	f107 030f 	add.w	r3, r7, #15
 800308e:	461a      	mov	r2, r3
 8003090:	2101      	movs	r1, #1
 8003092:	203a      	movs	r0, #58	; 0x3a
 8003094:	f001 fade 	bl	8004654 <RadioSpiReadRegisters>
 8003098:	4602      	mov	r2, r0
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <SpiritQiSetSqiThreshold+0x64>)
 800309c:	b212      	sxth	r2, r2
 800309e:	4611      	mov	r1, r2
 80030a0:	7019      	strb	r1, [r3, #0]
 80030a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030a6:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 80030bc:	f107 030f 	add.w	r3, r7, #15
 80030c0:	461a      	mov	r2, r3
 80030c2:	2101      	movs	r1, #1
 80030c4:	203a      	movs	r0, #58	; 0x3a
 80030c6:	f001 fa79 	bl	80045bc <RadioSpiWriteRegisters>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <SpiritQiSetSqiThreshold+0x64>)
 80030ce:	b212      	sxth	r2, r2
 80030d0:	4611      	mov	r1, r2
 80030d2:	7019      	strb	r1, [r3, #0]
 80030d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030d8:	705a      	strb	r2, [r3, #1]

}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000440 	.word	0x20000440

080030e8 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3382      	adds	r3, #130	; 0x82
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 80030fc:	f107 030f 	add.w	r3, r7, #15
 8003100:	461a      	mov	r2, r3
 8003102:	2101      	movs	r1, #1
 8003104:	2022      	movs	r0, #34	; 0x22
 8003106:	f001 fa59 	bl	80045bc <RadioSpiWriteRegisters>
 800310a:	4602      	mov	r2, r0
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <SpiritQiSetRssiThresholddBm+0x3c>)
 800310e:	b212      	sxth	r2, r2
 8003110:	4611      	mov	r1, r2
 8003112:	7019      	strb	r1, [r3, #0]
 8003114:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003118:	705a      	strb	r2, [r3, #1]

}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000440 	.word	0x20000440

08003128 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08c      	sub	sp, #48	; 0x30
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8003130:	23a0      	movs	r3, #160	; 0xa0
 8003132:	747b      	strb	r3, [r7, #17]
 8003134:	f107 0311 	add.w	r3, r7, #17
 8003138:	461a      	mov	r2, r3
 800313a:	2101      	movs	r1, #1
 800313c:	209f      	movs	r0, #159	; 0x9f
 800313e:	f001 fa3d 	bl	80045bc <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	ee07 3a90 	vmov	s15, r3
 8003158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003160:	eddf 6aae 	vldr	s13, [pc, #696]	; 800341c <SpiritRadioInit+0x2f4>
 8003164:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800316c:	ee17 3a90 	vmov	r3, s15
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8003172:	2063      	movs	r0, #99	; 0x63
 8003174:	f001 faba 	bl	80046ec <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8003178:	2300      	movs	r3, #0
 800317a:	73bb      	strb	r3, [r7, #14]
 800317c:	e004      	b.n	8003188 <SpiritRadioInit+0x60>
 800317e:	7bbb      	ldrb	r3, [r7, #14]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	3301      	adds	r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	73bb      	strb	r3, [r7, #14]
 8003188:	7bbb      	ldrb	r3, [r7, #14]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2bff      	cmp	r3, #255	; 0xff
 800318e:	d1f6      	bne.n	800317e <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8003190:	f001 f9ea 	bl	8004568 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8003194:	4ba2      	ldr	r3, [pc, #648]	; (8003420 <SpiritRadioInit+0x2f8>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d1ea      	bne.n	8003178 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 80031a2:	4ba0      	ldr	r3, [pc, #640]	; (8003424 <SpiritRadioInit+0x2fc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4aa0      	ldr	r2, [pc, #640]	; (8003428 <SpiritRadioInit+0x300>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d803      	bhi.n	80031b4 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 80031ac:	2000      	movs	r0, #0
 80031ae:	f001 f90b 	bl	80043c8 <SpiritRadioSetDigDiv>
 80031b2:	e002      	b.n	80031ba <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 80031b4:	2001      	movs	r0, #1
 80031b6:	f001 f907 	bl	80043c8 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 80031ba:	2062      	movs	r0, #98	; 0x62
 80031bc:	f001 fa96 	bl	80046ec <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80031c0:	2300      	movs	r3, #0
 80031c2:	737b      	strb	r3, [r7, #13]
 80031c4:	e004      	b.n	80031d0 <SpiritRadioInit+0xa8>
 80031c6:	7b7b      	ldrb	r3, [r7, #13]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	3301      	adds	r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	737b      	strb	r3, [r7, #13]
 80031d0:	7b7b      	ldrb	r3, [r7, #13]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2bff      	cmp	r3, #255	; 0xff
 80031d6:	d1f6      	bne.n	80031c6 <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80031d8:	f001 f9c6 	bl	8004568 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 80031dc:	4b90      	ldr	r3, [pc, #576]	; (8003420 <SpiritRadioInit+0x2f8>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d1ea      	bne.n	80031c0 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f4:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800342c <SpiritRadioInit+0x304>
 80031f8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80031fc:	4b89      	ldr	r3, [pc, #548]	; (8003424 <SpiritRadioInit+0x2fc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	ee07 3a90 	vmov	s15, r3
 8003204:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800320c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003210:	ee17 3a90 	vmov	r3, s15
 8003214:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8003216:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	b29b      	uxth	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	b2db      	uxtb	r3, r3
 8003224:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8003226:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003228:	b2db      	uxtb	r3, r3
 800322a:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	025a      	lsls	r2, r3, #9
 8003232:	4b7c      	ldr	r3, [pc, #496]	; (8003424 <SpiritRadioInit+0x2fc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	099b      	lsrs	r3, r3, #6
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	3301      	adds	r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fc9d 	bl	8002b88 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 800324e:	f107 0310 	add.w	r3, r7, #16
 8003252:	461a      	mov	r2, r3
 8003254:	2101      	movs	r1, #1
 8003256:	20a3      	movs	r0, #163	; 0xa3
 8003258:	f001 f9fc 	bl	8004654 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 800325c:	7c3b      	ldrb	r3, [r7, #16]
 800325e:	f023 0302 	bic.w	r3, r3, #2
 8003262:	b2db      	uxtb	r3, r3
 8003264:	743b      	strb	r3, [r7, #16]
 8003266:	f107 0310 	add.w	r3, r7, #16
 800326a:	461a      	mov	r2, r3
 800326c:	2101      	movs	r1, #1
 800326e:	20a3      	movs	r0, #163	; 0xa3
 8003270:	f001 f9a4 	bl	80045bc <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f107 0216 	add.w	r2, r7, #22
 800327c:	f107 0117 	add.w	r1, r7, #23
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fc3d 	bl	8003b00 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	7b5a      	ldrb	r2, [r3, #13]
 800328e:	7dbb      	ldrb	r3, [r7, #22]
 8003290:	4313      	orrs	r3, r2
 8003292:	b2db      	uxtb	r3, r3
 8003294:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8003296:	f107 0310 	add.w	r3, r7, #16
 800329a:	461a      	mov	r2, r3
 800329c:	2101      	movs	r1, #1
 800329e:	201c      	movs	r0, #28
 80032a0:	f001 f9d8 	bl	8004654 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f107 0214 	add.w	r2, r7, #20
 80032ac:	f107 0115 	add.w	r1, r7, #21
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fdbd 	bl	8003e30 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 80032b6:	7d3b      	ldrb	r3, [r7, #20]
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	b25a      	sxtb	r2, r3
 80032bc:	7c3b      	ldrb	r3, [r7, #16]
 80032be:	b25b      	sxtb	r3, r3
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	b25b      	sxtb	r3, r3
 80032c6:	4313      	orrs	r3, r2
 80032c8:	b25a      	sxtb	r2, r3
 80032ca:	7d7b      	ldrb	r3, [r7, #21]
 80032cc:	b25b      	sxtb	r3, r3
 80032ce:	4313      	orrs	r3, r2
 80032d0:	b25b      	sxtb	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f107 0212 	add.w	r2, r7, #18
 80032de:	f107 0113 	add.w	r1, r7, #19
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fcbe 	bl	8003c64 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	b25a      	sxtb	r2, r3
 80032ee:	7cbb      	ldrb	r3, [r7, #18]
 80032f0:	b25b      	sxtb	r3, r3
 80032f2:	4313      	orrs	r3, r2
 80032f4:	b25b      	sxtb	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 80032fa:	4b4a      	ldr	r3, [pc, #296]	; (8003424 <SpiritRadioInit+0x2fc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0b1b      	lsrs	r3, r3, #12
 8003300:	ee07 3a90 	vmov	s15, r3
 8003304:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003308:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003430 <SpiritRadioInit+0x308>
 800330c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003310:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003434 <SpiritRadioInit+0x30c>
 8003314:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003318:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 800331c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003328:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800332c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003330:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333c:	dd09      	ble.n	8003352 <SpiritRadioInit+0x22a>
 800333e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003346:	edc7 7a00 	vstr	s15, [r7]
 800334a:	783b      	ldrb	r3, [r7, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	e006      	b.n	8003360 <SpiritRadioInit+0x238>
 8003352:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800335a:	edc7 7a00 	vstr	s15, [r7]
 800335e:	783b      	ldrb	r3, [r7, #0]
 8003360:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8003362:	4b30      	ldr	r3, [pc, #192]	; (8003424 <SpiritRadioInit+0x2fc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a30      	ldr	r2, [pc, #192]	; (8003428 <SpiritRadioInit+0x300>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d802      	bhi.n	8003372 <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	777b      	strb	r3, [r7, #29]
 8003370:	e033      	b.n	80033da <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8003372:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <SpiritRadioInit+0x2fc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	0b5b      	lsrs	r3, r3, #13
 8003378:	ee07 3a90 	vmov	s15, r3
 800337c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003380:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003430 <SpiritRadioInit+0x308>
 8003384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003388:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003434 <SpiritRadioInit+0x30c>
 800338c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003390:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8003394:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800339c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80033a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b4:	dd09      	ble.n	80033ca <SpiritRadioInit+0x2a2>
 80033b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033be:	edc7 7a00 	vstr	s15, [r7]
 80033c2:	783b      	ldrb	r3, [r7, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	e006      	b.n	80033d8 <SpiritRadioInit+0x2b0>
 80033ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033d2:	edc7 7a00 	vstr	s15, [r7]
 80033d6:	783b      	ldrb	r3, [r7, #0]
 80033d8:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 80033da:	f107 030f 	add.w	r3, r7, #15
 80033de:	461a      	mov	r2, r3
 80033e0:	2101      	movs	r1, #1
 80033e2:	2007      	movs	r0, #7
 80033e4:	f001 f8ea 	bl	80045bc <RadioSpiWriteRegisters>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <SpiritRadioInit+0x2f8>)
 80033ec:	b212      	sxth	r2, r2
 80033ee:	4611      	mov	r1, r2
 80033f0:	7019      	strb	r1, [r3, #0]
 80033f2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80033f6:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 80033f8:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <SpiritRadioInit+0x2fc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a0e      	ldr	r2, [pc, #56]	; (8003438 <SpiritRadioInit+0x310>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d91e      	bls.n	8003440 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8003402:	4b08      	ldr	r3, [pc, #32]	; (8003424 <SpiritRadioInit+0x2fc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a0d      	ldr	r2, [pc, #52]	; (800343c <SpiritRadioInit+0x314>)
 8003408:	4293      	cmp	r3, r2
 800340a:	bf8c      	ite	hi
 800340c:	2301      	movhi	r3, #1
 800340e:	2300      	movls	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f86c 	bl	80034f0 <SpiritRadioSetXtalFlag>
 8003418:	e01d      	b.n	8003456 <SpiritRadioInit+0x32e>
 800341a:	bf00      	nop
 800341c:	49742400 	.word	0x49742400
 8003420:	20000440 	.word	0x20000440
 8003424:	2000043c 	.word	0x2000043c
 8003428:	01c9c37f 	.word	0x01c9c37f
 800342c:	48800000 	.word	0x48800000
 8003430:	49afd520 	.word	0x49afd520
 8003434:	42800000 	.word	0x42800000
 8003438:	01c9c380 	.word	0x01c9c380
 800343c:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8003440:	4b28      	ldr	r3, [pc, #160]	; (80034e4 <SpiritRadioInit+0x3bc>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <SpiritRadioInit+0x3c0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	bf8c      	ite	hi
 800344a:	2301      	movhi	r3, #1
 800344c:	2300      	movls	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f84d 	bl	80034f0 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	330c      	adds	r3, #12
 800345a:	461a      	mov	r2, r3
 800345c:	2101      	movs	r1, #1
 800345e:	206c      	movs	r0, #108	; 0x6c
 8003460:	f001 f8ac 	bl	80045bc <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8003464:	f107 031c 	add.w	r3, r7, #28
 8003468:	461a      	mov	r2, r3
 800346a:	2104      	movs	r1, #4
 800346c:	200c      	movs	r0, #12
 800346e:	f001 f8a5 	bl	80045bc <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8003472:	f107 0318 	add.w	r3, r7, #24
 8003476:	461a      	mov	r2, r3
 8003478:	2104      	movs	r1, #4
 800347a:	201a      	movs	r0, #26
 800347c:	f001 f89e 	bl	80045bc <RadioSpiWriteRegisters>
 8003480:	4602      	mov	r2, r0
 8003482:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <SpiritRadioInit+0x3c4>)
 8003484:	b212      	sxth	r2, r2
 8003486:	4611      	mov	r1, r2
 8003488:	7019      	strb	r1, [r3, #0]
 800348a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800348e:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8003490:	2001      	movs	r0, #1
 8003492:	f000 ff15 	bl	80042c0 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 800349a:	23e3      	movs	r3, #227	; 0xe3
 800349c:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 800349e:	f107 031c 	add.w	r3, r7, #28
 80034a2:	461a      	mov	r2, r3
 80034a4:	2102      	movs	r1, #2
 80034a6:	2099      	movs	r0, #153	; 0x99
 80034a8:	f001 f888 	bl	80045bc <RadioSpiWriteRegisters>
 80034ac:	4602      	mov	r2, r0
 80034ae:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <SpiritRadioInit+0x3c4>)
 80034b0:	b212      	sxth	r2, r2
 80034b2:	4611      	mov	r1, r2
 80034b4:	7019      	strb	r1, [r3, #0]
 80034b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034ba:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 80034bc:	2322      	movs	r3, #34	; 0x22
 80034be:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 80034c0:	f107 031c 	add.w	r3, r7, #28
 80034c4:	461a      	mov	r2, r3
 80034c6:	2101      	movs	r1, #1
 80034c8:	20bc      	movs	r0, #188	; 0xbc
 80034ca:	f001 f877 	bl	80045bc <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f9aa 	bl	800382c <SpiritRadioSetFrequencyBase>
 80034d8:	4603      	mov	r3, r0
  
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3730      	adds	r7, #48	; 0x30
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	2000043c 	.word	0x2000043c
 80034e8:	017d783f 	.word	0x017d783f
 80034ec:	20000440 	.word	0x20000440

080034f0 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80034fe:	f107 030f 	add.w	r3, r7, #15
 8003502:	461a      	mov	r2, r3
 8003504:	2101      	movs	r1, #1
 8003506:	2001      	movs	r0, #1
 8003508:	f001 f8a4 	bl	8004654 <RadioSpiReadRegisters>
 800350c:	4602      	mov	r2, r0
 800350e:	4b14      	ldr	r3, [pc, #80]	; (8003560 <SpiritRadioSetXtalFlag+0x70>)
 8003510:	b212      	sxth	r2, r2
 8003512:	4611      	mov	r1, r2
 8003514:	7019      	strb	r1, [r3, #0]
 8003516:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800351a:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d105      	bne.n	800352e <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003528:	b2db      	uxtb	r3, r3
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	e004      	b.n	8003538 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003534:	b2db      	uxtb	r3, r3
 8003536:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8003538:	f107 030f 	add.w	r3, r7, #15
 800353c:	461a      	mov	r2, r3
 800353e:	2101      	movs	r1, #1
 8003540:	2001      	movs	r0, #1
 8003542:	f001 f83b 	bl	80045bc <RadioSpiWriteRegisters>
 8003546:	4602      	mov	r2, r0
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <SpiritRadioSetXtalFlag+0x70>)
 800354a:	b212      	sxth	r2, r2
 800354c:	4611      	mov	r1, r2
 800354e:	7019      	strb	r1, [r3, #0]
 8003550:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003554:	705a      	strb	r2, [r3, #1]
  
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000440 	.word	0x20000440

08003564 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8003570:	2300      	movs	r3, #0
 8003572:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8003574:	2300      	movs	r3, #0
 8003576:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a3a      	ldr	r2, [pc, #232]	; (8003664 <SpiritRadioSearchWCP+0x100>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d306      	bcc.n	800358e <SpiritRadioSearchWCP+0x2a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a39      	ldr	r2, [pc, #228]	; (8003668 <SpiritRadioSearchWCP+0x104>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d802      	bhi.n	800358e <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8003588:	2306      	movs	r3, #6
 800358a:	73bb      	strb	r3, [r7, #14]
 800358c:	e01f      	b.n	80035ce <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a36      	ldr	r2, [pc, #216]	; (800366c <SpiritRadioSearchWCP+0x108>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d906      	bls.n	80035a4 <SpiritRadioSearchWCP+0x40>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a35      	ldr	r2, [pc, #212]	; (8003670 <SpiritRadioSearchWCP+0x10c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d802      	bhi.n	80035a4 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 800359e:	230c      	movs	r3, #12
 80035a0:	73bb      	strb	r3, [r7, #14]
 80035a2:	e014      	b.n	80035ce <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a33      	ldr	r2, [pc, #204]	; (8003674 <SpiritRadioSearchWCP+0x110>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d906      	bls.n	80035ba <SpiritRadioSearchWCP+0x56>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a32      	ldr	r2, [pc, #200]	; (8003678 <SpiritRadioSearchWCP+0x114>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d802      	bhi.n	80035ba <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 80035b4:	2310      	movs	r3, #16
 80035b6:	73bb      	strb	r3, [r7, #14]
 80035b8:	e009      	b.n	80035ce <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a2f      	ldr	r2, [pc, #188]	; (800367c <SpiritRadioSearchWCP+0x118>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d905      	bls.n	80035ce <SpiritRadioSearchWCP+0x6a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a2e      	ldr	r2, [pc, #184]	; (8003680 <SpiritRadioSearchWCP+0x11c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d801      	bhi.n	80035ce <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 80035ca:	2320      	movs	r3, #32
 80035cc:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2c      	ldr	r2, [pc, #176]	; (8003684 <SpiritRadioSearchWCP+0x120>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	099b      	lsrs	r3, r3, #6
 80035d8:	7bba      	ldrb	r2, [r7, #14]
 80035da:	fb02 f303 	mul.w	r3, r2, r3
 80035de:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 80035e0:	f241 631f 	movw	r3, #5663	; 0x161f
 80035e4:	461a      	mov	r2, r3
 80035e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ea:	fb02 f303 	mul.w	r3, r2, r3
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d302      	bcc.n	80035fa <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 80035f4:	230f      	movs	r3, #15
 80035f6:	73fb      	strb	r3, [r7, #15]
 80035f8:	e023      	b.n	8003642 <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e005      	b.n	800360c <SpiritRadioSearchWCP+0xa8>
 8003600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	3301      	adds	r3, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	73fb      	strb	r3, [r7, #15]
 800360c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003610:	2b0e      	cmp	r3, #14
 8003612:	dc0c      	bgt.n	800362e <SpiritRadioSearchWCP+0xca>
 8003614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003618:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <SpiritRadioSearchWCP+0x124>)
 800361a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800361e:	461a      	mov	r2, r3
 8003620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003624:	fb02 f303 	mul.w	r3, r2, r3
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	429a      	cmp	r2, r3
 800362c:	d8e8      	bhi.n	8003600 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 800362e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <SpiritRadioSearchWCP+0xde>
      i--;
 8003636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b2db      	uxtb	r3, r3
 8003640:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8003642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003646:	425a      	negs	r2, r3
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	f002 0207 	and.w	r2, r2, #7
 8003650:	bf58      	it	pl
 8003652:	4253      	negpl	r3, r2
 8003654:	b25b      	sxtb	r3, r3
 8003656:	b2db      	uxtb	r3, r3
  
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	2e5f5680 	.word	0x2e5f5680
 8003668:	390c2fe0 	.word	0x390c2fe0
 800366c:	1701e47f 	.word	0x1701e47f
 8003670:	1c146a60 	.word	0x1c146a60
 8003674:	11d260bf 	.word	0x11d260bf
 8003678:	14ced7e0 	.word	0x14ced7e0
 800367c:	08e18f3f 	.word	0x08e18f3f
 8003680:	0a6fd060 	.word	0x0a6fd060
 8003684:	10624dd3 	.word	0x10624dd3
 8003688:	0800ac08 	.word	0x0800ac08

0800368c <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8003692:	1d3b      	adds	r3, r7, #4
 8003694:	461a      	mov	r2, r3
 8003696:	2104      	movs	r1, #4
 8003698:	2008      	movs	r0, #8
 800369a:	f000 ffdb 	bl	8004654 <RadioSpiReadRegisters>
 800369e:	4602      	mov	r2, r0
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <SpiritRadioGetSynthWord+0x48>)
 80036a2:	b212      	sxth	r2, r2
 80036a4:	4611      	mov	r1, r2
 80036a6:	7019      	strb	r1, [r3, #0]
 80036a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80036ac:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80036ae:	793b      	ldrb	r3, [r7, #4]
 80036b0:	055b      	lsls	r3, r3, #21
 80036b2:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 80036b6:	797b      	ldrb	r3, [r7, #5]
 80036b8:	035b      	lsls	r3, r3, #13
 80036ba:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80036bc:	79bb      	ldrb	r3, [r7, #6]
 80036be:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80036c0:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80036c2:	79fa      	ldrb	r2, [r7, #7]
 80036c4:	08d2      	lsrs	r2, r2, #3
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	4413      	add	r3, r2
  
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000440 	.word	0x20000440

080036d8 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 80036de:	1dfb      	adds	r3, r7, #7
 80036e0:	461a      	mov	r2, r3
 80036e2:	2101      	movs	r1, #1
 80036e4:	200b      	movs	r0, #11
 80036e6:	f000 ffb5 	bl	8004654 <RadioSpiReadRegisters>
 80036ea:	4602      	mov	r2, r0
 80036ec:	4b10      	ldr	r3, [pc, #64]	; (8003730 <SpiritRadioGetBand+0x58>)
 80036ee:	b212      	sxth	r2, r2
 80036f0:	4611      	mov	r1, r2
 80036f2:	7019      	strb	r1, [r3, #0]
 80036f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80036f8:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8003704:	2300      	movs	r3, #0
 8003706:	e00e      	b.n	8003726 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	2b03      	cmp	r3, #3
 8003710:	d101      	bne.n	8003716 <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8003712:	2301      	movs	r3, #1
 8003714:	e007      	b.n	8003726 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	2b04      	cmp	r3, #4
 800371e:	d101      	bne.n	8003724 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8003720:	2302      	movs	r3, #2
 8003722:	e000      	b.n	8003726 <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8003724:	2303      	movs	r3, #3
  }
  
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000440 	.word	0x20000440

08003734 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 800373a:	1dfb      	adds	r3, r7, #7
 800373c:	461a      	mov	r2, r3
 800373e:	2101      	movs	r1, #1
 8003740:	206c      	movs	r0, #108	; 0x6c
 8003742:	f000 ff87 	bl	8004654 <RadioSpiReadRegisters>
 8003746:	4602      	mov	r2, r0
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <SpiritRadioGetChannel+0x2c>)
 800374a:	b212      	sxth	r2, r2
 800374c:	4611      	mov	r1, r2
 800374e:	7019      	strb	r1, [r3, #0]
 8003750:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003754:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8003756:	79fb      	ldrb	r3, [r7, #7]
  
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000440 	.word	0x20000440

08003764 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	461a      	mov	r2, r3
 800376e:	2101      	movs	r1, #1
 8003770:	200c      	movs	r0, #12
 8003772:	f000 ff6f 	bl	8004654 <RadioSpiReadRegisters>
 8003776:	4602      	mov	r2, r0
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <SpiritRadioGetChannelSpace+0x38>)
 800377a:	b212      	sxth	r2, r2
 800377c:	4611      	mov	r1, r2
 800377e:	7019      	strb	r1, [r3, #0]
 8003780:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003784:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	461a      	mov	r2, r3
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <SpiritRadioGetChannelSpace+0x3c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	0bdb      	lsrs	r3, r3, #15
  
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000440 	.word	0x20000440
 80037a0:	2000043c 	.word	0x2000043c

080037a4 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	461a      	mov	r2, r3
 80037ae:	2102      	movs	r1, #2
 80037b0:	200e      	movs	r0, #14
 80037b2:	f000 ff4f 	bl	8004654 <RadioSpiReadRegisters>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <SpiritRadioGetFrequencyOffset+0x80>)
 80037ba:	b212      	sxth	r2, r2
 80037bc:	4611      	mov	r1, r2
 80037be:	7019      	strb	r1, [r3, #0]
 80037c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80037c4:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 80037c6:	793b      	ldrb	r3, [r7, #4]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	797b      	ldrb	r3, [r7, #5]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 80037d8:	887b      	ldrh	r3, [r7, #2]
 80037da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80037e2:	887b      	ldrh	r3, [r7, #2]
 80037e4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80037e8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	807b      	strh	r3, [r7, #2]
 80037f0:	e004      	b.n	80037fc <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 80037f2:	887b      	ldrh	r3, [r7, #2]
 80037f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 80037fc:	1cbb      	adds	r3, r7, #2
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8003802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003806:	4a08      	ldr	r2, [pc, #32]	; (8003828 <SpiritRadioGetFrequencyOffset+0x84>)
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	da03      	bge.n	800381a <SpiritRadioGetFrequencyOffset+0x76>
 8003812:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003816:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800381a:	149b      	asrs	r3, r3, #18
  
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000440 	.word	0x20000440
 8003828:	2000043c 	.word	0x2000043c

0800382c <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 800382c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003830:	b08a      	sub	sp, #40	; 0x28
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8003836:	2300      	movs	r3, #0
 8003838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a79      	ldr	r2, [pc, #484]	; (8003a24 <SpiritRadioSetFrequencyBase+0x1f8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d307      	bcc.n	8003854 <SpiritRadioSetFrequencyBase+0x28>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a78      	ldr	r2, [pc, #480]	; (8003a28 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d803      	bhi.n	8003854 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 800384c:	2300      	movs	r3, #0
 800384e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003852:	e022      	b.n	800389a <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a75      	ldr	r2, [pc, #468]	; (8003a2c <SpiritRadioSetFrequencyBase+0x200>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d907      	bls.n	800386c <SpiritRadioSetFrequencyBase+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a74      	ldr	r2, [pc, #464]	; (8003a30 <SpiritRadioSetFrequencyBase+0x204>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d803      	bhi.n	800386c <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8003864:	2301      	movs	r3, #1
 8003866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800386a:	e016      	b.n	800389a <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a71      	ldr	r2, [pc, #452]	; (8003a34 <SpiritRadioSetFrequencyBase+0x208>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d907      	bls.n	8003884 <SpiritRadioSetFrequencyBase+0x58>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a70      	ldr	r2, [pc, #448]	; (8003a38 <SpiritRadioSetFrequencyBase+0x20c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d803      	bhi.n	8003884 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 800387c:	2302      	movs	r3, #2
 800387e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003882:	e00a      	b.n	800389a <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a6d      	ldr	r2, [pc, #436]	; (8003a3c <SpiritRadioSetFrequencyBase+0x210>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d906      	bls.n	800389a <SpiritRadioSetFrequencyBase+0x6e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a6c      	ldr	r2, [pc, #432]	; (8003a40 <SpiritRadioSetFrequencyBase+0x214>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d802      	bhi.n	800389a <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 8003894:	2303      	movs	r3, #3
 8003896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 800389a:	f7ff ff83 	bl	80037a4 <SpiritRadioGetFrequencyOffset>
 800389e:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80038a0:	f7ff ff60 	bl	8003764 <SpiritRadioGetChannelSpace>
 80038a4:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80038a6:	f7ff ff45 	bl	8003734 <SpiritRadioGetChannel>
 80038aa:	4603      	mov	r3, r0
 80038ac:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80038ae:	6a3a      	ldr	r2, [r7, #32]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	441a      	add	r2, r3
 80038b4:	7efb      	ldrb	r3, [r7, #27]
 80038b6:	69f9      	ldr	r1, [r7, #28]
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	4413      	add	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80038c0:	f000 fd60 	bl	8004384 <SpiritRadioGetRefDiv>
 80038c4:	4603      	mov	r3, r0
 80038c6:	3301      	adds	r3, #1
 80038c8:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 80038ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d839      	bhi.n	8003946 <SpiritRadioSetFrequencyBase+0x11a>
 80038d2:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <SpiritRadioSetFrequencyBase+0xac>)
 80038d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d8:	08003931 	.word	0x08003931
 80038dc:	08003919 	.word	0x08003919
 80038e0:	08003901 	.word	0x08003901
 80038e4:	080038e9 	.word	0x080038e9
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	4a56      	ldr	r2, [pc, #344]	; (8003a44 <SpiritRadioSetFrequencyBase+0x218>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d803      	bhi.n	80038f8 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80038f0:	2000      	movs	r0, #0
 80038f2:	f7fe fdf1 	bl	80024d8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80038f6:	e026      	b.n	8003946 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80038f8:	2001      	movs	r0, #1
 80038fa:	f7fe fded 	bl	80024d8 <SpiritCalibrationSelectVco>
    break;
 80038fe:	e022      	b.n	8003946 <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	4a51      	ldr	r2, [pc, #324]	; (8003a48 <SpiritRadioSetFrequencyBase+0x21c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d803      	bhi.n	8003910 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003908:	2000      	movs	r0, #0
 800390a:	f7fe fde5 	bl	80024d8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800390e:	e01a      	b.n	8003946 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003910:	2001      	movs	r0, #1
 8003912:	f7fe fde1 	bl	80024d8 <SpiritCalibrationSelectVco>
    break;
 8003916:	e016      	b.n	8003946 <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	4a4c      	ldr	r2, [pc, #304]	; (8003a4c <SpiritRadioSetFrequencyBase+0x220>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d803      	bhi.n	8003928 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003920:	2000      	movs	r0, #0
 8003922:	f7fe fdd9 	bl	80024d8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003926:	e00e      	b.n	8003946 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003928:	2001      	movs	r0, #1
 800392a:	f7fe fdd5 	bl	80024d8 <SpiritCalibrationSelectVco>
    break;
 800392e:	e00a      	b.n	8003946 <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	4a47      	ldr	r2, [pc, #284]	; (8003a50 <SpiritRadioSetFrequencyBase+0x224>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d803      	bhi.n	8003940 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003938:	2000      	movs	r0, #0
 800393a:	f7fe fdcd 	bl	80024d8 <SpiritCalibrationSelectVco>
 800393e:	e002      	b.n	8003946 <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003940:	2001      	movs	r0, #1
 8003942:	f7fe fdc9 	bl	80024d8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8003946:	6978      	ldr	r0, [r7, #20]
 8003948:	f7ff fe0c 	bl	8003564 <SpiritRadioSearchWCP>
 800394c:	4603      	mov	r3, r0
 800394e:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003954:	4a3f      	ldr	r2, [pc, #252]	; (8003a54 <SpiritRadioSetFrequencyBase+0x228>)
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	461a      	mov	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	4618      	mov	r0, r3
 8003962:	f7fc fdcf 	bl	8000504 <__aeabi_ui2d>
 8003966:	4604      	mov	r4, r0
 8003968:	460d      	mov	r5, r1
 800396a:	7cfb      	ldrb	r3, [r7, #19]
 800396c:	049b      	lsls	r3, r3, #18
 800396e:	4618      	mov	r0, r3
 8003970:	f7fc fdd8 	bl	8000524 <__aeabi_i2d>
 8003974:	4680      	mov	r8, r0
 8003976:	4689      	mov	r9, r1
 8003978:	4b37      	ldr	r3, [pc, #220]	; (8003a58 <SpiritRadioSetFrequencyBase+0x22c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7fc fdc1 	bl	8000504 <__aeabi_ui2d>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4640      	mov	r0, r8
 8003988:	4649      	mov	r1, r9
 800398a:	f7fc ff5f 	bl	800084c <__aeabi_ddiv>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4620      	mov	r0, r4
 8003994:	4629      	mov	r1, r5
 8003996:	f7fc fe2f 	bl	80005f8 <__aeabi_dmul>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	f7fd f901 	bl	8000ba8 <__aeabi_d2uiz>
 80039a6:	4603      	mov	r3, r0
 80039a8:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	0d5b      	lsrs	r3, r3, #21
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	7cbb      	ldrb	r3, [r7, #18]
 80039b8:	015b      	lsls	r3, r3, #5
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	4313      	orrs	r3, r2
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	0b5b      	lsrs	r3, r3, #13
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039de:	491f      	ldr	r1, [pc, #124]	; (8003a5c <SpiritRadioSetFrequencyBase+0x230>)
 80039e0:	5ccb      	ldrb	r3, [r1, r3]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80039e8:	f107 0308 	add.w	r3, r7, #8
 80039ec:	461a      	mov	r2, r3
 80039ee:	2104      	movs	r1, #4
 80039f0:	2008      	movs	r0, #8
 80039f2:	f000 fde3 	bl	80045bc <RadioSpiWriteRegisters>
 80039f6:	4602      	mov	r2, r0
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <SpiritRadioSetFrequencyBase+0x234>)
 80039fa:	b212      	sxth	r2, r2
 80039fc:	4611      	mov	r1, r2
 80039fe:	7019      	strb	r1, [r3, #0]
 8003a00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a04:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8003a06:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <SpiritRadioSetFrequencyBase+0x238>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d103      	bne.n	8003a16 <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 8003a0e:	f7fe ffa7 	bl	8002960 <SpiritManagementWaVcoCalibration>
 8003a12:	4603      	mov	r3, r0
 8003a14:	e000      	b.n	8003a18 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3728      	adds	r7, #40	; 0x28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a22:	bf00      	nop
 8003a24:	2e5f5680 	.word	0x2e5f5680
 8003a28:	390c2fe0 	.word	0x390c2fe0
 8003a2c:	1701e47f 	.word	0x1701e47f
 8003a30:	1c146a60 	.word	0x1c146a60
 8003a34:	11d260bf 	.word	0x11d260bf
 8003a38:	14ced7e0 	.word	0x14ced7e0
 8003a3c:	08e18f3f 	.word	0x08e18f3f
 8003a40:	0a6fd060 	.word	0x0a6fd060
 8003a44:	099cf4e1 	.word	0x099cf4e1
 8003a48:	1339e9c3 	.word	0x1339e9c3
 8003a4c:	19a28d05 	.word	0x19a28d05
 8003a50:	33451a0a 	.word	0x33451a0a
 8003a54:	0800ab4c 	.word	0x0800ab4c
 8003a58:	2000043c 	.word	0x2000043c
 8003a5c:	0800ab50 	.word	0x0800ab50
 8003a60:	20000440 	.word	0x20000440
 8003a64:	20000065 	.word	0x20000065

08003a68 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003a68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003a70:	f7ff fe0c 	bl	800368c <SpiritRadioGetSynthWord>
 8003a74:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8003a76:	f7ff fe2f 	bl	80036d8 <SpiritRadioGetBand>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8003a7e:	f000 fc81 	bl	8004384 <SpiritRadioGetRefDiv>
 8003a82:	4603      	mov	r3, r0
 8003a84:	3301      	adds	r3, #1
 8003a86:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fc fd3b 	bl	8000504 <__aeabi_ui2d>
 8003a8e:	4604      	mov	r4, r0
 8003a90:	460d      	mov	r5, r1
 8003a92:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <SpiritRadioGetFrequencyBase+0x90>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc fd34 	bl	8000504 <__aeabi_ui2d>
 8003a9c:	4680      	mov	r8, r0
 8003a9e:	4689      	mov	r9, r1
 8003aa0:	78bb      	ldrb	r3, [r7, #2]
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	4915      	ldr	r1, [pc, #84]	; (8003afc <SpiritRadioGetFrequencyBase+0x94>)
 8003aa6:	5c8a      	ldrb	r2, [r1, r2]
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	049b      	lsls	r3, r3, #18
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fc fd38 	bl	8000524 <__aeabi_i2d>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4640      	mov	r0, r8
 8003aba:	4649      	mov	r1, r9
 8003abc:	f7fc fec6 	bl	800084c <__aeabi_ddiv>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	f7fc fd96 	bl	80005f8 <__aeabi_dmul>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	ec43 2b17 	vmov	d7, r2, r3
 8003ad4:	eeb0 0a47 	vmov.f32	s0, s14
 8003ad8:	eef0 0a67 	vmov.f32	s1, s15
 8003adc:	f006 fe50 	bl	800a780 <round>
 8003ae0:	ec53 2b10 	vmov	r2, r3, d0
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f7fd f85e 	bl	8000ba8 <__aeabi_d2uiz>
 8003aec:	4603      	mov	r3, r0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003af8:	2000043c 	.word	0x2000043c
 8003afc:	0800ab4c 	.word	0x0800ab4c

08003b00 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003b10:	230f      	movs	r3, #15
 8003b12:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8003b18:	f000 fc86 	bl	8004428 <SpiritRadioGetDigDiv>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003b20:	e015      	b.n	8003b4e <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8003b22:	4b4f      	ldr	r3, [pc, #316]	; (8003c60 <SpiritRadioSearchDatarateME+0x160>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b2a:	f1c3 0114 	rsb	r1, r3, #20
 8003b2e:	7ebb      	ldrb	r3, [r7, #26]
 8003b30:	440b      	add	r3, r1
 8003b32:	fa22 f303 	lsr.w	r3, r2, r3
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d302      	bcc.n	8003b42 <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	763b      	strb	r3, [r7, #24]
 8003b40:	e005      	b.n	8003b4e <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 8003b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8003b4e:	7e3b      	ldrb	r3, [r7, #24]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <SpiritRadioSearchDatarateME+0x5e>
 8003b56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	dae1      	bge.n	8003b22 <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 8003b5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	da01      	bge.n	8003b6a <SpiritRadioSearchDatarateME+0x6a>
 8003b66:	2300      	movs	r3, #0
 8003b68:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 8003b6a:	7ffa      	ldrb	r2, [r7, #31]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003b70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b74:	f1c3 0317 	rsb	r3, r3, #23
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	4b38      	ldr	r3, [pc, #224]	; (8003c60 <SpiritRadioSearchDatarateME+0x160>)
 8003b7e:	6819      	ldr	r1, [r3, #0]
 8003b80:	7ebb      	ldrb	r3, [r7, #26]
 8003b82:	3305      	adds	r3, #5
 8003b84:	fa21 f303 	lsr.w	r3, r1, r3
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	77bb      	strb	r3, [r7, #30]
 8003b92:	e031      	b.n	8003bf8 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 8003b94:	7e7a      	ldrb	r2, [r7, #25]
 8003b96:	7fbb      	ldrb	r3, [r7, #30]
 8003b98:	4413      	add	r3, r2
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d021      	beq.n	8003be2 <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	7e7b      	ldrb	r3, [r7, #25]
 8003ba4:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8003ba8:	7fbb      	ldrb	r3, [r7, #30]
 8003baa:	440b      	add	r3, r1
 8003bac:	3b01      	subs	r3, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	4b2b      	ldr	r3, [pc, #172]	; (8003c60 <SpiritRadioSearchDatarateME+0x160>)
 8003bb2:	6819      	ldr	r1, [r3, #0]
 8003bb4:	7ebb      	ldrb	r3, [r7, #26]
 8003bb6:	3305      	adds	r3, #5
 8003bb8:	fa21 f303 	lsr.w	r3, r1, r3
 8003bbc:	fb03 f100 	mul.w	r1, r3, r0
 8003bc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bc4:	f1c3 0317 	rsb	r3, r3, #23
 8003bc8:	fa21 f303 	lsr.w	r3, r1, r3
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	7fbb      	ldrb	r3, [r7, #30]
 8003bd4:	b212      	sxth	r2, r2
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	3320      	adds	r3, #32
 8003bda:	443b      	add	r3, r7
 8003bdc:	f823 2c10 	strh.w	r2, [r3, #-16]
 8003be0:	e007      	b.n	8003bf2 <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 8003be2:	7fbb      	ldrb	r3, [r7, #30]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	3320      	adds	r3, #32
 8003be8:	443b      	add	r3, r7
 8003bea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003bee:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 8003bf2:	7fbb      	ldrb	r3, [r7, #30]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	77bb      	strb	r3, [r7, #30]
 8003bf8:	7fbb      	ldrb	r3, [r7, #30]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d9ca      	bls.n	8003b94 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8003bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c02:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8003c04:	2300      	movs	r3, #0
 8003c06:	76fb      	strb	r3, [r7, #27]
 8003c08:	e021      	b.n	8003c4e <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8003c0a:	7efb      	ldrb	r3, [r7, #27]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	3320      	adds	r3, #32
 8003c10:	443b      	add	r3, r7
 8003c12:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bfb8      	it	lt
 8003c1a:	425b      	neglt	r3, r3
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	8bba      	ldrh	r2, [r7, #28]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d911      	bls.n	8003c48 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8003c24:	7efb      	ldrb	r3, [r7, #27]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	3320      	adds	r3, #32
 8003c2a:	443b      	add	r3, r7
 8003c2c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bfb8      	it	lt
 8003c34:	425b      	neglt	r3, r3
 8003c36:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003c38:	7e7a      	ldrb	r2, [r7, #25]
 8003c3a:	7efb      	ldrb	r3, [r7, #27]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003c48:	7efb      	ldrb	r3, [r7, #27]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	76fb      	strb	r3, [r7, #27]
 8003c4e:	7efb      	ldrb	r3, [r7, #27]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d9da      	bls.n	8003c0a <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3720      	adds	r7, #32
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	2000043c 	.word	0x2000043c

08003c64 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	; 0x28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003c76:	f000 fbd7 	bl	8004428 <SpiritRadioGetDigDiv>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003c80:	2302      	movs	r3, #2
 8003c82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003c86:	e002      	b.n	8003c8e <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003c8e:	4b63      	ldr	r3, [pc, #396]	; (8003e1c <SpiritRadioSearchChannelBwME+0x1b8>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	4a61      	ldr	r2, [pc, #388]	; (8003e20 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003caa:	e006      	b.n	8003cba <SpiritRadioSearchChannelBwME+0x56>
 8003cac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003cba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cbe:	2b59      	cmp	r3, #89	; 0x59
 8003cc0:	dc0f      	bgt.n	8003ce2 <SpiritRadioSearchChannelBwME+0x7e>
 8003cc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cc6:	4a57      	ldr	r2, [pc, #348]	; (8003e24 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	fb02 f303 	mul.w	r3, r2, r3
 8003cd4:	4a54      	ldr	r2, [pc, #336]	; (8003e28 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	0adb      	lsrs	r3, r3, #11
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d3e4      	bcc.n	8003cac <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 8003ce2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d077      	beq.n	8003dda <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8003cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cee:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003cf6:	e03a      	b.n	8003d6e <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003cf8:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003cfc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d00:	4413      	add	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	dc06      	bgt.n	8003d14 <SpiritRadioSearchChannelBwME+0xb0>
 8003d06:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003d0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d0e:	4413      	add	r3, r2
 8003d10:	2b5a      	cmp	r3, #90	; 0x5a
 8003d12:	dc1e      	bgt.n	8003d52 <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003d1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d20:	440b      	add	r3, r1
 8003d22:	3b01      	subs	r3, #1
 8003d24:	493f      	ldr	r1, [pc, #252]	; (8003e24 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003d26:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	fb01 f303 	mul.w	r3, r1, r3
 8003d32:	493d      	ldr	r1, [pc, #244]	; (8003e28 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003d34:	fba1 1303 	umull	r1, r3, r1, r3
 8003d38:	0adb      	lsrs	r3, r3, #11
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d44:	b212      	sxth	r2, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	3328      	adds	r3, #40	; 0x28
 8003d4a:	443b      	add	r3, r7
 8003d4c:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003d50:	e008      	b.n	8003d64 <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8003d52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	3328      	adds	r3, #40	; 0x28
 8003d5a:	443b      	add	r3, r7
 8003d5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003d60:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003d64:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003d6e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d9c0      	bls.n	8003cf8 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d7a:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003d82:	e026      	b.n	8003dd2 <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003d84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	3328      	adds	r3, #40	; 0x28
 8003d8c:	443b      	add	r3, r7
 8003d8e:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bfb8      	it	lt
 8003d96:	425b      	neglt	r3, r3
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d913      	bls.n	8003dc8 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003da0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	3328      	adds	r3, #40	; 0x28
 8003da8:	443b      	add	r3, r7
 8003daa:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bfb8      	it	lt
 8003db2:	425b      	neglt	r3, r3
 8003db4:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 8003db6:	7efa      	ldrb	r2, [r7, #27]
 8003db8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003dbc:	4413      	add	r3, r2
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8003dc8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003dd2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d9d4      	bls.n	8003d84 <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8003dda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003dde:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <SpiritRadioSearchChannelBwME+0x1c8>)
 8003de0:	fb82 1203 	smull	r1, r2, r2, r3
 8003de4:	1052      	asrs	r2, r2, #1
 8003de6:	17db      	asrs	r3, r3, #31
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	b25b      	sxtb	r3, r3
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8003df2:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <SpiritRadioSearchChannelBwME+0x1c8>)
 8003df8:	fb83 1302 	smull	r1, r3, r3, r2
 8003dfc:	1059      	asrs	r1, r3, #1
 8003dfe:	17d3      	asrs	r3, r2, #31
 8003e00:	1ac9      	subs	r1, r1, r3
 8003e02:	460b      	mov	r3, r1
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	440b      	add	r3, r1
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	b25b      	sxtb	r3, r3
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	701a      	strb	r2, [r3, #0]
  
}
 8003e12:	bf00      	nop
 8003e14:	3728      	adds	r7, #40	; 0x28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	2000043c 	.word	0x2000043c
 8003e20:	51eb851f 	.word	0x51eb851f
 8003e24:	0800ab54 	.word	0x0800ab54
 8003e28:	c9a633fd 	.word	0xc9a633fd
 8003e2c:	38e38e39 	.word	0x38e38e39

08003e30 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003e30:	b5b0      	push	{r4, r5, r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003e40:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <SpiritRadioSearchFreqDevME+0x160>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	ee07 3a90 	vmov	s15, r3
 8003e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e4c:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003f94 <SpiritRadioSearchFreqDevME+0x164>
 8003e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e54:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e5e:	e028      	b.n	8003eb2 <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e64:	2201      	movs	r2, #1
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fc fb5a 	bl	8000524 <__aeabi_i2d>
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	4b48      	ldr	r3, [pc, #288]	; (8003f98 <SpiritRadioSearchFreqDevME+0x168>)
 8003e76:	f7fc fbbf 	bl	80005f8 <__aeabi_dmul>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	f7fc fe91 	bl	8000ba8 <__aeabi_d2uiz>
 8003e86:	ee07 0a90 	vmov	s15, r0
 8003e8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e9a:	ee17 3a90 	vmov	r3, s15
 8003e9e:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d309      	bcc.n	8003ebc <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eac:	3301      	adds	r3, #1
 8003eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eb6:	2b09      	cmp	r3, #9
 8003eb8:	d9d2      	bls.n	8003e60 <SpiritRadioSearchFreqDevME+0x30>
 8003eba:	e000      	b.n	8003ebe <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003ebc:	bf00      	nop
  }
  (*pcE) = i;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ec4:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ecc:	e043      	b.n	8003f56 <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8003ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fc fb24 	bl	8000524 <__aeabi_i2d>
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	4b2e      	ldr	r3, [pc, #184]	; (8003f9c <SpiritRadioSearchFreqDevME+0x16c>)
 8003ee2:	f7fc f9d3 	bl	800028c <__adddf3>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ef6:	f7fc fca9 	bl	800084c <__aeabi_ddiv>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4614      	mov	r4, r2
 8003f00:	461d      	mov	r5, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	2301      	movs	r3, #1
 8003f0a:	4093      	lsls	r3, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fc fb09 	bl	8000524 <__aeabi_i2d>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4620      	mov	r0, r4
 8003f18:	4629      	mov	r1, r5
 8003f1a:	f7fc fb6d 	bl	80005f8 <__aeabi_dmul>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	f7fc fe3f 	bl	8000ba8 <__aeabi_d2uiz>
 8003f2a:	ee07 0a90 	vmov	s15, r0
 8003f2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f32:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f3e:	ee17 3a90 	vmov	r3, s15
 8003f42:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d309      	bcc.n	8003f60 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f50:	3301      	adds	r3, #1
 8003f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f5a:	2b07      	cmp	r3, #7
 8003f5c:	d9b7      	bls.n	8003ece <SpiritRadioSearchFreqDevME+0x9e>
 8003f5e:	e000      	b.n	8003f62 <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003f60:	bf00      	nop
  }
  
  (*pcM)=i;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003f68:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	1ad2      	subs	r2, r2, r3
 8003f70:	69f9      	ldr	r1, [r7, #28]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1acb      	subs	r3, r1, r3
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d205      	bcs.n	8003f86 <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	701a      	strb	r2, [r3, #0]
  
}
 8003f86:	bf00      	nop
 8003f88:	3728      	adds	r7, #40	; 0x28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	2000043c 	.word	0x2000043c
 8003f94:	48800000 	.word	0x48800000
 8003f98:	401e0000 	.word	0x401e0000
 8003f9c:	40200000 	.word	0x40200000

08003fa0 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4a74      	ldr	r2, [pc, #464]	; (8004188 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d30c      	bcc.n	8003fd6 <SpiritRadioGetdBm2Reg+0x36>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4a73      	ldr	r2, [pc, #460]	; (800418c <SpiritRadioGetdBm2Reg+0x1ec>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d808      	bhi.n	8003fd6 <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a71      	ldr	r2, [pc, #452]	; (8004190 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d822      	bhi.n	8004016 <SpiritRadioGetdBm2Reg+0x76>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	75fb      	strb	r3, [r7, #23]
 8003fd4:	e01f      	b.n	8004016 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a6e      	ldr	r2, [pc, #440]	; (8004194 <SpiritRadioGetdBm2Reg+0x1f4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d906      	bls.n	8003fec <SpiritRadioGetdBm2Reg+0x4c>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a6d      	ldr	r2, [pc, #436]	; (8004198 <SpiritRadioGetdBm2Reg+0x1f8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d802      	bhi.n	8003fec <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	75fb      	strb	r3, [r7, #23]
 8003fea:	e014      	b.n	8004016 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a6b      	ldr	r2, [pc, #428]	; (800419c <SpiritRadioGetdBm2Reg+0x1fc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d906      	bls.n	8004002 <SpiritRadioGetdBm2Reg+0x62>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4a6a      	ldr	r2, [pc, #424]	; (80041a0 <SpiritRadioGetdBm2Reg+0x200>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d802      	bhi.n	8004002 <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	75fb      	strb	r3, [r7, #23]
 8004000:	e009      	b.n	8004016 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a67      	ldr	r2, [pc, #412]	; (80041a4 <SpiritRadioGetdBm2Reg+0x204>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d905      	bls.n	8004016 <SpiritRadioGetdBm2Reg+0x76>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a66      	ldr	r2, [pc, #408]	; (80041a8 <SpiritRadioGetdBm2Reg+0x208>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d801      	bhi.n	8004016 <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 8004012:	2304      	movs	r3, #4
 8004014:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8004016:	2301      	movs	r3, #1
 8004018:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 800401a:	edd7 7a02 	vldr	s15, [r7, #8]
 800401e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004026:	dd2f      	ble.n	8004088 <SpiritRadioGetdBm2Reg+0xe8>
 8004028:	7dfa      	ldrb	r2, [r7, #23]
 800402a:	4960      	ldr	r1, [pc, #384]	; (80041ac <SpiritRadioGetdBm2Reg+0x20c>)
 800402c:	4613      	mov	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	440b      	add	r3, r1
 8004036:	3308      	adds	r3, #8
 8004038:	edd3 7a00 	vldr	s15, [r3]
 800403c:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8004040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004044:	7dfa      	ldrb	r2, [r7, #23]
 8004046:	4959      	ldr	r1, [pc, #356]	; (80041ac <SpiritRadioGetdBm2Reg+0x20c>)
 8004048:	4613      	mov	r3, r2
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	4413      	add	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	440b      	add	r3, r1
 8004052:	330c      	adds	r3, #12
 8004054:	ed93 6a00 	vldr	s12, [r3]
 8004058:	7dfa      	ldrb	r2, [r7, #23]
 800405a:	4954      	ldr	r1, [pc, #336]	; (80041ac <SpiritRadioGetdBm2Reg+0x20c>)
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	440b      	add	r3, r1
 8004066:	3308      	adds	r3, #8
 8004068:	edd3 6a00 	vldr	s13, [r3]
 800406c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004074:	ed97 7a02 	vldr	s14, [r7, #8]
 8004078:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800407c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004080:	dd02      	ble.n	8004088 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 8004082:	2300      	movs	r3, #0
 8004084:	75bb      	strb	r3, [r7, #22]
 8004086:	e035      	b.n	80040f4 <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8004088:	edd7 7a02 	vldr	s15, [r7, #8]
 800408c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004094:	d82e      	bhi.n	80040f4 <SpiritRadioGetdBm2Reg+0x154>
 8004096:	7dfa      	ldrb	r2, [r7, #23]
 8004098:	4944      	ldr	r1, [pc, #272]	; (80041ac <SpiritRadioGetdBm2Reg+0x20c>)
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	440b      	add	r3, r1
 80040a4:	3308      	adds	r3, #8
 80040a6:	edd3 7a00 	vldr	s15, [r3]
 80040aa:	eddf 6a41 	vldr	s13, [pc, #260]	; 80041b0 <SpiritRadioGetdBm2Reg+0x210>
 80040ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b2:	7dfa      	ldrb	r2, [r7, #23]
 80040b4:	493d      	ldr	r1, [pc, #244]	; (80041ac <SpiritRadioGetdBm2Reg+0x20c>)
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	440b      	add	r3, r1
 80040c0:	330c      	adds	r3, #12
 80040c2:	ed93 6a00 	vldr	s12, [r3]
 80040c6:	7dfa      	ldrb	r2, [r7, #23]
 80040c8:	4938      	ldr	r1, [pc, #224]	; (80041ac <SpiritRadioGetdBm2Reg+0x20c>)
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	440b      	add	r3, r1
 80040d4:	3308      	adds	r3, #8
 80040d6:	edd3 6a00 	vldr	s13, [r3]
 80040da:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80040de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80040e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ee:	d501      	bpl.n	80040f4 <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 80040f0:	2302      	movs	r3, #2
 80040f2:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 80040f4:	7dfa      	ldrb	r2, [r7, #23]
 80040f6:	7dbb      	ldrb	r3, [r7, #22]
 80040f8:	0059      	lsls	r1, r3, #1
 80040fa:	482c      	ldr	r0, [pc, #176]	; (80041ac <SpiritRadioGetdBm2Reg+0x20c>)
 80040fc:	4613      	mov	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4413      	add	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	440b      	add	r3, r1
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4403      	add	r3, r0
 800410a:	ed93 7a00 	vldr	s14, [r3]
 800410e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004116:	7dfa      	ldrb	r2, [r7, #23]
 8004118:	7dbb      	ldrb	r3, [r7, #22]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	1c59      	adds	r1, r3, #1
 800411e:	4823      	ldr	r0, [pc, #140]	; (80041ac <SpiritRadioGetdBm2Reg+0x20c>)
 8004120:	4613      	mov	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4413      	add	r3, r2
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	440b      	add	r3, r1
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4403      	add	r3, r0
 800412e:	edd3 7a00 	vldr	s15, [r3]
 8004132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004136:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 800413a:	edd7 7a04 	vldr	s15, [r7, #16]
 800413e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414a:	d503      	bpl.n	8004154 <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 800414c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	e00a      	b.n	800416a <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 8004154:	edd7 7a04 	vldr	s15, [r7, #16]
 8004158:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80041b4 <SpiritRadioGetdBm2Reg+0x214>
 800415c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004164:	dd01      	ble.n	800416a <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 8004166:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <SpiritRadioGetdBm2Reg+0x218>)
 8004168:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 800416a:	edd7 7a04 	vldr	s15, [r7, #16]
 800416e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004172:	edc7 7a01 	vstr	s15, [r7, #4]
 8004176:	793b      	ldrb	r3, [r7, #4]
 8004178:	b2db      	uxtb	r3, r3
}
 800417a:	4618      	mov	r0, r3
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	2e5f5680 	.word	0x2e5f5680
 800418c:	390c2fe0 	.word	0x390c2fe0
 8004190:	35a4e8ff 	.word	0x35a4e8ff
 8004194:	1701e47f 	.word	0x1701e47f
 8004198:	1c146a60 	.word	0x1c146a60
 800419c:	11d260bf 	.word	0x11d260bf
 80041a0:	14ced7e0 	.word	0x14ced7e0
 80041a4:	08e18f3f 	.word	0x08e18f3f
 80041a8:	0a6fd060 	.word	0x0a6fd060
 80041ac:	0800ac28 	.word	0x0800ac28
 80041b0:	42200000 	.word	0x42200000
 80041b4:	42b40000 	.word	0x42b40000
 80041b8:	42b40000 	.word	0x42b40000

080041bc <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	ed87 0a00 	vstr	s0, [r7]
 80041c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 80041ca:	f7ff fc4d 	bl	8003a68 <SpiritRadioGetFrequencyBase>
 80041ce:	4603      	mov	r3, r0
 80041d0:	ed97 0a00 	vldr	s0, [r7]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fee3 	bl	8003fa0 <SpiritRadioGetdBm2Reg>
 80041da:	4603      	mov	r3, r0
 80041dc:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	f1c3 0317 	rsb	r3, r3, #23
 80041e4:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 80041e6:	f107 020e 	add.w	r2, r7, #14
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2101      	movs	r1, #1
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f9e4 	bl	80045bc <RadioSpiWriteRegisters>
 80041f4:	4602      	mov	r2, r0
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <SpiritRadioSetPALeveldBm+0x50>)
 80041f8:	b212      	sxth	r2, r2
 80041fa:	4611      	mov	r1, r2
 80041fc:	7019      	strb	r1, [r3, #0]
 80041fe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004202:	705a      	strb	r2, [r3, #1]
  
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000440 	.word	0x20000440

08004210 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800421a:	f107 030f 	add.w	r3, r7, #15
 800421e:	461a      	mov	r2, r3
 8004220:	2101      	movs	r1, #1
 8004222:	2018      	movs	r0, #24
 8004224:	f000 fa16 	bl	8004654 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800422e:	b2db      	uxtb	r3, r3
 8004230:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8004232:	7bfa      	ldrb	r2, [r7, #15]
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	4313      	orrs	r3, r2
 8004238:	b2db      	uxtb	r3, r3
 800423a:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800423c:	f107 030f 	add.w	r3, r7, #15
 8004240:	461a      	mov	r2, r3
 8004242:	2101      	movs	r1, #1
 8004244:	2018      	movs	r0, #24
 8004246:	f000 f9b9 	bl	80045bc <RadioSpiWriteRegisters>
 800424a:	4602      	mov	r2, r0
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <SpiritRadioSetPACwc+0x54>)
 800424e:	b212      	sxth	r2, r2
 8004250:	4611      	mov	r1, r2
 8004252:	7019      	strb	r1, [r3, #0]
 8004254:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004258:	705a      	strb	r2, [r3, #1]
  
}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000440 	.word	0x20000440

08004268 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004272:	f107 030f 	add.w	r3, r7, #15
 8004276:	461a      	mov	r2, r3
 8004278:	2101      	movs	r1, #1
 800427a:	2018      	movs	r0, #24
 800427c:	f000 f9ea 	bl	8004654 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	f023 0307 	bic.w	r3, r3, #7
 8004286:	b2db      	uxtb	r3, r3
 8004288:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 800428a:	7bfa      	ldrb	r2, [r7, #15]
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	4313      	orrs	r3, r2
 8004290:	b2db      	uxtb	r3, r3
 8004292:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004294:	f107 030f 	add.w	r3, r7, #15
 8004298:	461a      	mov	r2, r3
 800429a:	2101      	movs	r1, #1
 800429c:	2018      	movs	r0, #24
 800429e:	f000 f98d 	bl	80045bc <RadioSpiWriteRegisters>
 80042a2:	4602      	mov	r2, r0
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <SpiritRadioSetPALevelMaxIndex+0x54>)
 80042a6:	b212      	sxth	r2, r2
 80042a8:	4611      	mov	r1, r2
 80042aa:	7019      	strb	r1, [r3, #0]
 80042ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80042b0:	705a      	strb	r2, [r3, #1]
  
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000440 	.word	0x20000440

080042c0 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 80042ce:	f107 030f 	add.w	r3, r7, #15
 80042d2:	461a      	mov	r2, r3
 80042d4:	2101      	movs	r1, #1
 80042d6:	201e      	movs	r0, #30
 80042d8:	f000 f9bc 	bl	8004654 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d105      	bne.n	80042ee <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	73fb      	strb	r3, [r7, #15]
 80042ec:	e004      	b.n	80042f8 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 80042f8:	f107 030f 	add.w	r3, r7, #15
 80042fc:	461a      	mov	r2, r3
 80042fe:	2101      	movs	r1, #1
 8004300:	201e      	movs	r0, #30
 8004302:	f000 f95b 	bl	80045bc <RadioSpiWriteRegisters>
 8004306:	4602      	mov	r2, r0
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <SpiritRadioAFCFreezeOnSync+0x60>)
 800430a:	b212      	sxth	r2, r2
 800430c:	4611      	mov	r1, r2
 800430e:	7019      	strb	r1, [r3, #0]
 8004310:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004314:	705a      	strb	r2, [r3, #1]
  
}
 8004316:	bf00      	nop
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000440 	.word	0x20000440

08004324 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800432e:	f107 030f 	add.w	r3, r7, #15
 8004332:	461a      	mov	r2, r3
 8004334:	2101      	movs	r1, #1
 8004336:	209e      	movs	r0, #158	; 0x9e
 8004338:	f000 f98c 	bl	8004654 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d105      	bne.n	800434e <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8004342:	7bfb      	ldrb	r3, [r7, #15]
 8004344:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004348:	b2db      	uxtb	r3, r3
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e004      	b.n	8004358 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004354:	b2db      	uxtb	r3, r3
 8004356:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004358:	f107 030f 	add.w	r3, r7, #15
 800435c:	461a      	mov	r2, r3
 800435e:	2101      	movs	r1, #1
 8004360:	209e      	movs	r0, #158	; 0x9e
 8004362:	f000 f92b 	bl	80045bc <RadioSpiWriteRegisters>
 8004366:	4602      	mov	r2, r0
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <SpiritRadioSetRefDiv+0x5c>)
 800436a:	b212      	sxth	r2, r2
 800436c:	4611      	mov	r1, r2
 800436e:	7019      	strb	r1, [r3, #0]
 8004370:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004374:	705a      	strb	r2, [r3, #1]
  
}
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000440 	.word	0x20000440

08004384 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800438a:	1dfb      	adds	r3, r7, #7
 800438c:	461a      	mov	r2, r3
 800438e:	2101      	movs	r1, #1
 8004390:	209e      	movs	r0, #158	; 0x9e
 8004392:	f000 f95f 	bl	8004654 <RadioSpiReadRegisters>
 8004396:	4602      	mov	r2, r0
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <SpiritRadioGetRefDiv+0x40>)
 800439a:	b212      	sxth	r2, r2
 800439c:	4611      	mov	r1, r2
 800439e:	7019      	strb	r1, [r3, #0]
 80043a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80043a4:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	09db      	lsrs	r3, r3, #7
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 80043b8:	2300      	movs	r3, #0
  }
  
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000440 	.word	0x20000440

080043c8 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80043d2:	f107 030f 	add.w	r3, r7, #15
 80043d6:	461a      	mov	r2, r3
 80043d8:	2101      	movs	r1, #1
 80043da:	20b4      	movs	r0, #180	; 0xb4
 80043dc:	f000 f93a 	bl	8004654 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d105      	bne.n	80043f2 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	f023 0308 	bic.w	r3, r3, #8
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	73fb      	strb	r3, [r7, #15]
 80043f0:	e004      	b.n	80043fc <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	f043 0308 	orr.w	r3, r3, #8
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80043fc:	f107 030f 	add.w	r3, r7, #15
 8004400:	461a      	mov	r2, r3
 8004402:	2101      	movs	r1, #1
 8004404:	20b4      	movs	r0, #180	; 0xb4
 8004406:	f000 f8d9 	bl	80045bc <RadioSpiWriteRegisters>
 800440a:	4602      	mov	r2, r0
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <SpiritRadioSetDigDiv+0x5c>)
 800440e:	b212      	sxth	r2, r2
 8004410:	4611      	mov	r1, r2
 8004412:	7019      	strb	r1, [r3, #0]
 8004414:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004418:	705a      	strb	r2, [r3, #1]
  
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000440 	.word	0x20000440

08004428 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 800442e:	1dfb      	adds	r3, r7, #7
 8004430:	461a      	mov	r2, r3
 8004432:	2101      	movs	r1, #1
 8004434:	20b4      	movs	r0, #180	; 0xb4
 8004436:	f000 f90d 	bl	8004654 <RadioSpiReadRegisters>
 800443a:	4602      	mov	r2, r0
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <SpiritRadioGetDigDiv+0x40>)
 800443e:	b212      	sxth	r2, r2
 8004440:	4611      	mov	r1, r2
 8004442:	7019      	strb	r1, [r3, #0]
 8004444:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004448:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	08db      	lsrs	r3, r3, #3
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8004458:	2300      	movs	r3, #0
 800445a:	e000      	b.n	800445e <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 800445c:	2301      	movs	r3, #1
  }
  
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20000440 	.word	0x20000440

0800446c <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8004470:	4b03      	ldr	r3, [pc, #12]	; (8004480 <SpiritRadioGetXtalFrequency+0x14>)
 8004472:	681b      	ldr	r3, [r3, #0]
}
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	2000043c 	.word	0x2000043c

08004484 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <SpiritRadioSetXtalFrequency+0x1c>)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6013      	str	r3, [r2, #0]
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	2000043c 	.word	0x2000043c

080044a4 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 80044ae:	1dfb      	adds	r3, r7, #7
 80044b0:	461a      	mov	r2, r3
 80044b2:	2101      	movs	r1, #1
 80044b4:	2054      	movs	r0, #84	; 0x54
 80044b6:	f000 f881 	bl	80045bc <RadioSpiWriteRegisters>
 80044ba:	4602      	mov	r2, r0
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <SpiritTimerSetRxTimeoutCounter+0x30>)
 80044be:	b212      	sxth	r2, r2
 80044c0:	4611      	mov	r1, r2
 80044c2:	7019      	strb	r1, [r3, #0]
 80044c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80044c8:	705a      	strb	r2, [r3, #1]

}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000440 	.word	0x20000440

080044d8 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 80044e2:	f107 030c 	add.w	r3, r7, #12
 80044e6:	461a      	mov	r2, r3
 80044e8:	2102      	movs	r1, #2
 80044ea:	204f      	movs	r0, #79	; 0x4f
 80044ec:	f000 f8b2 	bl	8004654 <RadioSpiReadRegisters>
 80044f0:	4602      	mov	r2, r0
 80044f2:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 80044f4:	b212      	sxth	r2, r2
 80044f6:	4611      	mov	r1, r2
 80044f8:	7019      	strb	r1, [r3, #0]
 80044fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80044fe:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8004500:	7b3b      	ldrb	r3, [r7, #12]
 8004502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004506:	b2db      	uxtb	r3, r3
 8004508:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 800450a:	7b3b      	ldrb	r3, [r7, #12]
 800450c:	b25a      	sxtb	r2, r3
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	b25b      	sxtb	r3, r3
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	b25b      	sxtb	r3, r3
 800451a:	4313      	orrs	r3, r2
 800451c:	b25b      	sxtb	r3, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8004522:	7b7b      	ldrb	r3, [r7, #13]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	b2db      	uxtb	r3, r3
 800452a:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 800452c:	7b7b      	ldrb	r3, [r7, #13]
 800452e:	b25a      	sxtb	r2, r3
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	015b      	lsls	r3, r3, #5
 8004534:	b25b      	sxtb	r3, r3
 8004536:	4313      	orrs	r3, r2
 8004538:	b25b      	sxtb	r3, r3
 800453a:	b2db      	uxtb	r3, r3
 800453c:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 800453e:	f107 030c 	add.w	r3, r7, #12
 8004542:	461a      	mov	r2, r3
 8004544:	2102      	movs	r1, #2
 8004546:	204f      	movs	r0, #79	; 0x4f
 8004548:	f000 f838 	bl	80045bc <RadioSpiWriteRegisters>
 800454c:	4602      	mov	r2, r0
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004550:	b212      	sxth	r2, r2
 8004552:	4611      	mov	r1, r2
 8004554:	7019      	strb	r1, [r3, #0]
 8004556:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800455a:	705a      	strb	r2, [r3, #1]

}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000440 	.word	0x20000440

08004568 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 800456e:	1d3b      	adds	r3, r7, #4
 8004570:	461a      	mov	r2, r3
 8004572:	2102      	movs	r1, #2
 8004574:	20c0      	movs	r0, #192	; 0xc0
 8004576:	f000 f86d 	bl	8004654 <RadioSpiReadRegisters>
 800457a:	4603      	mov	r3, r0
 800457c:	4a09      	ldr	r2, [pc, #36]	; (80045a4 <SpiritRefreshStatus+0x3c>)
 800457e:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8004580:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <SpiritRefreshStatus+0x3c>)
 8004582:	781a      	ldrb	r2, [r3, #0]
 8004584:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8004586:	429a      	cmp	r2, r3
 8004588:	d1f1      	bne.n	800456e <SpiritRefreshStatus+0x6>
 800458a:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <SpiritRefreshStatus+0x40>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8004594:	4293      	cmp	r3, r2
 8004596:	d1ea      	bne.n	800456e <SpiritRefreshStatus+0x6>

}
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000440 	.word	0x20000440
 80045a8:	20000441 	.word	0x20000441

080045ac <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
//   if (radioSpi->State == HAL_SPI_STATE_RESET)
//   {
//     Error_Handler();
//   }
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	4603      	mov	r3, r0
 80045c4:	603a      	str	r2, [r7, #0]
 80045c6:	71fb      	strb	r3, [r7, #7]
 80045c8:	460b      	mov	r3, r1
 80045ca:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 80045cc:	2300      	movs	r3, #0
 80045ce:	743b      	strb	r3, [r7, #16]
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80045d4:	2017      	movs	r0, #23
 80045d6:	f000 fae8 	bl	8004baa <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 80045da:	2200      	movs	r2, #0
 80045dc:	2120      	movs	r1, #32
 80045de:	481b      	ldr	r0, [pc, #108]	; (800464c <RadioSpiWriteRegisters+0x90>)
 80045e0:	f000 fd9c 	bl	800511c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80045e4:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <RadioSpiWriteRegisters+0x94>)
 80045e6:	6818      	ldr	r0, [r3, #0]
 80045e8:	f107 020c 	add.w	r2, r7, #12
 80045ec:	f107 0110 	add.w	r1, r7, #16
 80045f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	2302      	movs	r3, #2
 80045f8:	f001 fef0 	bl	80063dc <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80045fc:	4b14      	ldr	r3, [pc, #80]	; (8004650 <RadioSpiWriteRegisters+0x94>)
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	79bb      	ldrb	r3, [r7, #6]
 8004602:	b29a      	uxth	r2, r3
 8004604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	f001 fc59 	bl	8005ec0 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800460e:	2201      	movs	r2, #1
 8004610:	2120      	movs	r1, #32
 8004612:	480e      	ldr	r0, [pc, #56]	; (800464c <RadioSpiWriteRegisters+0x90>)
 8004614:	f000 fd82 	bl	800511c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004618:	2017      	movs	r0, #23
 800461a:	f000 fab8 	bl	8004b8e <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800461e:	f107 0308 	add.w	r3, r7, #8
 8004622:	3301      	adds	r3, #1
 8004624:	7b3a      	ldrb	r2, [r7, #12]
 8004626:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004628:	f107 0308 	add.w	r3, r7, #8
 800462c:	7b7a      	ldrb	r2, [r7, #13]
 800462e:	701a      	strb	r2, [r3, #0]

  return status;
 8004630:	893b      	ldrh	r3, [r7, #8]
 8004632:	82bb      	strh	r3, [r7, #20]
 8004634:	2300      	movs	r3, #0
 8004636:	7d3a      	ldrb	r2, [r7, #20]
 8004638:	f362 0307 	bfi	r3, r2, #0, #8
 800463c:	7d7a      	ldrb	r2, [r7, #21]
 800463e:	f362 230f 	bfi	r3, r2, #8, #8

}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	48000400 	.word	0x48000400
 8004650:	20000068 	.word	0x20000068

08004654 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af02      	add	r7, sp, #8
 800465a:	4603      	mov	r3, r0
 800465c:	603a      	str	r2, [r7, #0]
 800465e:	71fb      	strb	r3, [r7, #7]
 8004660:	460b      	mov	r3, r1
 8004662:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 8004664:	2301      	movs	r3, #1
 8004666:	743b      	strb	r3, [r7, #16]
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800466c:	2017      	movs	r0, #23
 800466e:	f000 fa9c 	bl	8004baa <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004672:	2200      	movs	r2, #0
 8004674:	2120      	movs	r1, #32
 8004676:	481b      	ldr	r0, [pc, #108]	; (80046e4 <RadioSpiReadRegisters+0x90>)
 8004678:	f000 fd50 	bl	800511c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800467c:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <RadioSpiReadRegisters+0x94>)
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	f107 020c 	add.w	r2, r7, #12
 8004684:	f107 0110 	add.w	r1, r7, #16
 8004688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	2302      	movs	r3, #2
 8004690:	f001 fea4 	bl	80063dc <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004694:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <RadioSpiReadRegisters+0x94>)
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	79bb      	ldrb	r3, [r7, #6]
 800469a:	b29a      	uxth	r2, r3
 800469c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	f001 fd73 	bl	800618c <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80046a6:	2201      	movs	r2, #1
 80046a8:	2120      	movs	r1, #32
 80046aa:	480e      	ldr	r0, [pc, #56]	; (80046e4 <RadioSpiReadRegisters+0x90>)
 80046ac:	f000 fd36 	bl	800511c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80046b0:	2017      	movs	r0, #23
 80046b2:	f000 fa6c 	bl	8004b8e <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80046b6:	f107 0308 	add.w	r3, r7, #8
 80046ba:	3301      	adds	r3, #1
 80046bc:	7b3a      	ldrb	r2, [r7, #12]
 80046be:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80046c0:	f107 0308 	add.w	r3, r7, #8
 80046c4:	7b7a      	ldrb	r2, [r7, #13]
 80046c6:	701a      	strb	r2, [r3, #0]

  return status;
 80046c8:	893b      	ldrh	r3, [r7, #8]
 80046ca:	82bb      	strh	r3, [r7, #20]
 80046cc:	2300      	movs	r3, #0
 80046ce:	7d3a      	ldrb	r2, [r7, #20]
 80046d0:	f362 0307 	bfi	r3, r2, #0, #8
 80046d4:	7d7a      	ldrb	r2, [r7, #21]
 80046d6:	f362 230f 	bfi	r3, r2, #8, #8
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	48000400 	.word	0x48000400
 80046e8:	20000068 	.word	0x20000068

080046ec <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	4603      	mov	r3, r0
 80046f4:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	743b      	strb	r3, [r7, #16]
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80046fe:	2017      	movs	r0, #23
 8004700:	f000 fa53 	bl	8004baa <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004704:	2200      	movs	r2, #0
 8004706:	2120      	movs	r1, #32
 8004708:	4816      	ldr	r0, [pc, #88]	; (8004764 <RadioSpiCommandStrobes+0x78>)
 800470a:	f000 fd07 	bl	800511c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800470e:	4b16      	ldr	r3, [pc, #88]	; (8004768 <RadioSpiCommandStrobes+0x7c>)
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	f107 020c 	add.w	r2, r7, #12
 8004716:	f107 0110 	add.w	r1, r7, #16
 800471a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	2302      	movs	r3, #2
 8004722:	f001 fe5b 	bl	80063dc <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004726:	2201      	movs	r2, #1
 8004728:	2120      	movs	r1, #32
 800472a:	480e      	ldr	r0, [pc, #56]	; (8004764 <RadioSpiCommandStrobes+0x78>)
 800472c:	f000 fcf6 	bl	800511c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004730:	2017      	movs	r0, #23
 8004732:	f000 fa2c 	bl	8004b8e <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004736:	f107 0308 	add.w	r3, r7, #8
 800473a:	3301      	adds	r3, #1
 800473c:	7b3a      	ldrb	r2, [r7, #12]
 800473e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004740:	f107 0308 	add.w	r3, r7, #8
 8004744:	7b7a      	ldrb	r2, [r7, #13]
 8004746:	701a      	strb	r2, [r3, #0]

  return status;
 8004748:	893b      	ldrh	r3, [r7, #8]
 800474a:	82bb      	strh	r3, [r7, #20]
 800474c:	2300      	movs	r3, #0
 800474e:	7d3a      	ldrb	r2, [r7, #20]
 8004750:	f362 0307 	bfi	r3, r2, #0, #8
 8004754:	7d7a      	ldrb	r2, [r7, #21]
 8004756:	f362 230f 	bfi	r3, r2, #8, #8
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	48000400 	.word	0x48000400
 8004768:	20000068 	.word	0x20000068

0800476c <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af02      	add	r7, sp, #8
 8004772:	4603      	mov	r3, r0
 8004774:	6039      	str	r1, [r7, #0]
 8004776:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8004778:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800477c:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800477e:	2017      	movs	r0, #23
 8004780:	f000 fa13 	bl	8004baa <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004784:	2200      	movs	r2, #0
 8004786:	2120      	movs	r1, #32
 8004788:	481a      	ldr	r0, [pc, #104]	; (80047f4 <RadioSpiWriteFifo+0x88>)
 800478a:	f000 fcc7 	bl	800511c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800478e:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <RadioSpiWriteFifo+0x8c>)
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	f107 020c 	add.w	r2, r7, #12
 8004796:	f107 0110 	add.w	r1, r7, #16
 800479a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	2302      	movs	r3, #2
 80047a2:	f001 fe1b 	bl	80063dc <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <RadioSpiWriteFifo+0x8c>)
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047b2:	6839      	ldr	r1, [r7, #0]
 80047b4:	f001 fb84 	bl	8005ec0 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80047b8:	2201      	movs	r2, #1
 80047ba:	2120      	movs	r1, #32
 80047bc:	480d      	ldr	r0, [pc, #52]	; (80047f4 <RadioSpiWriteFifo+0x88>)
 80047be:	f000 fcad 	bl	800511c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80047c2:	2017      	movs	r0, #23
 80047c4:	f000 f9e3 	bl	8004b8e <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80047c8:	f107 0308 	add.w	r3, r7, #8
 80047cc:	3301      	adds	r3, #1
 80047ce:	7b3a      	ldrb	r2, [r7, #12]
 80047d0:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80047d2:	f107 0308 	add.w	r3, r7, #8
 80047d6:	7b7a      	ldrb	r2, [r7, #13]
 80047d8:	701a      	strb	r2, [r3, #0]

  return status;
 80047da:	893b      	ldrh	r3, [r7, #8]
 80047dc:	82bb      	strh	r3, [r7, #20]
 80047de:	2300      	movs	r3, #0
 80047e0:	7d3a      	ldrb	r2, [r7, #20]
 80047e2:	f362 0307 	bfi	r3, r2, #0, #8
 80047e6:	7d7a      	ldrb	r2, [r7, #21]
 80047e8:	f362 230f 	bfi	r3, r2, #8, #8
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	48000400 	.word	0x48000400
 80047f8:	20000068 	.word	0x20000068

080047fc <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 8004800:	2201      	movs	r2, #1
 8004802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004806:	4802      	ldr	r0, [pc, #8]	; (8004810 <RadioEnterShutdown+0x14>)
 8004808:	f000 fc88 	bl	800511c <HAL_GPIO_WritePin>
}
 800480c:	bf00      	nop
 800480e:	bd80      	pop	{r7, pc}
 8004810:	48000400 	.word	0x48000400

08004814 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 8004818:	2200      	movs	r2, #0
 800481a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800481e:	4804      	ldr	r0, [pc, #16]	; (8004830 <RadioExitShutdown+0x1c>)
 8004820:	f000 fc7c 	bl	800511c <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 8004824:	2001      	movs	r0, #1
 8004826:	f000 f875 	bl	8004914 <HAL_Delay>
}
 800482a:	bf00      	nop
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	48000400 	.word	0x48000400

08004834 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800483e:	2003      	movs	r0, #3
 8004840:	f000 f97e 	bl	8004b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004844:	2000      	movs	r0, #0
 8004846:	f000 f80d 	bl	8004864 <HAL_InitTick>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	71fb      	strb	r3, [r7, #7]
 8004854:	e001      	b.n	800485a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004856:	f7fc ff83 	bl	8001760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800485a:	79fb      	ldrb	r3, [r7, #7]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004870:	4b16      	ldr	r3, [pc, #88]	; (80048cc <HAL_InitTick+0x68>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d022      	beq.n	80048be <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004878:	4b15      	ldr	r3, [pc, #84]	; (80048d0 <HAL_InitTick+0x6c>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b13      	ldr	r3, [pc, #76]	; (80048cc <HAL_InitTick+0x68>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004884:	fbb1 f3f3 	udiv	r3, r1, r3
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f99a 	bl	8004bc6 <HAL_SYSTICK_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10f      	bne.n	80048b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b0f      	cmp	r3, #15
 800489c:	d809      	bhi.n	80048b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800489e:	2200      	movs	r2, #0
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	f04f 30ff 	mov.w	r0, #4294967295
 80048a6:	f000 f956 	bl	8004b56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80048aa:	4a0a      	ldr	r2, [pc, #40]	; (80048d4 <HAL_InitTick+0x70>)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	e007      	b.n	80048c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
 80048b6:	e004      	b.n	80048c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
 80048bc:	e001      	b.n	80048c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20000070 	.word	0x20000070
 80048d0:	20000018 	.word	0x20000018
 80048d4:	2000006c 	.word	0x2000006c

080048d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_IncTick+0x1c>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_IncTick+0x20>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4413      	add	r3, r2
 80048e6:	4a03      	ldr	r2, [pc, #12]	; (80048f4 <HAL_IncTick+0x1c>)
 80048e8:	6013      	str	r3, [r2, #0]
}
 80048ea:	bf00      	nop
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	20000444 	.word	0x20000444
 80048f8:	20000070 	.word	0x20000070

080048fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004900:	4b03      	ldr	r3, [pc, #12]	; (8004910 <HAL_GetTick+0x14>)
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000444 	.word	0x20000444

08004914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800491c:	f7ff ffee 	bl	80048fc <HAL_GetTick>
 8004920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d004      	beq.n	8004938 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <HAL_Delay+0x40>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004938:	bf00      	nop
 800493a:	f7ff ffdf 	bl	80048fc <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	429a      	cmp	r2, r3
 8004948:	d8f7      	bhi.n	800493a <HAL_Delay+0x26>
  {
  }
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20000070 	.word	0x20000070

08004958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004974:	4013      	ands	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800498a:	4a04      	ldr	r2, [pc, #16]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	60d3      	str	r3, [r2, #12]
}
 8004990:	bf00      	nop
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <__NVIC_GetPriorityGrouping+0x18>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 0307 	and.w	r3, r3, #7
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	db0b      	blt.n	80049e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	f003 021f 	and.w	r2, r3, #31
 80049d4:	4907      	ldr	r1, [pc, #28]	; (80049f4 <__NVIC_EnableIRQ+0x38>)
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	2001      	movs	r0, #1
 80049de:	fa00 f202 	lsl.w	r2, r0, r2
 80049e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	e000e100 	.word	0xe000e100

080049f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	db12      	blt.n	8004a30 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	f003 021f 	and.w	r2, r3, #31
 8004a10:	490a      	ldr	r1, [pc, #40]	; (8004a3c <__NVIC_DisableIRQ+0x44>)
 8004a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	2001      	movs	r0, #1
 8004a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a1e:	3320      	adds	r3, #32
 8004a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a24:	f3bf 8f4f 	dsb	sy
}
 8004a28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a2a:	f3bf 8f6f 	isb	sy
}
 8004a2e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	e000e100 	.word	0xe000e100

08004a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	6039      	str	r1, [r7, #0]
 8004a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	db0a      	blt.n	8004a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	490c      	ldr	r1, [pc, #48]	; (8004a8c <__NVIC_SetPriority+0x4c>)
 8004a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5e:	0112      	lsls	r2, r2, #4
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	440b      	add	r3, r1
 8004a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a68:	e00a      	b.n	8004a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4908      	ldr	r1, [pc, #32]	; (8004a90 <__NVIC_SetPriority+0x50>)
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	3b04      	subs	r3, #4
 8004a78:	0112      	lsls	r2, r2, #4
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	761a      	strb	r2, [r3, #24]
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e100 	.word	0xe000e100
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f1c3 0307 	rsb	r3, r3, #7
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	bf28      	it	cs
 8004ab2:	2304      	movcs	r3, #4
 8004ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d902      	bls.n	8004ac4 <NVIC_EncodePriority+0x30>
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3b03      	subs	r3, #3
 8004ac2:	e000      	b.n	8004ac6 <NVIC_EncodePriority+0x32>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43da      	mvns	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004adc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	43d9      	mvns	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aec:	4313      	orrs	r3, r2
         );
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3724      	adds	r7, #36	; 0x24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b0c:	d301      	bcc.n	8004b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e00f      	b.n	8004b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <SysTick_Config+0x40>)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b1a:	210f      	movs	r1, #15
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	f7ff ff8e 	bl	8004a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <SysTick_Config+0x40>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b2a:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <SysTick_Config+0x40>)
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	e000e010 	.word	0xe000e010

08004b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ff05 	bl	8004958 <__NVIC_SetPriorityGrouping>
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b68:	f7ff ff1a 	bl	80049a0 <__NVIC_GetPriorityGrouping>
 8004b6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	6978      	ldr	r0, [r7, #20]
 8004b74:	f7ff ff8e 	bl	8004a94 <NVIC_EncodePriority>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff ff5d 	bl	8004a40 <__NVIC_SetPriority>
}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	4603      	mov	r3, r0
 8004b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff ff0d 	bl	80049bc <__NVIC_EnableIRQ>
}
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff ff1d 	bl	80049f8 <__NVIC_DisableIRQ>
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff ff94 	bl	8004afc <SysTick_Config>
 8004bd4:	4603      	mov	r3, r0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bee:	e17f      	b.n	8004ef0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8171 	beq.w	8004eea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d00b      	beq.n	8004c28 <HAL_GPIO_Init+0x48>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d007      	beq.n	8004c28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c1c:	2b11      	cmp	r3, #17
 8004c1e:	d003      	beq.n	8004c28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b12      	cmp	r3, #18
 8004c26:	d130      	bne.n	8004c8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	2203      	movs	r2, #3
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c5e:	2201      	movs	r2, #1
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43db      	mvns	r3, r3
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	091b      	lsrs	r3, r3, #4
 8004c74:	f003 0201 	and.w	r2, r3, #1
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d118      	bne.n	8004cc8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	08db      	lsrs	r3, r3, #3
 8004cb2:	f003 0201 	and.w	r2, r3, #1
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	2203      	movs	r2, #3
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d003      	beq.n	8004d08 <HAL_GPIO_Init+0x128>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b12      	cmp	r3, #18
 8004d06:	d123      	bne.n	8004d50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	08da      	lsrs	r2, r3, #3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3208      	adds	r2, #8
 8004d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	220f      	movs	r2, #15
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	43db      	mvns	r3, r3
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	08da      	lsrs	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3208      	adds	r2, #8
 8004d4a:	6939      	ldr	r1, [r7, #16]
 8004d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43db      	mvns	r3, r3
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4013      	ands	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 0203 	and.w	r2, r3, #3
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80ac 	beq.w	8004eea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d92:	4b5f      	ldr	r3, [pc, #380]	; (8004f10 <HAL_GPIO_Init+0x330>)
 8004d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d96:	4a5e      	ldr	r2, [pc, #376]	; (8004f10 <HAL_GPIO_Init+0x330>)
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	6613      	str	r3, [r2, #96]	; 0x60
 8004d9e:	4b5c      	ldr	r3, [pc, #368]	; (8004f10 <HAL_GPIO_Init+0x330>)
 8004da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004daa:	4a5a      	ldr	r2, [pc, #360]	; (8004f14 <HAL_GPIO_Init+0x334>)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	089b      	lsrs	r3, r3, #2
 8004db0:	3302      	adds	r3, #2
 8004db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	220f      	movs	r2, #15
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dd4:	d025      	beq.n	8004e22 <HAL_GPIO_Init+0x242>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a4f      	ldr	r2, [pc, #316]	; (8004f18 <HAL_GPIO_Init+0x338>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d01f      	beq.n	8004e1e <HAL_GPIO_Init+0x23e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a4e      	ldr	r2, [pc, #312]	; (8004f1c <HAL_GPIO_Init+0x33c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d019      	beq.n	8004e1a <HAL_GPIO_Init+0x23a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a4d      	ldr	r2, [pc, #308]	; (8004f20 <HAL_GPIO_Init+0x340>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <HAL_GPIO_Init+0x236>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a4c      	ldr	r2, [pc, #304]	; (8004f24 <HAL_GPIO_Init+0x344>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00d      	beq.n	8004e12 <HAL_GPIO_Init+0x232>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a4b      	ldr	r2, [pc, #300]	; (8004f28 <HAL_GPIO_Init+0x348>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d007      	beq.n	8004e0e <HAL_GPIO_Init+0x22e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a4a      	ldr	r2, [pc, #296]	; (8004f2c <HAL_GPIO_Init+0x34c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d101      	bne.n	8004e0a <HAL_GPIO_Init+0x22a>
 8004e06:	2306      	movs	r3, #6
 8004e08:	e00c      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e0a:	2307      	movs	r3, #7
 8004e0c:	e00a      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e0e:	2305      	movs	r3, #5
 8004e10:	e008      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e12:	2304      	movs	r3, #4
 8004e14:	e006      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e16:	2303      	movs	r3, #3
 8004e18:	e004      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e002      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e22:	2300      	movs	r3, #0
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	f002 0203 	and.w	r2, r2, #3
 8004e2a:	0092      	lsls	r2, r2, #2
 8004e2c:	4093      	lsls	r3, r2
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e34:	4937      	ldr	r1, [pc, #220]	; (8004f14 <HAL_GPIO_Init+0x334>)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	089b      	lsrs	r3, r3, #2
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e42:	4b3b      	ldr	r3, [pc, #236]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e66:	4a32      	ldr	r2, [pc, #200]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004e6c:	4b30      	ldr	r3, [pc, #192]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	43db      	mvns	r3, r3
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e90:	4a27      	ldr	r2, [pc, #156]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e96:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004eba:	4a1d      	ldr	r2, [pc, #116]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ee4:	4a12      	ldr	r2, [pc, #72]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	3301      	adds	r3, #1
 8004eee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f47f ae78 	bne.w	8004bf0 <HAL_GPIO_Init+0x10>
  }
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000
 8004f14:	40010000 	.word	0x40010000
 8004f18:	48000400 	.word	0x48000400
 8004f1c:	48000800 	.word	0x48000800
 8004f20:	48000c00 	.word	0x48000c00
 8004f24:	48001000 	.word	0x48001000
 8004f28:	48001400 	.word	0x48001400
 8004f2c:	48001800 	.word	0x48001800
 8004f30:	40010400 	.word	0x40010400

08004f34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004f42:	e0cd      	b.n	80050e0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004f44:	2201      	movs	r2, #1
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80c0 	beq.w	80050da <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004f5a:	4a68      	ldr	r2, [pc, #416]	; (80050fc <HAL_GPIO_DeInit+0x1c8>)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	089b      	lsrs	r3, r3, #2
 8004f60:	3302      	adds	r3, #2
 8004f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f66:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	220f      	movs	r2, #15
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f82:	d025      	beq.n	8004fd0 <HAL_GPIO_DeInit+0x9c>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a5e      	ldr	r2, [pc, #376]	; (8005100 <HAL_GPIO_DeInit+0x1cc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d01f      	beq.n	8004fcc <HAL_GPIO_DeInit+0x98>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a5d      	ldr	r2, [pc, #372]	; (8005104 <HAL_GPIO_DeInit+0x1d0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d019      	beq.n	8004fc8 <HAL_GPIO_DeInit+0x94>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a5c      	ldr	r2, [pc, #368]	; (8005108 <HAL_GPIO_DeInit+0x1d4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <HAL_GPIO_DeInit+0x90>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a5b      	ldr	r2, [pc, #364]	; (800510c <HAL_GPIO_DeInit+0x1d8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00d      	beq.n	8004fc0 <HAL_GPIO_DeInit+0x8c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a5a      	ldr	r2, [pc, #360]	; (8005110 <HAL_GPIO_DeInit+0x1dc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d007      	beq.n	8004fbc <HAL_GPIO_DeInit+0x88>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a59      	ldr	r2, [pc, #356]	; (8005114 <HAL_GPIO_DeInit+0x1e0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d101      	bne.n	8004fb8 <HAL_GPIO_DeInit+0x84>
 8004fb4:	2306      	movs	r3, #6
 8004fb6:	e00c      	b.n	8004fd2 <HAL_GPIO_DeInit+0x9e>
 8004fb8:	2307      	movs	r3, #7
 8004fba:	e00a      	b.n	8004fd2 <HAL_GPIO_DeInit+0x9e>
 8004fbc:	2305      	movs	r3, #5
 8004fbe:	e008      	b.n	8004fd2 <HAL_GPIO_DeInit+0x9e>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	e006      	b.n	8004fd2 <HAL_GPIO_DeInit+0x9e>
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e004      	b.n	8004fd2 <HAL_GPIO_DeInit+0x9e>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e002      	b.n	8004fd2 <HAL_GPIO_DeInit+0x9e>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <HAL_GPIO_DeInit+0x9e>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	f002 0203 	and.w	r2, r2, #3
 8004fd8:	0092      	lsls	r2, r2, #2
 8004fda:	4093      	lsls	r3, r2
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d132      	bne.n	8005048 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004fe2:	4b4d      	ldr	r3, [pc, #308]	; (8005118 <HAL_GPIO_DeInit+0x1e4>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	494b      	ldr	r1, [pc, #300]	; (8005118 <HAL_GPIO_DeInit+0x1e4>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004ff0:	4b49      	ldr	r3, [pc, #292]	; (8005118 <HAL_GPIO_DeInit+0x1e4>)
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	4947      	ldr	r1, [pc, #284]	; (8005118 <HAL_GPIO_DeInit+0x1e4>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004ffe:	4b46      	ldr	r3, [pc, #280]	; (8005118 <HAL_GPIO_DeInit+0x1e4>)
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	43db      	mvns	r3, r3
 8005006:	4944      	ldr	r1, [pc, #272]	; (8005118 <HAL_GPIO_DeInit+0x1e4>)
 8005008:	4013      	ands	r3, r2
 800500a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800500c:	4b42      	ldr	r3, [pc, #264]	; (8005118 <HAL_GPIO_DeInit+0x1e4>)
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	43db      	mvns	r3, r3
 8005014:	4940      	ldr	r1, [pc, #256]	; (8005118 <HAL_GPIO_DeInit+0x1e4>)
 8005016:	4013      	ands	r3, r2
 8005018:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	220f      	movs	r2, #15
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800502a:	4a34      	ldr	r2, [pc, #208]	; (80050fc <HAL_GPIO_DeInit+0x1c8>)
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	089b      	lsrs	r3, r3, #2
 8005030:	3302      	adds	r3, #2
 8005032:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	43da      	mvns	r2, r3
 800503a:	4830      	ldr	r0, [pc, #192]	; (80050fc <HAL_GPIO_DeInit+0x1c8>)
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	089b      	lsrs	r3, r3, #2
 8005040:	400a      	ands	r2, r1
 8005042:	3302      	adds	r3, #2
 8005044:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	2103      	movs	r1, #3
 8005052:	fa01 f303 	lsl.w	r3, r1, r3
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	08da      	lsrs	r2, r3, #3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3208      	adds	r2, #8
 8005064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	220f      	movs	r2, #15
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	08d2      	lsrs	r2, r2, #3
 800507c:	4019      	ands	r1, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3208      	adds	r2, #8
 8005082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	2103      	movs	r1, #3
 8005090:	fa01 f303 	lsl.w	r3, r1, r3
 8005094:	43db      	mvns	r3, r3
 8005096:	401a      	ands	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	2101      	movs	r1, #1
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	fa01 f303 	lsl.w	r3, r1, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	401a      	ands	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	2103      	movs	r1, #3
 80050ba:	fa01 f303 	lsl.w	r3, r1, r3
 80050be:	43db      	mvns	r3, r3
 80050c0:	401a      	ands	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ca:	2101      	movs	r1, #1
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	fa01 f303 	lsl.w	r3, r1, r3
 80050d2:	43db      	mvns	r3, r3
 80050d4:	401a      	ands	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	3301      	adds	r3, #1
 80050de:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	fa22 f303 	lsr.w	r3, r2, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f47f af2b 	bne.w	8004f44 <HAL_GPIO_DeInit+0x10>
  }
}
 80050ee:	bf00      	nop
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40010000 	.word	0x40010000
 8005100:	48000400 	.word	0x48000400
 8005104:	48000800 	.word	0x48000800
 8005108:	48000c00 	.word	0x48000c00
 800510c:	48001000 	.word	0x48001000
 8005110:	48001400 	.word	0x48001400
 8005114:	48001800 	.word	0x48001800
 8005118:	40010400 	.word	0x40010400

0800511c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	807b      	strh	r3, [r7, #2]
 8005128:	4613      	mov	r3, r2
 800512a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800512c:	787b      	ldrb	r3, [r7, #1]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005132:	887a      	ldrh	r2, [r7, #2]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005138:	e002      	b.n	8005140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800513a:	887a      	ldrh	r2, [r7, #2]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005156:	4b08      	ldr	r3, [pc, #32]	; (8005178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	4013      	ands	r3, r2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d006      	beq.n	8005170 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005162:	4a05      	ldr	r2, [pc, #20]	; (8005178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005168:	88fb      	ldrh	r3, [r7, #6]
 800516a:	4618      	mov	r0, r3
 800516c:	f7fb ff84 	bl	8001078 <HAL_GPIO_EXTI_Callback>
  }
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40010400 	.word	0x40010400

0800517c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e081      	b.n	8005292 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fc fb00 	bl	80017a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2224      	movs	r2, #36	; 0x24
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0201 	bic.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d107      	bne.n	80051f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051f2:	609a      	str	r2, [r3, #8]
 80051f4:	e006      	b.n	8005204 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005202:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d104      	bne.n	8005216 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005214:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005228:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005238:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	ea42 0103 	orr.w	r1, r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	021a      	lsls	r2, r3, #8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69d9      	ldr	r1, [r3, #28]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e021      	b.n	80052f0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2224      	movs	r2, #36	; 0x24
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7fc fab3 	bl	8001830 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	4608      	mov	r0, r1
 8005302:	4611      	mov	r1, r2
 8005304:	461a      	mov	r2, r3
 8005306:	4603      	mov	r3, r0
 8005308:	817b      	strh	r3, [r7, #10]
 800530a:	460b      	mov	r3, r1
 800530c:	813b      	strh	r3, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b20      	cmp	r3, #32
 800531c:	f040 80f9 	bne.w	8005512 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_I2C_Mem_Write+0x34>
 8005326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005328:	2b00      	cmp	r3, #0
 800532a:	d105      	bne.n	8005338 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005332:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0ed      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_I2C_Mem_Write+0x4e>
 8005342:	2302      	movs	r3, #2
 8005344:	e0e6      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800534e:	f7ff fad5 	bl	80048fc <HAL_GetTick>
 8005352:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	2319      	movs	r3, #25
 800535a:	2201      	movs	r2, #1
 800535c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fac3 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0d1      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2221      	movs	r2, #33	; 0x21
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2240      	movs	r2, #64	; 0x40
 800537c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a3a      	ldr	r2, [r7, #32]
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005390:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005398:	88f8      	ldrh	r0, [r7, #6]
 800539a:	893a      	ldrh	r2, [r7, #8]
 800539c:	8979      	ldrh	r1, [r7, #10]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	9301      	str	r3, [sp, #4]
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	4603      	mov	r3, r0
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f9d3 	bl	8005754 <I2C_RequestMemoryWrite>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0a9      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2bff      	cmp	r3, #255	; 0xff
 80053c8:	d90e      	bls.n	80053e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	22ff      	movs	r2, #255	; 0xff
 80053ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	8979      	ldrh	r1, [r7, #10]
 80053d8:	2300      	movs	r3, #0
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fba5 	bl	8005b30 <I2C_TransferConfig>
 80053e6:	e00f      	b.n	8005408 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	8979      	ldrh	r1, [r7, #10]
 80053fa:	2300      	movs	r3, #0
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fb94 	bl	8005b30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 faad 	bl	800596c <I2C_WaitOnTXISFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e07b      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	781a      	ldrb	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d034      	beq.n	80054c0 <HAL_I2C_Mem_Write+0x1c8>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545a:	2b00      	cmp	r3, #0
 800545c:	d130      	bne.n	80054c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	2200      	movs	r2, #0
 8005466:	2180      	movs	r1, #128	; 0x80
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 fa3f 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e04d      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	2bff      	cmp	r3, #255	; 0xff
 8005480:	d90e      	bls.n	80054a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	22ff      	movs	r2, #255	; 0xff
 8005486:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548c:	b2da      	uxtb	r2, r3
 800548e:	8979      	ldrh	r1, [r7, #10]
 8005490:	2300      	movs	r3, #0
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fb49 	bl	8005b30 <I2C_TransferConfig>
 800549e:	e00f      	b.n	80054c0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	8979      	ldrh	r1, [r7, #10]
 80054b2:	2300      	movs	r3, #0
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fb38 	bl	8005b30 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d19e      	bne.n	8005408 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fa8c 	bl	80059ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e01a      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2220      	movs	r2, #32
 80054e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6859      	ldr	r1, [r3, #4]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <HAL_I2C_Mem_Write+0x224>)
 80054f2:	400b      	ands	r3, r1
 80054f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	e000      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005512:	2302      	movs	r3, #2
  }
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	fe00e800 	.word	0xfe00e800

08005520 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	4608      	mov	r0, r1
 800552a:	4611      	mov	r1, r2
 800552c:	461a      	mov	r2, r3
 800552e:	4603      	mov	r3, r0
 8005530:	817b      	strh	r3, [r7, #10]
 8005532:	460b      	mov	r3, r1
 8005534:	813b      	strh	r3, [r7, #8]
 8005536:	4613      	mov	r3, r2
 8005538:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b20      	cmp	r3, #32
 8005544:	f040 80fd 	bne.w	8005742 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_I2C_Mem_Read+0x34>
 800554e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	d105      	bne.n	8005560 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e0f1      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_I2C_Mem_Read+0x4e>
 800556a:	2302      	movs	r3, #2
 800556c:	e0ea      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005576:	f7ff f9c1 	bl	80048fc <HAL_GetTick>
 800557a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2319      	movs	r3, #25
 8005582:	2201      	movs	r2, #1
 8005584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f9af 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0d5      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2222      	movs	r2, #34	; 0x22
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2240      	movs	r2, #64	; 0x40
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055c0:	88f8      	ldrh	r0, [r7, #6]
 80055c2:	893a      	ldrh	r2, [r7, #8]
 80055c4:	8979      	ldrh	r1, [r7, #10]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	4603      	mov	r3, r0
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f913 	bl	80057fc <I2C_RequestMemoryRead>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0ad      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2bff      	cmp	r3, #255	; 0xff
 80055f0:	d90e      	bls.n	8005610 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	22ff      	movs	r2, #255	; 0xff
 80055f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	8979      	ldrh	r1, [r7, #10]
 8005600:	4b52      	ldr	r3, [pc, #328]	; (800574c <HAL_I2C_Mem_Read+0x22c>)
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 fa91 	bl	8005b30 <I2C_TransferConfig>
 800560e:	e00f      	b.n	8005630 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005614:	b29a      	uxth	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561e:	b2da      	uxtb	r2, r3
 8005620:	8979      	ldrh	r1, [r7, #10]
 8005622:	4b4a      	ldr	r3, [pc, #296]	; (800574c <HAL_I2C_Mem_Read+0x22c>)
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 fa80 	bl	8005b30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	2200      	movs	r2, #0
 8005638:	2104      	movs	r1, #4
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f956 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e07c      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d034      	beq.n	80056f0 <HAL_I2C_Mem_Read+0x1d0>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d130      	bne.n	80056f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	2200      	movs	r2, #0
 8005696:	2180      	movs	r1, #128	; 0x80
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f927 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e04d      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2bff      	cmp	r3, #255	; 0xff
 80056b0:	d90e      	bls.n	80056d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	8979      	ldrh	r1, [r7, #10]
 80056c0:	2300      	movs	r3, #0
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fa31 	bl	8005b30 <I2C_TransferConfig>
 80056ce:	e00f      	b.n	80056f0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	8979      	ldrh	r1, [r7, #10]
 80056e2:	2300      	movs	r3, #0
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 fa20 	bl	8005b30 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d19a      	bne.n	8005630 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f974 	bl	80059ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e01a      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2220      	movs	r2, #32
 8005714:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6859      	ldr	r1, [r3, #4]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_I2C_Mem_Read+0x230>)
 8005722:	400b      	ands	r3, r1
 8005724:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e000      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005742:	2302      	movs	r3, #2
  }
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	80002400 	.word	0x80002400
 8005750:	fe00e800 	.word	0xfe00e800

08005754 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	4608      	mov	r0, r1
 800575e:	4611      	mov	r1, r2
 8005760:	461a      	mov	r2, r3
 8005762:	4603      	mov	r3, r0
 8005764:	817b      	strh	r3, [r7, #10]
 8005766:	460b      	mov	r3, r1
 8005768:	813b      	strh	r3, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	8979      	ldrh	r1, [r7, #10]
 8005774:	4b20      	ldr	r3, [pc, #128]	; (80057f8 <I2C_RequestMemoryWrite+0xa4>)
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f9d7 	bl	8005b30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	69b9      	ldr	r1, [r7, #24]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f8f0 	bl	800596c <I2C_WaitOnTXISFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e02c      	b.n	80057f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d105      	bne.n	80057a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800579c:	893b      	ldrh	r3, [r7, #8]
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	629a      	str	r2, [r3, #40]	; 0x28
 80057a6:	e015      	b.n	80057d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057a8:	893b      	ldrh	r3, [r7, #8]
 80057aa:	0a1b      	lsrs	r3, r3, #8
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	69b9      	ldr	r1, [r7, #24]
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 f8d6 	bl	800596c <I2C_WaitOnTXISFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e012      	b.n	80057f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057ca:	893b      	ldrh	r3, [r7, #8]
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2200      	movs	r2, #0
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 f884 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	80002000 	.word	0x80002000

080057fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	4608      	mov	r0, r1
 8005806:	4611      	mov	r1, r2
 8005808:	461a      	mov	r2, r3
 800580a:	4603      	mov	r3, r0
 800580c:	817b      	strh	r3, [r7, #10]
 800580e:	460b      	mov	r3, r1
 8005810:	813b      	strh	r3, [r7, #8]
 8005812:	4613      	mov	r3, r2
 8005814:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005816:	88fb      	ldrh	r3, [r7, #6]
 8005818:	b2da      	uxtb	r2, r3
 800581a:	8979      	ldrh	r1, [r7, #10]
 800581c:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <I2C_RequestMemoryRead+0xa4>)
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	2300      	movs	r3, #0
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f984 	bl	8005b30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	69b9      	ldr	r1, [r7, #24]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f89d 	bl	800596c <I2C_WaitOnTXISFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e02c      	b.n	8005896 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d105      	bne.n	800584e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005842:	893b      	ldrh	r3, [r7, #8]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	629a      	str	r2, [r3, #40]	; 0x28
 800584c:	e015      	b.n	800587a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800584e:	893b      	ldrh	r3, [r7, #8]
 8005850:	0a1b      	lsrs	r3, r3, #8
 8005852:	b29b      	uxth	r3, r3
 8005854:	b2da      	uxtb	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	69b9      	ldr	r1, [r7, #24]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f883 	bl	800596c <I2C_WaitOnTXISFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e012      	b.n	8005896 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005870:	893b      	ldrh	r3, [r7, #8]
 8005872:	b2da      	uxtb	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2200      	movs	r2, #0
 8005882:	2140      	movs	r1, #64	; 0x40
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f831 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	80002000 	.word	0x80002000

080058a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d103      	bne.n	80058c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2200      	movs	r2, #0
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d007      	beq.n	80058e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	619a      	str	r2, [r3, #24]
  }
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	4613      	mov	r3, r2
 80058fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058fc:	e022      	b.n	8005944 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005904:	d01e      	beq.n	8005944 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005906:	f7fe fff9 	bl	80048fc <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d302      	bcc.n	800591c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d113      	bne.n	8005944 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e00f      	b.n	8005964 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4013      	ands	r3, r2
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	429a      	cmp	r2, r3
 8005952:	bf0c      	ite	eq
 8005954:	2301      	moveq	r3, #1
 8005956:	2300      	movne	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	429a      	cmp	r2, r3
 8005960:	d0cd      	beq.n	80058fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005978:	e02c      	b.n	80059d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f870 	bl	8005a64 <I2C_IsAcknowledgeFailed>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e02a      	b.n	80059e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005994:	d01e      	beq.n	80059d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005996:	f7fe ffb1 	bl	80048fc <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d302      	bcc.n	80059ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d113      	bne.n	80059d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b0:	f043 0220 	orr.w	r2, r3, #32
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e007      	b.n	80059e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d1cb      	bne.n	800597a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059f8:	e028      	b.n	8005a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 f830 	bl	8005a64 <I2C_IsAcknowledgeFailed>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e026      	b.n	8005a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0e:	f7fe ff75 	bl	80048fc <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d302      	bcc.n	8005a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d113      	bne.n	8005a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a28:	f043 0220 	orr.w	r2, r3, #32
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e007      	b.n	8005a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d1cf      	bne.n	80059fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	2b10      	cmp	r3, #16
 8005a7c:	d151      	bne.n	8005b22 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a7e:	e022      	b.n	8005ac6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a86:	d01e      	beq.n	8005ac6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a88:	f7fe ff38 	bl	80048fc <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d302      	bcc.n	8005a9e <I2C_IsAcknowledgeFailed+0x3a>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d113      	bne.n	8005ac6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	f043 0220 	orr.w	r2, r3, #32
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e02e      	b.n	8005b24 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d1d5      	bne.n	8005a80 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2210      	movs	r2, #16
 8005ada:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f7ff fedd 	bl	80058a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6859      	ldr	r1, [r3, #4]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <I2C_IsAcknowledgeFailed+0xc8>)
 8005af6:	400b      	ands	r3, r1
 8005af8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	f043 0204 	orr.w	r2, r3, #4
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	fe00e800 	.word	0xfe00e800

08005b30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	607b      	str	r3, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	817b      	strh	r3, [r7, #10]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	0d5b      	lsrs	r3, r3, #21
 8005b4c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005b50:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <I2C_TransferConfig+0x58>)
 8005b52:	430b      	orrs	r3, r1
 8005b54:	43db      	mvns	r3, r3
 8005b56:	ea02 0103 	and.w	r1, r2, r3
 8005b5a:	897b      	ldrh	r3, [r7, #10]
 8005b5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b60:	7a7b      	ldrb	r3, [r7, #9]
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005b7a:	bf00      	nop
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	03ff63ff 	.word	0x03ff63ff

08005b8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d138      	bne.n	8005c14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e032      	b.n	8005c16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2224      	movs	r2, #36	; 0x24
 8005bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0201 	bic.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6819      	ldr	r1, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	e000      	b.n	8005c16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c14:	2302      	movs	r3, #2
  }
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
	...

08005c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b089      	sub	sp, #36	; 0x24
 8005c28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c32:	4b3e      	ldr	r3, [pc, #248]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 030c 	and.w	r3, r3, #12
 8005c3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c3c:	4b3b      	ldr	r3, [pc, #236]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <HAL_RCC_GetSysClockFreq+0x34>
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b0c      	cmp	r3, #12
 8005c50:	d121      	bne.n	8005c96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d11e      	bne.n	8005c96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c58:	4b34      	ldr	r3, [pc, #208]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d107      	bne.n	8005c74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c64:	4b31      	ldr	r3, [pc, #196]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c6a:	0a1b      	lsrs	r3, r3, #8
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	e005      	b.n	8005c80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c74:	4b2d      	ldr	r3, [pc, #180]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	091b      	lsrs	r3, r3, #4
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c80:	4a2b      	ldr	r2, [pc, #172]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10d      	bne.n	8005cac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c94:	e00a      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d102      	bne.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c9c:	4b25      	ldr	r3, [pc, #148]	; (8005d34 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	e004      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d101      	bne.n	8005cac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ca8:	4b23      	ldr	r3, [pc, #140]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x114>)
 8005caa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	2b0c      	cmp	r3, #12
 8005cb0:	d134      	bne.n	8005d1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cb2:	4b1e      	ldr	r3, [pc, #120]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d003      	beq.n	8005cca <HAL_RCC_GetSysClockFreq+0xa6>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d003      	beq.n	8005cd0 <HAL_RCC_GetSysClockFreq+0xac>
 8005cc8:	e005      	b.n	8005cd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005cca:	4b1a      	ldr	r3, [pc, #104]	; (8005d34 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ccc:	617b      	str	r3, [r7, #20]
      break;
 8005cce:	e005      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005cd0:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x114>)
 8005cd2:	617b      	str	r3, [r7, #20]
      break;
 8005cd4:	e002      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	617b      	str	r3, [r7, #20]
      break;
 8005cda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cdc:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	091b      	lsrs	r3, r3, #4
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cea:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	fb03 f202 	mul.w	r2, r3, r2
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d02:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	0e5b      	lsrs	r3, r3, #25
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3724      	adds	r7, #36	; 0x24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	0800ab14 	.word	0x0800ab14
 8005d34:	00f42400 	.word	0x00f42400
 8005d38:	007a1200 	.word	0x007a1200

08005d3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d40:	4b03      	ldr	r3, [pc, #12]	; (8005d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d42:	681b      	ldr	r3, [r3, #0]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20000018 	.word	0x20000018

08005d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d58:	f7ff fff0 	bl	8005d3c <HAL_RCC_GetHCLKFreq>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	4904      	ldr	r1, [pc, #16]	; (8005d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d6a:	5ccb      	ldrb	r3, [r1, r3]
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	0800ab0c 	.word	0x0800ab0c

08005d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d84:	f7ff ffda 	bl	8005d3c <HAL_RCC_GetHCLKFreq>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	0adb      	lsrs	r3, r3, #11
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	4904      	ldr	r1, [pc, #16]	; (8005da8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d96:	5ccb      	ldrb	r3, [r1, r3]
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40021000 	.word	0x40021000
 8005da8:	0800ab0c 	.word	0x0800ab0c

08005dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e07c      	b.n	8005eb8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7fb fd47 	bl	800186c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dfe:	d902      	bls.n	8005e06 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	e002      	b.n	8005e0c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e0a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e14:	d007      	beq.n	8005e26 <HAL_SPI_Init+0x7a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e1e:	d002      	beq.n	8005e26 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10b      	bne.n	8005e46 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e36:	d903      	bls.n	8005e40 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8005e3e:	e002      	b.n	8005e46 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	ea42 0103 	orr.w	r1, r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	0c1b      	lsrs	r3, r3, #16
 8005e86:	f003 0204 	and.w	r2, r3, #4
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	ea42 0103 	orr.w	r1, r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d101      	bne.n	8005ee2 <HAL_SPI_Transmit+0x22>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e150      	b.n	8006184 <HAL_SPI_Transmit+0x2c4>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eea:	f7fe fd07 	bl	80048fc <HAL_GetTick>
 8005eee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d002      	beq.n	8005f06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f00:	2302      	movs	r3, #2
 8005f02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f04:	e135      	b.n	8006172 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_SPI_Transmit+0x52>
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d102      	bne.n	8005f18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f16:	e12c      	b.n	8006172 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2203      	movs	r2, #3
 8005f1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	88fa      	ldrh	r2, [r7, #6]
 8005f30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f62:	d107      	bne.n	8005f74 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b40      	cmp	r3, #64	; 0x40
 8005f80:	d007      	beq.n	8005f92 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f9a:	d94b      	bls.n	8006034 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <HAL_SPI_Transmit+0xea>
 8005fa4:	8afb      	ldrh	r3, [r7, #22]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d13e      	bne.n	8006028 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	881a      	ldrh	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	1c9a      	adds	r2, r3, #2
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fce:	e02b      	b.n	8006028 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d112      	bne.n	8006004 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	881a      	ldrh	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	1c9a      	adds	r2, r3, #2
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006002:	e011      	b.n	8006028 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006004:	f7fe fc7a 	bl	80048fc <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d803      	bhi.n	800601c <HAL_SPI_Transmit+0x15c>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601a:	d102      	bne.n	8006022 <HAL_SPI_Transmit+0x162>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006026:	e0a4      	b.n	8006172 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1ce      	bne.n	8005fd0 <HAL_SPI_Transmit+0x110>
 8006032:	e07c      	b.n	800612e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <HAL_SPI_Transmit+0x182>
 800603c:	8afb      	ldrh	r3, [r7, #22]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d170      	bne.n	8006124 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b01      	cmp	r3, #1
 800604a:	d912      	bls.n	8006072 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b02      	subs	r3, #2
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006070:	e058      	b.n	8006124 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	330c      	adds	r3, #12
 800607c:	7812      	ldrb	r2, [r2, #0]
 800607e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006098:	e044      	b.n	8006124 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d12b      	bne.n	8006100 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d912      	bls.n	80060d8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	881a      	ldrh	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	1c9a      	adds	r2, r3, #2
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b02      	subs	r3, #2
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060d6:	e025      	b.n	8006124 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	330c      	adds	r3, #12
 80060e2:	7812      	ldrb	r2, [r2, #0]
 80060e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060fe:	e011      	b.n	8006124 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006100:	f7fe fbfc 	bl	80048fc <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d803      	bhi.n	8006118 <HAL_SPI_Transmit+0x258>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d102      	bne.n	800611e <HAL_SPI_Transmit+0x25e>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d102      	bne.n	8006124 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006122:	e026      	b.n	8006172 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1b5      	bne.n	800609a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 fc94 	bl	8006a60 <SPI_EndRxTxTransaction>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800614c:	2300      	movs	r3, #0
 800614e:	613b      	str	r3, [r7, #16]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	77fb      	strb	r3, [r7, #31]
 800616e:	e000      	b.n	8006172 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006170:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006182:	7ffb      	ldrb	r3, [r7, #31]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3720      	adds	r7, #32
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a8:	d112      	bne.n	80061d0 <HAL_SPI_Receive+0x44>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10e      	bne.n	80061d0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2204      	movs	r2, #4
 80061b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80061ba:	88fa      	ldrh	r2, [r7, #6]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	4613      	mov	r3, r2
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	68b9      	ldr	r1, [r7, #8]
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f908 	bl	80063dc <HAL_SPI_TransmitReceive>
 80061cc:	4603      	mov	r3, r0
 80061ce:	e101      	b.n	80063d4 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_SPI_Receive+0x52>
 80061da:	2302      	movs	r3, #2
 80061dc:	e0fa      	b.n	80063d4 <HAL_SPI_Receive+0x248>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061e6:	f7fe fb89 	bl	80048fc <HAL_GetTick>
 80061ea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d002      	beq.n	80061fe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80061f8:	2302      	movs	r3, #2
 80061fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061fc:	e0e1      	b.n	80063c2 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <HAL_SPI_Receive+0x7e>
 8006204:	88fb      	ldrh	r3, [r7, #6]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800620e:	e0d8      	b.n	80063c2 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2204      	movs	r2, #4
 8006214:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	88fa      	ldrh	r2, [r7, #6]
 8006228:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	88fa      	ldrh	r2, [r7, #6]
 8006230:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800625a:	d908      	bls.n	800626e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800626a:	605a      	str	r2, [r3, #4]
 800626c:	e007      	b.n	800627e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800627c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006286:	d107      	bne.n	8006298 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006296:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a2:	2b40      	cmp	r3, #64	; 0x40
 80062a4:	d007      	beq.n	80062b6 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062be:	d867      	bhi.n	8006390 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80062c0:	e030      	b.n	8006324 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d117      	bne.n	8006300 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f103 020c 	add.w	r2, r3, #12
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	7812      	ldrb	r2, [r2, #0]
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80062fe:	e011      	b.n	8006324 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006300:	f7fe fafc 	bl	80048fc <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d803      	bhi.n	8006318 <HAL_SPI_Receive+0x18c>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	d102      	bne.n	800631e <HAL_SPI_Receive+0x192>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d102      	bne.n	8006324 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006322:	e04e      	b.n	80063c2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1c8      	bne.n	80062c2 <HAL_SPI_Receive+0x136>
 8006330:	e034      	b.n	800639c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b01      	cmp	r3, #1
 800633e:	d115      	bne.n	800636c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	b292      	uxth	r2, r2
 800634c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	1c9a      	adds	r2, r3, #2
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800636a:	e011      	b.n	8006390 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800636c:	f7fe fac6 	bl	80048fc <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	429a      	cmp	r2, r3
 800637a:	d803      	bhi.n	8006384 <HAL_SPI_Receive+0x1f8>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006382:	d102      	bne.n	800638a <HAL_SPI_Receive+0x1fe>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d102      	bne.n	8006390 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800638e:	e018      	b.n	80063c2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1ca      	bne.n	8006332 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 fb05 	bl	80069b0 <SPI_EndRxTransaction>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	75fb      	strb	r3, [r7, #23]
 80063be:	e000      	b.n	80063c2 <HAL_SPI_Receive+0x236>
  }

error :
 80063c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80063d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063ea:	2301      	movs	r3, #1
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_SPI_TransmitReceive+0x26>
 80063fe:	2302      	movs	r3, #2
 8006400:	e1fb      	b.n	80067fa <HAL_SPI_TransmitReceive+0x41e>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800640a:	f7fe fa77 	bl	80048fc <HAL_GetTick>
 800640e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006416:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800641e:	887b      	ldrh	r3, [r7, #2]
 8006420:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006422:	887b      	ldrh	r3, [r7, #2]
 8006424:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006426:	7efb      	ldrb	r3, [r7, #27]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d00e      	beq.n	800644a <HAL_SPI_TransmitReceive+0x6e>
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006432:	d106      	bne.n	8006442 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d102      	bne.n	8006442 <HAL_SPI_TransmitReceive+0x66>
 800643c:	7efb      	ldrb	r3, [r7, #27]
 800643e:	2b04      	cmp	r3, #4
 8006440:	d003      	beq.n	800644a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006442:	2302      	movs	r3, #2
 8006444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006448:	e1cd      	b.n	80067e6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_SPI_TransmitReceive+0x80>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_SPI_TransmitReceive+0x80>
 8006456:	887b      	ldrh	r3, [r7, #2]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006462:	e1c0      	b.n	80067e6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b04      	cmp	r3, #4
 800646e:	d003      	beq.n	8006478 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2205      	movs	r2, #5
 8006474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	887a      	ldrh	r2, [r7, #2]
 8006488:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	887a      	ldrh	r2, [r7, #2]
 8006490:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	887a      	ldrh	r2, [r7, #2]
 800649e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	887a      	ldrh	r2, [r7, #2]
 80064a4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064ba:	d802      	bhi.n	80064c2 <HAL_SPI_TransmitReceive+0xe6>
 80064bc:	8a3b      	ldrh	r3, [r7, #16]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d908      	bls.n	80064d4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064d0:	605a      	str	r2, [r3, #4]
 80064d2:	e007      	b.n	80064e4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064e2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ee:	2b40      	cmp	r3, #64	; 0x40
 80064f0:	d007      	beq.n	8006502 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006500:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800650a:	d97c      	bls.n	8006606 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <HAL_SPI_TransmitReceive+0x13e>
 8006514:	8a7b      	ldrh	r3, [r7, #18]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d169      	bne.n	80065ee <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	881a      	ldrh	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	1c9a      	adds	r2, r3, #2
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800653e:	e056      	b.n	80065ee <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b02      	cmp	r3, #2
 800654c:	d11b      	bne.n	8006586 <HAL_SPI_TransmitReceive+0x1aa>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006552:	b29b      	uxth	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d016      	beq.n	8006586 <HAL_SPI_TransmitReceive+0x1aa>
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	2b01      	cmp	r3, #1
 800655c:	d113      	bne.n	8006586 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	881a      	ldrh	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	1c9a      	adds	r2, r3, #2
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006578:	b29b      	uxth	r3, r3
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b01      	cmp	r3, #1
 8006592:	d11c      	bne.n	80065ce <HAL_SPI_TransmitReceive+0x1f2>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d016      	beq.n	80065ce <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	b292      	uxth	r2, r2
 80065ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	1c9a      	adds	r2, r3, #2
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065ca:	2301      	movs	r3, #1
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065ce:	f7fe f995 	bl	80048fc <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065da:	429a      	cmp	r2, r3
 80065dc:	d807      	bhi.n	80065ee <HAL_SPI_TransmitReceive+0x212>
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d003      	beq.n	80065ee <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80065ec:	e0fb      	b.n	80067e6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1a3      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x164>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065fe:	b29b      	uxth	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d19d      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x164>
 8006604:	e0df      	b.n	80067c6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_SPI_TransmitReceive+0x23a>
 800660e:	8a7b      	ldrh	r3, [r7, #18]
 8006610:	2b01      	cmp	r3, #1
 8006612:	f040 80cb 	bne.w	80067ac <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b01      	cmp	r3, #1
 800661e:	d912      	bls.n	8006646 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	881a      	ldrh	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	1c9a      	adds	r2, r3, #2
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b02      	subs	r3, #2
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006644:	e0b2      	b.n	80067ac <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	330c      	adds	r3, #12
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800666c:	e09e      	b.n	80067ac <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b02      	cmp	r3, #2
 800667a:	d134      	bne.n	80066e6 <HAL_SPI_TransmitReceive+0x30a>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d02f      	beq.n	80066e6 <HAL_SPI_TransmitReceive+0x30a>
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	2b01      	cmp	r3, #1
 800668a:	d12c      	bne.n	80066e6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b01      	cmp	r3, #1
 8006694:	d912      	bls.n	80066bc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	881a      	ldrh	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	1c9a      	adds	r2, r3, #2
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b02      	subs	r3, #2
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066ba:	e012      	b.n	80066e2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	330c      	adds	r3, #12
 80066c6:	7812      	ldrb	r2, [r2, #0]
 80066c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d148      	bne.n	8006786 <HAL_SPI_TransmitReceive+0x3aa>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d042      	beq.n	8006786 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006706:	b29b      	uxth	r3, r3
 8006708:	2b01      	cmp	r3, #1
 800670a:	d923      	bls.n	8006754 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	b292      	uxth	r2, r2
 8006718:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	1c9a      	adds	r2, r3, #2
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b02      	subs	r3, #2
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b01      	cmp	r3, #1
 8006740:	d81f      	bhi.n	8006782 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006750:	605a      	str	r2, [r3, #4]
 8006752:	e016      	b.n	8006782 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f103 020c 	add.w	r2, r3, #12
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	7812      	ldrb	r2, [r2, #0]
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006782:	2301      	movs	r3, #1
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006786:	f7fe f8b9 	bl	80048fc <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006792:	429a      	cmp	r2, r3
 8006794:	d803      	bhi.n	800679e <HAL_SPI_TransmitReceive+0x3c2>
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679c:	d102      	bne.n	80067a4 <HAL_SPI_TransmitReceive+0x3c8>
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d103      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80067aa:	e01c      	b.n	80067e6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f47f af5b 	bne.w	800666e <HAL_SPI_TransmitReceive+0x292>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f47f af54 	bne.w	800666e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 f948 	bl	8006a60 <SPI_EndRxTxTransaction>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d006      	beq.n	80067e4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	661a      	str	r2, [r3, #96]	; 0x60
 80067e2:	e000      	b.n	80067e6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80067e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3728      	adds	r7, #40	; 0x28
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	603b      	str	r3, [r7, #0]
 800680e:	4613      	mov	r3, r2
 8006810:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006812:	e04c      	b.n	80068ae <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d048      	beq.n	80068ae <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800681c:	f7fe f86e 	bl	80048fc <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d902      	bls.n	8006832 <SPI_WaitFlagStateUntilTimeout+0x30>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d13d      	bne.n	80068ae <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006840:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800684a:	d111      	bne.n	8006870 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006854:	d004      	beq.n	8006860 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685e:	d107      	bne.n	8006870 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800686e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006878:	d10f      	bne.n	800689a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006898:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e00f      	b.n	80068ce <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4013      	ands	r3, r2
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	bf0c      	ite	eq
 80068be:	2301      	moveq	r3, #1
 80068c0:	2300      	movne	r3, #0
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	461a      	mov	r2, r3
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d1a3      	bne.n	8006814 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	607a      	str	r2, [r7, #4]
 80068e2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80068e4:	e057      	b.n	8006996 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80068ec:	d106      	bne.n	80068fc <SPI_WaitFifoStateUntilTimeout+0x26>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d103      	bne.n	80068fc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	330c      	adds	r3, #12
 80068fa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d048      	beq.n	8006996 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006904:	f7fd fffa 	bl	80048fc <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d902      	bls.n	800691a <SPI_WaitFifoStateUntilTimeout+0x44>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d13d      	bne.n	8006996 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006928:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006932:	d111      	bne.n	8006958 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800693c:	d004      	beq.n	8006948 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006946:	d107      	bne.n	8006958 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006956:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006960:	d10f      	bne.n	8006982 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006980:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e008      	b.n	80069a8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	4013      	ands	r3, r2
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d19f      	bne.n	80068e6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c4:	d111      	bne.n	80069ea <SPI_EndRxTransaction+0x3a>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ce:	d004      	beq.n	80069da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d8:	d107      	bne.n	80069ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2200      	movs	r2, #0
 80069f2:	2180      	movs	r1, #128	; 0x80
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f7ff ff04 	bl	8006802 <SPI_WaitFlagStateUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d007      	beq.n	8006a10 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a04:	f043 0220 	orr.w	r2, r3, #32
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e023      	b.n	8006a58 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a18:	d11d      	bne.n	8006a56 <SPI_EndRxTransaction+0xa6>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a22:	d004      	beq.n	8006a2e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a2c:	d113      	bne.n	8006a56 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f7ff ff4b 	bl	80068d6 <SPI_WaitFifoStateUntilTimeout>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d007      	beq.n	8006a56 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a4a:	f043 0220 	orr.w	r2, r3, #32
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e000      	b.n	8006a58 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7ff ff2c 	bl	80068d6 <SPI_WaitFifoStateUntilTimeout>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d007      	beq.n	8006a94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a88:	f043 0220 	orr.w	r2, r3, #32
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e027      	b.n	8006ae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2180      	movs	r1, #128	; 0x80
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7ff feaf 	bl	8006802 <SPI_WaitFlagStateUntilTimeout>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d007      	beq.n	8006aba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aae:	f043 0220 	orr.w	r2, r3, #32
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e014      	b.n	8006ae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff ff05 	bl	80068d6 <SPI_WaitFifoStateUntilTimeout>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d007      	beq.n	8006ae2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad6:	f043 0220 	orr.w	r2, r3, #32
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e000      	b.n	8006ae4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e040      	b.n	8006b80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fa fef0 	bl	80018f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2224      	movs	r2, #36	; 0x24
 8006b18:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0201 	bic.w	r2, r2, #1
 8006b28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f8c0 	bl	8006cb0 <UART_SetConfig>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e022      	b.n	8006b80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fc54 	bl	80073f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fcdb 	bl	8007534 <UART_CheckIdleState>
 8006b7e:	4603      	mov	r3, r0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08a      	sub	sp, #40	; 0x28
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4613      	mov	r3, r2
 8006b96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	f040 8081 	bne.w	8006ca4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <HAL_UART_Transmit+0x26>
 8006ba8:	88fb      	ldrh	r3, [r7, #6]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e079      	b.n	8006ca6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_UART_Transmit+0x38>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e072      	b.n	8006ca6 <HAL_UART_Transmit+0x11e>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2221      	movs	r2, #33	; 0x21
 8006bd2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006bd4:	f7fd fe92 	bl	80048fc <HAL_GetTick>
 8006bd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	88fa      	ldrh	r2, [r7, #6]
 8006bde:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	88fa      	ldrh	r2, [r7, #6]
 8006be6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf2:	d108      	bne.n	8006c06 <HAL_UART_Transmit+0x7e>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	e003      	b.n	8006c0e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006c16:	e02d      	b.n	8006c74 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2180      	movs	r1, #128	; 0x80
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 fccb 	bl	80075be <UART_WaitOnFlagUntilTimeout>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e039      	b.n	8006ca6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10b      	bne.n	8006c50 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	881a      	ldrh	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c44:	b292      	uxth	r2, r2
 8006c46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	3302      	adds	r3, #2
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	e008      	b.n	8006c62 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	781a      	ldrb	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	b292      	uxth	r2, r2
 8006c5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1cb      	bne.n	8006c18 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2200      	movs	r2, #0
 8006c88:	2140      	movs	r1, #64	; 0x40
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 fc97 	bl	80075be <UART_WaitOnFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e005      	b.n	8006ca6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	e000      	b.n	8006ca6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006ca4:	2302      	movs	r3, #2
  }
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3720      	adds	r7, #32
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cb4:	b0a0      	sub	sp, #128	; 0x80
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	49a4      	ldr	r1, [pc, #656]	; (8006f78 <UART_SetConfig+0x2c8>)
 8006ce8:	4019      	ands	r1, r3
 8006cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d00:	68d9      	ldr	r1, [r3, #12]
 8006d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	ea40 0301 	orr.w	r3, r0, r1
 8006d0a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	4b99      	ldr	r3, [pc, #612]	; (8006f7c <UART_SetConfig+0x2cc>)
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d004      	beq.n	8006d26 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d1e:	6a1a      	ldr	r2, [r3, #32]
 8006d20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d22:	4313      	orrs	r3, r2
 8006d24:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d36:	430b      	orrs	r3, r1
 8006d38:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	4b90      	ldr	r3, [pc, #576]	; (8006f80 <UART_SetConfig+0x2d0>)
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d125      	bne.n	8006d90 <UART_SetConfig+0xe0>
 8006d44:	4b8f      	ldr	r3, [pc, #572]	; (8006f84 <UART_SetConfig+0x2d4>)
 8006d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d81a      	bhi.n	8006d88 <UART_SetConfig+0xd8>
 8006d52:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <UART_SetConfig+0xa8>)
 8006d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d58:	08006d69 	.word	0x08006d69
 8006d5c:	08006d79 	.word	0x08006d79
 8006d60:	08006d71 	.word	0x08006d71
 8006d64:	08006d81 	.word	0x08006d81
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006d6e:	e116      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006d70:	2302      	movs	r3, #2
 8006d72:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006d76:	e112      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006d78:	2304      	movs	r3, #4
 8006d7a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006d7e:	e10e      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006d80:	2308      	movs	r3, #8
 8006d82:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006d86:	e10a      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006d88:	2310      	movs	r3, #16
 8006d8a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006d8e:	e106      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	4b7c      	ldr	r3, [pc, #496]	; (8006f88 <UART_SetConfig+0x2d8>)
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d138      	bne.n	8006e0c <UART_SetConfig+0x15c>
 8006d9a:	4b7a      	ldr	r3, [pc, #488]	; (8006f84 <UART_SetConfig+0x2d4>)
 8006d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da0:	f003 030c 	and.w	r3, r3, #12
 8006da4:	2b0c      	cmp	r3, #12
 8006da6:	d82d      	bhi.n	8006e04 <UART_SetConfig+0x154>
 8006da8:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <UART_SetConfig+0x100>)
 8006daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dae:	bf00      	nop
 8006db0:	08006de5 	.word	0x08006de5
 8006db4:	08006e05 	.word	0x08006e05
 8006db8:	08006e05 	.word	0x08006e05
 8006dbc:	08006e05 	.word	0x08006e05
 8006dc0:	08006df5 	.word	0x08006df5
 8006dc4:	08006e05 	.word	0x08006e05
 8006dc8:	08006e05 	.word	0x08006e05
 8006dcc:	08006e05 	.word	0x08006e05
 8006dd0:	08006ded 	.word	0x08006ded
 8006dd4:	08006e05 	.word	0x08006e05
 8006dd8:	08006e05 	.word	0x08006e05
 8006ddc:	08006e05 	.word	0x08006e05
 8006de0:	08006dfd 	.word	0x08006dfd
 8006de4:	2300      	movs	r3, #0
 8006de6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006dea:	e0d8      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006dec:	2302      	movs	r3, #2
 8006dee:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006df2:	e0d4      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006df4:	2304      	movs	r3, #4
 8006df6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006dfa:	e0d0      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006dfc:	2308      	movs	r3, #8
 8006dfe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006e02:	e0cc      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006e04:	2310      	movs	r3, #16
 8006e06:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006e0a:	e0c8      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	4b5e      	ldr	r3, [pc, #376]	; (8006f8c <UART_SetConfig+0x2dc>)
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d125      	bne.n	8006e62 <UART_SetConfig+0x1b2>
 8006e16:	4b5b      	ldr	r3, [pc, #364]	; (8006f84 <UART_SetConfig+0x2d4>)
 8006e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e20:	2b30      	cmp	r3, #48	; 0x30
 8006e22:	d016      	beq.n	8006e52 <UART_SetConfig+0x1a2>
 8006e24:	2b30      	cmp	r3, #48	; 0x30
 8006e26:	d818      	bhi.n	8006e5a <UART_SetConfig+0x1aa>
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	d00a      	beq.n	8006e42 <UART_SetConfig+0x192>
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d814      	bhi.n	8006e5a <UART_SetConfig+0x1aa>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <UART_SetConfig+0x18a>
 8006e34:	2b10      	cmp	r3, #16
 8006e36:	d008      	beq.n	8006e4a <UART_SetConfig+0x19a>
 8006e38:	e00f      	b.n	8006e5a <UART_SetConfig+0x1aa>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006e40:	e0ad      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006e42:	2302      	movs	r3, #2
 8006e44:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006e48:	e0a9      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006e4a:	2304      	movs	r3, #4
 8006e4c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006e50:	e0a5      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006e52:	2308      	movs	r3, #8
 8006e54:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006e58:	e0a1      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006e5a:	2310      	movs	r3, #16
 8006e5c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006e60:	e09d      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4b4a      	ldr	r3, [pc, #296]	; (8006f90 <UART_SetConfig+0x2e0>)
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d125      	bne.n	8006eb8 <UART_SetConfig+0x208>
 8006e6c:	4b45      	ldr	r3, [pc, #276]	; (8006f84 <UART_SetConfig+0x2d4>)
 8006e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e76:	2bc0      	cmp	r3, #192	; 0xc0
 8006e78:	d016      	beq.n	8006ea8 <UART_SetConfig+0x1f8>
 8006e7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e7c:	d818      	bhi.n	8006eb0 <UART_SetConfig+0x200>
 8006e7e:	2b80      	cmp	r3, #128	; 0x80
 8006e80:	d00a      	beq.n	8006e98 <UART_SetConfig+0x1e8>
 8006e82:	2b80      	cmp	r3, #128	; 0x80
 8006e84:	d814      	bhi.n	8006eb0 <UART_SetConfig+0x200>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <UART_SetConfig+0x1e0>
 8006e8a:	2b40      	cmp	r3, #64	; 0x40
 8006e8c:	d008      	beq.n	8006ea0 <UART_SetConfig+0x1f0>
 8006e8e:	e00f      	b.n	8006eb0 <UART_SetConfig+0x200>
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006e96:	e082      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006e9e:	e07e      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006ea6:	e07a      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006eae:	e076      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006eb6:	e072      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	4b35      	ldr	r3, [pc, #212]	; (8006f94 <UART_SetConfig+0x2e4>)
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d12a      	bne.n	8006f18 <UART_SetConfig+0x268>
 8006ec2:	4b30      	ldr	r3, [pc, #192]	; (8006f84 <UART_SetConfig+0x2d4>)
 8006ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed0:	d01a      	beq.n	8006f08 <UART_SetConfig+0x258>
 8006ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed6:	d81b      	bhi.n	8006f10 <UART_SetConfig+0x260>
 8006ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006edc:	d00c      	beq.n	8006ef8 <UART_SetConfig+0x248>
 8006ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee2:	d815      	bhi.n	8006f10 <UART_SetConfig+0x260>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <UART_SetConfig+0x240>
 8006ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eec:	d008      	beq.n	8006f00 <UART_SetConfig+0x250>
 8006eee:	e00f      	b.n	8006f10 <UART_SetConfig+0x260>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006ef6:	e052      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006efe:	e04e      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006f00:	2304      	movs	r3, #4
 8006f02:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006f06:	e04a      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006f08:	2308      	movs	r3, #8
 8006f0a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006f0e:	e046      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006f10:	2310      	movs	r3, #16
 8006f12:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006f16:	e042      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	4b17      	ldr	r3, [pc, #92]	; (8006f7c <UART_SetConfig+0x2cc>)
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d13a      	bne.n	8006f98 <UART_SetConfig+0x2e8>
 8006f22:	4b18      	ldr	r3, [pc, #96]	; (8006f84 <UART_SetConfig+0x2d4>)
 8006f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f30:	d01a      	beq.n	8006f68 <UART_SetConfig+0x2b8>
 8006f32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f36:	d81b      	bhi.n	8006f70 <UART_SetConfig+0x2c0>
 8006f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3c:	d00c      	beq.n	8006f58 <UART_SetConfig+0x2a8>
 8006f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f42:	d815      	bhi.n	8006f70 <UART_SetConfig+0x2c0>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <UART_SetConfig+0x2a0>
 8006f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4c:	d008      	beq.n	8006f60 <UART_SetConfig+0x2b0>
 8006f4e:	e00f      	b.n	8006f70 <UART_SetConfig+0x2c0>
 8006f50:	2300      	movs	r3, #0
 8006f52:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006f56:	e022      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006f5e:	e01e      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006f60:	2304      	movs	r3, #4
 8006f62:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006f66:	e01a      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006f68:	2308      	movs	r3, #8
 8006f6a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006f6e:	e016      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006f70:	2310      	movs	r3, #16
 8006f72:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8006f76:	e012      	b.n	8006f9e <UART_SetConfig+0x2ee>
 8006f78:	efff69f3 	.word	0xefff69f3
 8006f7c:	40008000 	.word	0x40008000
 8006f80:	40013800 	.word	0x40013800
 8006f84:	40021000 	.word	0x40021000
 8006f88:	40004400 	.word	0x40004400
 8006f8c:	40004800 	.word	0x40004800
 8006f90:	40004c00 	.word	0x40004c00
 8006f94:	40005000 	.word	0x40005000
 8006f98:	2310      	movs	r3, #16
 8006f9a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	4bb6      	ldr	r3, [pc, #728]	; (800727c <UART_SetConfig+0x5cc>)
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	f040 810c 	bne.w	80071c2 <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006faa:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006fae:	2b08      	cmp	r3, #8
 8006fb0:	d823      	bhi.n	8006ffa <UART_SetConfig+0x34a>
 8006fb2:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <UART_SetConfig+0x308>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	08006fdd 	.word	0x08006fdd
 8006fbc:	08006ffb 	.word	0x08006ffb
 8006fc0:	08006fe5 	.word	0x08006fe5
 8006fc4:	08006ffb 	.word	0x08006ffb
 8006fc8:	08006feb 	.word	0x08006feb
 8006fcc:	08006ffb 	.word	0x08006ffb
 8006fd0:	08006ffb 	.word	0x08006ffb
 8006fd4:	08006ffb 	.word	0x08006ffb
 8006fd8:	08006ff3 	.word	0x08006ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006fdc:	f7fe feba 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 8006fe0:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8006fe2:	e00e      	b.n	8007002 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006fe4:	4ba6      	ldr	r3, [pc, #664]	; (8007280 <UART_SetConfig+0x5d0>)
 8006fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8006fe8:	e00b      	b.n	8007002 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006fea:	f7fe fe1b 	bl	8005c24 <HAL_RCC_GetSysClockFreq>
 8006fee:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ff0:	e007      	b.n	8007002 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ff8:	e003      	b.n	8007002 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8007000:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 81e5 	beq.w	80073d4 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800700a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	4613      	mov	r3, r2
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	441a      	add	r2, r3
 8007014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007016:	4293      	cmp	r3, r2
 8007018:	d305      	bcc.n	8007026 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800701a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007022:	4293      	cmp	r3, r2
 8007024:	d903      	bls.n	800702e <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800702c:	e1d2      	b.n	80073d4 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 800702e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007032:	2b08      	cmp	r3, #8
 8007034:	f200 80b0 	bhi.w	8007198 <UART_SetConfig+0x4e8>
 8007038:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <UART_SetConfig+0x390>)
 800703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703e:	bf00      	nop
 8007040:	08007065 	.word	0x08007065
 8007044:	08007199 	.word	0x08007199
 8007048:	080070c5 	.word	0x080070c5
 800704c:	08007199 	.word	0x08007199
 8007050:	08007105 	.word	0x08007105
 8007054:	08007199 	.word	0x08007199
 8007058:	08007199 	.word	0x08007199
 800705c:	08007199 	.word	0x08007199
 8007060:	08007161 	.word	0x08007161
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8007064:	f7fe fe76 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 8007068:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800706a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800706c:	2200      	movs	r2, #0
 800706e:	4698      	mov	r8, r3
 8007070:	4691      	mov	r9, r2
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	f04f 0300 	mov.w	r3, #0
 800707a:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800707e:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8007082:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8007086:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007088:	6849      	ldr	r1, [r1, #4]
 800708a:	0849      	lsrs	r1, r1, #1
 800708c:	2000      	movs	r0, #0
 800708e:	6539      	str	r1, [r7, #80]	; 0x50
 8007090:	6578      	str	r0, [r7, #84]	; 0x54
 8007092:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8007096:	4621      	mov	r1, r4
 8007098:	1851      	adds	r1, r2, r1
 800709a:	64b9      	str	r1, [r7, #72]	; 0x48
 800709c:	4629      	mov	r1, r5
 800709e:	eb43 0101 	adc.w	r1, r3, r1
 80070a2:	64f9      	str	r1, [r7, #76]	; 0x4c
 80070a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	643b      	str	r3, [r7, #64]	; 0x40
 80070ac:	647a      	str	r2, [r7, #68]	; 0x44
 80070ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80070b6:	f7f9 fd97 	bl	8000be8 <__aeabi_uldivmod>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4613      	mov	r3, r2
 80070c0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80070c2:	e06d      	b.n	80071a0 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80070c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	085b      	lsrs	r3, r3, #1
 80070ca:	2200      	movs	r2, #0
 80070cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80070ce:	63fa      	str	r2, [r7, #60]	; 0x3c
 80070d0:	4b6c      	ldr	r3, [pc, #432]	; (8007284 <UART_SetConfig+0x5d4>)
 80070d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80070d6:	4602      	mov	r2, r0
 80070d8:	18d3      	adds	r3, r2, r3
 80070da:	633b      	str	r3, [r7, #48]	; 0x30
 80070dc:	460b      	mov	r3, r1
 80070de:	f143 0300 	adc.w	r3, r3, #0
 80070e2:	637b      	str	r3, [r7, #52]	; 0x34
 80070e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80070ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80070f6:	f7f9 fd77 	bl	8000be8 <__aeabi_uldivmod>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	4613      	mov	r3, r2
 8007100:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8007102:	e04d      	b.n	80071a0 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007104:	f7fe fd8e 	bl	8005c24 <HAL_RCC_GetSysClockFreq>
 8007108:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800710a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800710c:	2200      	movs	r2, #0
 800710e:	461c      	mov	r4, r3
 8007110:	4615      	mov	r5, r2
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	022b      	lsls	r3, r5, #8
 800711c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007120:	0222      	lsls	r2, r4, #8
 8007122:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007124:	6849      	ldr	r1, [r1, #4]
 8007126:	0849      	lsrs	r1, r1, #1
 8007128:	2000      	movs	r0, #0
 800712a:	6239      	str	r1, [r7, #32]
 800712c:	6278      	str	r0, [r7, #36]	; 0x24
 800712e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007132:	4621      	mov	r1, r4
 8007134:	1851      	adds	r1, r2, r1
 8007136:	61b9      	str	r1, [r7, #24]
 8007138:	4629      	mov	r1, r5
 800713a:	eb43 0101 	adc.w	r1, r3, r1
 800713e:	61f9      	str	r1, [r7, #28]
 8007140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	617a      	str	r2, [r7, #20]
 800714a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800714e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007152:	f7f9 fd49 	bl	8000be8 <__aeabi_uldivmod>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4613      	mov	r3, r2
 800715c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800715e:	e01f      	b.n	80071a0 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	085b      	lsrs	r3, r3, #1
 8007166:	2200      	movs	r2, #0
 8007168:	469a      	mov	sl, r3
 800716a:	4693      	mov	fp, r2
 800716c:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8007170:	60bb      	str	r3, [r7, #8]
 8007172:	f14b 0300 	adc.w	r3, fp, #0
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007186:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800718a:	f7f9 fd2d 	bl	8000be8 <__aeabi_uldivmod>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4613      	mov	r3, r2
 8007194:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8007196:	e003      	b.n	80071a0 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 800719e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071a6:	d308      	bcc.n	80071ba <UART_SetConfig+0x50a>
 80071a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071ae:	d204      	bcs.n	80071ba <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 80071b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80071b6:	60da      	str	r2, [r3, #12]
 80071b8:	e10c      	b.n	80073d4 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80071c0:	e108      	b.n	80073d4 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ca:	f040 808f 	bne.w	80072ec <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 80071ce:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80071d2:	2b08      	cmp	r3, #8
 80071d4:	d864      	bhi.n	80072a0 <UART_SetConfig+0x5f0>
 80071d6:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <UART_SetConfig+0x52c>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	08007201 	.word	0x08007201
 80071e0:	08007221 	.word	0x08007221
 80071e4:	08007241 	.word	0x08007241
 80071e8:	080072a1 	.word	0x080072a1
 80071ec:	0800725d 	.word	0x0800725d
 80071f0:	080072a1 	.word	0x080072a1
 80071f4:	080072a1 	.word	0x080072a1
 80071f8:	080072a1 	.word	0x080072a1
 80071fc:	08007289 	.word	0x08007289
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007200:	f7fe fda8 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 8007204:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007206:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007208:	005a      	lsls	r2, r3, #1
 800720a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	085b      	lsrs	r3, r3, #1
 8007210:	441a      	add	r2, r3
 8007212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	fbb2 f3f3 	udiv	r3, r2, r3
 800721a:	b29b      	uxth	r3, r3
 800721c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800721e:	e043      	b.n	80072a8 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007220:	f7fe fdae 	bl	8005d80 <HAL_RCC_GetPCLK2Freq>
 8007224:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007228:	005a      	lsls	r2, r3, #1
 800722a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	085b      	lsrs	r3, r3, #1
 8007230:	441a      	add	r2, r3
 8007232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	fbb2 f3f3 	udiv	r3, r2, r3
 800723a:	b29b      	uxth	r3, r3
 800723c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800723e:	e033      	b.n	80072a8 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	085b      	lsrs	r3, r3, #1
 8007246:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800724a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800724e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007250:	6852      	ldr	r2, [r2, #4]
 8007252:	fbb3 f3f2 	udiv	r3, r3, r2
 8007256:	b29b      	uxth	r3, r3
 8007258:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800725a:	e025      	b.n	80072a8 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800725c:	f7fe fce2 	bl	8005c24 <HAL_RCC_GetSysClockFreq>
 8007260:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007264:	005a      	lsls	r2, r3, #1
 8007266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	441a      	add	r2, r3
 800726e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	fbb2 f3f3 	udiv	r3, r2, r3
 8007276:	b29b      	uxth	r3, r3
 8007278:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800727a:	e015      	b.n	80072a8 <UART_SetConfig+0x5f8>
 800727c:	40008000 	.word	0x40008000
 8007280:	00f42400 	.word	0x00f42400
 8007284:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	fbb2 f3f3 	udiv	r3, r2, r3
 800729a:	b29b      	uxth	r3, r3
 800729c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800729e:	e003      	b.n	80072a8 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 80072a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072aa:	2b0f      	cmp	r3, #15
 80072ac:	d91a      	bls.n	80072e4 <UART_SetConfig+0x634>
 80072ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b4:	d216      	bcs.n	80072e4 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f023 030f 	bic.w	r3, r3, #15
 80072be:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072c4:	085b      	lsrs	r3, r3, #1
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 80072d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80072e0:	60da      	str	r2, [r3, #12]
 80072e2:	e077      	b.n	80073d4 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80072ea:	e073      	b.n	80073d4 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 80072ec:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80072f0:	2b08      	cmp	r3, #8
 80072f2:	d85c      	bhi.n	80073ae <UART_SetConfig+0x6fe>
 80072f4:	a201      	add	r2, pc, #4	; (adr r2, 80072fc <UART_SetConfig+0x64c>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	08007321 	.word	0x08007321
 8007300:	0800733f 	.word	0x0800733f
 8007304:	0800735d 	.word	0x0800735d
 8007308:	080073af 	.word	0x080073af
 800730c:	08007379 	.word	0x08007379
 8007310:	080073af 	.word	0x080073af
 8007314:	080073af 	.word	0x080073af
 8007318:	080073af 	.word	0x080073af
 800731c:	08007397 	.word	0x08007397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007320:	f7fe fd18 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 8007324:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	085a      	lsrs	r2, r3, #1
 800732c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800732e:	441a      	add	r2, r3
 8007330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	fbb2 f3f3 	udiv	r3, r2, r3
 8007338:	b29b      	uxth	r3, r3
 800733a:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800733c:	e03b      	b.n	80073b6 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800733e:	f7fe fd1f 	bl	8005d80 <HAL_RCC_GetPCLK2Freq>
 8007342:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	085a      	lsrs	r2, r3, #1
 800734a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800734c:	441a      	add	r2, r3
 800734e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	fbb2 f3f3 	udiv	r3, r2, r3
 8007356:	b29b      	uxth	r3, r3
 8007358:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800735a:	e02c      	b.n	80073b6 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800735c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	085b      	lsrs	r3, r3, #1
 8007362:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007366:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800736a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800736c:	6852      	ldr	r2, [r2, #4]
 800736e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007372:	b29b      	uxth	r3, r3
 8007374:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8007376:	e01e      	b.n	80073b6 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007378:	f7fe fc54 	bl	8005c24 <HAL_RCC_GetSysClockFreq>
 800737c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800737e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	085a      	lsrs	r2, r3, #1
 8007384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007386:	441a      	add	r2, r3
 8007388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007390:	b29b      	uxth	r3, r3
 8007392:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8007394:	e00f      	b.n	80073b6 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	085b      	lsrs	r3, r3, #1
 800739c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80073a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80073ac:	e003      	b.n	80073b6 <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 80073b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b8:	2b0f      	cmp	r3, #15
 80073ba:	d908      	bls.n	80073ce <UART_SetConfig+0x71e>
 80073bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c2:	d204      	bcs.n	80073ce <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 80073c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80073ca:	60da      	str	r2, [r3, #12]
 80073cc:	e002      	b.n	80073d4 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073d6:	2200      	movs	r2, #0
 80073d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80073da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073dc:	2200      	movs	r2, #0
 80073de:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80073e0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3780      	adds	r7, #128	; 0x80
 80073e8:	46bd      	mov	sp, r7
 80073ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ee:	bf00      	nop

080073f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	430a      	orrs	r2, r1
 800747e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01a      	beq.n	8007506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ee:	d10a      	bne.n	8007506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	605a      	str	r2, [r3, #4]
  }
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af02      	add	r7, sp, #8
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007542:	f7fd f9db 	bl	80048fc <HAL_GetTick>
 8007546:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b08      	cmp	r3, #8
 8007554:	d10e      	bne.n	8007574 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007556:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f82a 	bl	80075be <UART_WaitOnFlagUntilTimeout>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e020      	b.n	80075b6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0304 	and.w	r3, r3, #4
 800757e:	2b04      	cmp	r3, #4
 8007580:	d10e      	bne.n	80075a0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007582:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f814 	bl	80075be <UART_WaitOnFlagUntilTimeout>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e00a      	b.n	80075b6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2220      	movs	r2, #32
 80075a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	603b      	str	r3, [r7, #0]
 80075ca:	4613      	mov	r3, r2
 80075cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ce:	e05d      	b.n	800768c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d6:	d059      	beq.n	800768c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d8:	f7fd f990 	bl	80048fc <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d302      	bcc.n	80075ee <UART_WaitOnFlagUntilTimeout+0x30>
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d11b      	bne.n	8007626 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0201 	bic.w	r2, r2, #1
 800760c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2220      	movs	r2, #32
 8007612:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e042      	b.n	80076ac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d02b      	beq.n	800768c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800763e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007642:	d123      	bne.n	800768c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800764c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800765c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0201 	bic.w	r2, r2, #1
 800766c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2220      	movs	r2, #32
 8007672:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2220      	movs	r2, #32
 800767e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e00f      	b.n	80076ac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	69da      	ldr	r2, [r3, #28]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4013      	ands	r3, r2
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	429a      	cmp	r2, r3
 800769a:	bf0c      	ite	eq
 800769c:	2301      	moveq	r3, #1
 800769e:	2300      	movne	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	79fb      	ldrb	r3, [r7, #7]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d092      	beq.n	80075d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <findslot>:
 80076b4:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <findslot+0x2c>)
 80076b6:	b510      	push	{r4, lr}
 80076b8:	4604      	mov	r4, r0
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	b118      	cbz	r0, 80076c6 <findslot+0x12>
 80076be:	6983      	ldr	r3, [r0, #24]
 80076c0:	b90b      	cbnz	r3, 80076c6 <findslot+0x12>
 80076c2:	f000 f9a1 	bl	8007a08 <__sinit>
 80076c6:	2c13      	cmp	r4, #19
 80076c8:	d807      	bhi.n	80076da <findslot+0x26>
 80076ca:	4806      	ldr	r0, [pc, #24]	; (80076e4 <findslot+0x30>)
 80076cc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80076d0:	3201      	adds	r2, #1
 80076d2:	d002      	beq.n	80076da <findslot+0x26>
 80076d4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80076d8:	bd10      	pop	{r4, pc}
 80076da:	2000      	movs	r0, #0
 80076dc:	e7fc      	b.n	80076d8 <findslot+0x24>
 80076de:	bf00      	nop
 80076e0:	20000074 	.word	0x20000074
 80076e4:	20000448 	.word	0x20000448

080076e8 <error>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	4604      	mov	r4, r0
 80076ec:	f000 f92e 	bl	800794c <__errno>
 80076f0:	2613      	movs	r6, #19
 80076f2:	4605      	mov	r5, r0
 80076f4:	2700      	movs	r7, #0
 80076f6:	4630      	mov	r0, r6
 80076f8:	4639      	mov	r1, r7
 80076fa:	beab      	bkpt	0x00ab
 80076fc:	4606      	mov	r6, r0
 80076fe:	602e      	str	r6, [r5, #0]
 8007700:	4620      	mov	r0, r4
 8007702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007704 <checkerror>:
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d101      	bne.n	800770c <checkerror+0x8>
 8007708:	f7ff bfee 	b.w	80076e8 <error>
 800770c:	4770      	bx	lr

0800770e <_swiread>:
 800770e:	b530      	push	{r4, r5, lr}
 8007710:	b085      	sub	sp, #20
 8007712:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007716:	9203      	str	r2, [sp, #12]
 8007718:	2406      	movs	r4, #6
 800771a:	ad01      	add	r5, sp, #4
 800771c:	4620      	mov	r0, r4
 800771e:	4629      	mov	r1, r5
 8007720:	beab      	bkpt	0x00ab
 8007722:	4604      	mov	r4, r0
 8007724:	4620      	mov	r0, r4
 8007726:	f7ff ffed 	bl	8007704 <checkerror>
 800772a:	b005      	add	sp, #20
 800772c:	bd30      	pop	{r4, r5, pc}

0800772e <_read>:
 800772e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007730:	4615      	mov	r5, r2
 8007732:	9101      	str	r1, [sp, #4]
 8007734:	f7ff ffbe 	bl	80076b4 <findslot>
 8007738:	9901      	ldr	r1, [sp, #4]
 800773a:	4604      	mov	r4, r0
 800773c:	b938      	cbnz	r0, 800774e <_read+0x20>
 800773e:	f000 f905 	bl	800794c <__errno>
 8007742:	2309      	movs	r3, #9
 8007744:	6003      	str	r3, [r0, #0]
 8007746:	f04f 30ff 	mov.w	r0, #4294967295
 800774a:	b003      	add	sp, #12
 800774c:	bd30      	pop	{r4, r5, pc}
 800774e:	6800      	ldr	r0, [r0, #0]
 8007750:	462a      	mov	r2, r5
 8007752:	f7ff ffdc 	bl	800770e <_swiread>
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	d0f7      	beq.n	800774a <_read+0x1c>
 800775a:	6863      	ldr	r3, [r4, #4]
 800775c:	1a2a      	subs	r2, r5, r0
 800775e:	4413      	add	r3, r2
 8007760:	6063      	str	r3, [r4, #4]
 8007762:	4610      	mov	r0, r2
 8007764:	e7f1      	b.n	800774a <_read+0x1c>

08007766 <_swilseek>:
 8007766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007768:	460c      	mov	r4, r1
 800776a:	4616      	mov	r6, r2
 800776c:	f7ff ffa2 	bl	80076b4 <findslot>
 8007770:	4605      	mov	r5, r0
 8007772:	b940      	cbnz	r0, 8007786 <_swilseek+0x20>
 8007774:	f000 f8ea 	bl	800794c <__errno>
 8007778:	2309      	movs	r3, #9
 800777a:	6003      	str	r3, [r0, #0]
 800777c:	f04f 34ff 	mov.w	r4, #4294967295
 8007780:	4620      	mov	r0, r4
 8007782:	b003      	add	sp, #12
 8007784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007786:	2e02      	cmp	r6, #2
 8007788:	d903      	bls.n	8007792 <_swilseek+0x2c>
 800778a:	f000 f8df 	bl	800794c <__errno>
 800778e:	2316      	movs	r3, #22
 8007790:	e7f3      	b.n	800777a <_swilseek+0x14>
 8007792:	2e01      	cmp	r6, #1
 8007794:	d112      	bne.n	80077bc <_swilseek+0x56>
 8007796:	6843      	ldr	r3, [r0, #4]
 8007798:	18e4      	adds	r4, r4, r3
 800779a:	d4f6      	bmi.n	800778a <_swilseek+0x24>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	260a      	movs	r6, #10
 80077a0:	e9cd 3400 	strd	r3, r4, [sp]
 80077a4:	466f      	mov	r7, sp
 80077a6:	4630      	mov	r0, r6
 80077a8:	4639      	mov	r1, r7
 80077aa:	beab      	bkpt	0x00ab
 80077ac:	4606      	mov	r6, r0
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7ff ffa8 	bl	8007704 <checkerror>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	dbe1      	blt.n	800777c <_swilseek+0x16>
 80077b8:	606c      	str	r4, [r5, #4]
 80077ba:	e7e1      	b.n	8007780 <_swilseek+0x1a>
 80077bc:	2e02      	cmp	r6, #2
 80077be:	d1ed      	bne.n	800779c <_swilseek+0x36>
 80077c0:	6803      	ldr	r3, [r0, #0]
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	260c      	movs	r6, #12
 80077c6:	466f      	mov	r7, sp
 80077c8:	4630      	mov	r0, r6
 80077ca:	4639      	mov	r1, r7
 80077cc:	beab      	bkpt	0x00ab
 80077ce:	4606      	mov	r6, r0
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7ff ff97 	bl	8007704 <checkerror>
 80077d6:	1c43      	adds	r3, r0, #1
 80077d8:	d0d0      	beq.n	800777c <_swilseek+0x16>
 80077da:	4404      	add	r4, r0
 80077dc:	e7de      	b.n	800779c <_swilseek+0x36>

080077de <_lseek>:
 80077de:	f7ff bfc2 	b.w	8007766 <_swilseek>

080077e2 <_swiwrite>:
 80077e2:	b530      	push	{r4, r5, lr}
 80077e4:	b085      	sub	sp, #20
 80077e6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80077ea:	9203      	str	r2, [sp, #12]
 80077ec:	2405      	movs	r4, #5
 80077ee:	ad01      	add	r5, sp, #4
 80077f0:	4620      	mov	r0, r4
 80077f2:	4629      	mov	r1, r5
 80077f4:	beab      	bkpt	0x00ab
 80077f6:	4604      	mov	r4, r0
 80077f8:	4620      	mov	r0, r4
 80077fa:	f7ff ff83 	bl	8007704 <checkerror>
 80077fe:	b005      	add	sp, #20
 8007800:	bd30      	pop	{r4, r5, pc}

08007802 <_write>:
 8007802:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007804:	4615      	mov	r5, r2
 8007806:	9101      	str	r1, [sp, #4]
 8007808:	f7ff ff54 	bl	80076b4 <findslot>
 800780c:	9901      	ldr	r1, [sp, #4]
 800780e:	4604      	mov	r4, r0
 8007810:	b930      	cbnz	r0, 8007820 <_write+0x1e>
 8007812:	f000 f89b 	bl	800794c <__errno>
 8007816:	2309      	movs	r3, #9
 8007818:	6003      	str	r3, [r0, #0]
 800781a:	f04f 30ff 	mov.w	r0, #4294967295
 800781e:	e012      	b.n	8007846 <_write+0x44>
 8007820:	6800      	ldr	r0, [r0, #0]
 8007822:	462a      	mov	r2, r5
 8007824:	f7ff ffdd 	bl	80077e2 <_swiwrite>
 8007828:	2800      	cmp	r0, #0
 800782a:	dbf6      	blt.n	800781a <_write+0x18>
 800782c:	6862      	ldr	r2, [r4, #4]
 800782e:	1a2b      	subs	r3, r5, r0
 8007830:	441a      	add	r2, r3
 8007832:	42a8      	cmp	r0, r5
 8007834:	6062      	str	r2, [r4, #4]
 8007836:	d105      	bne.n	8007844 <_write+0x42>
 8007838:	2000      	movs	r0, #0
 800783a:	b003      	add	sp, #12
 800783c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007840:	f7ff bf52 	b.w	80076e8 <error>
 8007844:	4618      	mov	r0, r3
 8007846:	b003      	add	sp, #12
 8007848:	bd30      	pop	{r4, r5, pc}

0800784a <_swiclose>:
 800784a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800784c:	2402      	movs	r4, #2
 800784e:	9001      	str	r0, [sp, #4]
 8007850:	ad01      	add	r5, sp, #4
 8007852:	4620      	mov	r0, r4
 8007854:	4629      	mov	r1, r5
 8007856:	beab      	bkpt	0x00ab
 8007858:	4604      	mov	r4, r0
 800785a:	4620      	mov	r0, r4
 800785c:	f7ff ff52 	bl	8007704 <checkerror>
 8007860:	b003      	add	sp, #12
 8007862:	bd30      	pop	{r4, r5, pc}

08007864 <_close>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4605      	mov	r5, r0
 8007868:	f7ff ff24 	bl	80076b4 <findslot>
 800786c:	4604      	mov	r4, r0
 800786e:	b930      	cbnz	r0, 800787e <_close+0x1a>
 8007870:	f000 f86c 	bl	800794c <__errno>
 8007874:	2309      	movs	r3, #9
 8007876:	6003      	str	r3, [r0, #0]
 8007878:	f04f 30ff 	mov.w	r0, #4294967295
 800787c:	bd38      	pop	{r3, r4, r5, pc}
 800787e:	3d01      	subs	r5, #1
 8007880:	2d01      	cmp	r5, #1
 8007882:	d809      	bhi.n	8007898 <_close+0x34>
 8007884:	4b09      	ldr	r3, [pc, #36]	; (80078ac <_close+0x48>)
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	429a      	cmp	r2, r3
 800788c:	d104      	bne.n	8007898 <_close+0x34>
 800788e:	f04f 33ff 	mov.w	r3, #4294967295
 8007892:	6003      	str	r3, [r0, #0]
 8007894:	2000      	movs	r0, #0
 8007896:	e7f1      	b.n	800787c <_close+0x18>
 8007898:	6820      	ldr	r0, [r4, #0]
 800789a:	f7ff ffd6 	bl	800784a <_swiclose>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d1ec      	bne.n	800787c <_close+0x18>
 80078a2:	f04f 33ff 	mov.w	r3, #4294967295
 80078a6:	6023      	str	r3, [r4, #0]
 80078a8:	e7e8      	b.n	800787c <_close+0x18>
 80078aa:	bf00      	nop
 80078ac:	20000448 	.word	0x20000448

080078b0 <_getpid>:
 80078b0:	2001      	movs	r0, #1
 80078b2:	4770      	bx	lr

080078b4 <_swistat>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	460c      	mov	r4, r1
 80078b8:	f7ff fefc 	bl	80076b4 <findslot>
 80078bc:	4605      	mov	r5, r0
 80078be:	b930      	cbnz	r0, 80078ce <_swistat+0x1a>
 80078c0:	f000 f844 	bl	800794c <__errno>
 80078c4:	2309      	movs	r3, #9
 80078c6:	6003      	str	r3, [r0, #0]
 80078c8:	f04f 30ff 	mov.w	r0, #4294967295
 80078cc:	bd70      	pop	{r4, r5, r6, pc}
 80078ce:	6863      	ldr	r3, [r4, #4]
 80078d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078d4:	6063      	str	r3, [r4, #4]
 80078d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078da:	64a3      	str	r3, [r4, #72]	; 0x48
 80078dc:	260c      	movs	r6, #12
 80078de:	4630      	mov	r0, r6
 80078e0:	4629      	mov	r1, r5
 80078e2:	beab      	bkpt	0x00ab
 80078e4:	4605      	mov	r5, r0
 80078e6:	4628      	mov	r0, r5
 80078e8:	f7ff ff0c 	bl	8007704 <checkerror>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	bf1c      	itt	ne
 80078f0:	6120      	strne	r0, [r4, #16]
 80078f2:	2000      	movne	r0, #0
 80078f4:	e7ea      	b.n	80078cc <_swistat+0x18>

080078f6 <_fstat>:
 80078f6:	460b      	mov	r3, r1
 80078f8:	b510      	push	{r4, lr}
 80078fa:	2100      	movs	r1, #0
 80078fc:	4604      	mov	r4, r0
 80078fe:	2258      	movs	r2, #88	; 0x58
 8007900:	4618      	mov	r0, r3
 8007902:	f000 f954 	bl	8007bae <memset>
 8007906:	4601      	mov	r1, r0
 8007908:	4620      	mov	r0, r4
 800790a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800790e:	f7ff bfd1 	b.w	80078b4 <_swistat>

08007912 <_isatty>:
 8007912:	b570      	push	{r4, r5, r6, lr}
 8007914:	f7ff fece 	bl	80076b4 <findslot>
 8007918:	2509      	movs	r5, #9
 800791a:	4604      	mov	r4, r0
 800791c:	b920      	cbnz	r0, 8007928 <_isatty+0x16>
 800791e:	f000 f815 	bl	800794c <__errno>
 8007922:	6005      	str	r5, [r0, #0]
 8007924:	4620      	mov	r0, r4
 8007926:	bd70      	pop	{r4, r5, r6, pc}
 8007928:	4628      	mov	r0, r5
 800792a:	4621      	mov	r1, r4
 800792c:	beab      	bkpt	0x00ab
 800792e:	4604      	mov	r4, r0
 8007930:	2c01      	cmp	r4, #1
 8007932:	d0f7      	beq.n	8007924 <_isatty+0x12>
 8007934:	f000 f80a 	bl	800794c <__errno>
 8007938:	2400      	movs	r4, #0
 800793a:	4605      	mov	r5, r0
 800793c:	2613      	movs	r6, #19
 800793e:	4630      	mov	r0, r6
 8007940:	4621      	mov	r1, r4
 8007942:	beab      	bkpt	0x00ab
 8007944:	4606      	mov	r6, r0
 8007946:	602e      	str	r6, [r5, #0]
 8007948:	e7ec      	b.n	8007924 <_isatty+0x12>
	...

0800794c <__errno>:
 800794c:	4b01      	ldr	r3, [pc, #4]	; (8007954 <__errno+0x8>)
 800794e:	6818      	ldr	r0, [r3, #0]
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20000074 	.word	0x20000074

08007958 <std>:
 8007958:	2300      	movs	r3, #0
 800795a:	b510      	push	{r4, lr}
 800795c:	4604      	mov	r4, r0
 800795e:	e9c0 3300 	strd	r3, r3, [r0]
 8007962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007966:	6083      	str	r3, [r0, #8]
 8007968:	8181      	strh	r1, [r0, #12]
 800796a:	6643      	str	r3, [r0, #100]	; 0x64
 800796c:	81c2      	strh	r2, [r0, #14]
 800796e:	6183      	str	r3, [r0, #24]
 8007970:	4619      	mov	r1, r3
 8007972:	2208      	movs	r2, #8
 8007974:	305c      	adds	r0, #92	; 0x5c
 8007976:	f000 f91a 	bl	8007bae <memset>
 800797a:	4b05      	ldr	r3, [pc, #20]	; (8007990 <std+0x38>)
 800797c:	6263      	str	r3, [r4, #36]	; 0x24
 800797e:	4b05      	ldr	r3, [pc, #20]	; (8007994 <std+0x3c>)
 8007980:	62a3      	str	r3, [r4, #40]	; 0x28
 8007982:	4b05      	ldr	r3, [pc, #20]	; (8007998 <std+0x40>)
 8007984:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007986:	4b05      	ldr	r3, [pc, #20]	; (800799c <std+0x44>)
 8007988:	6224      	str	r4, [r4, #32]
 800798a:	6323      	str	r3, [r4, #48]	; 0x30
 800798c:	bd10      	pop	{r4, pc}
 800798e:	bf00      	nop
 8007990:	0800861d 	.word	0x0800861d
 8007994:	0800863f 	.word	0x0800863f
 8007998:	08008677 	.word	0x08008677
 800799c:	0800869b 	.word	0x0800869b

080079a0 <_cleanup_r>:
 80079a0:	4901      	ldr	r1, [pc, #4]	; (80079a8 <_cleanup_r+0x8>)
 80079a2:	f000 b8af 	b.w	8007b04 <_fwalk_reent>
 80079a6:	bf00      	nop
 80079a8:	080096a9 	.word	0x080096a9

080079ac <__sfmoreglue>:
 80079ac:	b570      	push	{r4, r5, r6, lr}
 80079ae:	2268      	movs	r2, #104	; 0x68
 80079b0:	1e4d      	subs	r5, r1, #1
 80079b2:	4355      	muls	r5, r2
 80079b4:	460e      	mov	r6, r1
 80079b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079ba:	f000 f921 	bl	8007c00 <_malloc_r>
 80079be:	4604      	mov	r4, r0
 80079c0:	b140      	cbz	r0, 80079d4 <__sfmoreglue+0x28>
 80079c2:	2100      	movs	r1, #0
 80079c4:	e9c0 1600 	strd	r1, r6, [r0]
 80079c8:	300c      	adds	r0, #12
 80079ca:	60a0      	str	r0, [r4, #8]
 80079cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079d0:	f000 f8ed 	bl	8007bae <memset>
 80079d4:	4620      	mov	r0, r4
 80079d6:	bd70      	pop	{r4, r5, r6, pc}

080079d8 <__sfp_lock_acquire>:
 80079d8:	4801      	ldr	r0, [pc, #4]	; (80079e0 <__sfp_lock_acquire+0x8>)
 80079da:	f000 b8d8 	b.w	8007b8e <__retarget_lock_acquire_recursive>
 80079de:	bf00      	nop
 80079e0:	200004e9 	.word	0x200004e9

080079e4 <__sfp_lock_release>:
 80079e4:	4801      	ldr	r0, [pc, #4]	; (80079ec <__sfp_lock_release+0x8>)
 80079e6:	f000 b8d3 	b.w	8007b90 <__retarget_lock_release_recursive>
 80079ea:	bf00      	nop
 80079ec:	200004e9 	.word	0x200004e9

080079f0 <__sinit_lock_acquire>:
 80079f0:	4801      	ldr	r0, [pc, #4]	; (80079f8 <__sinit_lock_acquire+0x8>)
 80079f2:	f000 b8cc 	b.w	8007b8e <__retarget_lock_acquire_recursive>
 80079f6:	bf00      	nop
 80079f8:	200004ea 	.word	0x200004ea

080079fc <__sinit_lock_release>:
 80079fc:	4801      	ldr	r0, [pc, #4]	; (8007a04 <__sinit_lock_release+0x8>)
 80079fe:	f000 b8c7 	b.w	8007b90 <__retarget_lock_release_recursive>
 8007a02:	bf00      	nop
 8007a04:	200004ea 	.word	0x200004ea

08007a08 <__sinit>:
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	f7ff fff0 	bl	80079f0 <__sinit_lock_acquire>
 8007a10:	69a3      	ldr	r3, [r4, #24]
 8007a12:	b11b      	cbz	r3, 8007a1c <__sinit+0x14>
 8007a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a18:	f7ff bff0 	b.w	80079fc <__sinit_lock_release>
 8007a1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a20:	6523      	str	r3, [r4, #80]	; 0x50
 8007a22:	4b13      	ldr	r3, [pc, #76]	; (8007a70 <__sinit+0x68>)
 8007a24:	4a13      	ldr	r2, [pc, #76]	; (8007a74 <__sinit+0x6c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a2a:	42a3      	cmp	r3, r4
 8007a2c:	bf04      	itt	eq
 8007a2e:	2301      	moveq	r3, #1
 8007a30:	61a3      	streq	r3, [r4, #24]
 8007a32:	4620      	mov	r0, r4
 8007a34:	f000 f820 	bl	8007a78 <__sfp>
 8007a38:	6060      	str	r0, [r4, #4]
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 f81c 	bl	8007a78 <__sfp>
 8007a40:	60a0      	str	r0, [r4, #8]
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 f818 	bl	8007a78 <__sfp>
 8007a48:	2200      	movs	r2, #0
 8007a4a:	60e0      	str	r0, [r4, #12]
 8007a4c:	2104      	movs	r1, #4
 8007a4e:	6860      	ldr	r0, [r4, #4]
 8007a50:	f7ff ff82 	bl	8007958 <std>
 8007a54:	68a0      	ldr	r0, [r4, #8]
 8007a56:	2201      	movs	r2, #1
 8007a58:	2109      	movs	r1, #9
 8007a5a:	f7ff ff7d 	bl	8007958 <std>
 8007a5e:	68e0      	ldr	r0, [r4, #12]
 8007a60:	2202      	movs	r2, #2
 8007a62:	2112      	movs	r1, #18
 8007a64:	f7ff ff78 	bl	8007958 <std>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	61a3      	str	r3, [r4, #24]
 8007a6c:	e7d2      	b.n	8007a14 <__sinit+0xc>
 8007a6e:	bf00      	nop
 8007a70:	0800ad00 	.word	0x0800ad00
 8007a74:	080079a1 	.word	0x080079a1

08007a78 <__sfp>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	4607      	mov	r7, r0
 8007a7c:	f7ff ffac 	bl	80079d8 <__sfp_lock_acquire>
 8007a80:	4b1e      	ldr	r3, [pc, #120]	; (8007afc <__sfp+0x84>)
 8007a82:	681e      	ldr	r6, [r3, #0]
 8007a84:	69b3      	ldr	r3, [r6, #24]
 8007a86:	b913      	cbnz	r3, 8007a8e <__sfp+0x16>
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f7ff ffbd 	bl	8007a08 <__sinit>
 8007a8e:	3648      	adds	r6, #72	; 0x48
 8007a90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	d503      	bpl.n	8007aa0 <__sfp+0x28>
 8007a98:	6833      	ldr	r3, [r6, #0]
 8007a9a:	b30b      	cbz	r3, 8007ae0 <__sfp+0x68>
 8007a9c:	6836      	ldr	r6, [r6, #0]
 8007a9e:	e7f7      	b.n	8007a90 <__sfp+0x18>
 8007aa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007aa4:	b9d5      	cbnz	r5, 8007adc <__sfp+0x64>
 8007aa6:	4b16      	ldr	r3, [pc, #88]	; (8007b00 <__sfp+0x88>)
 8007aa8:	60e3      	str	r3, [r4, #12]
 8007aaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007aae:	6665      	str	r5, [r4, #100]	; 0x64
 8007ab0:	f000 f86c 	bl	8007b8c <__retarget_lock_init_recursive>
 8007ab4:	f7ff ff96 	bl	80079e4 <__sfp_lock_release>
 8007ab8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007abc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ac0:	6025      	str	r5, [r4, #0]
 8007ac2:	61a5      	str	r5, [r4, #24]
 8007ac4:	2208      	movs	r2, #8
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007acc:	f000 f86f 	bl	8007bae <memset>
 8007ad0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ad4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ad8:	4620      	mov	r0, r4
 8007ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007adc:	3468      	adds	r4, #104	; 0x68
 8007ade:	e7d9      	b.n	8007a94 <__sfp+0x1c>
 8007ae0:	2104      	movs	r1, #4
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	f7ff ff62 	bl	80079ac <__sfmoreglue>
 8007ae8:	4604      	mov	r4, r0
 8007aea:	6030      	str	r0, [r6, #0]
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d1d5      	bne.n	8007a9c <__sfp+0x24>
 8007af0:	f7ff ff78 	bl	80079e4 <__sfp_lock_release>
 8007af4:	230c      	movs	r3, #12
 8007af6:	603b      	str	r3, [r7, #0]
 8007af8:	e7ee      	b.n	8007ad8 <__sfp+0x60>
 8007afa:	bf00      	nop
 8007afc:	0800ad00 	.word	0x0800ad00
 8007b00:	ffff0001 	.word	0xffff0001

08007b04 <_fwalk_reent>:
 8007b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b08:	4606      	mov	r6, r0
 8007b0a:	4688      	mov	r8, r1
 8007b0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b10:	2700      	movs	r7, #0
 8007b12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b16:	f1b9 0901 	subs.w	r9, r9, #1
 8007b1a:	d505      	bpl.n	8007b28 <_fwalk_reent+0x24>
 8007b1c:	6824      	ldr	r4, [r4, #0]
 8007b1e:	2c00      	cmp	r4, #0
 8007b20:	d1f7      	bne.n	8007b12 <_fwalk_reent+0xe>
 8007b22:	4638      	mov	r0, r7
 8007b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b28:	89ab      	ldrh	r3, [r5, #12]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d907      	bls.n	8007b3e <_fwalk_reent+0x3a>
 8007b2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b32:	3301      	adds	r3, #1
 8007b34:	d003      	beq.n	8007b3e <_fwalk_reent+0x3a>
 8007b36:	4629      	mov	r1, r5
 8007b38:	4630      	mov	r0, r6
 8007b3a:	47c0      	blx	r8
 8007b3c:	4307      	orrs	r7, r0
 8007b3e:	3568      	adds	r5, #104	; 0x68
 8007b40:	e7e9      	b.n	8007b16 <_fwalk_reent+0x12>
	...

08007b44 <__libc_init_array>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	4d0d      	ldr	r5, [pc, #52]	; (8007b7c <__libc_init_array+0x38>)
 8007b48:	4c0d      	ldr	r4, [pc, #52]	; (8007b80 <__libc_init_array+0x3c>)
 8007b4a:	1b64      	subs	r4, r4, r5
 8007b4c:	10a4      	asrs	r4, r4, #2
 8007b4e:	2600      	movs	r6, #0
 8007b50:	42a6      	cmp	r6, r4
 8007b52:	d109      	bne.n	8007b68 <__libc_init_array+0x24>
 8007b54:	4d0b      	ldr	r5, [pc, #44]	; (8007b84 <__libc_init_array+0x40>)
 8007b56:	4c0c      	ldr	r4, [pc, #48]	; (8007b88 <__libc_init_array+0x44>)
 8007b58:	f002 fe62 	bl	800a820 <_init>
 8007b5c:	1b64      	subs	r4, r4, r5
 8007b5e:	10a4      	asrs	r4, r4, #2
 8007b60:	2600      	movs	r6, #0
 8007b62:	42a6      	cmp	r6, r4
 8007b64:	d105      	bne.n	8007b72 <__libc_init_array+0x2e>
 8007b66:	bd70      	pop	{r4, r5, r6, pc}
 8007b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b6c:	4798      	blx	r3
 8007b6e:	3601      	adds	r6, #1
 8007b70:	e7ee      	b.n	8007b50 <__libc_init_array+0xc>
 8007b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b76:	4798      	blx	r3
 8007b78:	3601      	adds	r6, #1
 8007b7a:	e7f2      	b.n	8007b62 <__libc_init_array+0x1e>
 8007b7c:	0800b080 	.word	0x0800b080
 8007b80:	0800b080 	.word	0x0800b080
 8007b84:	0800b080 	.word	0x0800b080
 8007b88:	0800b084 	.word	0x0800b084

08007b8c <__retarget_lock_init_recursive>:
 8007b8c:	4770      	bx	lr

08007b8e <__retarget_lock_acquire_recursive>:
 8007b8e:	4770      	bx	lr

08007b90 <__retarget_lock_release_recursive>:
 8007b90:	4770      	bx	lr

08007b92 <memcpy>:
 8007b92:	440a      	add	r2, r1
 8007b94:	4291      	cmp	r1, r2
 8007b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b9a:	d100      	bne.n	8007b9e <memcpy+0xc>
 8007b9c:	4770      	bx	lr
 8007b9e:	b510      	push	{r4, lr}
 8007ba0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ba4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ba8:	4291      	cmp	r1, r2
 8007baa:	d1f9      	bne.n	8007ba0 <memcpy+0xe>
 8007bac:	bd10      	pop	{r4, pc}

08007bae <memset>:
 8007bae:	4402      	add	r2, r0
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d100      	bne.n	8007bb8 <memset+0xa>
 8007bb6:	4770      	bx	lr
 8007bb8:	f803 1b01 	strb.w	r1, [r3], #1
 8007bbc:	e7f9      	b.n	8007bb2 <memset+0x4>
	...

08007bc0 <sbrk_aligned>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	4e0e      	ldr	r6, [pc, #56]	; (8007bfc <sbrk_aligned+0x3c>)
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	6831      	ldr	r1, [r6, #0]
 8007bc8:	4605      	mov	r5, r0
 8007bca:	b911      	cbnz	r1, 8007bd2 <sbrk_aligned+0x12>
 8007bcc:	f000 fcf6 	bl	80085bc <_sbrk_r>
 8007bd0:	6030      	str	r0, [r6, #0]
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f000 fcf1 	bl	80085bc <_sbrk_r>
 8007bda:	1c43      	adds	r3, r0, #1
 8007bdc:	d00a      	beq.n	8007bf4 <sbrk_aligned+0x34>
 8007bde:	1cc4      	adds	r4, r0, #3
 8007be0:	f024 0403 	bic.w	r4, r4, #3
 8007be4:	42a0      	cmp	r0, r4
 8007be6:	d007      	beq.n	8007bf8 <sbrk_aligned+0x38>
 8007be8:	1a21      	subs	r1, r4, r0
 8007bea:	4628      	mov	r0, r5
 8007bec:	f000 fce6 	bl	80085bc <_sbrk_r>
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d101      	bne.n	8007bf8 <sbrk_aligned+0x38>
 8007bf4:	f04f 34ff 	mov.w	r4, #4294967295
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	200004f0 	.word	0x200004f0

08007c00 <_malloc_r>:
 8007c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c04:	1ccd      	adds	r5, r1, #3
 8007c06:	f025 0503 	bic.w	r5, r5, #3
 8007c0a:	3508      	adds	r5, #8
 8007c0c:	2d0c      	cmp	r5, #12
 8007c0e:	bf38      	it	cc
 8007c10:	250c      	movcc	r5, #12
 8007c12:	2d00      	cmp	r5, #0
 8007c14:	4607      	mov	r7, r0
 8007c16:	db01      	blt.n	8007c1c <_malloc_r+0x1c>
 8007c18:	42a9      	cmp	r1, r5
 8007c1a:	d905      	bls.n	8007c28 <_malloc_r+0x28>
 8007c1c:	230c      	movs	r3, #12
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	2600      	movs	r6, #0
 8007c22:	4630      	mov	r0, r6
 8007c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c28:	4e2e      	ldr	r6, [pc, #184]	; (8007ce4 <_malloc_r+0xe4>)
 8007c2a:	f001 fe0f 	bl	800984c <__malloc_lock>
 8007c2e:	6833      	ldr	r3, [r6, #0]
 8007c30:	461c      	mov	r4, r3
 8007c32:	bb34      	cbnz	r4, 8007c82 <_malloc_r+0x82>
 8007c34:	4629      	mov	r1, r5
 8007c36:	4638      	mov	r0, r7
 8007c38:	f7ff ffc2 	bl	8007bc0 <sbrk_aligned>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	4604      	mov	r4, r0
 8007c40:	d14d      	bne.n	8007cde <_malloc_r+0xde>
 8007c42:	6834      	ldr	r4, [r6, #0]
 8007c44:	4626      	mov	r6, r4
 8007c46:	2e00      	cmp	r6, #0
 8007c48:	d140      	bne.n	8007ccc <_malloc_r+0xcc>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4638      	mov	r0, r7
 8007c50:	eb04 0803 	add.w	r8, r4, r3
 8007c54:	f000 fcb2 	bl	80085bc <_sbrk_r>
 8007c58:	4580      	cmp	r8, r0
 8007c5a:	d13a      	bne.n	8007cd2 <_malloc_r+0xd2>
 8007c5c:	6821      	ldr	r1, [r4, #0]
 8007c5e:	3503      	adds	r5, #3
 8007c60:	1a6d      	subs	r5, r5, r1
 8007c62:	f025 0503 	bic.w	r5, r5, #3
 8007c66:	3508      	adds	r5, #8
 8007c68:	2d0c      	cmp	r5, #12
 8007c6a:	bf38      	it	cc
 8007c6c:	250c      	movcc	r5, #12
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff ffa5 	bl	8007bc0 <sbrk_aligned>
 8007c76:	3001      	adds	r0, #1
 8007c78:	d02b      	beq.n	8007cd2 <_malloc_r+0xd2>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	442b      	add	r3, r5
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	e00e      	b.n	8007ca0 <_malloc_r+0xa0>
 8007c82:	6822      	ldr	r2, [r4, #0]
 8007c84:	1b52      	subs	r2, r2, r5
 8007c86:	d41e      	bmi.n	8007cc6 <_malloc_r+0xc6>
 8007c88:	2a0b      	cmp	r2, #11
 8007c8a:	d916      	bls.n	8007cba <_malloc_r+0xba>
 8007c8c:	1961      	adds	r1, r4, r5
 8007c8e:	42a3      	cmp	r3, r4
 8007c90:	6025      	str	r5, [r4, #0]
 8007c92:	bf18      	it	ne
 8007c94:	6059      	strne	r1, [r3, #4]
 8007c96:	6863      	ldr	r3, [r4, #4]
 8007c98:	bf08      	it	eq
 8007c9a:	6031      	streq	r1, [r6, #0]
 8007c9c:	5162      	str	r2, [r4, r5]
 8007c9e:	604b      	str	r3, [r1, #4]
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f104 060b 	add.w	r6, r4, #11
 8007ca6:	f001 fdd7 	bl	8009858 <__malloc_unlock>
 8007caa:	f026 0607 	bic.w	r6, r6, #7
 8007cae:	1d23      	adds	r3, r4, #4
 8007cb0:	1af2      	subs	r2, r6, r3
 8007cb2:	d0b6      	beq.n	8007c22 <_malloc_r+0x22>
 8007cb4:	1b9b      	subs	r3, r3, r6
 8007cb6:	50a3      	str	r3, [r4, r2]
 8007cb8:	e7b3      	b.n	8007c22 <_malloc_r+0x22>
 8007cba:	6862      	ldr	r2, [r4, #4]
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	bf0c      	ite	eq
 8007cc0:	6032      	streq	r2, [r6, #0]
 8007cc2:	605a      	strne	r2, [r3, #4]
 8007cc4:	e7ec      	b.n	8007ca0 <_malloc_r+0xa0>
 8007cc6:	4623      	mov	r3, r4
 8007cc8:	6864      	ldr	r4, [r4, #4]
 8007cca:	e7b2      	b.n	8007c32 <_malloc_r+0x32>
 8007ccc:	4634      	mov	r4, r6
 8007cce:	6876      	ldr	r6, [r6, #4]
 8007cd0:	e7b9      	b.n	8007c46 <_malloc_r+0x46>
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	603b      	str	r3, [r7, #0]
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	f001 fdbe 	bl	8009858 <__malloc_unlock>
 8007cdc:	e7a1      	b.n	8007c22 <_malloc_r+0x22>
 8007cde:	6025      	str	r5, [r4, #0]
 8007ce0:	e7de      	b.n	8007ca0 <_malloc_r+0xa0>
 8007ce2:	bf00      	nop
 8007ce4:	200004ec 	.word	0x200004ec

08007ce8 <__cvt>:
 8007ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cec:	ec55 4b10 	vmov	r4, r5, d0
 8007cf0:	2d00      	cmp	r5, #0
 8007cf2:	460e      	mov	r6, r1
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	462b      	mov	r3, r5
 8007cf8:	bfbb      	ittet	lt
 8007cfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007cfe:	461d      	movlt	r5, r3
 8007d00:	2300      	movge	r3, #0
 8007d02:	232d      	movlt	r3, #45	; 0x2d
 8007d04:	700b      	strb	r3, [r1, #0]
 8007d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d0c:	4691      	mov	r9, r2
 8007d0e:	f023 0820 	bic.w	r8, r3, #32
 8007d12:	bfbc      	itt	lt
 8007d14:	4622      	movlt	r2, r4
 8007d16:	4614      	movlt	r4, r2
 8007d18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d1c:	d005      	beq.n	8007d2a <__cvt+0x42>
 8007d1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d22:	d100      	bne.n	8007d26 <__cvt+0x3e>
 8007d24:	3601      	adds	r6, #1
 8007d26:	2102      	movs	r1, #2
 8007d28:	e000      	b.n	8007d2c <__cvt+0x44>
 8007d2a:	2103      	movs	r1, #3
 8007d2c:	ab03      	add	r3, sp, #12
 8007d2e:	9301      	str	r3, [sp, #4]
 8007d30:	ab02      	add	r3, sp, #8
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	ec45 4b10 	vmov	d0, r4, r5
 8007d38:	4653      	mov	r3, sl
 8007d3a:	4632      	mov	r2, r6
 8007d3c:	f000 fe40 	bl	80089c0 <_dtoa_r>
 8007d40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d44:	4607      	mov	r7, r0
 8007d46:	d102      	bne.n	8007d4e <__cvt+0x66>
 8007d48:	f019 0f01 	tst.w	r9, #1
 8007d4c:	d022      	beq.n	8007d94 <__cvt+0xac>
 8007d4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d52:	eb07 0906 	add.w	r9, r7, r6
 8007d56:	d110      	bne.n	8007d7a <__cvt+0x92>
 8007d58:	783b      	ldrb	r3, [r7, #0]
 8007d5a:	2b30      	cmp	r3, #48	; 0x30
 8007d5c:	d10a      	bne.n	8007d74 <__cvt+0x8c>
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2300      	movs	r3, #0
 8007d62:	4620      	mov	r0, r4
 8007d64:	4629      	mov	r1, r5
 8007d66:	f7f8 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d6a:	b918      	cbnz	r0, 8007d74 <__cvt+0x8c>
 8007d6c:	f1c6 0601 	rsb	r6, r6, #1
 8007d70:	f8ca 6000 	str.w	r6, [sl]
 8007d74:	f8da 3000 	ldr.w	r3, [sl]
 8007d78:	4499      	add	r9, r3
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4620      	mov	r0, r4
 8007d80:	4629      	mov	r1, r5
 8007d82:	f7f8 fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d86:	b108      	cbz	r0, 8007d8c <__cvt+0xa4>
 8007d88:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d8c:	2230      	movs	r2, #48	; 0x30
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	454b      	cmp	r3, r9
 8007d92:	d307      	bcc.n	8007da4 <__cvt+0xbc>
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d98:	1bdb      	subs	r3, r3, r7
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	b004      	add	sp, #16
 8007da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da4:	1c59      	adds	r1, r3, #1
 8007da6:	9103      	str	r1, [sp, #12]
 8007da8:	701a      	strb	r2, [r3, #0]
 8007daa:	e7f0      	b.n	8007d8e <__cvt+0xa6>

08007dac <__exponent>:
 8007dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dae:	4603      	mov	r3, r0
 8007db0:	2900      	cmp	r1, #0
 8007db2:	bfb8      	it	lt
 8007db4:	4249      	neglt	r1, r1
 8007db6:	f803 2b02 	strb.w	r2, [r3], #2
 8007dba:	bfb4      	ite	lt
 8007dbc:	222d      	movlt	r2, #45	; 0x2d
 8007dbe:	222b      	movge	r2, #43	; 0x2b
 8007dc0:	2909      	cmp	r1, #9
 8007dc2:	7042      	strb	r2, [r0, #1]
 8007dc4:	dd2a      	ble.n	8007e1c <__exponent+0x70>
 8007dc6:	f10d 0407 	add.w	r4, sp, #7
 8007dca:	46a4      	mov	ip, r4
 8007dcc:	270a      	movs	r7, #10
 8007dce:	46a6      	mov	lr, r4
 8007dd0:	460a      	mov	r2, r1
 8007dd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8007dd6:	fb07 1516 	mls	r5, r7, r6, r1
 8007dda:	3530      	adds	r5, #48	; 0x30
 8007ddc:	2a63      	cmp	r2, #99	; 0x63
 8007dde:	f104 34ff 	add.w	r4, r4, #4294967295
 8007de2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007de6:	4631      	mov	r1, r6
 8007de8:	dcf1      	bgt.n	8007dce <__exponent+0x22>
 8007dea:	3130      	adds	r1, #48	; 0x30
 8007dec:	f1ae 0502 	sub.w	r5, lr, #2
 8007df0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007df4:	1c44      	adds	r4, r0, #1
 8007df6:	4629      	mov	r1, r5
 8007df8:	4561      	cmp	r1, ip
 8007dfa:	d30a      	bcc.n	8007e12 <__exponent+0x66>
 8007dfc:	f10d 0209 	add.w	r2, sp, #9
 8007e00:	eba2 020e 	sub.w	r2, r2, lr
 8007e04:	4565      	cmp	r5, ip
 8007e06:	bf88      	it	hi
 8007e08:	2200      	movhi	r2, #0
 8007e0a:	4413      	add	r3, r2
 8007e0c:	1a18      	subs	r0, r3, r0
 8007e0e:	b003      	add	sp, #12
 8007e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e1a:	e7ed      	b.n	8007df8 <__exponent+0x4c>
 8007e1c:	2330      	movs	r3, #48	; 0x30
 8007e1e:	3130      	adds	r1, #48	; 0x30
 8007e20:	7083      	strb	r3, [r0, #2]
 8007e22:	70c1      	strb	r1, [r0, #3]
 8007e24:	1d03      	adds	r3, r0, #4
 8007e26:	e7f1      	b.n	8007e0c <__exponent+0x60>

08007e28 <_printf_float>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	ed2d 8b02 	vpush	{d8}
 8007e30:	b08d      	sub	sp, #52	; 0x34
 8007e32:	460c      	mov	r4, r1
 8007e34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e38:	4616      	mov	r6, r2
 8007e3a:	461f      	mov	r7, r3
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	f001 fc81 	bl	8009744 <_localeconv_r>
 8007e42:	f8d0 a000 	ldr.w	sl, [r0]
 8007e46:	4650      	mov	r0, sl
 8007e48:	f7f8 f9c2 	bl	80001d0 <strlen>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	9305      	str	r3, [sp, #20]
 8007e54:	f8d8 3000 	ldr.w	r3, [r8]
 8007e58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e5c:	3307      	adds	r3, #7
 8007e5e:	f023 0307 	bic.w	r3, r3, #7
 8007e62:	f103 0208 	add.w	r2, r3, #8
 8007e66:	f8c8 2000 	str.w	r2, [r8]
 8007e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e7a:	9307      	str	r3, [sp, #28]
 8007e7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e80:	ee08 0a10 	vmov	s16, r0
 8007e84:	4b9f      	ldr	r3, [pc, #636]	; (8008104 <_printf_float+0x2dc>)
 8007e86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8e:	f7f8 fe4d 	bl	8000b2c <__aeabi_dcmpun>
 8007e92:	bb88      	cbnz	r0, 8007ef8 <_printf_float+0xd0>
 8007e94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e98:	4b9a      	ldr	r3, [pc, #616]	; (8008104 <_printf_float+0x2dc>)
 8007e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9e:	f7f8 fe27 	bl	8000af0 <__aeabi_dcmple>
 8007ea2:	bb48      	cbnz	r0, 8007ef8 <_printf_float+0xd0>
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	4640      	mov	r0, r8
 8007eaa:	4649      	mov	r1, r9
 8007eac:	f7f8 fe16 	bl	8000adc <__aeabi_dcmplt>
 8007eb0:	b110      	cbz	r0, 8007eb8 <_printf_float+0x90>
 8007eb2:	232d      	movs	r3, #45	; 0x2d
 8007eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb8:	4b93      	ldr	r3, [pc, #588]	; (8008108 <_printf_float+0x2e0>)
 8007eba:	4894      	ldr	r0, [pc, #592]	; (800810c <_printf_float+0x2e4>)
 8007ebc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ec0:	bf94      	ite	ls
 8007ec2:	4698      	movls	r8, r3
 8007ec4:	4680      	movhi	r8, r0
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	6123      	str	r3, [r4, #16]
 8007eca:	9b05      	ldr	r3, [sp, #20]
 8007ecc:	f023 0204 	bic.w	r2, r3, #4
 8007ed0:	6022      	str	r2, [r4, #0]
 8007ed2:	f04f 0900 	mov.w	r9, #0
 8007ed6:	9700      	str	r7, [sp, #0]
 8007ed8:	4633      	mov	r3, r6
 8007eda:	aa0b      	add	r2, sp, #44	; 0x2c
 8007edc:	4621      	mov	r1, r4
 8007ede:	4628      	mov	r0, r5
 8007ee0:	f000 f9d8 	bl	8008294 <_printf_common>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	f040 8090 	bne.w	800800a <_printf_float+0x1e2>
 8007eea:	f04f 30ff 	mov.w	r0, #4294967295
 8007eee:	b00d      	add	sp, #52	; 0x34
 8007ef0:	ecbd 8b02 	vpop	{d8}
 8007ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef8:	4642      	mov	r2, r8
 8007efa:	464b      	mov	r3, r9
 8007efc:	4640      	mov	r0, r8
 8007efe:	4649      	mov	r1, r9
 8007f00:	f7f8 fe14 	bl	8000b2c <__aeabi_dcmpun>
 8007f04:	b140      	cbz	r0, 8007f18 <_printf_float+0xf0>
 8007f06:	464b      	mov	r3, r9
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bfbc      	itt	lt
 8007f0c:	232d      	movlt	r3, #45	; 0x2d
 8007f0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f12:	487f      	ldr	r0, [pc, #508]	; (8008110 <_printf_float+0x2e8>)
 8007f14:	4b7f      	ldr	r3, [pc, #508]	; (8008114 <_printf_float+0x2ec>)
 8007f16:	e7d1      	b.n	8007ebc <_printf_float+0x94>
 8007f18:	6863      	ldr	r3, [r4, #4]
 8007f1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f1e:	9206      	str	r2, [sp, #24]
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	d13f      	bne.n	8007fa4 <_printf_float+0x17c>
 8007f24:	2306      	movs	r3, #6
 8007f26:	6063      	str	r3, [r4, #4]
 8007f28:	9b05      	ldr	r3, [sp, #20]
 8007f2a:	6861      	ldr	r1, [r4, #4]
 8007f2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f30:	2300      	movs	r3, #0
 8007f32:	9303      	str	r3, [sp, #12]
 8007f34:	ab0a      	add	r3, sp, #40	; 0x28
 8007f36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f3a:	ab09      	add	r3, sp, #36	; 0x24
 8007f3c:	ec49 8b10 	vmov	d0, r8, r9
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	6022      	str	r2, [r4, #0]
 8007f44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f7ff fecd 	bl	8007ce8 <__cvt>
 8007f4e:	9b06      	ldr	r3, [sp, #24]
 8007f50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f52:	2b47      	cmp	r3, #71	; 0x47
 8007f54:	4680      	mov	r8, r0
 8007f56:	d108      	bne.n	8007f6a <_printf_float+0x142>
 8007f58:	1cc8      	adds	r0, r1, #3
 8007f5a:	db02      	blt.n	8007f62 <_printf_float+0x13a>
 8007f5c:	6863      	ldr	r3, [r4, #4]
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	dd41      	ble.n	8007fe6 <_printf_float+0x1be>
 8007f62:	f1ab 0b02 	sub.w	fp, fp, #2
 8007f66:	fa5f fb8b 	uxtb.w	fp, fp
 8007f6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f6e:	d820      	bhi.n	8007fb2 <_printf_float+0x18a>
 8007f70:	3901      	subs	r1, #1
 8007f72:	465a      	mov	r2, fp
 8007f74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f78:	9109      	str	r1, [sp, #36]	; 0x24
 8007f7a:	f7ff ff17 	bl	8007dac <__exponent>
 8007f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f80:	1813      	adds	r3, r2, r0
 8007f82:	2a01      	cmp	r2, #1
 8007f84:	4681      	mov	r9, r0
 8007f86:	6123      	str	r3, [r4, #16]
 8007f88:	dc02      	bgt.n	8007f90 <_printf_float+0x168>
 8007f8a:	6822      	ldr	r2, [r4, #0]
 8007f8c:	07d2      	lsls	r2, r2, #31
 8007f8e:	d501      	bpl.n	8007f94 <_printf_float+0x16c>
 8007f90:	3301      	adds	r3, #1
 8007f92:	6123      	str	r3, [r4, #16]
 8007f94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d09c      	beq.n	8007ed6 <_printf_float+0xae>
 8007f9c:	232d      	movs	r3, #45	; 0x2d
 8007f9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa2:	e798      	b.n	8007ed6 <_printf_float+0xae>
 8007fa4:	9a06      	ldr	r2, [sp, #24]
 8007fa6:	2a47      	cmp	r2, #71	; 0x47
 8007fa8:	d1be      	bne.n	8007f28 <_printf_float+0x100>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1bc      	bne.n	8007f28 <_printf_float+0x100>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e7b9      	b.n	8007f26 <_printf_float+0xfe>
 8007fb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007fb6:	d118      	bne.n	8007fea <_printf_float+0x1c2>
 8007fb8:	2900      	cmp	r1, #0
 8007fba:	6863      	ldr	r3, [r4, #4]
 8007fbc:	dd0b      	ble.n	8007fd6 <_printf_float+0x1ae>
 8007fbe:	6121      	str	r1, [r4, #16]
 8007fc0:	b913      	cbnz	r3, 8007fc8 <_printf_float+0x1a0>
 8007fc2:	6822      	ldr	r2, [r4, #0]
 8007fc4:	07d0      	lsls	r0, r2, #31
 8007fc6:	d502      	bpl.n	8007fce <_printf_float+0x1a6>
 8007fc8:	3301      	adds	r3, #1
 8007fca:	440b      	add	r3, r1
 8007fcc:	6123      	str	r3, [r4, #16]
 8007fce:	65a1      	str	r1, [r4, #88]	; 0x58
 8007fd0:	f04f 0900 	mov.w	r9, #0
 8007fd4:	e7de      	b.n	8007f94 <_printf_float+0x16c>
 8007fd6:	b913      	cbnz	r3, 8007fde <_printf_float+0x1b6>
 8007fd8:	6822      	ldr	r2, [r4, #0]
 8007fda:	07d2      	lsls	r2, r2, #31
 8007fdc:	d501      	bpl.n	8007fe2 <_printf_float+0x1ba>
 8007fde:	3302      	adds	r3, #2
 8007fe0:	e7f4      	b.n	8007fcc <_printf_float+0x1a4>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e7f2      	b.n	8007fcc <_printf_float+0x1a4>
 8007fe6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fec:	4299      	cmp	r1, r3
 8007fee:	db05      	blt.n	8007ffc <_printf_float+0x1d4>
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	6121      	str	r1, [r4, #16]
 8007ff4:	07d8      	lsls	r0, r3, #31
 8007ff6:	d5ea      	bpl.n	8007fce <_printf_float+0x1a6>
 8007ff8:	1c4b      	adds	r3, r1, #1
 8007ffa:	e7e7      	b.n	8007fcc <_printf_float+0x1a4>
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	bfd4      	ite	le
 8008000:	f1c1 0202 	rsble	r2, r1, #2
 8008004:	2201      	movgt	r2, #1
 8008006:	4413      	add	r3, r2
 8008008:	e7e0      	b.n	8007fcc <_printf_float+0x1a4>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	055a      	lsls	r2, r3, #21
 800800e:	d407      	bmi.n	8008020 <_printf_float+0x1f8>
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	4642      	mov	r2, r8
 8008014:	4631      	mov	r1, r6
 8008016:	4628      	mov	r0, r5
 8008018:	47b8      	blx	r7
 800801a:	3001      	adds	r0, #1
 800801c:	d12c      	bne.n	8008078 <_printf_float+0x250>
 800801e:	e764      	b.n	8007eea <_printf_float+0xc2>
 8008020:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008024:	f240 80e0 	bls.w	80081e8 <_printf_float+0x3c0>
 8008028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800802c:	2200      	movs	r2, #0
 800802e:	2300      	movs	r3, #0
 8008030:	f7f8 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008034:	2800      	cmp	r0, #0
 8008036:	d034      	beq.n	80080a2 <_printf_float+0x27a>
 8008038:	4a37      	ldr	r2, [pc, #220]	; (8008118 <_printf_float+0x2f0>)
 800803a:	2301      	movs	r3, #1
 800803c:	4631      	mov	r1, r6
 800803e:	4628      	mov	r0, r5
 8008040:	47b8      	blx	r7
 8008042:	3001      	adds	r0, #1
 8008044:	f43f af51 	beq.w	8007eea <_printf_float+0xc2>
 8008048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800804c:	429a      	cmp	r2, r3
 800804e:	db02      	blt.n	8008056 <_printf_float+0x22e>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	07d8      	lsls	r0, r3, #31
 8008054:	d510      	bpl.n	8008078 <_printf_float+0x250>
 8008056:	ee18 3a10 	vmov	r3, s16
 800805a:	4652      	mov	r2, sl
 800805c:	4631      	mov	r1, r6
 800805e:	4628      	mov	r0, r5
 8008060:	47b8      	blx	r7
 8008062:	3001      	adds	r0, #1
 8008064:	f43f af41 	beq.w	8007eea <_printf_float+0xc2>
 8008068:	f04f 0800 	mov.w	r8, #0
 800806c:	f104 091a 	add.w	r9, r4, #26
 8008070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008072:	3b01      	subs	r3, #1
 8008074:	4543      	cmp	r3, r8
 8008076:	dc09      	bgt.n	800808c <_printf_float+0x264>
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	079b      	lsls	r3, r3, #30
 800807c:	f100 8105 	bmi.w	800828a <_printf_float+0x462>
 8008080:	68e0      	ldr	r0, [r4, #12]
 8008082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008084:	4298      	cmp	r0, r3
 8008086:	bfb8      	it	lt
 8008088:	4618      	movlt	r0, r3
 800808a:	e730      	b.n	8007eee <_printf_float+0xc6>
 800808c:	2301      	movs	r3, #1
 800808e:	464a      	mov	r2, r9
 8008090:	4631      	mov	r1, r6
 8008092:	4628      	mov	r0, r5
 8008094:	47b8      	blx	r7
 8008096:	3001      	adds	r0, #1
 8008098:	f43f af27 	beq.w	8007eea <_printf_float+0xc2>
 800809c:	f108 0801 	add.w	r8, r8, #1
 80080a0:	e7e6      	b.n	8008070 <_printf_float+0x248>
 80080a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dc39      	bgt.n	800811c <_printf_float+0x2f4>
 80080a8:	4a1b      	ldr	r2, [pc, #108]	; (8008118 <_printf_float+0x2f0>)
 80080aa:	2301      	movs	r3, #1
 80080ac:	4631      	mov	r1, r6
 80080ae:	4628      	mov	r0, r5
 80080b0:	47b8      	blx	r7
 80080b2:	3001      	adds	r0, #1
 80080b4:	f43f af19 	beq.w	8007eea <_printf_float+0xc2>
 80080b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080bc:	4313      	orrs	r3, r2
 80080be:	d102      	bne.n	80080c6 <_printf_float+0x29e>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	07d9      	lsls	r1, r3, #31
 80080c4:	d5d8      	bpl.n	8008078 <_printf_float+0x250>
 80080c6:	ee18 3a10 	vmov	r3, s16
 80080ca:	4652      	mov	r2, sl
 80080cc:	4631      	mov	r1, r6
 80080ce:	4628      	mov	r0, r5
 80080d0:	47b8      	blx	r7
 80080d2:	3001      	adds	r0, #1
 80080d4:	f43f af09 	beq.w	8007eea <_printf_float+0xc2>
 80080d8:	f04f 0900 	mov.w	r9, #0
 80080dc:	f104 0a1a 	add.w	sl, r4, #26
 80080e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e2:	425b      	negs	r3, r3
 80080e4:	454b      	cmp	r3, r9
 80080e6:	dc01      	bgt.n	80080ec <_printf_float+0x2c4>
 80080e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ea:	e792      	b.n	8008012 <_printf_float+0x1ea>
 80080ec:	2301      	movs	r3, #1
 80080ee:	4652      	mov	r2, sl
 80080f0:	4631      	mov	r1, r6
 80080f2:	4628      	mov	r0, r5
 80080f4:	47b8      	blx	r7
 80080f6:	3001      	adds	r0, #1
 80080f8:	f43f aef7 	beq.w	8007eea <_printf_float+0xc2>
 80080fc:	f109 0901 	add.w	r9, r9, #1
 8008100:	e7ee      	b.n	80080e0 <_printf_float+0x2b8>
 8008102:	bf00      	nop
 8008104:	7fefffff 	.word	0x7fefffff
 8008108:	0800ad04 	.word	0x0800ad04
 800810c:	0800ad08 	.word	0x0800ad08
 8008110:	0800ad10 	.word	0x0800ad10
 8008114:	0800ad0c 	.word	0x0800ad0c
 8008118:	0800ad14 	.word	0x0800ad14
 800811c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800811e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008120:	429a      	cmp	r2, r3
 8008122:	bfa8      	it	ge
 8008124:	461a      	movge	r2, r3
 8008126:	2a00      	cmp	r2, #0
 8008128:	4691      	mov	r9, r2
 800812a:	dc37      	bgt.n	800819c <_printf_float+0x374>
 800812c:	f04f 0b00 	mov.w	fp, #0
 8008130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008134:	f104 021a 	add.w	r2, r4, #26
 8008138:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800813a:	9305      	str	r3, [sp, #20]
 800813c:	eba3 0309 	sub.w	r3, r3, r9
 8008140:	455b      	cmp	r3, fp
 8008142:	dc33      	bgt.n	80081ac <_printf_float+0x384>
 8008144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008148:	429a      	cmp	r2, r3
 800814a:	db3b      	blt.n	80081c4 <_printf_float+0x39c>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	07da      	lsls	r2, r3, #31
 8008150:	d438      	bmi.n	80081c4 <_printf_float+0x39c>
 8008152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008154:	9a05      	ldr	r2, [sp, #20]
 8008156:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008158:	1a9a      	subs	r2, r3, r2
 800815a:	eba3 0901 	sub.w	r9, r3, r1
 800815e:	4591      	cmp	r9, r2
 8008160:	bfa8      	it	ge
 8008162:	4691      	movge	r9, r2
 8008164:	f1b9 0f00 	cmp.w	r9, #0
 8008168:	dc35      	bgt.n	80081d6 <_printf_float+0x3ae>
 800816a:	f04f 0800 	mov.w	r8, #0
 800816e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008172:	f104 0a1a 	add.w	sl, r4, #26
 8008176:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800817a:	1a9b      	subs	r3, r3, r2
 800817c:	eba3 0309 	sub.w	r3, r3, r9
 8008180:	4543      	cmp	r3, r8
 8008182:	f77f af79 	ble.w	8008078 <_printf_float+0x250>
 8008186:	2301      	movs	r3, #1
 8008188:	4652      	mov	r2, sl
 800818a:	4631      	mov	r1, r6
 800818c:	4628      	mov	r0, r5
 800818e:	47b8      	blx	r7
 8008190:	3001      	adds	r0, #1
 8008192:	f43f aeaa 	beq.w	8007eea <_printf_float+0xc2>
 8008196:	f108 0801 	add.w	r8, r8, #1
 800819a:	e7ec      	b.n	8008176 <_printf_float+0x34e>
 800819c:	4613      	mov	r3, r2
 800819e:	4631      	mov	r1, r6
 80081a0:	4642      	mov	r2, r8
 80081a2:	4628      	mov	r0, r5
 80081a4:	47b8      	blx	r7
 80081a6:	3001      	adds	r0, #1
 80081a8:	d1c0      	bne.n	800812c <_printf_float+0x304>
 80081aa:	e69e      	b.n	8007eea <_printf_float+0xc2>
 80081ac:	2301      	movs	r3, #1
 80081ae:	4631      	mov	r1, r6
 80081b0:	4628      	mov	r0, r5
 80081b2:	9205      	str	r2, [sp, #20]
 80081b4:	47b8      	blx	r7
 80081b6:	3001      	adds	r0, #1
 80081b8:	f43f ae97 	beq.w	8007eea <_printf_float+0xc2>
 80081bc:	9a05      	ldr	r2, [sp, #20]
 80081be:	f10b 0b01 	add.w	fp, fp, #1
 80081c2:	e7b9      	b.n	8008138 <_printf_float+0x310>
 80081c4:	ee18 3a10 	vmov	r3, s16
 80081c8:	4652      	mov	r2, sl
 80081ca:	4631      	mov	r1, r6
 80081cc:	4628      	mov	r0, r5
 80081ce:	47b8      	blx	r7
 80081d0:	3001      	adds	r0, #1
 80081d2:	d1be      	bne.n	8008152 <_printf_float+0x32a>
 80081d4:	e689      	b.n	8007eea <_printf_float+0xc2>
 80081d6:	9a05      	ldr	r2, [sp, #20]
 80081d8:	464b      	mov	r3, r9
 80081da:	4442      	add	r2, r8
 80081dc:	4631      	mov	r1, r6
 80081de:	4628      	mov	r0, r5
 80081e0:	47b8      	blx	r7
 80081e2:	3001      	adds	r0, #1
 80081e4:	d1c1      	bne.n	800816a <_printf_float+0x342>
 80081e6:	e680      	b.n	8007eea <_printf_float+0xc2>
 80081e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081ea:	2a01      	cmp	r2, #1
 80081ec:	dc01      	bgt.n	80081f2 <_printf_float+0x3ca>
 80081ee:	07db      	lsls	r3, r3, #31
 80081f0:	d538      	bpl.n	8008264 <_printf_float+0x43c>
 80081f2:	2301      	movs	r3, #1
 80081f4:	4642      	mov	r2, r8
 80081f6:	4631      	mov	r1, r6
 80081f8:	4628      	mov	r0, r5
 80081fa:	47b8      	blx	r7
 80081fc:	3001      	adds	r0, #1
 80081fe:	f43f ae74 	beq.w	8007eea <_printf_float+0xc2>
 8008202:	ee18 3a10 	vmov	r3, s16
 8008206:	4652      	mov	r2, sl
 8008208:	4631      	mov	r1, r6
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	f43f ae6b 	beq.w	8007eea <_printf_float+0xc2>
 8008214:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008218:	2200      	movs	r2, #0
 800821a:	2300      	movs	r3, #0
 800821c:	f7f8 fc54 	bl	8000ac8 <__aeabi_dcmpeq>
 8008220:	b9d8      	cbnz	r0, 800825a <_printf_float+0x432>
 8008222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008224:	f108 0201 	add.w	r2, r8, #1
 8008228:	3b01      	subs	r3, #1
 800822a:	4631      	mov	r1, r6
 800822c:	4628      	mov	r0, r5
 800822e:	47b8      	blx	r7
 8008230:	3001      	adds	r0, #1
 8008232:	d10e      	bne.n	8008252 <_printf_float+0x42a>
 8008234:	e659      	b.n	8007eea <_printf_float+0xc2>
 8008236:	2301      	movs	r3, #1
 8008238:	4652      	mov	r2, sl
 800823a:	4631      	mov	r1, r6
 800823c:	4628      	mov	r0, r5
 800823e:	47b8      	blx	r7
 8008240:	3001      	adds	r0, #1
 8008242:	f43f ae52 	beq.w	8007eea <_printf_float+0xc2>
 8008246:	f108 0801 	add.w	r8, r8, #1
 800824a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824c:	3b01      	subs	r3, #1
 800824e:	4543      	cmp	r3, r8
 8008250:	dcf1      	bgt.n	8008236 <_printf_float+0x40e>
 8008252:	464b      	mov	r3, r9
 8008254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008258:	e6dc      	b.n	8008014 <_printf_float+0x1ec>
 800825a:	f04f 0800 	mov.w	r8, #0
 800825e:	f104 0a1a 	add.w	sl, r4, #26
 8008262:	e7f2      	b.n	800824a <_printf_float+0x422>
 8008264:	2301      	movs	r3, #1
 8008266:	4642      	mov	r2, r8
 8008268:	e7df      	b.n	800822a <_printf_float+0x402>
 800826a:	2301      	movs	r3, #1
 800826c:	464a      	mov	r2, r9
 800826e:	4631      	mov	r1, r6
 8008270:	4628      	mov	r0, r5
 8008272:	47b8      	blx	r7
 8008274:	3001      	adds	r0, #1
 8008276:	f43f ae38 	beq.w	8007eea <_printf_float+0xc2>
 800827a:	f108 0801 	add.w	r8, r8, #1
 800827e:	68e3      	ldr	r3, [r4, #12]
 8008280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008282:	1a5b      	subs	r3, r3, r1
 8008284:	4543      	cmp	r3, r8
 8008286:	dcf0      	bgt.n	800826a <_printf_float+0x442>
 8008288:	e6fa      	b.n	8008080 <_printf_float+0x258>
 800828a:	f04f 0800 	mov.w	r8, #0
 800828e:	f104 0919 	add.w	r9, r4, #25
 8008292:	e7f4      	b.n	800827e <_printf_float+0x456>

08008294 <_printf_common>:
 8008294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008298:	4616      	mov	r6, r2
 800829a:	4699      	mov	r9, r3
 800829c:	688a      	ldr	r2, [r1, #8]
 800829e:	690b      	ldr	r3, [r1, #16]
 80082a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082a4:	4293      	cmp	r3, r2
 80082a6:	bfb8      	it	lt
 80082a8:	4613      	movlt	r3, r2
 80082aa:	6033      	str	r3, [r6, #0]
 80082ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082b0:	4607      	mov	r7, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	b10a      	cbz	r2, 80082ba <_printf_common+0x26>
 80082b6:	3301      	adds	r3, #1
 80082b8:	6033      	str	r3, [r6, #0]
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	0699      	lsls	r1, r3, #26
 80082be:	bf42      	ittt	mi
 80082c0:	6833      	ldrmi	r3, [r6, #0]
 80082c2:	3302      	addmi	r3, #2
 80082c4:	6033      	strmi	r3, [r6, #0]
 80082c6:	6825      	ldr	r5, [r4, #0]
 80082c8:	f015 0506 	ands.w	r5, r5, #6
 80082cc:	d106      	bne.n	80082dc <_printf_common+0x48>
 80082ce:	f104 0a19 	add.w	sl, r4, #25
 80082d2:	68e3      	ldr	r3, [r4, #12]
 80082d4:	6832      	ldr	r2, [r6, #0]
 80082d6:	1a9b      	subs	r3, r3, r2
 80082d8:	42ab      	cmp	r3, r5
 80082da:	dc26      	bgt.n	800832a <_printf_common+0x96>
 80082dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082e0:	1e13      	subs	r3, r2, #0
 80082e2:	6822      	ldr	r2, [r4, #0]
 80082e4:	bf18      	it	ne
 80082e6:	2301      	movne	r3, #1
 80082e8:	0692      	lsls	r2, r2, #26
 80082ea:	d42b      	bmi.n	8008344 <_printf_common+0xb0>
 80082ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082f0:	4649      	mov	r1, r9
 80082f2:	4638      	mov	r0, r7
 80082f4:	47c0      	blx	r8
 80082f6:	3001      	adds	r0, #1
 80082f8:	d01e      	beq.n	8008338 <_printf_common+0xa4>
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	68e5      	ldr	r5, [r4, #12]
 80082fe:	6832      	ldr	r2, [r6, #0]
 8008300:	f003 0306 	and.w	r3, r3, #6
 8008304:	2b04      	cmp	r3, #4
 8008306:	bf08      	it	eq
 8008308:	1aad      	subeq	r5, r5, r2
 800830a:	68a3      	ldr	r3, [r4, #8]
 800830c:	6922      	ldr	r2, [r4, #16]
 800830e:	bf0c      	ite	eq
 8008310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008314:	2500      	movne	r5, #0
 8008316:	4293      	cmp	r3, r2
 8008318:	bfc4      	itt	gt
 800831a:	1a9b      	subgt	r3, r3, r2
 800831c:	18ed      	addgt	r5, r5, r3
 800831e:	2600      	movs	r6, #0
 8008320:	341a      	adds	r4, #26
 8008322:	42b5      	cmp	r5, r6
 8008324:	d11a      	bne.n	800835c <_printf_common+0xc8>
 8008326:	2000      	movs	r0, #0
 8008328:	e008      	b.n	800833c <_printf_common+0xa8>
 800832a:	2301      	movs	r3, #1
 800832c:	4652      	mov	r2, sl
 800832e:	4649      	mov	r1, r9
 8008330:	4638      	mov	r0, r7
 8008332:	47c0      	blx	r8
 8008334:	3001      	adds	r0, #1
 8008336:	d103      	bne.n	8008340 <_printf_common+0xac>
 8008338:	f04f 30ff 	mov.w	r0, #4294967295
 800833c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008340:	3501      	adds	r5, #1
 8008342:	e7c6      	b.n	80082d2 <_printf_common+0x3e>
 8008344:	18e1      	adds	r1, r4, r3
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	2030      	movs	r0, #48	; 0x30
 800834a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800834e:	4422      	add	r2, r4
 8008350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008358:	3302      	adds	r3, #2
 800835a:	e7c7      	b.n	80082ec <_printf_common+0x58>
 800835c:	2301      	movs	r3, #1
 800835e:	4622      	mov	r2, r4
 8008360:	4649      	mov	r1, r9
 8008362:	4638      	mov	r0, r7
 8008364:	47c0      	blx	r8
 8008366:	3001      	adds	r0, #1
 8008368:	d0e6      	beq.n	8008338 <_printf_common+0xa4>
 800836a:	3601      	adds	r6, #1
 800836c:	e7d9      	b.n	8008322 <_printf_common+0x8e>
	...

08008370 <_printf_i>:
 8008370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008374:	7e0f      	ldrb	r7, [r1, #24]
 8008376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008378:	2f78      	cmp	r7, #120	; 0x78
 800837a:	4691      	mov	r9, r2
 800837c:	4680      	mov	r8, r0
 800837e:	460c      	mov	r4, r1
 8008380:	469a      	mov	sl, r3
 8008382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008386:	d807      	bhi.n	8008398 <_printf_i+0x28>
 8008388:	2f62      	cmp	r7, #98	; 0x62
 800838a:	d80a      	bhi.n	80083a2 <_printf_i+0x32>
 800838c:	2f00      	cmp	r7, #0
 800838e:	f000 80d8 	beq.w	8008542 <_printf_i+0x1d2>
 8008392:	2f58      	cmp	r7, #88	; 0x58
 8008394:	f000 80a3 	beq.w	80084de <_printf_i+0x16e>
 8008398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800839c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083a0:	e03a      	b.n	8008418 <_printf_i+0xa8>
 80083a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083a6:	2b15      	cmp	r3, #21
 80083a8:	d8f6      	bhi.n	8008398 <_printf_i+0x28>
 80083aa:	a101      	add	r1, pc, #4	; (adr r1, 80083b0 <_printf_i+0x40>)
 80083ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083b0:	08008409 	.word	0x08008409
 80083b4:	0800841d 	.word	0x0800841d
 80083b8:	08008399 	.word	0x08008399
 80083bc:	08008399 	.word	0x08008399
 80083c0:	08008399 	.word	0x08008399
 80083c4:	08008399 	.word	0x08008399
 80083c8:	0800841d 	.word	0x0800841d
 80083cc:	08008399 	.word	0x08008399
 80083d0:	08008399 	.word	0x08008399
 80083d4:	08008399 	.word	0x08008399
 80083d8:	08008399 	.word	0x08008399
 80083dc:	08008529 	.word	0x08008529
 80083e0:	0800844d 	.word	0x0800844d
 80083e4:	0800850b 	.word	0x0800850b
 80083e8:	08008399 	.word	0x08008399
 80083ec:	08008399 	.word	0x08008399
 80083f0:	0800854b 	.word	0x0800854b
 80083f4:	08008399 	.word	0x08008399
 80083f8:	0800844d 	.word	0x0800844d
 80083fc:	08008399 	.word	0x08008399
 8008400:	08008399 	.word	0x08008399
 8008404:	08008513 	.word	0x08008513
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	1d1a      	adds	r2, r3, #4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	602a      	str	r2, [r5, #0]
 8008410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008418:	2301      	movs	r3, #1
 800841a:	e0a3      	b.n	8008564 <_printf_i+0x1f4>
 800841c:	6820      	ldr	r0, [r4, #0]
 800841e:	6829      	ldr	r1, [r5, #0]
 8008420:	0606      	lsls	r6, r0, #24
 8008422:	f101 0304 	add.w	r3, r1, #4
 8008426:	d50a      	bpl.n	800843e <_printf_i+0xce>
 8008428:	680e      	ldr	r6, [r1, #0]
 800842a:	602b      	str	r3, [r5, #0]
 800842c:	2e00      	cmp	r6, #0
 800842e:	da03      	bge.n	8008438 <_printf_i+0xc8>
 8008430:	232d      	movs	r3, #45	; 0x2d
 8008432:	4276      	negs	r6, r6
 8008434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008438:	485e      	ldr	r0, [pc, #376]	; (80085b4 <_printf_i+0x244>)
 800843a:	230a      	movs	r3, #10
 800843c:	e019      	b.n	8008472 <_printf_i+0x102>
 800843e:	680e      	ldr	r6, [r1, #0]
 8008440:	602b      	str	r3, [r5, #0]
 8008442:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008446:	bf18      	it	ne
 8008448:	b236      	sxthne	r6, r6
 800844a:	e7ef      	b.n	800842c <_printf_i+0xbc>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	6820      	ldr	r0, [r4, #0]
 8008450:	1d19      	adds	r1, r3, #4
 8008452:	6029      	str	r1, [r5, #0]
 8008454:	0601      	lsls	r1, r0, #24
 8008456:	d501      	bpl.n	800845c <_printf_i+0xec>
 8008458:	681e      	ldr	r6, [r3, #0]
 800845a:	e002      	b.n	8008462 <_printf_i+0xf2>
 800845c:	0646      	lsls	r6, r0, #25
 800845e:	d5fb      	bpl.n	8008458 <_printf_i+0xe8>
 8008460:	881e      	ldrh	r6, [r3, #0]
 8008462:	4854      	ldr	r0, [pc, #336]	; (80085b4 <_printf_i+0x244>)
 8008464:	2f6f      	cmp	r7, #111	; 0x6f
 8008466:	bf0c      	ite	eq
 8008468:	2308      	moveq	r3, #8
 800846a:	230a      	movne	r3, #10
 800846c:	2100      	movs	r1, #0
 800846e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008472:	6865      	ldr	r5, [r4, #4]
 8008474:	60a5      	str	r5, [r4, #8]
 8008476:	2d00      	cmp	r5, #0
 8008478:	bfa2      	ittt	ge
 800847a:	6821      	ldrge	r1, [r4, #0]
 800847c:	f021 0104 	bicge.w	r1, r1, #4
 8008480:	6021      	strge	r1, [r4, #0]
 8008482:	b90e      	cbnz	r6, 8008488 <_printf_i+0x118>
 8008484:	2d00      	cmp	r5, #0
 8008486:	d04d      	beq.n	8008524 <_printf_i+0x1b4>
 8008488:	4615      	mov	r5, r2
 800848a:	fbb6 f1f3 	udiv	r1, r6, r3
 800848e:	fb03 6711 	mls	r7, r3, r1, r6
 8008492:	5dc7      	ldrb	r7, [r0, r7]
 8008494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008498:	4637      	mov	r7, r6
 800849a:	42bb      	cmp	r3, r7
 800849c:	460e      	mov	r6, r1
 800849e:	d9f4      	bls.n	800848a <_printf_i+0x11a>
 80084a0:	2b08      	cmp	r3, #8
 80084a2:	d10b      	bne.n	80084bc <_printf_i+0x14c>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	07de      	lsls	r6, r3, #31
 80084a8:	d508      	bpl.n	80084bc <_printf_i+0x14c>
 80084aa:	6923      	ldr	r3, [r4, #16]
 80084ac:	6861      	ldr	r1, [r4, #4]
 80084ae:	4299      	cmp	r1, r3
 80084b0:	bfde      	ittt	le
 80084b2:	2330      	movle	r3, #48	; 0x30
 80084b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084bc:	1b52      	subs	r2, r2, r5
 80084be:	6122      	str	r2, [r4, #16]
 80084c0:	f8cd a000 	str.w	sl, [sp]
 80084c4:	464b      	mov	r3, r9
 80084c6:	aa03      	add	r2, sp, #12
 80084c8:	4621      	mov	r1, r4
 80084ca:	4640      	mov	r0, r8
 80084cc:	f7ff fee2 	bl	8008294 <_printf_common>
 80084d0:	3001      	adds	r0, #1
 80084d2:	d14c      	bne.n	800856e <_printf_i+0x1fe>
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	b004      	add	sp, #16
 80084da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084de:	4835      	ldr	r0, [pc, #212]	; (80085b4 <_printf_i+0x244>)
 80084e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80084e4:	6829      	ldr	r1, [r5, #0]
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80084ec:	6029      	str	r1, [r5, #0]
 80084ee:	061d      	lsls	r5, r3, #24
 80084f0:	d514      	bpl.n	800851c <_printf_i+0x1ac>
 80084f2:	07df      	lsls	r7, r3, #31
 80084f4:	bf44      	itt	mi
 80084f6:	f043 0320 	orrmi.w	r3, r3, #32
 80084fa:	6023      	strmi	r3, [r4, #0]
 80084fc:	b91e      	cbnz	r6, 8008506 <_printf_i+0x196>
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	f023 0320 	bic.w	r3, r3, #32
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	2310      	movs	r3, #16
 8008508:	e7b0      	b.n	800846c <_printf_i+0xfc>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	f043 0320 	orr.w	r3, r3, #32
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	2378      	movs	r3, #120	; 0x78
 8008514:	4828      	ldr	r0, [pc, #160]	; (80085b8 <_printf_i+0x248>)
 8008516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800851a:	e7e3      	b.n	80084e4 <_printf_i+0x174>
 800851c:	0659      	lsls	r1, r3, #25
 800851e:	bf48      	it	mi
 8008520:	b2b6      	uxthmi	r6, r6
 8008522:	e7e6      	b.n	80084f2 <_printf_i+0x182>
 8008524:	4615      	mov	r5, r2
 8008526:	e7bb      	b.n	80084a0 <_printf_i+0x130>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	6826      	ldr	r6, [r4, #0]
 800852c:	6961      	ldr	r1, [r4, #20]
 800852e:	1d18      	adds	r0, r3, #4
 8008530:	6028      	str	r0, [r5, #0]
 8008532:	0635      	lsls	r5, r6, #24
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	d501      	bpl.n	800853c <_printf_i+0x1cc>
 8008538:	6019      	str	r1, [r3, #0]
 800853a:	e002      	b.n	8008542 <_printf_i+0x1d2>
 800853c:	0670      	lsls	r0, r6, #25
 800853e:	d5fb      	bpl.n	8008538 <_printf_i+0x1c8>
 8008540:	8019      	strh	r1, [r3, #0]
 8008542:	2300      	movs	r3, #0
 8008544:	6123      	str	r3, [r4, #16]
 8008546:	4615      	mov	r5, r2
 8008548:	e7ba      	b.n	80084c0 <_printf_i+0x150>
 800854a:	682b      	ldr	r3, [r5, #0]
 800854c:	1d1a      	adds	r2, r3, #4
 800854e:	602a      	str	r2, [r5, #0]
 8008550:	681d      	ldr	r5, [r3, #0]
 8008552:	6862      	ldr	r2, [r4, #4]
 8008554:	2100      	movs	r1, #0
 8008556:	4628      	mov	r0, r5
 8008558:	f7f7 fe42 	bl	80001e0 <memchr>
 800855c:	b108      	cbz	r0, 8008562 <_printf_i+0x1f2>
 800855e:	1b40      	subs	r0, r0, r5
 8008560:	6060      	str	r0, [r4, #4]
 8008562:	6863      	ldr	r3, [r4, #4]
 8008564:	6123      	str	r3, [r4, #16]
 8008566:	2300      	movs	r3, #0
 8008568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800856c:	e7a8      	b.n	80084c0 <_printf_i+0x150>
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	462a      	mov	r2, r5
 8008572:	4649      	mov	r1, r9
 8008574:	4640      	mov	r0, r8
 8008576:	47d0      	blx	sl
 8008578:	3001      	adds	r0, #1
 800857a:	d0ab      	beq.n	80084d4 <_printf_i+0x164>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	079b      	lsls	r3, r3, #30
 8008580:	d413      	bmi.n	80085aa <_printf_i+0x23a>
 8008582:	68e0      	ldr	r0, [r4, #12]
 8008584:	9b03      	ldr	r3, [sp, #12]
 8008586:	4298      	cmp	r0, r3
 8008588:	bfb8      	it	lt
 800858a:	4618      	movlt	r0, r3
 800858c:	e7a4      	b.n	80084d8 <_printf_i+0x168>
 800858e:	2301      	movs	r3, #1
 8008590:	4632      	mov	r2, r6
 8008592:	4649      	mov	r1, r9
 8008594:	4640      	mov	r0, r8
 8008596:	47d0      	blx	sl
 8008598:	3001      	adds	r0, #1
 800859a:	d09b      	beq.n	80084d4 <_printf_i+0x164>
 800859c:	3501      	adds	r5, #1
 800859e:	68e3      	ldr	r3, [r4, #12]
 80085a0:	9903      	ldr	r1, [sp, #12]
 80085a2:	1a5b      	subs	r3, r3, r1
 80085a4:	42ab      	cmp	r3, r5
 80085a6:	dcf2      	bgt.n	800858e <_printf_i+0x21e>
 80085a8:	e7eb      	b.n	8008582 <_printf_i+0x212>
 80085aa:	2500      	movs	r5, #0
 80085ac:	f104 0619 	add.w	r6, r4, #25
 80085b0:	e7f5      	b.n	800859e <_printf_i+0x22e>
 80085b2:	bf00      	nop
 80085b4:	0800ad16 	.word	0x0800ad16
 80085b8:	0800ad27 	.word	0x0800ad27

080085bc <_sbrk_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	4d06      	ldr	r5, [pc, #24]	; (80085d8 <_sbrk_r+0x1c>)
 80085c0:	2300      	movs	r3, #0
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	f7f9 fa62 	bl	8001a90 <_sbrk>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_sbrk_r+0x1a>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_sbrk_r+0x1a>
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	200004f4 	.word	0x200004f4

080085dc <siprintf>:
 80085dc:	b40e      	push	{r1, r2, r3}
 80085de:	b500      	push	{lr}
 80085e0:	b09c      	sub	sp, #112	; 0x70
 80085e2:	ab1d      	add	r3, sp, #116	; 0x74
 80085e4:	9002      	str	r0, [sp, #8]
 80085e6:	9006      	str	r0, [sp, #24]
 80085e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085ec:	4809      	ldr	r0, [pc, #36]	; (8008614 <siprintf+0x38>)
 80085ee:	9107      	str	r1, [sp, #28]
 80085f0:	9104      	str	r1, [sp, #16]
 80085f2:	4909      	ldr	r1, [pc, #36]	; (8008618 <siprintf+0x3c>)
 80085f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f8:	9105      	str	r1, [sp, #20]
 80085fa:	6800      	ldr	r0, [r0, #0]
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	a902      	add	r1, sp, #8
 8008600:	f001 fd72 	bl	800a0e8 <_svfiprintf_r>
 8008604:	9b02      	ldr	r3, [sp, #8]
 8008606:	2200      	movs	r2, #0
 8008608:	701a      	strb	r2, [r3, #0]
 800860a:	b01c      	add	sp, #112	; 0x70
 800860c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008610:	b003      	add	sp, #12
 8008612:	4770      	bx	lr
 8008614:	20000074 	.word	0x20000074
 8008618:	ffff0208 	.word	0xffff0208

0800861c <__sread>:
 800861c:	b510      	push	{r4, lr}
 800861e:	460c      	mov	r4, r1
 8008620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008624:	f001 ffba 	bl	800a59c <_read_r>
 8008628:	2800      	cmp	r0, #0
 800862a:	bfab      	itete	ge
 800862c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800862e:	89a3      	ldrhlt	r3, [r4, #12]
 8008630:	181b      	addge	r3, r3, r0
 8008632:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008636:	bfac      	ite	ge
 8008638:	6563      	strge	r3, [r4, #84]	; 0x54
 800863a:	81a3      	strhlt	r3, [r4, #12]
 800863c:	bd10      	pop	{r4, pc}

0800863e <__swrite>:
 800863e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008642:	461f      	mov	r7, r3
 8008644:	898b      	ldrh	r3, [r1, #12]
 8008646:	05db      	lsls	r3, r3, #23
 8008648:	4605      	mov	r5, r0
 800864a:	460c      	mov	r4, r1
 800864c:	4616      	mov	r6, r2
 800864e:	d505      	bpl.n	800865c <__swrite+0x1e>
 8008650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008654:	2302      	movs	r3, #2
 8008656:	2200      	movs	r2, #0
 8008658:	f001 f878 	bl	800974c <_lseek_r>
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008662:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008666:	81a3      	strh	r3, [r4, #12]
 8008668:	4632      	mov	r2, r6
 800866a:	463b      	mov	r3, r7
 800866c:	4628      	mov	r0, r5
 800866e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008672:	f000 b869 	b.w	8008748 <_write_r>

08008676 <__sseek>:
 8008676:	b510      	push	{r4, lr}
 8008678:	460c      	mov	r4, r1
 800867a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867e:	f001 f865 	bl	800974c <_lseek_r>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	bf15      	itete	ne
 8008688:	6560      	strne	r0, [r4, #84]	; 0x54
 800868a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800868e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008692:	81a3      	strheq	r3, [r4, #12]
 8008694:	bf18      	it	ne
 8008696:	81a3      	strhne	r3, [r4, #12]
 8008698:	bd10      	pop	{r4, pc}

0800869a <__sclose>:
 800869a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800869e:	f000 b8f1 	b.w	8008884 <_close_r>
	...

080086a4 <__swbuf_r>:
 80086a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a6:	460e      	mov	r6, r1
 80086a8:	4614      	mov	r4, r2
 80086aa:	4605      	mov	r5, r0
 80086ac:	b118      	cbz	r0, 80086b6 <__swbuf_r+0x12>
 80086ae:	6983      	ldr	r3, [r0, #24]
 80086b0:	b90b      	cbnz	r3, 80086b6 <__swbuf_r+0x12>
 80086b2:	f7ff f9a9 	bl	8007a08 <__sinit>
 80086b6:	4b21      	ldr	r3, [pc, #132]	; (800873c <__swbuf_r+0x98>)
 80086b8:	429c      	cmp	r4, r3
 80086ba:	d12b      	bne.n	8008714 <__swbuf_r+0x70>
 80086bc:	686c      	ldr	r4, [r5, #4]
 80086be:	69a3      	ldr	r3, [r4, #24]
 80086c0:	60a3      	str	r3, [r4, #8]
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	071a      	lsls	r2, r3, #28
 80086c6:	d52f      	bpl.n	8008728 <__swbuf_r+0x84>
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	b36b      	cbz	r3, 8008728 <__swbuf_r+0x84>
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	6820      	ldr	r0, [r4, #0]
 80086d0:	1ac0      	subs	r0, r0, r3
 80086d2:	6963      	ldr	r3, [r4, #20]
 80086d4:	b2f6      	uxtb	r6, r6
 80086d6:	4283      	cmp	r3, r0
 80086d8:	4637      	mov	r7, r6
 80086da:	dc04      	bgt.n	80086e6 <__swbuf_r+0x42>
 80086dc:	4621      	mov	r1, r4
 80086de:	4628      	mov	r0, r5
 80086e0:	f000 ffe2 	bl	80096a8 <_fflush_r>
 80086e4:	bb30      	cbnz	r0, 8008734 <__swbuf_r+0x90>
 80086e6:	68a3      	ldr	r3, [r4, #8]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	60a3      	str	r3, [r4, #8]
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	6022      	str	r2, [r4, #0]
 80086f2:	701e      	strb	r6, [r3, #0]
 80086f4:	6963      	ldr	r3, [r4, #20]
 80086f6:	3001      	adds	r0, #1
 80086f8:	4283      	cmp	r3, r0
 80086fa:	d004      	beq.n	8008706 <__swbuf_r+0x62>
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	07db      	lsls	r3, r3, #31
 8008700:	d506      	bpl.n	8008710 <__swbuf_r+0x6c>
 8008702:	2e0a      	cmp	r6, #10
 8008704:	d104      	bne.n	8008710 <__swbuf_r+0x6c>
 8008706:	4621      	mov	r1, r4
 8008708:	4628      	mov	r0, r5
 800870a:	f000 ffcd 	bl	80096a8 <_fflush_r>
 800870e:	b988      	cbnz	r0, 8008734 <__swbuf_r+0x90>
 8008710:	4638      	mov	r0, r7
 8008712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008714:	4b0a      	ldr	r3, [pc, #40]	; (8008740 <__swbuf_r+0x9c>)
 8008716:	429c      	cmp	r4, r3
 8008718:	d101      	bne.n	800871e <__swbuf_r+0x7a>
 800871a:	68ac      	ldr	r4, [r5, #8]
 800871c:	e7cf      	b.n	80086be <__swbuf_r+0x1a>
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <__swbuf_r+0xa0>)
 8008720:	429c      	cmp	r4, r3
 8008722:	bf08      	it	eq
 8008724:	68ec      	ldreq	r4, [r5, #12]
 8008726:	e7ca      	b.n	80086be <__swbuf_r+0x1a>
 8008728:	4621      	mov	r1, r4
 800872a:	4628      	mov	r0, r5
 800872c:	f000 f81e 	bl	800876c <__swsetup_r>
 8008730:	2800      	cmp	r0, #0
 8008732:	d0cb      	beq.n	80086cc <__swbuf_r+0x28>
 8008734:	f04f 37ff 	mov.w	r7, #4294967295
 8008738:	e7ea      	b.n	8008710 <__swbuf_r+0x6c>
 800873a:	bf00      	nop
 800873c:	0800acc0 	.word	0x0800acc0
 8008740:	0800ace0 	.word	0x0800ace0
 8008744:	0800aca0 	.word	0x0800aca0

08008748 <_write_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4d07      	ldr	r5, [pc, #28]	; (8008768 <_write_r+0x20>)
 800874c:	4604      	mov	r4, r0
 800874e:	4608      	mov	r0, r1
 8008750:	4611      	mov	r1, r2
 8008752:	2200      	movs	r2, #0
 8008754:	602a      	str	r2, [r5, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	f7ff f853 	bl	8007802 <_write>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_write_r+0x1e>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_write_r+0x1e>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	200004f4 	.word	0x200004f4

0800876c <__swsetup_r>:
 800876c:	4b32      	ldr	r3, [pc, #200]	; (8008838 <__swsetup_r+0xcc>)
 800876e:	b570      	push	{r4, r5, r6, lr}
 8008770:	681d      	ldr	r5, [r3, #0]
 8008772:	4606      	mov	r6, r0
 8008774:	460c      	mov	r4, r1
 8008776:	b125      	cbz	r5, 8008782 <__swsetup_r+0x16>
 8008778:	69ab      	ldr	r3, [r5, #24]
 800877a:	b913      	cbnz	r3, 8008782 <__swsetup_r+0x16>
 800877c:	4628      	mov	r0, r5
 800877e:	f7ff f943 	bl	8007a08 <__sinit>
 8008782:	4b2e      	ldr	r3, [pc, #184]	; (800883c <__swsetup_r+0xd0>)
 8008784:	429c      	cmp	r4, r3
 8008786:	d10f      	bne.n	80087a8 <__swsetup_r+0x3c>
 8008788:	686c      	ldr	r4, [r5, #4]
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008790:	0719      	lsls	r1, r3, #28
 8008792:	d42c      	bmi.n	80087ee <__swsetup_r+0x82>
 8008794:	06dd      	lsls	r5, r3, #27
 8008796:	d411      	bmi.n	80087bc <__swsetup_r+0x50>
 8008798:	2309      	movs	r3, #9
 800879a:	6033      	str	r3, [r6, #0]
 800879c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087a0:	81a3      	strh	r3, [r4, #12]
 80087a2:	f04f 30ff 	mov.w	r0, #4294967295
 80087a6:	e03e      	b.n	8008826 <__swsetup_r+0xba>
 80087a8:	4b25      	ldr	r3, [pc, #148]	; (8008840 <__swsetup_r+0xd4>)
 80087aa:	429c      	cmp	r4, r3
 80087ac:	d101      	bne.n	80087b2 <__swsetup_r+0x46>
 80087ae:	68ac      	ldr	r4, [r5, #8]
 80087b0:	e7eb      	b.n	800878a <__swsetup_r+0x1e>
 80087b2:	4b24      	ldr	r3, [pc, #144]	; (8008844 <__swsetup_r+0xd8>)
 80087b4:	429c      	cmp	r4, r3
 80087b6:	bf08      	it	eq
 80087b8:	68ec      	ldreq	r4, [r5, #12]
 80087ba:	e7e6      	b.n	800878a <__swsetup_r+0x1e>
 80087bc:	0758      	lsls	r0, r3, #29
 80087be:	d512      	bpl.n	80087e6 <__swsetup_r+0x7a>
 80087c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087c2:	b141      	cbz	r1, 80087d6 <__swsetup_r+0x6a>
 80087c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087c8:	4299      	cmp	r1, r3
 80087ca:	d002      	beq.n	80087d2 <__swsetup_r+0x66>
 80087cc:	4630      	mov	r0, r6
 80087ce:	f001 fbe3 	bl	8009f98 <_free_r>
 80087d2:	2300      	movs	r3, #0
 80087d4:	6363      	str	r3, [r4, #52]	; 0x34
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087dc:	81a3      	strh	r3, [r4, #12]
 80087de:	2300      	movs	r3, #0
 80087e0:	6063      	str	r3, [r4, #4]
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	f043 0308 	orr.w	r3, r3, #8
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	b94b      	cbnz	r3, 8008806 <__swsetup_r+0x9a>
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087fc:	d003      	beq.n	8008806 <__swsetup_r+0x9a>
 80087fe:	4621      	mov	r1, r4
 8008800:	4630      	mov	r0, r6
 8008802:	f000 ffdb 	bl	80097bc <__smakebuf_r>
 8008806:	89a0      	ldrh	r0, [r4, #12]
 8008808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800880c:	f010 0301 	ands.w	r3, r0, #1
 8008810:	d00a      	beq.n	8008828 <__swsetup_r+0xbc>
 8008812:	2300      	movs	r3, #0
 8008814:	60a3      	str	r3, [r4, #8]
 8008816:	6963      	ldr	r3, [r4, #20]
 8008818:	425b      	negs	r3, r3
 800881a:	61a3      	str	r3, [r4, #24]
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	b943      	cbnz	r3, 8008832 <__swsetup_r+0xc6>
 8008820:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008824:	d1ba      	bne.n	800879c <__swsetup_r+0x30>
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	0781      	lsls	r1, r0, #30
 800882a:	bf58      	it	pl
 800882c:	6963      	ldrpl	r3, [r4, #20]
 800882e:	60a3      	str	r3, [r4, #8]
 8008830:	e7f4      	b.n	800881c <__swsetup_r+0xb0>
 8008832:	2000      	movs	r0, #0
 8008834:	e7f7      	b.n	8008826 <__swsetup_r+0xba>
 8008836:	bf00      	nop
 8008838:	20000074 	.word	0x20000074
 800883c:	0800acc0 	.word	0x0800acc0
 8008840:	0800ace0 	.word	0x0800ace0
 8008844:	0800aca0 	.word	0x0800aca0

08008848 <__assert_func>:
 8008848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800884a:	4614      	mov	r4, r2
 800884c:	461a      	mov	r2, r3
 800884e:	4b09      	ldr	r3, [pc, #36]	; (8008874 <__assert_func+0x2c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4605      	mov	r5, r0
 8008854:	68d8      	ldr	r0, [r3, #12]
 8008856:	b14c      	cbz	r4, 800886c <__assert_func+0x24>
 8008858:	4b07      	ldr	r3, [pc, #28]	; (8008878 <__assert_func+0x30>)
 800885a:	9100      	str	r1, [sp, #0]
 800885c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008860:	4906      	ldr	r1, [pc, #24]	; (800887c <__assert_func+0x34>)
 8008862:	462b      	mov	r3, r5
 8008864:	f000 ff5c 	bl	8009720 <fiprintf>
 8008868:	f001 feaa 	bl	800a5c0 <abort>
 800886c:	4b04      	ldr	r3, [pc, #16]	; (8008880 <__assert_func+0x38>)
 800886e:	461c      	mov	r4, r3
 8008870:	e7f3      	b.n	800885a <__assert_func+0x12>
 8008872:	bf00      	nop
 8008874:	20000074 	.word	0x20000074
 8008878:	0800ad38 	.word	0x0800ad38
 800887c:	0800ad45 	.word	0x0800ad45
 8008880:	0800ad73 	.word	0x0800ad73

08008884 <_close_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4d06      	ldr	r5, [pc, #24]	; (80088a0 <_close_r+0x1c>)
 8008888:	2300      	movs	r3, #0
 800888a:	4604      	mov	r4, r0
 800888c:	4608      	mov	r0, r1
 800888e:	602b      	str	r3, [r5, #0]
 8008890:	f7fe ffe8 	bl	8007864 <_close>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_close_r+0x1a>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b103      	cbz	r3, 800889e <_close_r+0x1a>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	200004f4 	.word	0x200004f4

080088a4 <quorem>:
 80088a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	6903      	ldr	r3, [r0, #16]
 80088aa:	690c      	ldr	r4, [r1, #16]
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	4607      	mov	r7, r0
 80088b0:	f2c0 8081 	blt.w	80089b6 <quorem+0x112>
 80088b4:	3c01      	subs	r4, #1
 80088b6:	f101 0814 	add.w	r8, r1, #20
 80088ba:	f100 0514 	add.w	r5, r0, #20
 80088be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088cc:	3301      	adds	r3, #1
 80088ce:	429a      	cmp	r2, r3
 80088d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80088dc:	d331      	bcc.n	8008942 <quorem+0x9e>
 80088de:	f04f 0e00 	mov.w	lr, #0
 80088e2:	4640      	mov	r0, r8
 80088e4:	46ac      	mov	ip, r5
 80088e6:	46f2      	mov	sl, lr
 80088e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80088ec:	b293      	uxth	r3, r2
 80088ee:	fb06 e303 	mla	r3, r6, r3, lr
 80088f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	ebaa 0303 	sub.w	r3, sl, r3
 80088fc:	f8dc a000 	ldr.w	sl, [ip]
 8008900:	0c12      	lsrs	r2, r2, #16
 8008902:	fa13 f38a 	uxtah	r3, r3, sl
 8008906:	fb06 e202 	mla	r2, r6, r2, lr
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	9b00      	ldr	r3, [sp, #0]
 800890e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008912:	b292      	uxth	r2, r2
 8008914:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008918:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800891c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008920:	4581      	cmp	r9, r0
 8008922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008926:	f84c 3b04 	str.w	r3, [ip], #4
 800892a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800892e:	d2db      	bcs.n	80088e8 <quorem+0x44>
 8008930:	f855 300b 	ldr.w	r3, [r5, fp]
 8008934:	b92b      	cbnz	r3, 8008942 <quorem+0x9e>
 8008936:	9b01      	ldr	r3, [sp, #4]
 8008938:	3b04      	subs	r3, #4
 800893a:	429d      	cmp	r5, r3
 800893c:	461a      	mov	r2, r3
 800893e:	d32e      	bcc.n	800899e <quorem+0xfa>
 8008940:	613c      	str	r4, [r7, #16]
 8008942:	4638      	mov	r0, r7
 8008944:	f001 fa10 	bl	8009d68 <__mcmp>
 8008948:	2800      	cmp	r0, #0
 800894a:	db24      	blt.n	8008996 <quorem+0xf2>
 800894c:	3601      	adds	r6, #1
 800894e:	4628      	mov	r0, r5
 8008950:	f04f 0c00 	mov.w	ip, #0
 8008954:	f858 2b04 	ldr.w	r2, [r8], #4
 8008958:	f8d0 e000 	ldr.w	lr, [r0]
 800895c:	b293      	uxth	r3, r2
 800895e:	ebac 0303 	sub.w	r3, ip, r3
 8008962:	0c12      	lsrs	r2, r2, #16
 8008964:	fa13 f38e 	uxtah	r3, r3, lr
 8008968:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800896c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008970:	b29b      	uxth	r3, r3
 8008972:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008976:	45c1      	cmp	r9, r8
 8008978:	f840 3b04 	str.w	r3, [r0], #4
 800897c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008980:	d2e8      	bcs.n	8008954 <quorem+0xb0>
 8008982:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800898a:	b922      	cbnz	r2, 8008996 <quorem+0xf2>
 800898c:	3b04      	subs	r3, #4
 800898e:	429d      	cmp	r5, r3
 8008990:	461a      	mov	r2, r3
 8008992:	d30a      	bcc.n	80089aa <quorem+0x106>
 8008994:	613c      	str	r4, [r7, #16]
 8008996:	4630      	mov	r0, r6
 8008998:	b003      	add	sp, #12
 800899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899e:	6812      	ldr	r2, [r2, #0]
 80089a0:	3b04      	subs	r3, #4
 80089a2:	2a00      	cmp	r2, #0
 80089a4:	d1cc      	bne.n	8008940 <quorem+0x9c>
 80089a6:	3c01      	subs	r4, #1
 80089a8:	e7c7      	b.n	800893a <quorem+0x96>
 80089aa:	6812      	ldr	r2, [r2, #0]
 80089ac:	3b04      	subs	r3, #4
 80089ae:	2a00      	cmp	r2, #0
 80089b0:	d1f0      	bne.n	8008994 <quorem+0xf0>
 80089b2:	3c01      	subs	r4, #1
 80089b4:	e7eb      	b.n	800898e <quorem+0xea>
 80089b6:	2000      	movs	r0, #0
 80089b8:	e7ee      	b.n	8008998 <quorem+0xf4>
 80089ba:	0000      	movs	r0, r0
 80089bc:	0000      	movs	r0, r0
	...

080089c0 <_dtoa_r>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	ed2d 8b04 	vpush	{d8-d9}
 80089c8:	ec57 6b10 	vmov	r6, r7, d0
 80089cc:	b093      	sub	sp, #76	; 0x4c
 80089ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80089d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80089d4:	9106      	str	r1, [sp, #24]
 80089d6:	ee10 aa10 	vmov	sl, s0
 80089da:	4604      	mov	r4, r0
 80089dc:	9209      	str	r2, [sp, #36]	; 0x24
 80089de:	930c      	str	r3, [sp, #48]	; 0x30
 80089e0:	46bb      	mov	fp, r7
 80089e2:	b975      	cbnz	r5, 8008a02 <_dtoa_r+0x42>
 80089e4:	2010      	movs	r0, #16
 80089e6:	f000 ff29 	bl	800983c <malloc>
 80089ea:	4602      	mov	r2, r0
 80089ec:	6260      	str	r0, [r4, #36]	; 0x24
 80089ee:	b920      	cbnz	r0, 80089fa <_dtoa_r+0x3a>
 80089f0:	4ba7      	ldr	r3, [pc, #668]	; (8008c90 <_dtoa_r+0x2d0>)
 80089f2:	21ea      	movs	r1, #234	; 0xea
 80089f4:	48a7      	ldr	r0, [pc, #668]	; (8008c94 <_dtoa_r+0x2d4>)
 80089f6:	f7ff ff27 	bl	8008848 <__assert_func>
 80089fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089fe:	6005      	str	r5, [r0, #0]
 8008a00:	60c5      	str	r5, [r0, #12]
 8008a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a04:	6819      	ldr	r1, [r3, #0]
 8008a06:	b151      	cbz	r1, 8008a1e <_dtoa_r+0x5e>
 8008a08:	685a      	ldr	r2, [r3, #4]
 8008a0a:	604a      	str	r2, [r1, #4]
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	4093      	lsls	r3, r2
 8008a10:	608b      	str	r3, [r1, #8]
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 ff66 	bl	80098e4 <_Bfree>
 8008a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	1e3b      	subs	r3, r7, #0
 8008a20:	bfaa      	itet	ge
 8008a22:	2300      	movge	r3, #0
 8008a24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008a28:	f8c8 3000 	strge.w	r3, [r8]
 8008a2c:	4b9a      	ldr	r3, [pc, #616]	; (8008c98 <_dtoa_r+0x2d8>)
 8008a2e:	bfbc      	itt	lt
 8008a30:	2201      	movlt	r2, #1
 8008a32:	f8c8 2000 	strlt.w	r2, [r8]
 8008a36:	ea33 030b 	bics.w	r3, r3, fp
 8008a3a:	d11b      	bne.n	8008a74 <_dtoa_r+0xb4>
 8008a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a42:	6013      	str	r3, [r2, #0]
 8008a44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a48:	4333      	orrs	r3, r6
 8008a4a:	f000 8592 	beq.w	8009572 <_dtoa_r+0xbb2>
 8008a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a50:	b963      	cbnz	r3, 8008a6c <_dtoa_r+0xac>
 8008a52:	4b92      	ldr	r3, [pc, #584]	; (8008c9c <_dtoa_r+0x2dc>)
 8008a54:	e022      	b.n	8008a9c <_dtoa_r+0xdc>
 8008a56:	4b92      	ldr	r3, [pc, #584]	; (8008ca0 <_dtoa_r+0x2e0>)
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a5e:	6013      	str	r3, [r2, #0]
 8008a60:	9801      	ldr	r0, [sp, #4]
 8008a62:	b013      	add	sp, #76	; 0x4c
 8008a64:	ecbd 8b04 	vpop	{d8-d9}
 8008a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6c:	4b8b      	ldr	r3, [pc, #556]	; (8008c9c <_dtoa_r+0x2dc>)
 8008a6e:	9301      	str	r3, [sp, #4]
 8008a70:	3303      	adds	r3, #3
 8008a72:	e7f3      	b.n	8008a5c <_dtoa_r+0x9c>
 8008a74:	2200      	movs	r2, #0
 8008a76:	2300      	movs	r3, #0
 8008a78:	4650      	mov	r0, sl
 8008a7a:	4659      	mov	r1, fp
 8008a7c:	f7f8 f824 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a80:	ec4b ab19 	vmov	d9, sl, fp
 8008a84:	4680      	mov	r8, r0
 8008a86:	b158      	cbz	r0, 8008aa0 <_dtoa_r+0xe0>
 8008a88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	6013      	str	r3, [r2, #0]
 8008a8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f000 856b 	beq.w	800956c <_dtoa_r+0xbac>
 8008a96:	4883      	ldr	r0, [pc, #524]	; (8008ca4 <_dtoa_r+0x2e4>)
 8008a98:	6018      	str	r0, [r3, #0]
 8008a9a:	1e43      	subs	r3, r0, #1
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	e7df      	b.n	8008a60 <_dtoa_r+0xa0>
 8008aa0:	ec4b ab10 	vmov	d0, sl, fp
 8008aa4:	aa10      	add	r2, sp, #64	; 0x40
 8008aa6:	a911      	add	r1, sp, #68	; 0x44
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f001 fa03 	bl	8009eb4 <__d2b>
 8008aae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008ab2:	ee08 0a10 	vmov	s16, r0
 8008ab6:	2d00      	cmp	r5, #0
 8008ab8:	f000 8084 	beq.w	8008bc4 <_dtoa_r+0x204>
 8008abc:	ee19 3a90 	vmov	r3, s19
 8008ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ac4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ac8:	4656      	mov	r6, sl
 8008aca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ace:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ad2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008ad6:	4b74      	ldr	r3, [pc, #464]	; (8008ca8 <_dtoa_r+0x2e8>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4630      	mov	r0, r6
 8008adc:	4639      	mov	r1, r7
 8008ade:	f7f7 fbd3 	bl	8000288 <__aeabi_dsub>
 8008ae2:	a365      	add	r3, pc, #404	; (adr r3, 8008c78 <_dtoa_r+0x2b8>)
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	f7f7 fd86 	bl	80005f8 <__aeabi_dmul>
 8008aec:	a364      	add	r3, pc, #400	; (adr r3, 8008c80 <_dtoa_r+0x2c0>)
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	f7f7 fbcb 	bl	800028c <__adddf3>
 8008af6:	4606      	mov	r6, r0
 8008af8:	4628      	mov	r0, r5
 8008afa:	460f      	mov	r7, r1
 8008afc:	f7f7 fd12 	bl	8000524 <__aeabi_i2d>
 8008b00:	a361      	add	r3, pc, #388	; (adr r3, 8008c88 <_dtoa_r+0x2c8>)
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	f7f7 fd77 	bl	80005f8 <__aeabi_dmul>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4630      	mov	r0, r6
 8008b10:	4639      	mov	r1, r7
 8008b12:	f7f7 fbbb 	bl	800028c <__adddf3>
 8008b16:	4606      	mov	r6, r0
 8008b18:	460f      	mov	r7, r1
 8008b1a:	f7f8 f81d 	bl	8000b58 <__aeabi_d2iz>
 8008b1e:	2200      	movs	r2, #0
 8008b20:	9000      	str	r0, [sp, #0]
 8008b22:	2300      	movs	r3, #0
 8008b24:	4630      	mov	r0, r6
 8008b26:	4639      	mov	r1, r7
 8008b28:	f7f7 ffd8 	bl	8000adc <__aeabi_dcmplt>
 8008b2c:	b150      	cbz	r0, 8008b44 <_dtoa_r+0x184>
 8008b2e:	9800      	ldr	r0, [sp, #0]
 8008b30:	f7f7 fcf8 	bl	8000524 <__aeabi_i2d>
 8008b34:	4632      	mov	r2, r6
 8008b36:	463b      	mov	r3, r7
 8008b38:	f7f7 ffc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b3c:	b910      	cbnz	r0, 8008b44 <_dtoa_r+0x184>
 8008b3e:	9b00      	ldr	r3, [sp, #0]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	9b00      	ldr	r3, [sp, #0]
 8008b46:	2b16      	cmp	r3, #22
 8008b48:	d85a      	bhi.n	8008c00 <_dtoa_r+0x240>
 8008b4a:	9a00      	ldr	r2, [sp, #0]
 8008b4c:	4b57      	ldr	r3, [pc, #348]	; (8008cac <_dtoa_r+0x2ec>)
 8008b4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	ec51 0b19 	vmov	r0, r1, d9
 8008b5a:	f7f7 ffbf 	bl	8000adc <__aeabi_dcmplt>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d050      	beq.n	8008c04 <_dtoa_r+0x244>
 8008b62:	9b00      	ldr	r3, [sp, #0]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b6e:	1b5d      	subs	r5, r3, r5
 8008b70:	1e6b      	subs	r3, r5, #1
 8008b72:	9305      	str	r3, [sp, #20]
 8008b74:	bf45      	ittet	mi
 8008b76:	f1c5 0301 	rsbmi	r3, r5, #1
 8008b7a:	9304      	strmi	r3, [sp, #16]
 8008b7c:	2300      	movpl	r3, #0
 8008b7e:	2300      	movmi	r3, #0
 8008b80:	bf4c      	ite	mi
 8008b82:	9305      	strmi	r3, [sp, #20]
 8008b84:	9304      	strpl	r3, [sp, #16]
 8008b86:	9b00      	ldr	r3, [sp, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	db3d      	blt.n	8008c08 <_dtoa_r+0x248>
 8008b8c:	9b05      	ldr	r3, [sp, #20]
 8008b8e:	9a00      	ldr	r2, [sp, #0]
 8008b90:	920a      	str	r2, [sp, #40]	; 0x28
 8008b92:	4413      	add	r3, r2
 8008b94:	9305      	str	r3, [sp, #20]
 8008b96:	2300      	movs	r3, #0
 8008b98:	9307      	str	r3, [sp, #28]
 8008b9a:	9b06      	ldr	r3, [sp, #24]
 8008b9c:	2b09      	cmp	r3, #9
 8008b9e:	f200 8089 	bhi.w	8008cb4 <_dtoa_r+0x2f4>
 8008ba2:	2b05      	cmp	r3, #5
 8008ba4:	bfc4      	itt	gt
 8008ba6:	3b04      	subgt	r3, #4
 8008ba8:	9306      	strgt	r3, [sp, #24]
 8008baa:	9b06      	ldr	r3, [sp, #24]
 8008bac:	f1a3 0302 	sub.w	r3, r3, #2
 8008bb0:	bfcc      	ite	gt
 8008bb2:	2500      	movgt	r5, #0
 8008bb4:	2501      	movle	r5, #1
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	f200 8087 	bhi.w	8008cca <_dtoa_r+0x30a>
 8008bbc:	e8df f003 	tbb	[pc, r3]
 8008bc0:	59383a2d 	.word	0x59383a2d
 8008bc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008bc8:	441d      	add	r5, r3
 8008bca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008bce:	2b20      	cmp	r3, #32
 8008bd0:	bfc1      	itttt	gt
 8008bd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008bd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008bda:	fa0b f303 	lslgt.w	r3, fp, r3
 8008bde:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008be2:	bfda      	itte	le
 8008be4:	f1c3 0320 	rsble	r3, r3, #32
 8008be8:	fa06 f003 	lslle.w	r0, r6, r3
 8008bec:	4318      	orrgt	r0, r3
 8008bee:	f7f7 fc89 	bl	8000504 <__aeabi_ui2d>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008bfa:	3d01      	subs	r5, #1
 8008bfc:	930e      	str	r3, [sp, #56]	; 0x38
 8008bfe:	e76a      	b.n	8008ad6 <_dtoa_r+0x116>
 8008c00:	2301      	movs	r3, #1
 8008c02:	e7b2      	b.n	8008b6a <_dtoa_r+0x1aa>
 8008c04:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c06:	e7b1      	b.n	8008b6c <_dtoa_r+0x1ac>
 8008c08:	9b04      	ldr	r3, [sp, #16]
 8008c0a:	9a00      	ldr	r2, [sp, #0]
 8008c0c:	1a9b      	subs	r3, r3, r2
 8008c0e:	9304      	str	r3, [sp, #16]
 8008c10:	4253      	negs	r3, r2
 8008c12:	9307      	str	r3, [sp, #28]
 8008c14:	2300      	movs	r3, #0
 8008c16:	930a      	str	r3, [sp, #40]	; 0x28
 8008c18:	e7bf      	b.n	8008b9a <_dtoa_r+0x1da>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9308      	str	r3, [sp, #32]
 8008c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	dc55      	bgt.n	8008cd0 <_dtoa_r+0x310>
 8008c24:	2301      	movs	r3, #1
 8008c26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c2e:	e00c      	b.n	8008c4a <_dtoa_r+0x28a>
 8008c30:	2301      	movs	r3, #1
 8008c32:	e7f3      	b.n	8008c1c <_dtoa_r+0x25c>
 8008c34:	2300      	movs	r3, #0
 8008c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c38:	9308      	str	r3, [sp, #32]
 8008c3a:	9b00      	ldr	r3, [sp, #0]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	9302      	str	r3, [sp, #8]
 8008c40:	3301      	adds	r3, #1
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	9303      	str	r3, [sp, #12]
 8008c46:	bfb8      	it	lt
 8008c48:	2301      	movlt	r3, #1
 8008c4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	6042      	str	r2, [r0, #4]
 8008c50:	2204      	movs	r2, #4
 8008c52:	f102 0614 	add.w	r6, r2, #20
 8008c56:	429e      	cmp	r6, r3
 8008c58:	6841      	ldr	r1, [r0, #4]
 8008c5a:	d93d      	bls.n	8008cd8 <_dtoa_r+0x318>
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f000 fe01 	bl	8009864 <_Balloc>
 8008c62:	9001      	str	r0, [sp, #4]
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d13b      	bne.n	8008ce0 <_dtoa_r+0x320>
 8008c68:	4b11      	ldr	r3, [pc, #68]	; (8008cb0 <_dtoa_r+0x2f0>)
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c70:	e6c0      	b.n	80089f4 <_dtoa_r+0x34>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e7df      	b.n	8008c36 <_dtoa_r+0x276>
 8008c76:	bf00      	nop
 8008c78:	636f4361 	.word	0x636f4361
 8008c7c:	3fd287a7 	.word	0x3fd287a7
 8008c80:	8b60c8b3 	.word	0x8b60c8b3
 8008c84:	3fc68a28 	.word	0x3fc68a28
 8008c88:	509f79fb 	.word	0x509f79fb
 8008c8c:	3fd34413 	.word	0x3fd34413
 8008c90:	0800ad81 	.word	0x0800ad81
 8008c94:	0800ad98 	.word	0x0800ad98
 8008c98:	7ff00000 	.word	0x7ff00000
 8008c9c:	0800ad7d 	.word	0x0800ad7d
 8008ca0:	0800ad74 	.word	0x0800ad74
 8008ca4:	0800ad15 	.word	0x0800ad15
 8008ca8:	3ff80000 	.word	0x3ff80000
 8008cac:	0800ae88 	.word	0x0800ae88
 8008cb0:	0800adf3 	.word	0x0800adf3
 8008cb4:	2501      	movs	r5, #1
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	9306      	str	r3, [sp, #24]
 8008cba:	9508      	str	r5, [sp, #32]
 8008cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2312      	movs	r3, #18
 8008cc8:	e7b0      	b.n	8008c2c <_dtoa_r+0x26c>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	9308      	str	r3, [sp, #32]
 8008cce:	e7f5      	b.n	8008cbc <_dtoa_r+0x2fc>
 8008cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008cd6:	e7b8      	b.n	8008c4a <_dtoa_r+0x28a>
 8008cd8:	3101      	adds	r1, #1
 8008cda:	6041      	str	r1, [r0, #4]
 8008cdc:	0052      	lsls	r2, r2, #1
 8008cde:	e7b8      	b.n	8008c52 <_dtoa_r+0x292>
 8008ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ce2:	9a01      	ldr	r2, [sp, #4]
 8008ce4:	601a      	str	r2, [r3, #0]
 8008ce6:	9b03      	ldr	r3, [sp, #12]
 8008ce8:	2b0e      	cmp	r3, #14
 8008cea:	f200 809d 	bhi.w	8008e28 <_dtoa_r+0x468>
 8008cee:	2d00      	cmp	r5, #0
 8008cf0:	f000 809a 	beq.w	8008e28 <_dtoa_r+0x468>
 8008cf4:	9b00      	ldr	r3, [sp, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	dd32      	ble.n	8008d60 <_dtoa_r+0x3a0>
 8008cfa:	4ab7      	ldr	r2, [pc, #732]	; (8008fd8 <_dtoa_r+0x618>)
 8008cfc:	f003 030f 	and.w	r3, r3, #15
 8008d00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d08:	9b00      	ldr	r3, [sp, #0]
 8008d0a:	05d8      	lsls	r0, r3, #23
 8008d0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008d10:	d516      	bpl.n	8008d40 <_dtoa_r+0x380>
 8008d12:	4bb2      	ldr	r3, [pc, #712]	; (8008fdc <_dtoa_r+0x61c>)
 8008d14:	ec51 0b19 	vmov	r0, r1, d9
 8008d18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d1c:	f7f7 fd96 	bl	800084c <__aeabi_ddiv>
 8008d20:	f007 070f 	and.w	r7, r7, #15
 8008d24:	4682      	mov	sl, r0
 8008d26:	468b      	mov	fp, r1
 8008d28:	2503      	movs	r5, #3
 8008d2a:	4eac      	ldr	r6, [pc, #688]	; (8008fdc <_dtoa_r+0x61c>)
 8008d2c:	b957      	cbnz	r7, 8008d44 <_dtoa_r+0x384>
 8008d2e:	4642      	mov	r2, r8
 8008d30:	464b      	mov	r3, r9
 8008d32:	4650      	mov	r0, sl
 8008d34:	4659      	mov	r1, fp
 8008d36:	f7f7 fd89 	bl	800084c <__aeabi_ddiv>
 8008d3a:	4682      	mov	sl, r0
 8008d3c:	468b      	mov	fp, r1
 8008d3e:	e028      	b.n	8008d92 <_dtoa_r+0x3d2>
 8008d40:	2502      	movs	r5, #2
 8008d42:	e7f2      	b.n	8008d2a <_dtoa_r+0x36a>
 8008d44:	07f9      	lsls	r1, r7, #31
 8008d46:	d508      	bpl.n	8008d5a <_dtoa_r+0x39a>
 8008d48:	4640      	mov	r0, r8
 8008d4a:	4649      	mov	r1, r9
 8008d4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d50:	f7f7 fc52 	bl	80005f8 <__aeabi_dmul>
 8008d54:	3501      	adds	r5, #1
 8008d56:	4680      	mov	r8, r0
 8008d58:	4689      	mov	r9, r1
 8008d5a:	107f      	asrs	r7, r7, #1
 8008d5c:	3608      	adds	r6, #8
 8008d5e:	e7e5      	b.n	8008d2c <_dtoa_r+0x36c>
 8008d60:	f000 809b 	beq.w	8008e9a <_dtoa_r+0x4da>
 8008d64:	9b00      	ldr	r3, [sp, #0]
 8008d66:	4f9d      	ldr	r7, [pc, #628]	; (8008fdc <_dtoa_r+0x61c>)
 8008d68:	425e      	negs	r6, r3
 8008d6a:	4b9b      	ldr	r3, [pc, #620]	; (8008fd8 <_dtoa_r+0x618>)
 8008d6c:	f006 020f 	and.w	r2, r6, #15
 8008d70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	ec51 0b19 	vmov	r0, r1, d9
 8008d7c:	f7f7 fc3c 	bl	80005f8 <__aeabi_dmul>
 8008d80:	1136      	asrs	r6, r6, #4
 8008d82:	4682      	mov	sl, r0
 8008d84:	468b      	mov	fp, r1
 8008d86:	2300      	movs	r3, #0
 8008d88:	2502      	movs	r5, #2
 8008d8a:	2e00      	cmp	r6, #0
 8008d8c:	d17a      	bne.n	8008e84 <_dtoa_r+0x4c4>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1d3      	bne.n	8008d3a <_dtoa_r+0x37a>
 8008d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 8082 	beq.w	8008e9e <_dtoa_r+0x4de>
 8008d9a:	4b91      	ldr	r3, [pc, #580]	; (8008fe0 <_dtoa_r+0x620>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4650      	mov	r0, sl
 8008da0:	4659      	mov	r1, fp
 8008da2:	f7f7 fe9b 	bl	8000adc <__aeabi_dcmplt>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d079      	beq.n	8008e9e <_dtoa_r+0x4de>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d076      	beq.n	8008e9e <_dtoa_r+0x4de>
 8008db0:	9b02      	ldr	r3, [sp, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	dd36      	ble.n	8008e24 <_dtoa_r+0x464>
 8008db6:	9b00      	ldr	r3, [sp, #0]
 8008db8:	4650      	mov	r0, sl
 8008dba:	4659      	mov	r1, fp
 8008dbc:	1e5f      	subs	r7, r3, #1
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	4b88      	ldr	r3, [pc, #544]	; (8008fe4 <_dtoa_r+0x624>)
 8008dc2:	f7f7 fc19 	bl	80005f8 <__aeabi_dmul>
 8008dc6:	9e02      	ldr	r6, [sp, #8]
 8008dc8:	4682      	mov	sl, r0
 8008dca:	468b      	mov	fp, r1
 8008dcc:	3501      	adds	r5, #1
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f7f7 fba8 	bl	8000524 <__aeabi_i2d>
 8008dd4:	4652      	mov	r2, sl
 8008dd6:	465b      	mov	r3, fp
 8008dd8:	f7f7 fc0e 	bl	80005f8 <__aeabi_dmul>
 8008ddc:	4b82      	ldr	r3, [pc, #520]	; (8008fe8 <_dtoa_r+0x628>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	f7f7 fa54 	bl	800028c <__adddf3>
 8008de4:	46d0      	mov	r8, sl
 8008de6:	46d9      	mov	r9, fp
 8008de8:	4682      	mov	sl, r0
 8008dea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008dee:	2e00      	cmp	r6, #0
 8008df0:	d158      	bne.n	8008ea4 <_dtoa_r+0x4e4>
 8008df2:	4b7e      	ldr	r3, [pc, #504]	; (8008fec <_dtoa_r+0x62c>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	4640      	mov	r0, r8
 8008df8:	4649      	mov	r1, r9
 8008dfa:	f7f7 fa45 	bl	8000288 <__aeabi_dsub>
 8008dfe:	4652      	mov	r2, sl
 8008e00:	465b      	mov	r3, fp
 8008e02:	4680      	mov	r8, r0
 8008e04:	4689      	mov	r9, r1
 8008e06:	f7f7 fe87 	bl	8000b18 <__aeabi_dcmpgt>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	f040 8295 	bne.w	800933a <_dtoa_r+0x97a>
 8008e10:	4652      	mov	r2, sl
 8008e12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e16:	4640      	mov	r0, r8
 8008e18:	4649      	mov	r1, r9
 8008e1a:	f7f7 fe5f 	bl	8000adc <__aeabi_dcmplt>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	f040 8289 	bne.w	8009336 <_dtoa_r+0x976>
 8008e24:	ec5b ab19 	vmov	sl, fp, d9
 8008e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f2c0 8148 	blt.w	80090c0 <_dtoa_r+0x700>
 8008e30:	9a00      	ldr	r2, [sp, #0]
 8008e32:	2a0e      	cmp	r2, #14
 8008e34:	f300 8144 	bgt.w	80090c0 <_dtoa_r+0x700>
 8008e38:	4b67      	ldr	r3, [pc, #412]	; (8008fd8 <_dtoa_r+0x618>)
 8008e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f280 80d5 	bge.w	8008ff4 <_dtoa_r+0x634>
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f300 80d1 	bgt.w	8008ff4 <_dtoa_r+0x634>
 8008e52:	f040 826f 	bne.w	8009334 <_dtoa_r+0x974>
 8008e56:	4b65      	ldr	r3, [pc, #404]	; (8008fec <_dtoa_r+0x62c>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	f7f7 fbcb 	bl	80005f8 <__aeabi_dmul>
 8008e62:	4652      	mov	r2, sl
 8008e64:	465b      	mov	r3, fp
 8008e66:	f7f7 fe4d 	bl	8000b04 <__aeabi_dcmpge>
 8008e6a:	9e03      	ldr	r6, [sp, #12]
 8008e6c:	4637      	mov	r7, r6
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	f040 8245 	bne.w	80092fe <_dtoa_r+0x93e>
 8008e74:	9d01      	ldr	r5, [sp, #4]
 8008e76:	2331      	movs	r3, #49	; 0x31
 8008e78:	f805 3b01 	strb.w	r3, [r5], #1
 8008e7c:	9b00      	ldr	r3, [sp, #0]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	e240      	b.n	8009306 <_dtoa_r+0x946>
 8008e84:	07f2      	lsls	r2, r6, #31
 8008e86:	d505      	bpl.n	8008e94 <_dtoa_r+0x4d4>
 8008e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e8c:	f7f7 fbb4 	bl	80005f8 <__aeabi_dmul>
 8008e90:	3501      	adds	r5, #1
 8008e92:	2301      	movs	r3, #1
 8008e94:	1076      	asrs	r6, r6, #1
 8008e96:	3708      	adds	r7, #8
 8008e98:	e777      	b.n	8008d8a <_dtoa_r+0x3ca>
 8008e9a:	2502      	movs	r5, #2
 8008e9c:	e779      	b.n	8008d92 <_dtoa_r+0x3d2>
 8008e9e:	9f00      	ldr	r7, [sp, #0]
 8008ea0:	9e03      	ldr	r6, [sp, #12]
 8008ea2:	e794      	b.n	8008dce <_dtoa_r+0x40e>
 8008ea4:	9901      	ldr	r1, [sp, #4]
 8008ea6:	4b4c      	ldr	r3, [pc, #304]	; (8008fd8 <_dtoa_r+0x618>)
 8008ea8:	4431      	add	r1, r6
 8008eaa:	910d      	str	r1, [sp, #52]	; 0x34
 8008eac:	9908      	ldr	r1, [sp, #32]
 8008eae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008eb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008eb6:	2900      	cmp	r1, #0
 8008eb8:	d043      	beq.n	8008f42 <_dtoa_r+0x582>
 8008eba:	494d      	ldr	r1, [pc, #308]	; (8008ff0 <_dtoa_r+0x630>)
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	f7f7 fcc5 	bl	800084c <__aeabi_ddiv>
 8008ec2:	4652      	mov	r2, sl
 8008ec4:	465b      	mov	r3, fp
 8008ec6:	f7f7 f9df 	bl	8000288 <__aeabi_dsub>
 8008eca:	9d01      	ldr	r5, [sp, #4]
 8008ecc:	4682      	mov	sl, r0
 8008ece:	468b      	mov	fp, r1
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	f7f7 fe40 	bl	8000b58 <__aeabi_d2iz>
 8008ed8:	4606      	mov	r6, r0
 8008eda:	f7f7 fb23 	bl	8000524 <__aeabi_i2d>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	f7f7 f9cf 	bl	8000288 <__aeabi_dsub>
 8008eea:	3630      	adds	r6, #48	; 0x30
 8008eec:	f805 6b01 	strb.w	r6, [r5], #1
 8008ef0:	4652      	mov	r2, sl
 8008ef2:	465b      	mov	r3, fp
 8008ef4:	4680      	mov	r8, r0
 8008ef6:	4689      	mov	r9, r1
 8008ef8:	f7f7 fdf0 	bl	8000adc <__aeabi_dcmplt>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d163      	bne.n	8008fc8 <_dtoa_r+0x608>
 8008f00:	4642      	mov	r2, r8
 8008f02:	464b      	mov	r3, r9
 8008f04:	4936      	ldr	r1, [pc, #216]	; (8008fe0 <_dtoa_r+0x620>)
 8008f06:	2000      	movs	r0, #0
 8008f08:	f7f7 f9be 	bl	8000288 <__aeabi_dsub>
 8008f0c:	4652      	mov	r2, sl
 8008f0e:	465b      	mov	r3, fp
 8008f10:	f7f7 fde4 	bl	8000adc <__aeabi_dcmplt>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	f040 80b5 	bne.w	8009084 <_dtoa_r+0x6c4>
 8008f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f1c:	429d      	cmp	r5, r3
 8008f1e:	d081      	beq.n	8008e24 <_dtoa_r+0x464>
 8008f20:	4b30      	ldr	r3, [pc, #192]	; (8008fe4 <_dtoa_r+0x624>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	4650      	mov	r0, sl
 8008f26:	4659      	mov	r1, fp
 8008f28:	f7f7 fb66 	bl	80005f8 <__aeabi_dmul>
 8008f2c:	4b2d      	ldr	r3, [pc, #180]	; (8008fe4 <_dtoa_r+0x624>)
 8008f2e:	4682      	mov	sl, r0
 8008f30:	468b      	mov	fp, r1
 8008f32:	4640      	mov	r0, r8
 8008f34:	4649      	mov	r1, r9
 8008f36:	2200      	movs	r2, #0
 8008f38:	f7f7 fb5e 	bl	80005f8 <__aeabi_dmul>
 8008f3c:	4680      	mov	r8, r0
 8008f3e:	4689      	mov	r9, r1
 8008f40:	e7c6      	b.n	8008ed0 <_dtoa_r+0x510>
 8008f42:	4650      	mov	r0, sl
 8008f44:	4659      	mov	r1, fp
 8008f46:	f7f7 fb57 	bl	80005f8 <__aeabi_dmul>
 8008f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f4c:	9d01      	ldr	r5, [sp, #4]
 8008f4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f50:	4682      	mov	sl, r0
 8008f52:	468b      	mov	fp, r1
 8008f54:	4649      	mov	r1, r9
 8008f56:	4640      	mov	r0, r8
 8008f58:	f7f7 fdfe 	bl	8000b58 <__aeabi_d2iz>
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	f7f7 fae1 	bl	8000524 <__aeabi_i2d>
 8008f62:	3630      	adds	r6, #48	; 0x30
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4640      	mov	r0, r8
 8008f6a:	4649      	mov	r1, r9
 8008f6c:	f7f7 f98c 	bl	8000288 <__aeabi_dsub>
 8008f70:	f805 6b01 	strb.w	r6, [r5], #1
 8008f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f76:	429d      	cmp	r5, r3
 8008f78:	4680      	mov	r8, r0
 8008f7a:	4689      	mov	r9, r1
 8008f7c:	f04f 0200 	mov.w	r2, #0
 8008f80:	d124      	bne.n	8008fcc <_dtoa_r+0x60c>
 8008f82:	4b1b      	ldr	r3, [pc, #108]	; (8008ff0 <_dtoa_r+0x630>)
 8008f84:	4650      	mov	r0, sl
 8008f86:	4659      	mov	r1, fp
 8008f88:	f7f7 f980 	bl	800028c <__adddf3>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	4640      	mov	r0, r8
 8008f92:	4649      	mov	r1, r9
 8008f94:	f7f7 fdc0 	bl	8000b18 <__aeabi_dcmpgt>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d173      	bne.n	8009084 <_dtoa_r+0x6c4>
 8008f9c:	4652      	mov	r2, sl
 8008f9e:	465b      	mov	r3, fp
 8008fa0:	4913      	ldr	r1, [pc, #76]	; (8008ff0 <_dtoa_r+0x630>)
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	f7f7 f970 	bl	8000288 <__aeabi_dsub>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	4640      	mov	r0, r8
 8008fae:	4649      	mov	r1, r9
 8008fb0:	f7f7 fd94 	bl	8000adc <__aeabi_dcmplt>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	f43f af35 	beq.w	8008e24 <_dtoa_r+0x464>
 8008fba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008fbc:	1e6b      	subs	r3, r5, #1
 8008fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fc4:	2b30      	cmp	r3, #48	; 0x30
 8008fc6:	d0f8      	beq.n	8008fba <_dtoa_r+0x5fa>
 8008fc8:	9700      	str	r7, [sp, #0]
 8008fca:	e049      	b.n	8009060 <_dtoa_r+0x6a0>
 8008fcc:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <_dtoa_r+0x624>)
 8008fce:	f7f7 fb13 	bl	80005f8 <__aeabi_dmul>
 8008fd2:	4680      	mov	r8, r0
 8008fd4:	4689      	mov	r9, r1
 8008fd6:	e7bd      	b.n	8008f54 <_dtoa_r+0x594>
 8008fd8:	0800ae88 	.word	0x0800ae88
 8008fdc:	0800ae60 	.word	0x0800ae60
 8008fe0:	3ff00000 	.word	0x3ff00000
 8008fe4:	40240000 	.word	0x40240000
 8008fe8:	401c0000 	.word	0x401c0000
 8008fec:	40140000 	.word	0x40140000
 8008ff0:	3fe00000 	.word	0x3fe00000
 8008ff4:	9d01      	ldr	r5, [sp, #4]
 8008ff6:	4656      	mov	r6, sl
 8008ff8:	465f      	mov	r7, fp
 8008ffa:	4642      	mov	r2, r8
 8008ffc:	464b      	mov	r3, r9
 8008ffe:	4630      	mov	r0, r6
 8009000:	4639      	mov	r1, r7
 8009002:	f7f7 fc23 	bl	800084c <__aeabi_ddiv>
 8009006:	f7f7 fda7 	bl	8000b58 <__aeabi_d2iz>
 800900a:	4682      	mov	sl, r0
 800900c:	f7f7 fa8a 	bl	8000524 <__aeabi_i2d>
 8009010:	4642      	mov	r2, r8
 8009012:	464b      	mov	r3, r9
 8009014:	f7f7 faf0 	bl	80005f8 <__aeabi_dmul>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	4630      	mov	r0, r6
 800901e:	4639      	mov	r1, r7
 8009020:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009024:	f7f7 f930 	bl	8000288 <__aeabi_dsub>
 8009028:	f805 6b01 	strb.w	r6, [r5], #1
 800902c:	9e01      	ldr	r6, [sp, #4]
 800902e:	9f03      	ldr	r7, [sp, #12]
 8009030:	1bae      	subs	r6, r5, r6
 8009032:	42b7      	cmp	r7, r6
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	d135      	bne.n	80090a6 <_dtoa_r+0x6e6>
 800903a:	f7f7 f927 	bl	800028c <__adddf3>
 800903e:	4642      	mov	r2, r8
 8009040:	464b      	mov	r3, r9
 8009042:	4606      	mov	r6, r0
 8009044:	460f      	mov	r7, r1
 8009046:	f7f7 fd67 	bl	8000b18 <__aeabi_dcmpgt>
 800904a:	b9d0      	cbnz	r0, 8009082 <_dtoa_r+0x6c2>
 800904c:	4642      	mov	r2, r8
 800904e:	464b      	mov	r3, r9
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	f7f7 fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 8009058:	b110      	cbz	r0, 8009060 <_dtoa_r+0x6a0>
 800905a:	f01a 0f01 	tst.w	sl, #1
 800905e:	d110      	bne.n	8009082 <_dtoa_r+0x6c2>
 8009060:	4620      	mov	r0, r4
 8009062:	ee18 1a10 	vmov	r1, s16
 8009066:	f000 fc3d 	bl	80098e4 <_Bfree>
 800906a:	2300      	movs	r3, #0
 800906c:	9800      	ldr	r0, [sp, #0]
 800906e:	702b      	strb	r3, [r5, #0]
 8009070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009072:	3001      	adds	r0, #1
 8009074:	6018      	str	r0, [r3, #0]
 8009076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009078:	2b00      	cmp	r3, #0
 800907a:	f43f acf1 	beq.w	8008a60 <_dtoa_r+0xa0>
 800907e:	601d      	str	r5, [r3, #0]
 8009080:	e4ee      	b.n	8008a60 <_dtoa_r+0xa0>
 8009082:	9f00      	ldr	r7, [sp, #0]
 8009084:	462b      	mov	r3, r5
 8009086:	461d      	mov	r5, r3
 8009088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800908c:	2a39      	cmp	r2, #57	; 0x39
 800908e:	d106      	bne.n	800909e <_dtoa_r+0x6de>
 8009090:	9a01      	ldr	r2, [sp, #4]
 8009092:	429a      	cmp	r2, r3
 8009094:	d1f7      	bne.n	8009086 <_dtoa_r+0x6c6>
 8009096:	9901      	ldr	r1, [sp, #4]
 8009098:	2230      	movs	r2, #48	; 0x30
 800909a:	3701      	adds	r7, #1
 800909c:	700a      	strb	r2, [r1, #0]
 800909e:	781a      	ldrb	r2, [r3, #0]
 80090a0:	3201      	adds	r2, #1
 80090a2:	701a      	strb	r2, [r3, #0]
 80090a4:	e790      	b.n	8008fc8 <_dtoa_r+0x608>
 80090a6:	4ba6      	ldr	r3, [pc, #664]	; (8009340 <_dtoa_r+0x980>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	f7f7 faa5 	bl	80005f8 <__aeabi_dmul>
 80090ae:	2200      	movs	r2, #0
 80090b0:	2300      	movs	r3, #0
 80090b2:	4606      	mov	r6, r0
 80090b4:	460f      	mov	r7, r1
 80090b6:	f7f7 fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d09d      	beq.n	8008ffa <_dtoa_r+0x63a>
 80090be:	e7cf      	b.n	8009060 <_dtoa_r+0x6a0>
 80090c0:	9a08      	ldr	r2, [sp, #32]
 80090c2:	2a00      	cmp	r2, #0
 80090c4:	f000 80d7 	beq.w	8009276 <_dtoa_r+0x8b6>
 80090c8:	9a06      	ldr	r2, [sp, #24]
 80090ca:	2a01      	cmp	r2, #1
 80090cc:	f300 80ba 	bgt.w	8009244 <_dtoa_r+0x884>
 80090d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090d2:	2a00      	cmp	r2, #0
 80090d4:	f000 80b2 	beq.w	800923c <_dtoa_r+0x87c>
 80090d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090dc:	9e07      	ldr	r6, [sp, #28]
 80090de:	9d04      	ldr	r5, [sp, #16]
 80090e0:	9a04      	ldr	r2, [sp, #16]
 80090e2:	441a      	add	r2, r3
 80090e4:	9204      	str	r2, [sp, #16]
 80090e6:	9a05      	ldr	r2, [sp, #20]
 80090e8:	2101      	movs	r1, #1
 80090ea:	441a      	add	r2, r3
 80090ec:	4620      	mov	r0, r4
 80090ee:	9205      	str	r2, [sp, #20]
 80090f0:	f000 fcb0 	bl	8009a54 <__i2b>
 80090f4:	4607      	mov	r7, r0
 80090f6:	2d00      	cmp	r5, #0
 80090f8:	dd0c      	ble.n	8009114 <_dtoa_r+0x754>
 80090fa:	9b05      	ldr	r3, [sp, #20]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	dd09      	ble.n	8009114 <_dtoa_r+0x754>
 8009100:	42ab      	cmp	r3, r5
 8009102:	9a04      	ldr	r2, [sp, #16]
 8009104:	bfa8      	it	ge
 8009106:	462b      	movge	r3, r5
 8009108:	1ad2      	subs	r2, r2, r3
 800910a:	9204      	str	r2, [sp, #16]
 800910c:	9a05      	ldr	r2, [sp, #20]
 800910e:	1aed      	subs	r5, r5, r3
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	9305      	str	r3, [sp, #20]
 8009114:	9b07      	ldr	r3, [sp, #28]
 8009116:	b31b      	cbz	r3, 8009160 <_dtoa_r+0x7a0>
 8009118:	9b08      	ldr	r3, [sp, #32]
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 80af 	beq.w	800927e <_dtoa_r+0x8be>
 8009120:	2e00      	cmp	r6, #0
 8009122:	dd13      	ble.n	800914c <_dtoa_r+0x78c>
 8009124:	4639      	mov	r1, r7
 8009126:	4632      	mov	r2, r6
 8009128:	4620      	mov	r0, r4
 800912a:	f000 fd53 	bl	8009bd4 <__pow5mult>
 800912e:	ee18 2a10 	vmov	r2, s16
 8009132:	4601      	mov	r1, r0
 8009134:	4607      	mov	r7, r0
 8009136:	4620      	mov	r0, r4
 8009138:	f000 fca2 	bl	8009a80 <__multiply>
 800913c:	ee18 1a10 	vmov	r1, s16
 8009140:	4680      	mov	r8, r0
 8009142:	4620      	mov	r0, r4
 8009144:	f000 fbce 	bl	80098e4 <_Bfree>
 8009148:	ee08 8a10 	vmov	s16, r8
 800914c:	9b07      	ldr	r3, [sp, #28]
 800914e:	1b9a      	subs	r2, r3, r6
 8009150:	d006      	beq.n	8009160 <_dtoa_r+0x7a0>
 8009152:	ee18 1a10 	vmov	r1, s16
 8009156:	4620      	mov	r0, r4
 8009158:	f000 fd3c 	bl	8009bd4 <__pow5mult>
 800915c:	ee08 0a10 	vmov	s16, r0
 8009160:	2101      	movs	r1, #1
 8009162:	4620      	mov	r0, r4
 8009164:	f000 fc76 	bl	8009a54 <__i2b>
 8009168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800916a:	2b00      	cmp	r3, #0
 800916c:	4606      	mov	r6, r0
 800916e:	f340 8088 	ble.w	8009282 <_dtoa_r+0x8c2>
 8009172:	461a      	mov	r2, r3
 8009174:	4601      	mov	r1, r0
 8009176:	4620      	mov	r0, r4
 8009178:	f000 fd2c 	bl	8009bd4 <__pow5mult>
 800917c:	9b06      	ldr	r3, [sp, #24]
 800917e:	2b01      	cmp	r3, #1
 8009180:	4606      	mov	r6, r0
 8009182:	f340 8081 	ble.w	8009288 <_dtoa_r+0x8c8>
 8009186:	f04f 0800 	mov.w	r8, #0
 800918a:	6933      	ldr	r3, [r6, #16]
 800918c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009190:	6918      	ldr	r0, [r3, #16]
 8009192:	f000 fc0f 	bl	80099b4 <__hi0bits>
 8009196:	f1c0 0020 	rsb	r0, r0, #32
 800919a:	9b05      	ldr	r3, [sp, #20]
 800919c:	4418      	add	r0, r3
 800919e:	f010 001f 	ands.w	r0, r0, #31
 80091a2:	f000 8092 	beq.w	80092ca <_dtoa_r+0x90a>
 80091a6:	f1c0 0320 	rsb	r3, r0, #32
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	f340 808a 	ble.w	80092c4 <_dtoa_r+0x904>
 80091b0:	f1c0 001c 	rsb	r0, r0, #28
 80091b4:	9b04      	ldr	r3, [sp, #16]
 80091b6:	4403      	add	r3, r0
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	9b05      	ldr	r3, [sp, #20]
 80091bc:	4403      	add	r3, r0
 80091be:	4405      	add	r5, r0
 80091c0:	9305      	str	r3, [sp, #20]
 80091c2:	9b04      	ldr	r3, [sp, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	dd07      	ble.n	80091d8 <_dtoa_r+0x818>
 80091c8:	ee18 1a10 	vmov	r1, s16
 80091cc:	461a      	mov	r2, r3
 80091ce:	4620      	mov	r0, r4
 80091d0:	f000 fd5a 	bl	8009c88 <__lshift>
 80091d4:	ee08 0a10 	vmov	s16, r0
 80091d8:	9b05      	ldr	r3, [sp, #20]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	dd05      	ble.n	80091ea <_dtoa_r+0x82a>
 80091de:	4631      	mov	r1, r6
 80091e0:	461a      	mov	r2, r3
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 fd50 	bl	8009c88 <__lshift>
 80091e8:	4606      	mov	r6, r0
 80091ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d06e      	beq.n	80092ce <_dtoa_r+0x90e>
 80091f0:	ee18 0a10 	vmov	r0, s16
 80091f4:	4631      	mov	r1, r6
 80091f6:	f000 fdb7 	bl	8009d68 <__mcmp>
 80091fa:	2800      	cmp	r0, #0
 80091fc:	da67      	bge.n	80092ce <_dtoa_r+0x90e>
 80091fe:	9b00      	ldr	r3, [sp, #0]
 8009200:	3b01      	subs	r3, #1
 8009202:	ee18 1a10 	vmov	r1, s16
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	220a      	movs	r2, #10
 800920a:	2300      	movs	r3, #0
 800920c:	4620      	mov	r0, r4
 800920e:	f000 fb8b 	bl	8009928 <__multadd>
 8009212:	9b08      	ldr	r3, [sp, #32]
 8009214:	ee08 0a10 	vmov	s16, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 81b1 	beq.w	8009580 <_dtoa_r+0xbc0>
 800921e:	2300      	movs	r3, #0
 8009220:	4639      	mov	r1, r7
 8009222:	220a      	movs	r2, #10
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fb7f 	bl	8009928 <__multadd>
 800922a:	9b02      	ldr	r3, [sp, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	4607      	mov	r7, r0
 8009230:	f300 808e 	bgt.w	8009350 <_dtoa_r+0x990>
 8009234:	9b06      	ldr	r3, [sp, #24]
 8009236:	2b02      	cmp	r3, #2
 8009238:	dc51      	bgt.n	80092de <_dtoa_r+0x91e>
 800923a:	e089      	b.n	8009350 <_dtoa_r+0x990>
 800923c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800923e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009242:	e74b      	b.n	80090dc <_dtoa_r+0x71c>
 8009244:	9b03      	ldr	r3, [sp, #12]
 8009246:	1e5e      	subs	r6, r3, #1
 8009248:	9b07      	ldr	r3, [sp, #28]
 800924a:	42b3      	cmp	r3, r6
 800924c:	bfbf      	itttt	lt
 800924e:	9b07      	ldrlt	r3, [sp, #28]
 8009250:	9607      	strlt	r6, [sp, #28]
 8009252:	1af2      	sublt	r2, r6, r3
 8009254:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009256:	bfb6      	itet	lt
 8009258:	189b      	addlt	r3, r3, r2
 800925a:	1b9e      	subge	r6, r3, r6
 800925c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800925e:	9b03      	ldr	r3, [sp, #12]
 8009260:	bfb8      	it	lt
 8009262:	2600      	movlt	r6, #0
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfb7      	itett	lt
 8009268:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800926c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009270:	1a9d      	sublt	r5, r3, r2
 8009272:	2300      	movlt	r3, #0
 8009274:	e734      	b.n	80090e0 <_dtoa_r+0x720>
 8009276:	9e07      	ldr	r6, [sp, #28]
 8009278:	9d04      	ldr	r5, [sp, #16]
 800927a:	9f08      	ldr	r7, [sp, #32]
 800927c:	e73b      	b.n	80090f6 <_dtoa_r+0x736>
 800927e:	9a07      	ldr	r2, [sp, #28]
 8009280:	e767      	b.n	8009152 <_dtoa_r+0x792>
 8009282:	9b06      	ldr	r3, [sp, #24]
 8009284:	2b01      	cmp	r3, #1
 8009286:	dc18      	bgt.n	80092ba <_dtoa_r+0x8fa>
 8009288:	f1ba 0f00 	cmp.w	sl, #0
 800928c:	d115      	bne.n	80092ba <_dtoa_r+0x8fa>
 800928e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009292:	b993      	cbnz	r3, 80092ba <_dtoa_r+0x8fa>
 8009294:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009298:	0d1b      	lsrs	r3, r3, #20
 800929a:	051b      	lsls	r3, r3, #20
 800929c:	b183      	cbz	r3, 80092c0 <_dtoa_r+0x900>
 800929e:	9b04      	ldr	r3, [sp, #16]
 80092a0:	3301      	adds	r3, #1
 80092a2:	9304      	str	r3, [sp, #16]
 80092a4:	9b05      	ldr	r3, [sp, #20]
 80092a6:	3301      	adds	r3, #1
 80092a8:	9305      	str	r3, [sp, #20]
 80092aa:	f04f 0801 	mov.w	r8, #1
 80092ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f47f af6a 	bne.w	800918a <_dtoa_r+0x7ca>
 80092b6:	2001      	movs	r0, #1
 80092b8:	e76f      	b.n	800919a <_dtoa_r+0x7da>
 80092ba:	f04f 0800 	mov.w	r8, #0
 80092be:	e7f6      	b.n	80092ae <_dtoa_r+0x8ee>
 80092c0:	4698      	mov	r8, r3
 80092c2:	e7f4      	b.n	80092ae <_dtoa_r+0x8ee>
 80092c4:	f43f af7d 	beq.w	80091c2 <_dtoa_r+0x802>
 80092c8:	4618      	mov	r0, r3
 80092ca:	301c      	adds	r0, #28
 80092cc:	e772      	b.n	80091b4 <_dtoa_r+0x7f4>
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	dc37      	bgt.n	8009344 <_dtoa_r+0x984>
 80092d4:	9b06      	ldr	r3, [sp, #24]
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	dd34      	ble.n	8009344 <_dtoa_r+0x984>
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	9302      	str	r3, [sp, #8]
 80092de:	9b02      	ldr	r3, [sp, #8]
 80092e0:	b96b      	cbnz	r3, 80092fe <_dtoa_r+0x93e>
 80092e2:	4631      	mov	r1, r6
 80092e4:	2205      	movs	r2, #5
 80092e6:	4620      	mov	r0, r4
 80092e8:	f000 fb1e 	bl	8009928 <__multadd>
 80092ec:	4601      	mov	r1, r0
 80092ee:	4606      	mov	r6, r0
 80092f0:	ee18 0a10 	vmov	r0, s16
 80092f4:	f000 fd38 	bl	8009d68 <__mcmp>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	f73f adbb 	bgt.w	8008e74 <_dtoa_r+0x4b4>
 80092fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009300:	9d01      	ldr	r5, [sp, #4]
 8009302:	43db      	mvns	r3, r3
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	f04f 0800 	mov.w	r8, #0
 800930a:	4631      	mov	r1, r6
 800930c:	4620      	mov	r0, r4
 800930e:	f000 fae9 	bl	80098e4 <_Bfree>
 8009312:	2f00      	cmp	r7, #0
 8009314:	f43f aea4 	beq.w	8009060 <_dtoa_r+0x6a0>
 8009318:	f1b8 0f00 	cmp.w	r8, #0
 800931c:	d005      	beq.n	800932a <_dtoa_r+0x96a>
 800931e:	45b8      	cmp	r8, r7
 8009320:	d003      	beq.n	800932a <_dtoa_r+0x96a>
 8009322:	4641      	mov	r1, r8
 8009324:	4620      	mov	r0, r4
 8009326:	f000 fadd 	bl	80098e4 <_Bfree>
 800932a:	4639      	mov	r1, r7
 800932c:	4620      	mov	r0, r4
 800932e:	f000 fad9 	bl	80098e4 <_Bfree>
 8009332:	e695      	b.n	8009060 <_dtoa_r+0x6a0>
 8009334:	2600      	movs	r6, #0
 8009336:	4637      	mov	r7, r6
 8009338:	e7e1      	b.n	80092fe <_dtoa_r+0x93e>
 800933a:	9700      	str	r7, [sp, #0]
 800933c:	4637      	mov	r7, r6
 800933e:	e599      	b.n	8008e74 <_dtoa_r+0x4b4>
 8009340:	40240000 	.word	0x40240000
 8009344:	9b08      	ldr	r3, [sp, #32]
 8009346:	2b00      	cmp	r3, #0
 8009348:	f000 80ca 	beq.w	80094e0 <_dtoa_r+0xb20>
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	9302      	str	r3, [sp, #8]
 8009350:	2d00      	cmp	r5, #0
 8009352:	dd05      	ble.n	8009360 <_dtoa_r+0x9a0>
 8009354:	4639      	mov	r1, r7
 8009356:	462a      	mov	r2, r5
 8009358:	4620      	mov	r0, r4
 800935a:	f000 fc95 	bl	8009c88 <__lshift>
 800935e:	4607      	mov	r7, r0
 8009360:	f1b8 0f00 	cmp.w	r8, #0
 8009364:	d05b      	beq.n	800941e <_dtoa_r+0xa5e>
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	4620      	mov	r0, r4
 800936a:	f000 fa7b 	bl	8009864 <_Balloc>
 800936e:	4605      	mov	r5, r0
 8009370:	b928      	cbnz	r0, 800937e <_dtoa_r+0x9be>
 8009372:	4b87      	ldr	r3, [pc, #540]	; (8009590 <_dtoa_r+0xbd0>)
 8009374:	4602      	mov	r2, r0
 8009376:	f240 21ea 	movw	r1, #746	; 0x2ea
 800937a:	f7ff bb3b 	b.w	80089f4 <_dtoa_r+0x34>
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	3202      	adds	r2, #2
 8009382:	0092      	lsls	r2, r2, #2
 8009384:	f107 010c 	add.w	r1, r7, #12
 8009388:	300c      	adds	r0, #12
 800938a:	f7fe fc02 	bl	8007b92 <memcpy>
 800938e:	2201      	movs	r2, #1
 8009390:	4629      	mov	r1, r5
 8009392:	4620      	mov	r0, r4
 8009394:	f000 fc78 	bl	8009c88 <__lshift>
 8009398:	9b01      	ldr	r3, [sp, #4]
 800939a:	f103 0901 	add.w	r9, r3, #1
 800939e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80093a2:	4413      	add	r3, r2
 80093a4:	9305      	str	r3, [sp, #20]
 80093a6:	f00a 0301 	and.w	r3, sl, #1
 80093aa:	46b8      	mov	r8, r7
 80093ac:	9304      	str	r3, [sp, #16]
 80093ae:	4607      	mov	r7, r0
 80093b0:	4631      	mov	r1, r6
 80093b2:	ee18 0a10 	vmov	r0, s16
 80093b6:	f7ff fa75 	bl	80088a4 <quorem>
 80093ba:	4641      	mov	r1, r8
 80093bc:	9002      	str	r0, [sp, #8]
 80093be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80093c2:	ee18 0a10 	vmov	r0, s16
 80093c6:	f000 fccf 	bl	8009d68 <__mcmp>
 80093ca:	463a      	mov	r2, r7
 80093cc:	9003      	str	r0, [sp, #12]
 80093ce:	4631      	mov	r1, r6
 80093d0:	4620      	mov	r0, r4
 80093d2:	f000 fce5 	bl	8009da0 <__mdiff>
 80093d6:	68c2      	ldr	r2, [r0, #12]
 80093d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80093dc:	4605      	mov	r5, r0
 80093de:	bb02      	cbnz	r2, 8009422 <_dtoa_r+0xa62>
 80093e0:	4601      	mov	r1, r0
 80093e2:	ee18 0a10 	vmov	r0, s16
 80093e6:	f000 fcbf 	bl	8009d68 <__mcmp>
 80093ea:	4602      	mov	r2, r0
 80093ec:	4629      	mov	r1, r5
 80093ee:	4620      	mov	r0, r4
 80093f0:	9207      	str	r2, [sp, #28]
 80093f2:	f000 fa77 	bl	80098e4 <_Bfree>
 80093f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80093fa:	ea43 0102 	orr.w	r1, r3, r2
 80093fe:	9b04      	ldr	r3, [sp, #16]
 8009400:	430b      	orrs	r3, r1
 8009402:	464d      	mov	r5, r9
 8009404:	d10f      	bne.n	8009426 <_dtoa_r+0xa66>
 8009406:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800940a:	d02a      	beq.n	8009462 <_dtoa_r+0xaa2>
 800940c:	9b03      	ldr	r3, [sp, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	dd02      	ble.n	8009418 <_dtoa_r+0xa58>
 8009412:	9b02      	ldr	r3, [sp, #8]
 8009414:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009418:	f88b a000 	strb.w	sl, [fp]
 800941c:	e775      	b.n	800930a <_dtoa_r+0x94a>
 800941e:	4638      	mov	r0, r7
 8009420:	e7ba      	b.n	8009398 <_dtoa_r+0x9d8>
 8009422:	2201      	movs	r2, #1
 8009424:	e7e2      	b.n	80093ec <_dtoa_r+0xa2c>
 8009426:	9b03      	ldr	r3, [sp, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	db04      	blt.n	8009436 <_dtoa_r+0xa76>
 800942c:	9906      	ldr	r1, [sp, #24]
 800942e:	430b      	orrs	r3, r1
 8009430:	9904      	ldr	r1, [sp, #16]
 8009432:	430b      	orrs	r3, r1
 8009434:	d122      	bne.n	800947c <_dtoa_r+0xabc>
 8009436:	2a00      	cmp	r2, #0
 8009438:	ddee      	ble.n	8009418 <_dtoa_r+0xa58>
 800943a:	ee18 1a10 	vmov	r1, s16
 800943e:	2201      	movs	r2, #1
 8009440:	4620      	mov	r0, r4
 8009442:	f000 fc21 	bl	8009c88 <__lshift>
 8009446:	4631      	mov	r1, r6
 8009448:	ee08 0a10 	vmov	s16, r0
 800944c:	f000 fc8c 	bl	8009d68 <__mcmp>
 8009450:	2800      	cmp	r0, #0
 8009452:	dc03      	bgt.n	800945c <_dtoa_r+0xa9c>
 8009454:	d1e0      	bne.n	8009418 <_dtoa_r+0xa58>
 8009456:	f01a 0f01 	tst.w	sl, #1
 800945a:	d0dd      	beq.n	8009418 <_dtoa_r+0xa58>
 800945c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009460:	d1d7      	bne.n	8009412 <_dtoa_r+0xa52>
 8009462:	2339      	movs	r3, #57	; 0x39
 8009464:	f88b 3000 	strb.w	r3, [fp]
 8009468:	462b      	mov	r3, r5
 800946a:	461d      	mov	r5, r3
 800946c:	3b01      	subs	r3, #1
 800946e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009472:	2a39      	cmp	r2, #57	; 0x39
 8009474:	d071      	beq.n	800955a <_dtoa_r+0xb9a>
 8009476:	3201      	adds	r2, #1
 8009478:	701a      	strb	r2, [r3, #0]
 800947a:	e746      	b.n	800930a <_dtoa_r+0x94a>
 800947c:	2a00      	cmp	r2, #0
 800947e:	dd07      	ble.n	8009490 <_dtoa_r+0xad0>
 8009480:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009484:	d0ed      	beq.n	8009462 <_dtoa_r+0xaa2>
 8009486:	f10a 0301 	add.w	r3, sl, #1
 800948a:	f88b 3000 	strb.w	r3, [fp]
 800948e:	e73c      	b.n	800930a <_dtoa_r+0x94a>
 8009490:	9b05      	ldr	r3, [sp, #20]
 8009492:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009496:	4599      	cmp	r9, r3
 8009498:	d047      	beq.n	800952a <_dtoa_r+0xb6a>
 800949a:	ee18 1a10 	vmov	r1, s16
 800949e:	2300      	movs	r3, #0
 80094a0:	220a      	movs	r2, #10
 80094a2:	4620      	mov	r0, r4
 80094a4:	f000 fa40 	bl	8009928 <__multadd>
 80094a8:	45b8      	cmp	r8, r7
 80094aa:	ee08 0a10 	vmov	s16, r0
 80094ae:	f04f 0300 	mov.w	r3, #0
 80094b2:	f04f 020a 	mov.w	r2, #10
 80094b6:	4641      	mov	r1, r8
 80094b8:	4620      	mov	r0, r4
 80094ba:	d106      	bne.n	80094ca <_dtoa_r+0xb0a>
 80094bc:	f000 fa34 	bl	8009928 <__multadd>
 80094c0:	4680      	mov	r8, r0
 80094c2:	4607      	mov	r7, r0
 80094c4:	f109 0901 	add.w	r9, r9, #1
 80094c8:	e772      	b.n	80093b0 <_dtoa_r+0x9f0>
 80094ca:	f000 fa2d 	bl	8009928 <__multadd>
 80094ce:	4639      	mov	r1, r7
 80094d0:	4680      	mov	r8, r0
 80094d2:	2300      	movs	r3, #0
 80094d4:	220a      	movs	r2, #10
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 fa26 	bl	8009928 <__multadd>
 80094dc:	4607      	mov	r7, r0
 80094de:	e7f1      	b.n	80094c4 <_dtoa_r+0xb04>
 80094e0:	9b03      	ldr	r3, [sp, #12]
 80094e2:	9302      	str	r3, [sp, #8]
 80094e4:	9d01      	ldr	r5, [sp, #4]
 80094e6:	ee18 0a10 	vmov	r0, s16
 80094ea:	4631      	mov	r1, r6
 80094ec:	f7ff f9da 	bl	80088a4 <quorem>
 80094f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80094f4:	9b01      	ldr	r3, [sp, #4]
 80094f6:	f805 ab01 	strb.w	sl, [r5], #1
 80094fa:	1aea      	subs	r2, r5, r3
 80094fc:	9b02      	ldr	r3, [sp, #8]
 80094fe:	4293      	cmp	r3, r2
 8009500:	dd09      	ble.n	8009516 <_dtoa_r+0xb56>
 8009502:	ee18 1a10 	vmov	r1, s16
 8009506:	2300      	movs	r3, #0
 8009508:	220a      	movs	r2, #10
 800950a:	4620      	mov	r0, r4
 800950c:	f000 fa0c 	bl	8009928 <__multadd>
 8009510:	ee08 0a10 	vmov	s16, r0
 8009514:	e7e7      	b.n	80094e6 <_dtoa_r+0xb26>
 8009516:	9b02      	ldr	r3, [sp, #8]
 8009518:	2b00      	cmp	r3, #0
 800951a:	bfc8      	it	gt
 800951c:	461d      	movgt	r5, r3
 800951e:	9b01      	ldr	r3, [sp, #4]
 8009520:	bfd8      	it	le
 8009522:	2501      	movle	r5, #1
 8009524:	441d      	add	r5, r3
 8009526:	f04f 0800 	mov.w	r8, #0
 800952a:	ee18 1a10 	vmov	r1, s16
 800952e:	2201      	movs	r2, #1
 8009530:	4620      	mov	r0, r4
 8009532:	f000 fba9 	bl	8009c88 <__lshift>
 8009536:	4631      	mov	r1, r6
 8009538:	ee08 0a10 	vmov	s16, r0
 800953c:	f000 fc14 	bl	8009d68 <__mcmp>
 8009540:	2800      	cmp	r0, #0
 8009542:	dc91      	bgt.n	8009468 <_dtoa_r+0xaa8>
 8009544:	d102      	bne.n	800954c <_dtoa_r+0xb8c>
 8009546:	f01a 0f01 	tst.w	sl, #1
 800954a:	d18d      	bne.n	8009468 <_dtoa_r+0xaa8>
 800954c:	462b      	mov	r3, r5
 800954e:	461d      	mov	r5, r3
 8009550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009554:	2a30      	cmp	r2, #48	; 0x30
 8009556:	d0fa      	beq.n	800954e <_dtoa_r+0xb8e>
 8009558:	e6d7      	b.n	800930a <_dtoa_r+0x94a>
 800955a:	9a01      	ldr	r2, [sp, #4]
 800955c:	429a      	cmp	r2, r3
 800955e:	d184      	bne.n	800946a <_dtoa_r+0xaaa>
 8009560:	9b00      	ldr	r3, [sp, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	2331      	movs	r3, #49	; 0x31
 8009568:	7013      	strb	r3, [r2, #0]
 800956a:	e6ce      	b.n	800930a <_dtoa_r+0x94a>
 800956c:	4b09      	ldr	r3, [pc, #36]	; (8009594 <_dtoa_r+0xbd4>)
 800956e:	f7ff ba95 	b.w	8008a9c <_dtoa_r+0xdc>
 8009572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009574:	2b00      	cmp	r3, #0
 8009576:	f47f aa6e 	bne.w	8008a56 <_dtoa_r+0x96>
 800957a:	4b07      	ldr	r3, [pc, #28]	; (8009598 <_dtoa_r+0xbd8>)
 800957c:	f7ff ba8e 	b.w	8008a9c <_dtoa_r+0xdc>
 8009580:	9b02      	ldr	r3, [sp, #8]
 8009582:	2b00      	cmp	r3, #0
 8009584:	dcae      	bgt.n	80094e4 <_dtoa_r+0xb24>
 8009586:	9b06      	ldr	r3, [sp, #24]
 8009588:	2b02      	cmp	r3, #2
 800958a:	f73f aea8 	bgt.w	80092de <_dtoa_r+0x91e>
 800958e:	e7a9      	b.n	80094e4 <_dtoa_r+0xb24>
 8009590:	0800adf3 	.word	0x0800adf3
 8009594:	0800ad14 	.word	0x0800ad14
 8009598:	0800ad74 	.word	0x0800ad74

0800959c <__sflush_r>:
 800959c:	898a      	ldrh	r2, [r1, #12]
 800959e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a2:	4605      	mov	r5, r0
 80095a4:	0710      	lsls	r0, r2, #28
 80095a6:	460c      	mov	r4, r1
 80095a8:	d458      	bmi.n	800965c <__sflush_r+0xc0>
 80095aa:	684b      	ldr	r3, [r1, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	dc05      	bgt.n	80095bc <__sflush_r+0x20>
 80095b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	dc02      	bgt.n	80095bc <__sflush_r+0x20>
 80095b6:	2000      	movs	r0, #0
 80095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095be:	2e00      	cmp	r6, #0
 80095c0:	d0f9      	beq.n	80095b6 <__sflush_r+0x1a>
 80095c2:	2300      	movs	r3, #0
 80095c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095c8:	682f      	ldr	r7, [r5, #0]
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	d032      	beq.n	8009634 <__sflush_r+0x98>
 80095ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	075a      	lsls	r2, r3, #29
 80095d4:	d505      	bpl.n	80095e2 <__sflush_r+0x46>
 80095d6:	6863      	ldr	r3, [r4, #4]
 80095d8:	1ac0      	subs	r0, r0, r3
 80095da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095dc:	b10b      	cbz	r3, 80095e2 <__sflush_r+0x46>
 80095de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095e0:	1ac0      	subs	r0, r0, r3
 80095e2:	2300      	movs	r3, #0
 80095e4:	4602      	mov	r2, r0
 80095e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095e8:	6a21      	ldr	r1, [r4, #32]
 80095ea:	4628      	mov	r0, r5
 80095ec:	47b0      	blx	r6
 80095ee:	1c43      	adds	r3, r0, #1
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	d106      	bne.n	8009602 <__sflush_r+0x66>
 80095f4:	6829      	ldr	r1, [r5, #0]
 80095f6:	291d      	cmp	r1, #29
 80095f8:	d82c      	bhi.n	8009654 <__sflush_r+0xb8>
 80095fa:	4a2a      	ldr	r2, [pc, #168]	; (80096a4 <__sflush_r+0x108>)
 80095fc:	40ca      	lsrs	r2, r1
 80095fe:	07d6      	lsls	r6, r2, #31
 8009600:	d528      	bpl.n	8009654 <__sflush_r+0xb8>
 8009602:	2200      	movs	r2, #0
 8009604:	6062      	str	r2, [r4, #4]
 8009606:	04d9      	lsls	r1, r3, #19
 8009608:	6922      	ldr	r2, [r4, #16]
 800960a:	6022      	str	r2, [r4, #0]
 800960c:	d504      	bpl.n	8009618 <__sflush_r+0x7c>
 800960e:	1c42      	adds	r2, r0, #1
 8009610:	d101      	bne.n	8009616 <__sflush_r+0x7a>
 8009612:	682b      	ldr	r3, [r5, #0]
 8009614:	b903      	cbnz	r3, 8009618 <__sflush_r+0x7c>
 8009616:	6560      	str	r0, [r4, #84]	; 0x54
 8009618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800961a:	602f      	str	r7, [r5, #0]
 800961c:	2900      	cmp	r1, #0
 800961e:	d0ca      	beq.n	80095b6 <__sflush_r+0x1a>
 8009620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009624:	4299      	cmp	r1, r3
 8009626:	d002      	beq.n	800962e <__sflush_r+0x92>
 8009628:	4628      	mov	r0, r5
 800962a:	f000 fcb5 	bl	8009f98 <_free_r>
 800962e:	2000      	movs	r0, #0
 8009630:	6360      	str	r0, [r4, #52]	; 0x34
 8009632:	e7c1      	b.n	80095b8 <__sflush_r+0x1c>
 8009634:	6a21      	ldr	r1, [r4, #32]
 8009636:	2301      	movs	r3, #1
 8009638:	4628      	mov	r0, r5
 800963a:	47b0      	blx	r6
 800963c:	1c41      	adds	r1, r0, #1
 800963e:	d1c7      	bne.n	80095d0 <__sflush_r+0x34>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0c4      	beq.n	80095d0 <__sflush_r+0x34>
 8009646:	2b1d      	cmp	r3, #29
 8009648:	d001      	beq.n	800964e <__sflush_r+0xb2>
 800964a:	2b16      	cmp	r3, #22
 800964c:	d101      	bne.n	8009652 <__sflush_r+0xb6>
 800964e:	602f      	str	r7, [r5, #0]
 8009650:	e7b1      	b.n	80095b6 <__sflush_r+0x1a>
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009658:	81a3      	strh	r3, [r4, #12]
 800965a:	e7ad      	b.n	80095b8 <__sflush_r+0x1c>
 800965c:	690f      	ldr	r7, [r1, #16]
 800965e:	2f00      	cmp	r7, #0
 8009660:	d0a9      	beq.n	80095b6 <__sflush_r+0x1a>
 8009662:	0793      	lsls	r3, r2, #30
 8009664:	680e      	ldr	r6, [r1, #0]
 8009666:	bf08      	it	eq
 8009668:	694b      	ldreq	r3, [r1, #20]
 800966a:	600f      	str	r7, [r1, #0]
 800966c:	bf18      	it	ne
 800966e:	2300      	movne	r3, #0
 8009670:	eba6 0807 	sub.w	r8, r6, r7
 8009674:	608b      	str	r3, [r1, #8]
 8009676:	f1b8 0f00 	cmp.w	r8, #0
 800967a:	dd9c      	ble.n	80095b6 <__sflush_r+0x1a>
 800967c:	6a21      	ldr	r1, [r4, #32]
 800967e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009680:	4643      	mov	r3, r8
 8009682:	463a      	mov	r2, r7
 8009684:	4628      	mov	r0, r5
 8009686:	47b0      	blx	r6
 8009688:	2800      	cmp	r0, #0
 800968a:	dc06      	bgt.n	800969a <__sflush_r+0xfe>
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	f04f 30ff 	mov.w	r0, #4294967295
 8009698:	e78e      	b.n	80095b8 <__sflush_r+0x1c>
 800969a:	4407      	add	r7, r0
 800969c:	eba8 0800 	sub.w	r8, r8, r0
 80096a0:	e7e9      	b.n	8009676 <__sflush_r+0xda>
 80096a2:	bf00      	nop
 80096a4:	20400001 	.word	0x20400001

080096a8 <_fflush_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	690b      	ldr	r3, [r1, #16]
 80096ac:	4605      	mov	r5, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	b913      	cbnz	r3, 80096b8 <_fflush_r+0x10>
 80096b2:	2500      	movs	r5, #0
 80096b4:	4628      	mov	r0, r5
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	b118      	cbz	r0, 80096c2 <_fflush_r+0x1a>
 80096ba:	6983      	ldr	r3, [r0, #24]
 80096bc:	b90b      	cbnz	r3, 80096c2 <_fflush_r+0x1a>
 80096be:	f7fe f9a3 	bl	8007a08 <__sinit>
 80096c2:	4b14      	ldr	r3, [pc, #80]	; (8009714 <_fflush_r+0x6c>)
 80096c4:	429c      	cmp	r4, r3
 80096c6:	d11b      	bne.n	8009700 <_fflush_r+0x58>
 80096c8:	686c      	ldr	r4, [r5, #4]
 80096ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d0ef      	beq.n	80096b2 <_fflush_r+0xa>
 80096d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096d4:	07d0      	lsls	r0, r2, #31
 80096d6:	d404      	bmi.n	80096e2 <_fflush_r+0x3a>
 80096d8:	0599      	lsls	r1, r3, #22
 80096da:	d402      	bmi.n	80096e2 <_fflush_r+0x3a>
 80096dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096de:	f7fe fa56 	bl	8007b8e <__retarget_lock_acquire_recursive>
 80096e2:	4628      	mov	r0, r5
 80096e4:	4621      	mov	r1, r4
 80096e6:	f7ff ff59 	bl	800959c <__sflush_r>
 80096ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096ec:	07da      	lsls	r2, r3, #31
 80096ee:	4605      	mov	r5, r0
 80096f0:	d4e0      	bmi.n	80096b4 <_fflush_r+0xc>
 80096f2:	89a3      	ldrh	r3, [r4, #12]
 80096f4:	059b      	lsls	r3, r3, #22
 80096f6:	d4dd      	bmi.n	80096b4 <_fflush_r+0xc>
 80096f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096fa:	f7fe fa49 	bl	8007b90 <__retarget_lock_release_recursive>
 80096fe:	e7d9      	b.n	80096b4 <_fflush_r+0xc>
 8009700:	4b05      	ldr	r3, [pc, #20]	; (8009718 <_fflush_r+0x70>)
 8009702:	429c      	cmp	r4, r3
 8009704:	d101      	bne.n	800970a <_fflush_r+0x62>
 8009706:	68ac      	ldr	r4, [r5, #8]
 8009708:	e7df      	b.n	80096ca <_fflush_r+0x22>
 800970a:	4b04      	ldr	r3, [pc, #16]	; (800971c <_fflush_r+0x74>)
 800970c:	429c      	cmp	r4, r3
 800970e:	bf08      	it	eq
 8009710:	68ec      	ldreq	r4, [r5, #12]
 8009712:	e7da      	b.n	80096ca <_fflush_r+0x22>
 8009714:	0800acc0 	.word	0x0800acc0
 8009718:	0800ace0 	.word	0x0800ace0
 800971c:	0800aca0 	.word	0x0800aca0

08009720 <fiprintf>:
 8009720:	b40e      	push	{r1, r2, r3}
 8009722:	b503      	push	{r0, r1, lr}
 8009724:	4601      	mov	r1, r0
 8009726:	ab03      	add	r3, sp, #12
 8009728:	4805      	ldr	r0, [pc, #20]	; (8009740 <fiprintf+0x20>)
 800972a:	f853 2b04 	ldr.w	r2, [r3], #4
 800972e:	6800      	ldr	r0, [r0, #0]
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	f000 fe03 	bl	800a33c <_vfiprintf_r>
 8009736:	b002      	add	sp, #8
 8009738:	f85d eb04 	ldr.w	lr, [sp], #4
 800973c:	b003      	add	sp, #12
 800973e:	4770      	bx	lr
 8009740:	20000074 	.word	0x20000074

08009744 <_localeconv_r>:
 8009744:	4800      	ldr	r0, [pc, #0]	; (8009748 <_localeconv_r+0x4>)
 8009746:	4770      	bx	lr
 8009748:	200001c8 	.word	0x200001c8

0800974c <_lseek_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4d07      	ldr	r5, [pc, #28]	; (800976c <_lseek_r+0x20>)
 8009750:	4604      	mov	r4, r0
 8009752:	4608      	mov	r0, r1
 8009754:	4611      	mov	r1, r2
 8009756:	2200      	movs	r2, #0
 8009758:	602a      	str	r2, [r5, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	f7fe f83f 	bl	80077de <_lseek>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d102      	bne.n	800976a <_lseek_r+0x1e>
 8009764:	682b      	ldr	r3, [r5, #0]
 8009766:	b103      	cbz	r3, 800976a <_lseek_r+0x1e>
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	200004f4 	.word	0x200004f4

08009770 <__swhatbuf_r>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	460e      	mov	r6, r1
 8009774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009778:	2900      	cmp	r1, #0
 800977a:	b096      	sub	sp, #88	; 0x58
 800977c:	4614      	mov	r4, r2
 800977e:	461d      	mov	r5, r3
 8009780:	da08      	bge.n	8009794 <__swhatbuf_r+0x24>
 8009782:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	602a      	str	r2, [r5, #0]
 800978a:	061a      	lsls	r2, r3, #24
 800978c:	d410      	bmi.n	80097b0 <__swhatbuf_r+0x40>
 800978e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009792:	e00e      	b.n	80097b2 <__swhatbuf_r+0x42>
 8009794:	466a      	mov	r2, sp
 8009796:	f000 ff1b 	bl	800a5d0 <_fstat_r>
 800979a:	2800      	cmp	r0, #0
 800979c:	dbf1      	blt.n	8009782 <__swhatbuf_r+0x12>
 800979e:	9a01      	ldr	r2, [sp, #4]
 80097a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097a8:	425a      	negs	r2, r3
 80097aa:	415a      	adcs	r2, r3
 80097ac:	602a      	str	r2, [r5, #0]
 80097ae:	e7ee      	b.n	800978e <__swhatbuf_r+0x1e>
 80097b0:	2340      	movs	r3, #64	; 0x40
 80097b2:	2000      	movs	r0, #0
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	b016      	add	sp, #88	; 0x58
 80097b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080097bc <__smakebuf_r>:
 80097bc:	898b      	ldrh	r3, [r1, #12]
 80097be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097c0:	079d      	lsls	r5, r3, #30
 80097c2:	4606      	mov	r6, r0
 80097c4:	460c      	mov	r4, r1
 80097c6:	d507      	bpl.n	80097d8 <__smakebuf_r+0x1c>
 80097c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	6123      	str	r3, [r4, #16]
 80097d0:	2301      	movs	r3, #1
 80097d2:	6163      	str	r3, [r4, #20]
 80097d4:	b002      	add	sp, #8
 80097d6:	bd70      	pop	{r4, r5, r6, pc}
 80097d8:	ab01      	add	r3, sp, #4
 80097da:	466a      	mov	r2, sp
 80097dc:	f7ff ffc8 	bl	8009770 <__swhatbuf_r>
 80097e0:	9900      	ldr	r1, [sp, #0]
 80097e2:	4605      	mov	r5, r0
 80097e4:	4630      	mov	r0, r6
 80097e6:	f7fe fa0b 	bl	8007c00 <_malloc_r>
 80097ea:	b948      	cbnz	r0, 8009800 <__smakebuf_r+0x44>
 80097ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097f0:	059a      	lsls	r2, r3, #22
 80097f2:	d4ef      	bmi.n	80097d4 <__smakebuf_r+0x18>
 80097f4:	f023 0303 	bic.w	r3, r3, #3
 80097f8:	f043 0302 	orr.w	r3, r3, #2
 80097fc:	81a3      	strh	r3, [r4, #12]
 80097fe:	e7e3      	b.n	80097c8 <__smakebuf_r+0xc>
 8009800:	4b0d      	ldr	r3, [pc, #52]	; (8009838 <__smakebuf_r+0x7c>)
 8009802:	62b3      	str	r3, [r6, #40]	; 0x28
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	6020      	str	r0, [r4, #0]
 8009808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800980c:	81a3      	strh	r3, [r4, #12]
 800980e:	9b00      	ldr	r3, [sp, #0]
 8009810:	6163      	str	r3, [r4, #20]
 8009812:	9b01      	ldr	r3, [sp, #4]
 8009814:	6120      	str	r0, [r4, #16]
 8009816:	b15b      	cbz	r3, 8009830 <__smakebuf_r+0x74>
 8009818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800981c:	4630      	mov	r0, r6
 800981e:	f000 fee9 	bl	800a5f4 <_isatty_r>
 8009822:	b128      	cbz	r0, 8009830 <__smakebuf_r+0x74>
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	f023 0303 	bic.w	r3, r3, #3
 800982a:	f043 0301 	orr.w	r3, r3, #1
 800982e:	81a3      	strh	r3, [r4, #12]
 8009830:	89a0      	ldrh	r0, [r4, #12]
 8009832:	4305      	orrs	r5, r0
 8009834:	81a5      	strh	r5, [r4, #12]
 8009836:	e7cd      	b.n	80097d4 <__smakebuf_r+0x18>
 8009838:	080079a1 	.word	0x080079a1

0800983c <malloc>:
 800983c:	4b02      	ldr	r3, [pc, #8]	; (8009848 <malloc+0xc>)
 800983e:	4601      	mov	r1, r0
 8009840:	6818      	ldr	r0, [r3, #0]
 8009842:	f7fe b9dd 	b.w	8007c00 <_malloc_r>
 8009846:	bf00      	nop
 8009848:	20000074 	.word	0x20000074

0800984c <__malloc_lock>:
 800984c:	4801      	ldr	r0, [pc, #4]	; (8009854 <__malloc_lock+0x8>)
 800984e:	f7fe b99e 	b.w	8007b8e <__retarget_lock_acquire_recursive>
 8009852:	bf00      	nop
 8009854:	200004e8 	.word	0x200004e8

08009858 <__malloc_unlock>:
 8009858:	4801      	ldr	r0, [pc, #4]	; (8009860 <__malloc_unlock+0x8>)
 800985a:	f7fe b999 	b.w	8007b90 <__retarget_lock_release_recursive>
 800985e:	bf00      	nop
 8009860:	200004e8 	.word	0x200004e8

08009864 <_Balloc>:
 8009864:	b570      	push	{r4, r5, r6, lr}
 8009866:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009868:	4604      	mov	r4, r0
 800986a:	460d      	mov	r5, r1
 800986c:	b976      	cbnz	r6, 800988c <_Balloc+0x28>
 800986e:	2010      	movs	r0, #16
 8009870:	f7ff ffe4 	bl	800983c <malloc>
 8009874:	4602      	mov	r2, r0
 8009876:	6260      	str	r0, [r4, #36]	; 0x24
 8009878:	b920      	cbnz	r0, 8009884 <_Balloc+0x20>
 800987a:	4b18      	ldr	r3, [pc, #96]	; (80098dc <_Balloc+0x78>)
 800987c:	4818      	ldr	r0, [pc, #96]	; (80098e0 <_Balloc+0x7c>)
 800987e:	2166      	movs	r1, #102	; 0x66
 8009880:	f7fe ffe2 	bl	8008848 <__assert_func>
 8009884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009888:	6006      	str	r6, [r0, #0]
 800988a:	60c6      	str	r6, [r0, #12]
 800988c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800988e:	68f3      	ldr	r3, [r6, #12]
 8009890:	b183      	cbz	r3, 80098b4 <_Balloc+0x50>
 8009892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800989a:	b9b8      	cbnz	r0, 80098cc <_Balloc+0x68>
 800989c:	2101      	movs	r1, #1
 800989e:	fa01 f605 	lsl.w	r6, r1, r5
 80098a2:	1d72      	adds	r2, r6, #5
 80098a4:	0092      	lsls	r2, r2, #2
 80098a6:	4620      	mov	r0, r4
 80098a8:	f000 fb60 	bl	8009f6c <_calloc_r>
 80098ac:	b160      	cbz	r0, 80098c8 <_Balloc+0x64>
 80098ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098b2:	e00e      	b.n	80098d2 <_Balloc+0x6e>
 80098b4:	2221      	movs	r2, #33	; 0x21
 80098b6:	2104      	movs	r1, #4
 80098b8:	4620      	mov	r0, r4
 80098ba:	f000 fb57 	bl	8009f6c <_calloc_r>
 80098be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098c0:	60f0      	str	r0, [r6, #12]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e4      	bne.n	8009892 <_Balloc+0x2e>
 80098c8:	2000      	movs	r0, #0
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	6802      	ldr	r2, [r0, #0]
 80098ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098d2:	2300      	movs	r3, #0
 80098d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098d8:	e7f7      	b.n	80098ca <_Balloc+0x66>
 80098da:	bf00      	nop
 80098dc:	0800ad81 	.word	0x0800ad81
 80098e0:	0800ae04 	.word	0x0800ae04

080098e4 <_Bfree>:
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098e8:	4605      	mov	r5, r0
 80098ea:	460c      	mov	r4, r1
 80098ec:	b976      	cbnz	r6, 800990c <_Bfree+0x28>
 80098ee:	2010      	movs	r0, #16
 80098f0:	f7ff ffa4 	bl	800983c <malloc>
 80098f4:	4602      	mov	r2, r0
 80098f6:	6268      	str	r0, [r5, #36]	; 0x24
 80098f8:	b920      	cbnz	r0, 8009904 <_Bfree+0x20>
 80098fa:	4b09      	ldr	r3, [pc, #36]	; (8009920 <_Bfree+0x3c>)
 80098fc:	4809      	ldr	r0, [pc, #36]	; (8009924 <_Bfree+0x40>)
 80098fe:	218a      	movs	r1, #138	; 0x8a
 8009900:	f7fe ffa2 	bl	8008848 <__assert_func>
 8009904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009908:	6006      	str	r6, [r0, #0]
 800990a:	60c6      	str	r6, [r0, #12]
 800990c:	b13c      	cbz	r4, 800991e <_Bfree+0x3a>
 800990e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009910:	6862      	ldr	r2, [r4, #4]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009918:	6021      	str	r1, [r4, #0]
 800991a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800991e:	bd70      	pop	{r4, r5, r6, pc}
 8009920:	0800ad81 	.word	0x0800ad81
 8009924:	0800ae04 	.word	0x0800ae04

08009928 <__multadd>:
 8009928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992c:	690d      	ldr	r5, [r1, #16]
 800992e:	4607      	mov	r7, r0
 8009930:	460c      	mov	r4, r1
 8009932:	461e      	mov	r6, r3
 8009934:	f101 0c14 	add.w	ip, r1, #20
 8009938:	2000      	movs	r0, #0
 800993a:	f8dc 3000 	ldr.w	r3, [ip]
 800993e:	b299      	uxth	r1, r3
 8009940:	fb02 6101 	mla	r1, r2, r1, r6
 8009944:	0c1e      	lsrs	r6, r3, #16
 8009946:	0c0b      	lsrs	r3, r1, #16
 8009948:	fb02 3306 	mla	r3, r2, r6, r3
 800994c:	b289      	uxth	r1, r1
 800994e:	3001      	adds	r0, #1
 8009950:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009954:	4285      	cmp	r5, r0
 8009956:	f84c 1b04 	str.w	r1, [ip], #4
 800995a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800995e:	dcec      	bgt.n	800993a <__multadd+0x12>
 8009960:	b30e      	cbz	r6, 80099a6 <__multadd+0x7e>
 8009962:	68a3      	ldr	r3, [r4, #8]
 8009964:	42ab      	cmp	r3, r5
 8009966:	dc19      	bgt.n	800999c <__multadd+0x74>
 8009968:	6861      	ldr	r1, [r4, #4]
 800996a:	4638      	mov	r0, r7
 800996c:	3101      	adds	r1, #1
 800996e:	f7ff ff79 	bl	8009864 <_Balloc>
 8009972:	4680      	mov	r8, r0
 8009974:	b928      	cbnz	r0, 8009982 <__multadd+0x5a>
 8009976:	4602      	mov	r2, r0
 8009978:	4b0c      	ldr	r3, [pc, #48]	; (80099ac <__multadd+0x84>)
 800997a:	480d      	ldr	r0, [pc, #52]	; (80099b0 <__multadd+0x88>)
 800997c:	21b5      	movs	r1, #181	; 0xb5
 800997e:	f7fe ff63 	bl	8008848 <__assert_func>
 8009982:	6922      	ldr	r2, [r4, #16]
 8009984:	3202      	adds	r2, #2
 8009986:	f104 010c 	add.w	r1, r4, #12
 800998a:	0092      	lsls	r2, r2, #2
 800998c:	300c      	adds	r0, #12
 800998e:	f7fe f900 	bl	8007b92 <memcpy>
 8009992:	4621      	mov	r1, r4
 8009994:	4638      	mov	r0, r7
 8009996:	f7ff ffa5 	bl	80098e4 <_Bfree>
 800999a:	4644      	mov	r4, r8
 800999c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099a0:	3501      	adds	r5, #1
 80099a2:	615e      	str	r6, [r3, #20]
 80099a4:	6125      	str	r5, [r4, #16]
 80099a6:	4620      	mov	r0, r4
 80099a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099ac:	0800adf3 	.word	0x0800adf3
 80099b0:	0800ae04 	.word	0x0800ae04

080099b4 <__hi0bits>:
 80099b4:	0c03      	lsrs	r3, r0, #16
 80099b6:	041b      	lsls	r3, r3, #16
 80099b8:	b9d3      	cbnz	r3, 80099f0 <__hi0bits+0x3c>
 80099ba:	0400      	lsls	r0, r0, #16
 80099bc:	2310      	movs	r3, #16
 80099be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80099c2:	bf04      	itt	eq
 80099c4:	0200      	lsleq	r0, r0, #8
 80099c6:	3308      	addeq	r3, #8
 80099c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099cc:	bf04      	itt	eq
 80099ce:	0100      	lsleq	r0, r0, #4
 80099d0:	3304      	addeq	r3, #4
 80099d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099d6:	bf04      	itt	eq
 80099d8:	0080      	lsleq	r0, r0, #2
 80099da:	3302      	addeq	r3, #2
 80099dc:	2800      	cmp	r0, #0
 80099de:	db05      	blt.n	80099ec <__hi0bits+0x38>
 80099e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80099e4:	f103 0301 	add.w	r3, r3, #1
 80099e8:	bf08      	it	eq
 80099ea:	2320      	moveq	r3, #32
 80099ec:	4618      	mov	r0, r3
 80099ee:	4770      	bx	lr
 80099f0:	2300      	movs	r3, #0
 80099f2:	e7e4      	b.n	80099be <__hi0bits+0xa>

080099f4 <__lo0bits>:
 80099f4:	6803      	ldr	r3, [r0, #0]
 80099f6:	f013 0207 	ands.w	r2, r3, #7
 80099fa:	4601      	mov	r1, r0
 80099fc:	d00b      	beq.n	8009a16 <__lo0bits+0x22>
 80099fe:	07da      	lsls	r2, r3, #31
 8009a00:	d423      	bmi.n	8009a4a <__lo0bits+0x56>
 8009a02:	0798      	lsls	r0, r3, #30
 8009a04:	bf49      	itett	mi
 8009a06:	085b      	lsrmi	r3, r3, #1
 8009a08:	089b      	lsrpl	r3, r3, #2
 8009a0a:	2001      	movmi	r0, #1
 8009a0c:	600b      	strmi	r3, [r1, #0]
 8009a0e:	bf5c      	itt	pl
 8009a10:	600b      	strpl	r3, [r1, #0]
 8009a12:	2002      	movpl	r0, #2
 8009a14:	4770      	bx	lr
 8009a16:	b298      	uxth	r0, r3
 8009a18:	b9a8      	cbnz	r0, 8009a46 <__lo0bits+0x52>
 8009a1a:	0c1b      	lsrs	r3, r3, #16
 8009a1c:	2010      	movs	r0, #16
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	b90a      	cbnz	r2, 8009a26 <__lo0bits+0x32>
 8009a22:	3008      	adds	r0, #8
 8009a24:	0a1b      	lsrs	r3, r3, #8
 8009a26:	071a      	lsls	r2, r3, #28
 8009a28:	bf04      	itt	eq
 8009a2a:	091b      	lsreq	r3, r3, #4
 8009a2c:	3004      	addeq	r0, #4
 8009a2e:	079a      	lsls	r2, r3, #30
 8009a30:	bf04      	itt	eq
 8009a32:	089b      	lsreq	r3, r3, #2
 8009a34:	3002      	addeq	r0, #2
 8009a36:	07da      	lsls	r2, r3, #31
 8009a38:	d403      	bmi.n	8009a42 <__lo0bits+0x4e>
 8009a3a:	085b      	lsrs	r3, r3, #1
 8009a3c:	f100 0001 	add.w	r0, r0, #1
 8009a40:	d005      	beq.n	8009a4e <__lo0bits+0x5a>
 8009a42:	600b      	str	r3, [r1, #0]
 8009a44:	4770      	bx	lr
 8009a46:	4610      	mov	r0, r2
 8009a48:	e7e9      	b.n	8009a1e <__lo0bits+0x2a>
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	4770      	bx	lr
 8009a4e:	2020      	movs	r0, #32
 8009a50:	4770      	bx	lr
	...

08009a54 <__i2b>:
 8009a54:	b510      	push	{r4, lr}
 8009a56:	460c      	mov	r4, r1
 8009a58:	2101      	movs	r1, #1
 8009a5a:	f7ff ff03 	bl	8009864 <_Balloc>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	b928      	cbnz	r0, 8009a6e <__i2b+0x1a>
 8009a62:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <__i2b+0x24>)
 8009a64:	4805      	ldr	r0, [pc, #20]	; (8009a7c <__i2b+0x28>)
 8009a66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a6a:	f7fe feed 	bl	8008848 <__assert_func>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	6144      	str	r4, [r0, #20]
 8009a72:	6103      	str	r3, [r0, #16]
 8009a74:	bd10      	pop	{r4, pc}
 8009a76:	bf00      	nop
 8009a78:	0800adf3 	.word	0x0800adf3
 8009a7c:	0800ae04 	.word	0x0800ae04

08009a80 <__multiply>:
 8009a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	4691      	mov	r9, r2
 8009a86:	690a      	ldr	r2, [r1, #16]
 8009a88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	bfb8      	it	lt
 8009a90:	460b      	movlt	r3, r1
 8009a92:	460c      	mov	r4, r1
 8009a94:	bfbc      	itt	lt
 8009a96:	464c      	movlt	r4, r9
 8009a98:	4699      	movlt	r9, r3
 8009a9a:	6927      	ldr	r7, [r4, #16]
 8009a9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009aa0:	68a3      	ldr	r3, [r4, #8]
 8009aa2:	6861      	ldr	r1, [r4, #4]
 8009aa4:	eb07 060a 	add.w	r6, r7, sl
 8009aa8:	42b3      	cmp	r3, r6
 8009aaa:	b085      	sub	sp, #20
 8009aac:	bfb8      	it	lt
 8009aae:	3101      	addlt	r1, #1
 8009ab0:	f7ff fed8 	bl	8009864 <_Balloc>
 8009ab4:	b930      	cbnz	r0, 8009ac4 <__multiply+0x44>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	4b44      	ldr	r3, [pc, #272]	; (8009bcc <__multiply+0x14c>)
 8009aba:	4845      	ldr	r0, [pc, #276]	; (8009bd0 <__multiply+0x150>)
 8009abc:	f240 115d 	movw	r1, #349	; 0x15d
 8009ac0:	f7fe fec2 	bl	8008848 <__assert_func>
 8009ac4:	f100 0514 	add.w	r5, r0, #20
 8009ac8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009acc:	462b      	mov	r3, r5
 8009ace:	2200      	movs	r2, #0
 8009ad0:	4543      	cmp	r3, r8
 8009ad2:	d321      	bcc.n	8009b18 <__multiply+0x98>
 8009ad4:	f104 0314 	add.w	r3, r4, #20
 8009ad8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009adc:	f109 0314 	add.w	r3, r9, #20
 8009ae0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ae4:	9202      	str	r2, [sp, #8]
 8009ae6:	1b3a      	subs	r2, r7, r4
 8009ae8:	3a15      	subs	r2, #21
 8009aea:	f022 0203 	bic.w	r2, r2, #3
 8009aee:	3204      	adds	r2, #4
 8009af0:	f104 0115 	add.w	r1, r4, #21
 8009af4:	428f      	cmp	r7, r1
 8009af6:	bf38      	it	cc
 8009af8:	2204      	movcc	r2, #4
 8009afa:	9201      	str	r2, [sp, #4]
 8009afc:	9a02      	ldr	r2, [sp, #8]
 8009afe:	9303      	str	r3, [sp, #12]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d80c      	bhi.n	8009b1e <__multiply+0x9e>
 8009b04:	2e00      	cmp	r6, #0
 8009b06:	dd03      	ble.n	8009b10 <__multiply+0x90>
 8009b08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d05a      	beq.n	8009bc6 <__multiply+0x146>
 8009b10:	6106      	str	r6, [r0, #16]
 8009b12:	b005      	add	sp, #20
 8009b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b18:	f843 2b04 	str.w	r2, [r3], #4
 8009b1c:	e7d8      	b.n	8009ad0 <__multiply+0x50>
 8009b1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b22:	f1ba 0f00 	cmp.w	sl, #0
 8009b26:	d024      	beq.n	8009b72 <__multiply+0xf2>
 8009b28:	f104 0e14 	add.w	lr, r4, #20
 8009b2c:	46a9      	mov	r9, r5
 8009b2e:	f04f 0c00 	mov.w	ip, #0
 8009b32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b36:	f8d9 1000 	ldr.w	r1, [r9]
 8009b3a:	fa1f fb82 	uxth.w	fp, r2
 8009b3e:	b289      	uxth	r1, r1
 8009b40:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009b48:	f8d9 2000 	ldr.w	r2, [r9]
 8009b4c:	4461      	add	r1, ip
 8009b4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b52:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b5a:	b289      	uxth	r1, r1
 8009b5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b60:	4577      	cmp	r7, lr
 8009b62:	f849 1b04 	str.w	r1, [r9], #4
 8009b66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b6a:	d8e2      	bhi.n	8009b32 <__multiply+0xb2>
 8009b6c:	9a01      	ldr	r2, [sp, #4]
 8009b6e:	f845 c002 	str.w	ip, [r5, r2]
 8009b72:	9a03      	ldr	r2, [sp, #12]
 8009b74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b78:	3304      	adds	r3, #4
 8009b7a:	f1b9 0f00 	cmp.w	r9, #0
 8009b7e:	d020      	beq.n	8009bc2 <__multiply+0x142>
 8009b80:	6829      	ldr	r1, [r5, #0]
 8009b82:	f104 0c14 	add.w	ip, r4, #20
 8009b86:	46ae      	mov	lr, r5
 8009b88:	f04f 0a00 	mov.w	sl, #0
 8009b8c:	f8bc b000 	ldrh.w	fp, [ip]
 8009b90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b94:	fb09 220b 	mla	r2, r9, fp, r2
 8009b98:	4492      	add	sl, r2
 8009b9a:	b289      	uxth	r1, r1
 8009b9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009ba0:	f84e 1b04 	str.w	r1, [lr], #4
 8009ba4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ba8:	f8be 1000 	ldrh.w	r1, [lr]
 8009bac:	0c12      	lsrs	r2, r2, #16
 8009bae:	fb09 1102 	mla	r1, r9, r2, r1
 8009bb2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009bb6:	4567      	cmp	r7, ip
 8009bb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009bbc:	d8e6      	bhi.n	8009b8c <__multiply+0x10c>
 8009bbe:	9a01      	ldr	r2, [sp, #4]
 8009bc0:	50a9      	str	r1, [r5, r2]
 8009bc2:	3504      	adds	r5, #4
 8009bc4:	e79a      	b.n	8009afc <__multiply+0x7c>
 8009bc6:	3e01      	subs	r6, #1
 8009bc8:	e79c      	b.n	8009b04 <__multiply+0x84>
 8009bca:	bf00      	nop
 8009bcc:	0800adf3 	.word	0x0800adf3
 8009bd0:	0800ae04 	.word	0x0800ae04

08009bd4 <__pow5mult>:
 8009bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd8:	4615      	mov	r5, r2
 8009bda:	f012 0203 	ands.w	r2, r2, #3
 8009bde:	4606      	mov	r6, r0
 8009be0:	460f      	mov	r7, r1
 8009be2:	d007      	beq.n	8009bf4 <__pow5mult+0x20>
 8009be4:	4c25      	ldr	r4, [pc, #148]	; (8009c7c <__pow5mult+0xa8>)
 8009be6:	3a01      	subs	r2, #1
 8009be8:	2300      	movs	r3, #0
 8009bea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bee:	f7ff fe9b 	bl	8009928 <__multadd>
 8009bf2:	4607      	mov	r7, r0
 8009bf4:	10ad      	asrs	r5, r5, #2
 8009bf6:	d03d      	beq.n	8009c74 <__pow5mult+0xa0>
 8009bf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009bfa:	b97c      	cbnz	r4, 8009c1c <__pow5mult+0x48>
 8009bfc:	2010      	movs	r0, #16
 8009bfe:	f7ff fe1d 	bl	800983c <malloc>
 8009c02:	4602      	mov	r2, r0
 8009c04:	6270      	str	r0, [r6, #36]	; 0x24
 8009c06:	b928      	cbnz	r0, 8009c14 <__pow5mult+0x40>
 8009c08:	4b1d      	ldr	r3, [pc, #116]	; (8009c80 <__pow5mult+0xac>)
 8009c0a:	481e      	ldr	r0, [pc, #120]	; (8009c84 <__pow5mult+0xb0>)
 8009c0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c10:	f7fe fe1a 	bl	8008848 <__assert_func>
 8009c14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c18:	6004      	str	r4, [r0, #0]
 8009c1a:	60c4      	str	r4, [r0, #12]
 8009c1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c24:	b94c      	cbnz	r4, 8009c3a <__pow5mult+0x66>
 8009c26:	f240 2171 	movw	r1, #625	; 0x271
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	f7ff ff12 	bl	8009a54 <__i2b>
 8009c30:	2300      	movs	r3, #0
 8009c32:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c36:	4604      	mov	r4, r0
 8009c38:	6003      	str	r3, [r0, #0]
 8009c3a:	f04f 0900 	mov.w	r9, #0
 8009c3e:	07eb      	lsls	r3, r5, #31
 8009c40:	d50a      	bpl.n	8009c58 <__pow5mult+0x84>
 8009c42:	4639      	mov	r1, r7
 8009c44:	4622      	mov	r2, r4
 8009c46:	4630      	mov	r0, r6
 8009c48:	f7ff ff1a 	bl	8009a80 <__multiply>
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	4680      	mov	r8, r0
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7ff fe47 	bl	80098e4 <_Bfree>
 8009c56:	4647      	mov	r7, r8
 8009c58:	106d      	asrs	r5, r5, #1
 8009c5a:	d00b      	beq.n	8009c74 <__pow5mult+0xa0>
 8009c5c:	6820      	ldr	r0, [r4, #0]
 8009c5e:	b938      	cbnz	r0, 8009c70 <__pow5mult+0x9c>
 8009c60:	4622      	mov	r2, r4
 8009c62:	4621      	mov	r1, r4
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7ff ff0b 	bl	8009a80 <__multiply>
 8009c6a:	6020      	str	r0, [r4, #0]
 8009c6c:	f8c0 9000 	str.w	r9, [r0]
 8009c70:	4604      	mov	r4, r0
 8009c72:	e7e4      	b.n	8009c3e <__pow5mult+0x6a>
 8009c74:	4638      	mov	r0, r7
 8009c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c7a:	bf00      	nop
 8009c7c:	0800af50 	.word	0x0800af50
 8009c80:	0800ad81 	.word	0x0800ad81
 8009c84:	0800ae04 	.word	0x0800ae04

08009c88 <__lshift>:
 8009c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	6849      	ldr	r1, [r1, #4]
 8009c90:	6923      	ldr	r3, [r4, #16]
 8009c92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c96:	68a3      	ldr	r3, [r4, #8]
 8009c98:	4607      	mov	r7, r0
 8009c9a:	4691      	mov	r9, r2
 8009c9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ca0:	f108 0601 	add.w	r6, r8, #1
 8009ca4:	42b3      	cmp	r3, r6
 8009ca6:	db0b      	blt.n	8009cc0 <__lshift+0x38>
 8009ca8:	4638      	mov	r0, r7
 8009caa:	f7ff fddb 	bl	8009864 <_Balloc>
 8009cae:	4605      	mov	r5, r0
 8009cb0:	b948      	cbnz	r0, 8009cc6 <__lshift+0x3e>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	4b2a      	ldr	r3, [pc, #168]	; (8009d60 <__lshift+0xd8>)
 8009cb6:	482b      	ldr	r0, [pc, #172]	; (8009d64 <__lshift+0xdc>)
 8009cb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009cbc:	f7fe fdc4 	bl	8008848 <__assert_func>
 8009cc0:	3101      	adds	r1, #1
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	e7ee      	b.n	8009ca4 <__lshift+0x1c>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f100 0114 	add.w	r1, r0, #20
 8009ccc:	f100 0210 	add.w	r2, r0, #16
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	4553      	cmp	r3, sl
 8009cd4:	db37      	blt.n	8009d46 <__lshift+0xbe>
 8009cd6:	6920      	ldr	r0, [r4, #16]
 8009cd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cdc:	f104 0314 	add.w	r3, r4, #20
 8009ce0:	f019 091f 	ands.w	r9, r9, #31
 8009ce4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ce8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009cec:	d02f      	beq.n	8009d4e <__lshift+0xc6>
 8009cee:	f1c9 0e20 	rsb	lr, r9, #32
 8009cf2:	468a      	mov	sl, r1
 8009cf4:	f04f 0c00 	mov.w	ip, #0
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	fa02 f209 	lsl.w	r2, r2, r9
 8009cfe:	ea42 020c 	orr.w	r2, r2, ip
 8009d02:	f84a 2b04 	str.w	r2, [sl], #4
 8009d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d0a:	4298      	cmp	r0, r3
 8009d0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009d10:	d8f2      	bhi.n	8009cf8 <__lshift+0x70>
 8009d12:	1b03      	subs	r3, r0, r4
 8009d14:	3b15      	subs	r3, #21
 8009d16:	f023 0303 	bic.w	r3, r3, #3
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	f104 0215 	add.w	r2, r4, #21
 8009d20:	4290      	cmp	r0, r2
 8009d22:	bf38      	it	cc
 8009d24:	2304      	movcc	r3, #4
 8009d26:	f841 c003 	str.w	ip, [r1, r3]
 8009d2a:	f1bc 0f00 	cmp.w	ip, #0
 8009d2e:	d001      	beq.n	8009d34 <__lshift+0xac>
 8009d30:	f108 0602 	add.w	r6, r8, #2
 8009d34:	3e01      	subs	r6, #1
 8009d36:	4638      	mov	r0, r7
 8009d38:	612e      	str	r6, [r5, #16]
 8009d3a:	4621      	mov	r1, r4
 8009d3c:	f7ff fdd2 	bl	80098e4 <_Bfree>
 8009d40:	4628      	mov	r0, r5
 8009d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d46:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	e7c1      	b.n	8009cd2 <__lshift+0x4a>
 8009d4e:	3904      	subs	r1, #4
 8009d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d54:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d58:	4298      	cmp	r0, r3
 8009d5a:	d8f9      	bhi.n	8009d50 <__lshift+0xc8>
 8009d5c:	e7ea      	b.n	8009d34 <__lshift+0xac>
 8009d5e:	bf00      	nop
 8009d60:	0800adf3 	.word	0x0800adf3
 8009d64:	0800ae04 	.word	0x0800ae04

08009d68 <__mcmp>:
 8009d68:	b530      	push	{r4, r5, lr}
 8009d6a:	6902      	ldr	r2, [r0, #16]
 8009d6c:	690c      	ldr	r4, [r1, #16]
 8009d6e:	1b12      	subs	r2, r2, r4
 8009d70:	d10e      	bne.n	8009d90 <__mcmp+0x28>
 8009d72:	f100 0314 	add.w	r3, r0, #20
 8009d76:	3114      	adds	r1, #20
 8009d78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d88:	42a5      	cmp	r5, r4
 8009d8a:	d003      	beq.n	8009d94 <__mcmp+0x2c>
 8009d8c:	d305      	bcc.n	8009d9a <__mcmp+0x32>
 8009d8e:	2201      	movs	r2, #1
 8009d90:	4610      	mov	r0, r2
 8009d92:	bd30      	pop	{r4, r5, pc}
 8009d94:	4283      	cmp	r3, r0
 8009d96:	d3f3      	bcc.n	8009d80 <__mcmp+0x18>
 8009d98:	e7fa      	b.n	8009d90 <__mcmp+0x28>
 8009d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9e:	e7f7      	b.n	8009d90 <__mcmp+0x28>

08009da0 <__mdiff>:
 8009da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	460c      	mov	r4, r1
 8009da6:	4606      	mov	r6, r0
 8009da8:	4611      	mov	r1, r2
 8009daa:	4620      	mov	r0, r4
 8009dac:	4690      	mov	r8, r2
 8009dae:	f7ff ffdb 	bl	8009d68 <__mcmp>
 8009db2:	1e05      	subs	r5, r0, #0
 8009db4:	d110      	bne.n	8009dd8 <__mdiff+0x38>
 8009db6:	4629      	mov	r1, r5
 8009db8:	4630      	mov	r0, r6
 8009dba:	f7ff fd53 	bl	8009864 <_Balloc>
 8009dbe:	b930      	cbnz	r0, 8009dce <__mdiff+0x2e>
 8009dc0:	4b3a      	ldr	r3, [pc, #232]	; (8009eac <__mdiff+0x10c>)
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	f240 2132 	movw	r1, #562	; 0x232
 8009dc8:	4839      	ldr	r0, [pc, #228]	; (8009eb0 <__mdiff+0x110>)
 8009dca:	f7fe fd3d 	bl	8008848 <__assert_func>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd8:	bfa4      	itt	ge
 8009dda:	4643      	movge	r3, r8
 8009ddc:	46a0      	movge	r8, r4
 8009dde:	4630      	mov	r0, r6
 8009de0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009de4:	bfa6      	itte	ge
 8009de6:	461c      	movge	r4, r3
 8009de8:	2500      	movge	r5, #0
 8009dea:	2501      	movlt	r5, #1
 8009dec:	f7ff fd3a 	bl	8009864 <_Balloc>
 8009df0:	b920      	cbnz	r0, 8009dfc <__mdiff+0x5c>
 8009df2:	4b2e      	ldr	r3, [pc, #184]	; (8009eac <__mdiff+0x10c>)
 8009df4:	4602      	mov	r2, r0
 8009df6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009dfa:	e7e5      	b.n	8009dc8 <__mdiff+0x28>
 8009dfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e00:	6926      	ldr	r6, [r4, #16]
 8009e02:	60c5      	str	r5, [r0, #12]
 8009e04:	f104 0914 	add.w	r9, r4, #20
 8009e08:	f108 0514 	add.w	r5, r8, #20
 8009e0c:	f100 0e14 	add.w	lr, r0, #20
 8009e10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e18:	f108 0210 	add.w	r2, r8, #16
 8009e1c:	46f2      	mov	sl, lr
 8009e1e:	2100      	movs	r1, #0
 8009e20:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e28:	fa1f f883 	uxth.w	r8, r3
 8009e2c:	fa11 f18b 	uxtah	r1, r1, fp
 8009e30:	0c1b      	lsrs	r3, r3, #16
 8009e32:	eba1 0808 	sub.w	r8, r1, r8
 8009e36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e3e:	fa1f f888 	uxth.w	r8, r8
 8009e42:	1419      	asrs	r1, r3, #16
 8009e44:	454e      	cmp	r6, r9
 8009e46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e4a:	f84a 3b04 	str.w	r3, [sl], #4
 8009e4e:	d8e7      	bhi.n	8009e20 <__mdiff+0x80>
 8009e50:	1b33      	subs	r3, r6, r4
 8009e52:	3b15      	subs	r3, #21
 8009e54:	f023 0303 	bic.w	r3, r3, #3
 8009e58:	3304      	adds	r3, #4
 8009e5a:	3415      	adds	r4, #21
 8009e5c:	42a6      	cmp	r6, r4
 8009e5e:	bf38      	it	cc
 8009e60:	2304      	movcc	r3, #4
 8009e62:	441d      	add	r5, r3
 8009e64:	4473      	add	r3, lr
 8009e66:	469e      	mov	lr, r3
 8009e68:	462e      	mov	r6, r5
 8009e6a:	4566      	cmp	r6, ip
 8009e6c:	d30e      	bcc.n	8009e8c <__mdiff+0xec>
 8009e6e:	f10c 0203 	add.w	r2, ip, #3
 8009e72:	1b52      	subs	r2, r2, r5
 8009e74:	f022 0203 	bic.w	r2, r2, #3
 8009e78:	3d03      	subs	r5, #3
 8009e7a:	45ac      	cmp	ip, r5
 8009e7c:	bf38      	it	cc
 8009e7e:	2200      	movcc	r2, #0
 8009e80:	441a      	add	r2, r3
 8009e82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e86:	b17b      	cbz	r3, 8009ea8 <__mdiff+0x108>
 8009e88:	6107      	str	r7, [r0, #16]
 8009e8a:	e7a3      	b.n	8009dd4 <__mdiff+0x34>
 8009e8c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e90:	fa11 f288 	uxtah	r2, r1, r8
 8009e94:	1414      	asrs	r4, r2, #16
 8009e96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e9a:	b292      	uxth	r2, r2
 8009e9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ea0:	f84e 2b04 	str.w	r2, [lr], #4
 8009ea4:	1421      	asrs	r1, r4, #16
 8009ea6:	e7e0      	b.n	8009e6a <__mdiff+0xca>
 8009ea8:	3f01      	subs	r7, #1
 8009eaa:	e7ea      	b.n	8009e82 <__mdiff+0xe2>
 8009eac:	0800adf3 	.word	0x0800adf3
 8009eb0:	0800ae04 	.word	0x0800ae04

08009eb4 <__d2b>:
 8009eb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009eb8:	4689      	mov	r9, r1
 8009eba:	2101      	movs	r1, #1
 8009ebc:	ec57 6b10 	vmov	r6, r7, d0
 8009ec0:	4690      	mov	r8, r2
 8009ec2:	f7ff fccf 	bl	8009864 <_Balloc>
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	b930      	cbnz	r0, 8009ed8 <__d2b+0x24>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	4b25      	ldr	r3, [pc, #148]	; (8009f64 <__d2b+0xb0>)
 8009ece:	4826      	ldr	r0, [pc, #152]	; (8009f68 <__d2b+0xb4>)
 8009ed0:	f240 310a 	movw	r1, #778	; 0x30a
 8009ed4:	f7fe fcb8 	bl	8008848 <__assert_func>
 8009ed8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009edc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ee0:	bb35      	cbnz	r5, 8009f30 <__d2b+0x7c>
 8009ee2:	2e00      	cmp	r6, #0
 8009ee4:	9301      	str	r3, [sp, #4]
 8009ee6:	d028      	beq.n	8009f3a <__d2b+0x86>
 8009ee8:	4668      	mov	r0, sp
 8009eea:	9600      	str	r6, [sp, #0]
 8009eec:	f7ff fd82 	bl	80099f4 <__lo0bits>
 8009ef0:	9900      	ldr	r1, [sp, #0]
 8009ef2:	b300      	cbz	r0, 8009f36 <__d2b+0x82>
 8009ef4:	9a01      	ldr	r2, [sp, #4]
 8009ef6:	f1c0 0320 	rsb	r3, r0, #32
 8009efa:	fa02 f303 	lsl.w	r3, r2, r3
 8009efe:	430b      	orrs	r3, r1
 8009f00:	40c2      	lsrs	r2, r0
 8009f02:	6163      	str	r3, [r4, #20]
 8009f04:	9201      	str	r2, [sp, #4]
 8009f06:	9b01      	ldr	r3, [sp, #4]
 8009f08:	61a3      	str	r3, [r4, #24]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	bf14      	ite	ne
 8009f0e:	2202      	movne	r2, #2
 8009f10:	2201      	moveq	r2, #1
 8009f12:	6122      	str	r2, [r4, #16]
 8009f14:	b1d5      	cbz	r5, 8009f4c <__d2b+0x98>
 8009f16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f1a:	4405      	add	r5, r0
 8009f1c:	f8c9 5000 	str.w	r5, [r9]
 8009f20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f24:	f8c8 0000 	str.w	r0, [r8]
 8009f28:	4620      	mov	r0, r4
 8009f2a:	b003      	add	sp, #12
 8009f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f34:	e7d5      	b.n	8009ee2 <__d2b+0x2e>
 8009f36:	6161      	str	r1, [r4, #20]
 8009f38:	e7e5      	b.n	8009f06 <__d2b+0x52>
 8009f3a:	a801      	add	r0, sp, #4
 8009f3c:	f7ff fd5a 	bl	80099f4 <__lo0bits>
 8009f40:	9b01      	ldr	r3, [sp, #4]
 8009f42:	6163      	str	r3, [r4, #20]
 8009f44:	2201      	movs	r2, #1
 8009f46:	6122      	str	r2, [r4, #16]
 8009f48:	3020      	adds	r0, #32
 8009f4a:	e7e3      	b.n	8009f14 <__d2b+0x60>
 8009f4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f54:	f8c9 0000 	str.w	r0, [r9]
 8009f58:	6918      	ldr	r0, [r3, #16]
 8009f5a:	f7ff fd2b 	bl	80099b4 <__hi0bits>
 8009f5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f62:	e7df      	b.n	8009f24 <__d2b+0x70>
 8009f64:	0800adf3 	.word	0x0800adf3
 8009f68:	0800ae04 	.word	0x0800ae04

08009f6c <_calloc_r>:
 8009f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f6e:	fba1 2402 	umull	r2, r4, r1, r2
 8009f72:	b94c      	cbnz	r4, 8009f88 <_calloc_r+0x1c>
 8009f74:	4611      	mov	r1, r2
 8009f76:	9201      	str	r2, [sp, #4]
 8009f78:	f7fd fe42 	bl	8007c00 <_malloc_r>
 8009f7c:	9a01      	ldr	r2, [sp, #4]
 8009f7e:	4605      	mov	r5, r0
 8009f80:	b930      	cbnz	r0, 8009f90 <_calloc_r+0x24>
 8009f82:	4628      	mov	r0, r5
 8009f84:	b003      	add	sp, #12
 8009f86:	bd30      	pop	{r4, r5, pc}
 8009f88:	220c      	movs	r2, #12
 8009f8a:	6002      	str	r2, [r0, #0]
 8009f8c:	2500      	movs	r5, #0
 8009f8e:	e7f8      	b.n	8009f82 <_calloc_r+0x16>
 8009f90:	4621      	mov	r1, r4
 8009f92:	f7fd fe0c 	bl	8007bae <memset>
 8009f96:	e7f4      	b.n	8009f82 <_calloc_r+0x16>

08009f98 <_free_r>:
 8009f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f9a:	2900      	cmp	r1, #0
 8009f9c:	d044      	beq.n	800a028 <_free_r+0x90>
 8009f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fa2:	9001      	str	r0, [sp, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f1a1 0404 	sub.w	r4, r1, #4
 8009faa:	bfb8      	it	lt
 8009fac:	18e4      	addlt	r4, r4, r3
 8009fae:	f7ff fc4d 	bl	800984c <__malloc_lock>
 8009fb2:	4a1e      	ldr	r2, [pc, #120]	; (800a02c <_free_r+0x94>)
 8009fb4:	9801      	ldr	r0, [sp, #4]
 8009fb6:	6813      	ldr	r3, [r2, #0]
 8009fb8:	b933      	cbnz	r3, 8009fc8 <_free_r+0x30>
 8009fba:	6063      	str	r3, [r4, #4]
 8009fbc:	6014      	str	r4, [r2, #0]
 8009fbe:	b003      	add	sp, #12
 8009fc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fc4:	f7ff bc48 	b.w	8009858 <__malloc_unlock>
 8009fc8:	42a3      	cmp	r3, r4
 8009fca:	d908      	bls.n	8009fde <_free_r+0x46>
 8009fcc:	6825      	ldr	r5, [r4, #0]
 8009fce:	1961      	adds	r1, r4, r5
 8009fd0:	428b      	cmp	r3, r1
 8009fd2:	bf01      	itttt	eq
 8009fd4:	6819      	ldreq	r1, [r3, #0]
 8009fd6:	685b      	ldreq	r3, [r3, #4]
 8009fd8:	1949      	addeq	r1, r1, r5
 8009fda:	6021      	streq	r1, [r4, #0]
 8009fdc:	e7ed      	b.n	8009fba <_free_r+0x22>
 8009fde:	461a      	mov	r2, r3
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	b10b      	cbz	r3, 8009fe8 <_free_r+0x50>
 8009fe4:	42a3      	cmp	r3, r4
 8009fe6:	d9fa      	bls.n	8009fde <_free_r+0x46>
 8009fe8:	6811      	ldr	r1, [r2, #0]
 8009fea:	1855      	adds	r5, r2, r1
 8009fec:	42a5      	cmp	r5, r4
 8009fee:	d10b      	bne.n	800a008 <_free_r+0x70>
 8009ff0:	6824      	ldr	r4, [r4, #0]
 8009ff2:	4421      	add	r1, r4
 8009ff4:	1854      	adds	r4, r2, r1
 8009ff6:	42a3      	cmp	r3, r4
 8009ff8:	6011      	str	r1, [r2, #0]
 8009ffa:	d1e0      	bne.n	8009fbe <_free_r+0x26>
 8009ffc:	681c      	ldr	r4, [r3, #0]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	6053      	str	r3, [r2, #4]
 800a002:	4421      	add	r1, r4
 800a004:	6011      	str	r1, [r2, #0]
 800a006:	e7da      	b.n	8009fbe <_free_r+0x26>
 800a008:	d902      	bls.n	800a010 <_free_r+0x78>
 800a00a:	230c      	movs	r3, #12
 800a00c:	6003      	str	r3, [r0, #0]
 800a00e:	e7d6      	b.n	8009fbe <_free_r+0x26>
 800a010:	6825      	ldr	r5, [r4, #0]
 800a012:	1961      	adds	r1, r4, r5
 800a014:	428b      	cmp	r3, r1
 800a016:	bf04      	itt	eq
 800a018:	6819      	ldreq	r1, [r3, #0]
 800a01a:	685b      	ldreq	r3, [r3, #4]
 800a01c:	6063      	str	r3, [r4, #4]
 800a01e:	bf04      	itt	eq
 800a020:	1949      	addeq	r1, r1, r5
 800a022:	6021      	streq	r1, [r4, #0]
 800a024:	6054      	str	r4, [r2, #4]
 800a026:	e7ca      	b.n	8009fbe <_free_r+0x26>
 800a028:	b003      	add	sp, #12
 800a02a:	bd30      	pop	{r4, r5, pc}
 800a02c:	200004ec 	.word	0x200004ec

0800a030 <__ssputs_r>:
 800a030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a034:	688e      	ldr	r6, [r1, #8]
 800a036:	429e      	cmp	r6, r3
 800a038:	4682      	mov	sl, r0
 800a03a:	460c      	mov	r4, r1
 800a03c:	4690      	mov	r8, r2
 800a03e:	461f      	mov	r7, r3
 800a040:	d838      	bhi.n	800a0b4 <__ssputs_r+0x84>
 800a042:	898a      	ldrh	r2, [r1, #12]
 800a044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a048:	d032      	beq.n	800a0b0 <__ssputs_r+0x80>
 800a04a:	6825      	ldr	r5, [r4, #0]
 800a04c:	6909      	ldr	r1, [r1, #16]
 800a04e:	eba5 0901 	sub.w	r9, r5, r1
 800a052:	6965      	ldr	r5, [r4, #20]
 800a054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a058:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a05c:	3301      	adds	r3, #1
 800a05e:	444b      	add	r3, r9
 800a060:	106d      	asrs	r5, r5, #1
 800a062:	429d      	cmp	r5, r3
 800a064:	bf38      	it	cc
 800a066:	461d      	movcc	r5, r3
 800a068:	0553      	lsls	r3, r2, #21
 800a06a:	d531      	bpl.n	800a0d0 <__ssputs_r+0xa0>
 800a06c:	4629      	mov	r1, r5
 800a06e:	f7fd fdc7 	bl	8007c00 <_malloc_r>
 800a072:	4606      	mov	r6, r0
 800a074:	b950      	cbnz	r0, 800a08c <__ssputs_r+0x5c>
 800a076:	230c      	movs	r3, #12
 800a078:	f8ca 3000 	str.w	r3, [sl]
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a082:	81a3      	strh	r3, [r4, #12]
 800a084:	f04f 30ff 	mov.w	r0, #4294967295
 800a088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a08c:	6921      	ldr	r1, [r4, #16]
 800a08e:	464a      	mov	r2, r9
 800a090:	f7fd fd7f 	bl	8007b92 <memcpy>
 800a094:	89a3      	ldrh	r3, [r4, #12]
 800a096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a09a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a09e:	81a3      	strh	r3, [r4, #12]
 800a0a0:	6126      	str	r6, [r4, #16]
 800a0a2:	6165      	str	r5, [r4, #20]
 800a0a4:	444e      	add	r6, r9
 800a0a6:	eba5 0509 	sub.w	r5, r5, r9
 800a0aa:	6026      	str	r6, [r4, #0]
 800a0ac:	60a5      	str	r5, [r4, #8]
 800a0ae:	463e      	mov	r6, r7
 800a0b0:	42be      	cmp	r6, r7
 800a0b2:	d900      	bls.n	800a0b6 <__ssputs_r+0x86>
 800a0b4:	463e      	mov	r6, r7
 800a0b6:	6820      	ldr	r0, [r4, #0]
 800a0b8:	4632      	mov	r2, r6
 800a0ba:	4641      	mov	r1, r8
 800a0bc:	f000 fabc 	bl	800a638 <memmove>
 800a0c0:	68a3      	ldr	r3, [r4, #8]
 800a0c2:	1b9b      	subs	r3, r3, r6
 800a0c4:	60a3      	str	r3, [r4, #8]
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	4433      	add	r3, r6
 800a0ca:	6023      	str	r3, [r4, #0]
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	e7db      	b.n	800a088 <__ssputs_r+0x58>
 800a0d0:	462a      	mov	r2, r5
 800a0d2:	f000 facb 	bl	800a66c <_realloc_r>
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d1e1      	bne.n	800a0a0 <__ssputs_r+0x70>
 800a0dc:	6921      	ldr	r1, [r4, #16]
 800a0de:	4650      	mov	r0, sl
 800a0e0:	f7ff ff5a 	bl	8009f98 <_free_r>
 800a0e4:	e7c7      	b.n	800a076 <__ssputs_r+0x46>
	...

0800a0e8 <_svfiprintf_r>:
 800a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	4698      	mov	r8, r3
 800a0ee:	898b      	ldrh	r3, [r1, #12]
 800a0f0:	061b      	lsls	r3, r3, #24
 800a0f2:	b09d      	sub	sp, #116	; 0x74
 800a0f4:	4607      	mov	r7, r0
 800a0f6:	460d      	mov	r5, r1
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	d50e      	bpl.n	800a11a <_svfiprintf_r+0x32>
 800a0fc:	690b      	ldr	r3, [r1, #16]
 800a0fe:	b963      	cbnz	r3, 800a11a <_svfiprintf_r+0x32>
 800a100:	2140      	movs	r1, #64	; 0x40
 800a102:	f7fd fd7d 	bl	8007c00 <_malloc_r>
 800a106:	6028      	str	r0, [r5, #0]
 800a108:	6128      	str	r0, [r5, #16]
 800a10a:	b920      	cbnz	r0, 800a116 <_svfiprintf_r+0x2e>
 800a10c:	230c      	movs	r3, #12
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	f04f 30ff 	mov.w	r0, #4294967295
 800a114:	e0d1      	b.n	800a2ba <_svfiprintf_r+0x1d2>
 800a116:	2340      	movs	r3, #64	; 0x40
 800a118:	616b      	str	r3, [r5, #20]
 800a11a:	2300      	movs	r3, #0
 800a11c:	9309      	str	r3, [sp, #36]	; 0x24
 800a11e:	2320      	movs	r3, #32
 800a120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a124:	f8cd 800c 	str.w	r8, [sp, #12]
 800a128:	2330      	movs	r3, #48	; 0x30
 800a12a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a2d4 <_svfiprintf_r+0x1ec>
 800a12e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a132:	f04f 0901 	mov.w	r9, #1
 800a136:	4623      	mov	r3, r4
 800a138:	469a      	mov	sl, r3
 800a13a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a13e:	b10a      	cbz	r2, 800a144 <_svfiprintf_r+0x5c>
 800a140:	2a25      	cmp	r2, #37	; 0x25
 800a142:	d1f9      	bne.n	800a138 <_svfiprintf_r+0x50>
 800a144:	ebba 0b04 	subs.w	fp, sl, r4
 800a148:	d00b      	beq.n	800a162 <_svfiprintf_r+0x7a>
 800a14a:	465b      	mov	r3, fp
 800a14c:	4622      	mov	r2, r4
 800a14e:	4629      	mov	r1, r5
 800a150:	4638      	mov	r0, r7
 800a152:	f7ff ff6d 	bl	800a030 <__ssputs_r>
 800a156:	3001      	adds	r0, #1
 800a158:	f000 80aa 	beq.w	800a2b0 <_svfiprintf_r+0x1c8>
 800a15c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a15e:	445a      	add	r2, fp
 800a160:	9209      	str	r2, [sp, #36]	; 0x24
 800a162:	f89a 3000 	ldrb.w	r3, [sl]
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 80a2 	beq.w	800a2b0 <_svfiprintf_r+0x1c8>
 800a16c:	2300      	movs	r3, #0
 800a16e:	f04f 32ff 	mov.w	r2, #4294967295
 800a172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a176:	f10a 0a01 	add.w	sl, sl, #1
 800a17a:	9304      	str	r3, [sp, #16]
 800a17c:	9307      	str	r3, [sp, #28]
 800a17e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a182:	931a      	str	r3, [sp, #104]	; 0x68
 800a184:	4654      	mov	r4, sl
 800a186:	2205      	movs	r2, #5
 800a188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a18c:	4851      	ldr	r0, [pc, #324]	; (800a2d4 <_svfiprintf_r+0x1ec>)
 800a18e:	f7f6 f827 	bl	80001e0 <memchr>
 800a192:	9a04      	ldr	r2, [sp, #16]
 800a194:	b9d8      	cbnz	r0, 800a1ce <_svfiprintf_r+0xe6>
 800a196:	06d0      	lsls	r0, r2, #27
 800a198:	bf44      	itt	mi
 800a19a:	2320      	movmi	r3, #32
 800a19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1a0:	0711      	lsls	r1, r2, #28
 800a1a2:	bf44      	itt	mi
 800a1a4:	232b      	movmi	r3, #43	; 0x2b
 800a1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a1b0:	d015      	beq.n	800a1de <_svfiprintf_r+0xf6>
 800a1b2:	9a07      	ldr	r2, [sp, #28]
 800a1b4:	4654      	mov	r4, sl
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	f04f 0c0a 	mov.w	ip, #10
 800a1bc:	4621      	mov	r1, r4
 800a1be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1c2:	3b30      	subs	r3, #48	; 0x30
 800a1c4:	2b09      	cmp	r3, #9
 800a1c6:	d94e      	bls.n	800a266 <_svfiprintf_r+0x17e>
 800a1c8:	b1b0      	cbz	r0, 800a1f8 <_svfiprintf_r+0x110>
 800a1ca:	9207      	str	r2, [sp, #28]
 800a1cc:	e014      	b.n	800a1f8 <_svfiprintf_r+0x110>
 800a1ce:	eba0 0308 	sub.w	r3, r0, r8
 800a1d2:	fa09 f303 	lsl.w	r3, r9, r3
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	9304      	str	r3, [sp, #16]
 800a1da:	46a2      	mov	sl, r4
 800a1dc:	e7d2      	b.n	800a184 <_svfiprintf_r+0x9c>
 800a1de:	9b03      	ldr	r3, [sp, #12]
 800a1e0:	1d19      	adds	r1, r3, #4
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	9103      	str	r1, [sp, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	bfbb      	ittet	lt
 800a1ea:	425b      	neglt	r3, r3
 800a1ec:	f042 0202 	orrlt.w	r2, r2, #2
 800a1f0:	9307      	strge	r3, [sp, #28]
 800a1f2:	9307      	strlt	r3, [sp, #28]
 800a1f4:	bfb8      	it	lt
 800a1f6:	9204      	strlt	r2, [sp, #16]
 800a1f8:	7823      	ldrb	r3, [r4, #0]
 800a1fa:	2b2e      	cmp	r3, #46	; 0x2e
 800a1fc:	d10c      	bne.n	800a218 <_svfiprintf_r+0x130>
 800a1fe:	7863      	ldrb	r3, [r4, #1]
 800a200:	2b2a      	cmp	r3, #42	; 0x2a
 800a202:	d135      	bne.n	800a270 <_svfiprintf_r+0x188>
 800a204:	9b03      	ldr	r3, [sp, #12]
 800a206:	1d1a      	adds	r2, r3, #4
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	9203      	str	r2, [sp, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	bfb8      	it	lt
 800a210:	f04f 33ff 	movlt.w	r3, #4294967295
 800a214:	3402      	adds	r4, #2
 800a216:	9305      	str	r3, [sp, #20]
 800a218:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a2e4 <_svfiprintf_r+0x1fc>
 800a21c:	7821      	ldrb	r1, [r4, #0]
 800a21e:	2203      	movs	r2, #3
 800a220:	4650      	mov	r0, sl
 800a222:	f7f5 ffdd 	bl	80001e0 <memchr>
 800a226:	b140      	cbz	r0, 800a23a <_svfiprintf_r+0x152>
 800a228:	2340      	movs	r3, #64	; 0x40
 800a22a:	eba0 000a 	sub.w	r0, r0, sl
 800a22e:	fa03 f000 	lsl.w	r0, r3, r0
 800a232:	9b04      	ldr	r3, [sp, #16]
 800a234:	4303      	orrs	r3, r0
 800a236:	3401      	adds	r4, #1
 800a238:	9304      	str	r3, [sp, #16]
 800a23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a23e:	4826      	ldr	r0, [pc, #152]	; (800a2d8 <_svfiprintf_r+0x1f0>)
 800a240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a244:	2206      	movs	r2, #6
 800a246:	f7f5 ffcb 	bl	80001e0 <memchr>
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d038      	beq.n	800a2c0 <_svfiprintf_r+0x1d8>
 800a24e:	4b23      	ldr	r3, [pc, #140]	; (800a2dc <_svfiprintf_r+0x1f4>)
 800a250:	bb1b      	cbnz	r3, 800a29a <_svfiprintf_r+0x1b2>
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	3307      	adds	r3, #7
 800a256:	f023 0307 	bic.w	r3, r3, #7
 800a25a:	3308      	adds	r3, #8
 800a25c:	9303      	str	r3, [sp, #12]
 800a25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a260:	4433      	add	r3, r6
 800a262:	9309      	str	r3, [sp, #36]	; 0x24
 800a264:	e767      	b.n	800a136 <_svfiprintf_r+0x4e>
 800a266:	fb0c 3202 	mla	r2, ip, r2, r3
 800a26a:	460c      	mov	r4, r1
 800a26c:	2001      	movs	r0, #1
 800a26e:	e7a5      	b.n	800a1bc <_svfiprintf_r+0xd4>
 800a270:	2300      	movs	r3, #0
 800a272:	3401      	adds	r4, #1
 800a274:	9305      	str	r3, [sp, #20]
 800a276:	4619      	mov	r1, r3
 800a278:	f04f 0c0a 	mov.w	ip, #10
 800a27c:	4620      	mov	r0, r4
 800a27e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a282:	3a30      	subs	r2, #48	; 0x30
 800a284:	2a09      	cmp	r2, #9
 800a286:	d903      	bls.n	800a290 <_svfiprintf_r+0x1a8>
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d0c5      	beq.n	800a218 <_svfiprintf_r+0x130>
 800a28c:	9105      	str	r1, [sp, #20]
 800a28e:	e7c3      	b.n	800a218 <_svfiprintf_r+0x130>
 800a290:	fb0c 2101 	mla	r1, ip, r1, r2
 800a294:	4604      	mov	r4, r0
 800a296:	2301      	movs	r3, #1
 800a298:	e7f0      	b.n	800a27c <_svfiprintf_r+0x194>
 800a29a:	ab03      	add	r3, sp, #12
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	462a      	mov	r2, r5
 800a2a0:	4b0f      	ldr	r3, [pc, #60]	; (800a2e0 <_svfiprintf_r+0x1f8>)
 800a2a2:	a904      	add	r1, sp, #16
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	f7fd fdbf 	bl	8007e28 <_printf_float>
 800a2aa:	1c42      	adds	r2, r0, #1
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	d1d6      	bne.n	800a25e <_svfiprintf_r+0x176>
 800a2b0:	89ab      	ldrh	r3, [r5, #12]
 800a2b2:	065b      	lsls	r3, r3, #25
 800a2b4:	f53f af2c 	bmi.w	800a110 <_svfiprintf_r+0x28>
 800a2b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2ba:	b01d      	add	sp, #116	; 0x74
 800a2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c0:	ab03      	add	r3, sp, #12
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	462a      	mov	r2, r5
 800a2c6:	4b06      	ldr	r3, [pc, #24]	; (800a2e0 <_svfiprintf_r+0x1f8>)
 800a2c8:	a904      	add	r1, sp, #16
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	f7fe f850 	bl	8008370 <_printf_i>
 800a2d0:	e7eb      	b.n	800a2aa <_svfiprintf_r+0x1c2>
 800a2d2:	bf00      	nop
 800a2d4:	0800af5c 	.word	0x0800af5c
 800a2d8:	0800af66 	.word	0x0800af66
 800a2dc:	08007e29 	.word	0x08007e29
 800a2e0:	0800a031 	.word	0x0800a031
 800a2e4:	0800af62 	.word	0x0800af62

0800a2e8 <__sfputc_r>:
 800a2e8:	6893      	ldr	r3, [r2, #8]
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	b410      	push	{r4}
 800a2f0:	6093      	str	r3, [r2, #8]
 800a2f2:	da08      	bge.n	800a306 <__sfputc_r+0x1e>
 800a2f4:	6994      	ldr	r4, [r2, #24]
 800a2f6:	42a3      	cmp	r3, r4
 800a2f8:	db01      	blt.n	800a2fe <__sfputc_r+0x16>
 800a2fa:	290a      	cmp	r1, #10
 800a2fc:	d103      	bne.n	800a306 <__sfputc_r+0x1e>
 800a2fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a302:	f7fe b9cf 	b.w	80086a4 <__swbuf_r>
 800a306:	6813      	ldr	r3, [r2, #0]
 800a308:	1c58      	adds	r0, r3, #1
 800a30a:	6010      	str	r0, [r2, #0]
 800a30c:	7019      	strb	r1, [r3, #0]
 800a30e:	4608      	mov	r0, r1
 800a310:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <__sfputs_r>:
 800a316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a318:	4606      	mov	r6, r0
 800a31a:	460f      	mov	r7, r1
 800a31c:	4614      	mov	r4, r2
 800a31e:	18d5      	adds	r5, r2, r3
 800a320:	42ac      	cmp	r4, r5
 800a322:	d101      	bne.n	800a328 <__sfputs_r+0x12>
 800a324:	2000      	movs	r0, #0
 800a326:	e007      	b.n	800a338 <__sfputs_r+0x22>
 800a328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a32c:	463a      	mov	r2, r7
 800a32e:	4630      	mov	r0, r6
 800a330:	f7ff ffda 	bl	800a2e8 <__sfputc_r>
 800a334:	1c43      	adds	r3, r0, #1
 800a336:	d1f3      	bne.n	800a320 <__sfputs_r+0xa>
 800a338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a33c <_vfiprintf_r>:
 800a33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a340:	460d      	mov	r5, r1
 800a342:	b09d      	sub	sp, #116	; 0x74
 800a344:	4614      	mov	r4, r2
 800a346:	4698      	mov	r8, r3
 800a348:	4606      	mov	r6, r0
 800a34a:	b118      	cbz	r0, 800a354 <_vfiprintf_r+0x18>
 800a34c:	6983      	ldr	r3, [r0, #24]
 800a34e:	b90b      	cbnz	r3, 800a354 <_vfiprintf_r+0x18>
 800a350:	f7fd fb5a 	bl	8007a08 <__sinit>
 800a354:	4b89      	ldr	r3, [pc, #548]	; (800a57c <_vfiprintf_r+0x240>)
 800a356:	429d      	cmp	r5, r3
 800a358:	d11b      	bne.n	800a392 <_vfiprintf_r+0x56>
 800a35a:	6875      	ldr	r5, [r6, #4]
 800a35c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a35e:	07d9      	lsls	r1, r3, #31
 800a360:	d405      	bmi.n	800a36e <_vfiprintf_r+0x32>
 800a362:	89ab      	ldrh	r3, [r5, #12]
 800a364:	059a      	lsls	r2, r3, #22
 800a366:	d402      	bmi.n	800a36e <_vfiprintf_r+0x32>
 800a368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a36a:	f7fd fc10 	bl	8007b8e <__retarget_lock_acquire_recursive>
 800a36e:	89ab      	ldrh	r3, [r5, #12]
 800a370:	071b      	lsls	r3, r3, #28
 800a372:	d501      	bpl.n	800a378 <_vfiprintf_r+0x3c>
 800a374:	692b      	ldr	r3, [r5, #16]
 800a376:	b9eb      	cbnz	r3, 800a3b4 <_vfiprintf_r+0x78>
 800a378:	4629      	mov	r1, r5
 800a37a:	4630      	mov	r0, r6
 800a37c:	f7fe f9f6 	bl	800876c <__swsetup_r>
 800a380:	b1c0      	cbz	r0, 800a3b4 <_vfiprintf_r+0x78>
 800a382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a384:	07dc      	lsls	r4, r3, #31
 800a386:	d50e      	bpl.n	800a3a6 <_vfiprintf_r+0x6a>
 800a388:	f04f 30ff 	mov.w	r0, #4294967295
 800a38c:	b01d      	add	sp, #116	; 0x74
 800a38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a392:	4b7b      	ldr	r3, [pc, #492]	; (800a580 <_vfiprintf_r+0x244>)
 800a394:	429d      	cmp	r5, r3
 800a396:	d101      	bne.n	800a39c <_vfiprintf_r+0x60>
 800a398:	68b5      	ldr	r5, [r6, #8]
 800a39a:	e7df      	b.n	800a35c <_vfiprintf_r+0x20>
 800a39c:	4b79      	ldr	r3, [pc, #484]	; (800a584 <_vfiprintf_r+0x248>)
 800a39e:	429d      	cmp	r5, r3
 800a3a0:	bf08      	it	eq
 800a3a2:	68f5      	ldreq	r5, [r6, #12]
 800a3a4:	e7da      	b.n	800a35c <_vfiprintf_r+0x20>
 800a3a6:	89ab      	ldrh	r3, [r5, #12]
 800a3a8:	0598      	lsls	r0, r3, #22
 800a3aa:	d4ed      	bmi.n	800a388 <_vfiprintf_r+0x4c>
 800a3ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3ae:	f7fd fbef 	bl	8007b90 <__retarget_lock_release_recursive>
 800a3b2:	e7e9      	b.n	800a388 <_vfiprintf_r+0x4c>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b8:	2320      	movs	r3, #32
 800a3ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3be:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3c2:	2330      	movs	r3, #48	; 0x30
 800a3c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a588 <_vfiprintf_r+0x24c>
 800a3c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3cc:	f04f 0901 	mov.w	r9, #1
 800a3d0:	4623      	mov	r3, r4
 800a3d2:	469a      	mov	sl, r3
 800a3d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d8:	b10a      	cbz	r2, 800a3de <_vfiprintf_r+0xa2>
 800a3da:	2a25      	cmp	r2, #37	; 0x25
 800a3dc:	d1f9      	bne.n	800a3d2 <_vfiprintf_r+0x96>
 800a3de:	ebba 0b04 	subs.w	fp, sl, r4
 800a3e2:	d00b      	beq.n	800a3fc <_vfiprintf_r+0xc0>
 800a3e4:	465b      	mov	r3, fp
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f7ff ff93 	bl	800a316 <__sfputs_r>
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	f000 80aa 	beq.w	800a54a <_vfiprintf_r+0x20e>
 800a3f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3f8:	445a      	add	r2, fp
 800a3fa:	9209      	str	r2, [sp, #36]	; 0x24
 800a3fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 80a2 	beq.w	800a54a <_vfiprintf_r+0x20e>
 800a406:	2300      	movs	r3, #0
 800a408:	f04f 32ff 	mov.w	r2, #4294967295
 800a40c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a410:	f10a 0a01 	add.w	sl, sl, #1
 800a414:	9304      	str	r3, [sp, #16]
 800a416:	9307      	str	r3, [sp, #28]
 800a418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a41c:	931a      	str	r3, [sp, #104]	; 0x68
 800a41e:	4654      	mov	r4, sl
 800a420:	2205      	movs	r2, #5
 800a422:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a426:	4858      	ldr	r0, [pc, #352]	; (800a588 <_vfiprintf_r+0x24c>)
 800a428:	f7f5 feda 	bl	80001e0 <memchr>
 800a42c:	9a04      	ldr	r2, [sp, #16]
 800a42e:	b9d8      	cbnz	r0, 800a468 <_vfiprintf_r+0x12c>
 800a430:	06d1      	lsls	r1, r2, #27
 800a432:	bf44      	itt	mi
 800a434:	2320      	movmi	r3, #32
 800a436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a43a:	0713      	lsls	r3, r2, #28
 800a43c:	bf44      	itt	mi
 800a43e:	232b      	movmi	r3, #43	; 0x2b
 800a440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a444:	f89a 3000 	ldrb.w	r3, [sl]
 800a448:	2b2a      	cmp	r3, #42	; 0x2a
 800a44a:	d015      	beq.n	800a478 <_vfiprintf_r+0x13c>
 800a44c:	9a07      	ldr	r2, [sp, #28]
 800a44e:	4654      	mov	r4, sl
 800a450:	2000      	movs	r0, #0
 800a452:	f04f 0c0a 	mov.w	ip, #10
 800a456:	4621      	mov	r1, r4
 800a458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a45c:	3b30      	subs	r3, #48	; 0x30
 800a45e:	2b09      	cmp	r3, #9
 800a460:	d94e      	bls.n	800a500 <_vfiprintf_r+0x1c4>
 800a462:	b1b0      	cbz	r0, 800a492 <_vfiprintf_r+0x156>
 800a464:	9207      	str	r2, [sp, #28]
 800a466:	e014      	b.n	800a492 <_vfiprintf_r+0x156>
 800a468:	eba0 0308 	sub.w	r3, r0, r8
 800a46c:	fa09 f303 	lsl.w	r3, r9, r3
 800a470:	4313      	orrs	r3, r2
 800a472:	9304      	str	r3, [sp, #16]
 800a474:	46a2      	mov	sl, r4
 800a476:	e7d2      	b.n	800a41e <_vfiprintf_r+0xe2>
 800a478:	9b03      	ldr	r3, [sp, #12]
 800a47a:	1d19      	adds	r1, r3, #4
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	9103      	str	r1, [sp, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	bfbb      	ittet	lt
 800a484:	425b      	neglt	r3, r3
 800a486:	f042 0202 	orrlt.w	r2, r2, #2
 800a48a:	9307      	strge	r3, [sp, #28]
 800a48c:	9307      	strlt	r3, [sp, #28]
 800a48e:	bfb8      	it	lt
 800a490:	9204      	strlt	r2, [sp, #16]
 800a492:	7823      	ldrb	r3, [r4, #0]
 800a494:	2b2e      	cmp	r3, #46	; 0x2e
 800a496:	d10c      	bne.n	800a4b2 <_vfiprintf_r+0x176>
 800a498:	7863      	ldrb	r3, [r4, #1]
 800a49a:	2b2a      	cmp	r3, #42	; 0x2a
 800a49c:	d135      	bne.n	800a50a <_vfiprintf_r+0x1ce>
 800a49e:	9b03      	ldr	r3, [sp, #12]
 800a4a0:	1d1a      	adds	r2, r3, #4
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	9203      	str	r2, [sp, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	bfb8      	it	lt
 800a4aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4ae:	3402      	adds	r4, #2
 800a4b0:	9305      	str	r3, [sp, #20]
 800a4b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a598 <_vfiprintf_r+0x25c>
 800a4b6:	7821      	ldrb	r1, [r4, #0]
 800a4b8:	2203      	movs	r2, #3
 800a4ba:	4650      	mov	r0, sl
 800a4bc:	f7f5 fe90 	bl	80001e0 <memchr>
 800a4c0:	b140      	cbz	r0, 800a4d4 <_vfiprintf_r+0x198>
 800a4c2:	2340      	movs	r3, #64	; 0x40
 800a4c4:	eba0 000a 	sub.w	r0, r0, sl
 800a4c8:	fa03 f000 	lsl.w	r0, r3, r0
 800a4cc:	9b04      	ldr	r3, [sp, #16]
 800a4ce:	4303      	orrs	r3, r0
 800a4d0:	3401      	adds	r4, #1
 800a4d2:	9304      	str	r3, [sp, #16]
 800a4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d8:	482c      	ldr	r0, [pc, #176]	; (800a58c <_vfiprintf_r+0x250>)
 800a4da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4de:	2206      	movs	r2, #6
 800a4e0:	f7f5 fe7e 	bl	80001e0 <memchr>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d03f      	beq.n	800a568 <_vfiprintf_r+0x22c>
 800a4e8:	4b29      	ldr	r3, [pc, #164]	; (800a590 <_vfiprintf_r+0x254>)
 800a4ea:	bb1b      	cbnz	r3, 800a534 <_vfiprintf_r+0x1f8>
 800a4ec:	9b03      	ldr	r3, [sp, #12]
 800a4ee:	3307      	adds	r3, #7
 800a4f0:	f023 0307 	bic.w	r3, r3, #7
 800a4f4:	3308      	adds	r3, #8
 800a4f6:	9303      	str	r3, [sp, #12]
 800a4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4fa:	443b      	add	r3, r7
 800a4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a4fe:	e767      	b.n	800a3d0 <_vfiprintf_r+0x94>
 800a500:	fb0c 3202 	mla	r2, ip, r2, r3
 800a504:	460c      	mov	r4, r1
 800a506:	2001      	movs	r0, #1
 800a508:	e7a5      	b.n	800a456 <_vfiprintf_r+0x11a>
 800a50a:	2300      	movs	r3, #0
 800a50c:	3401      	adds	r4, #1
 800a50e:	9305      	str	r3, [sp, #20]
 800a510:	4619      	mov	r1, r3
 800a512:	f04f 0c0a 	mov.w	ip, #10
 800a516:	4620      	mov	r0, r4
 800a518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a51c:	3a30      	subs	r2, #48	; 0x30
 800a51e:	2a09      	cmp	r2, #9
 800a520:	d903      	bls.n	800a52a <_vfiprintf_r+0x1ee>
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0c5      	beq.n	800a4b2 <_vfiprintf_r+0x176>
 800a526:	9105      	str	r1, [sp, #20]
 800a528:	e7c3      	b.n	800a4b2 <_vfiprintf_r+0x176>
 800a52a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a52e:	4604      	mov	r4, r0
 800a530:	2301      	movs	r3, #1
 800a532:	e7f0      	b.n	800a516 <_vfiprintf_r+0x1da>
 800a534:	ab03      	add	r3, sp, #12
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	462a      	mov	r2, r5
 800a53a:	4b16      	ldr	r3, [pc, #88]	; (800a594 <_vfiprintf_r+0x258>)
 800a53c:	a904      	add	r1, sp, #16
 800a53e:	4630      	mov	r0, r6
 800a540:	f7fd fc72 	bl	8007e28 <_printf_float>
 800a544:	4607      	mov	r7, r0
 800a546:	1c78      	adds	r0, r7, #1
 800a548:	d1d6      	bne.n	800a4f8 <_vfiprintf_r+0x1bc>
 800a54a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a54c:	07d9      	lsls	r1, r3, #31
 800a54e:	d405      	bmi.n	800a55c <_vfiprintf_r+0x220>
 800a550:	89ab      	ldrh	r3, [r5, #12]
 800a552:	059a      	lsls	r2, r3, #22
 800a554:	d402      	bmi.n	800a55c <_vfiprintf_r+0x220>
 800a556:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a558:	f7fd fb1a 	bl	8007b90 <__retarget_lock_release_recursive>
 800a55c:	89ab      	ldrh	r3, [r5, #12]
 800a55e:	065b      	lsls	r3, r3, #25
 800a560:	f53f af12 	bmi.w	800a388 <_vfiprintf_r+0x4c>
 800a564:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a566:	e711      	b.n	800a38c <_vfiprintf_r+0x50>
 800a568:	ab03      	add	r3, sp, #12
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	462a      	mov	r2, r5
 800a56e:	4b09      	ldr	r3, [pc, #36]	; (800a594 <_vfiprintf_r+0x258>)
 800a570:	a904      	add	r1, sp, #16
 800a572:	4630      	mov	r0, r6
 800a574:	f7fd fefc 	bl	8008370 <_printf_i>
 800a578:	e7e4      	b.n	800a544 <_vfiprintf_r+0x208>
 800a57a:	bf00      	nop
 800a57c:	0800acc0 	.word	0x0800acc0
 800a580:	0800ace0 	.word	0x0800ace0
 800a584:	0800aca0 	.word	0x0800aca0
 800a588:	0800af5c 	.word	0x0800af5c
 800a58c:	0800af66 	.word	0x0800af66
 800a590:	08007e29 	.word	0x08007e29
 800a594:	0800a317 	.word	0x0800a317
 800a598:	0800af62 	.word	0x0800af62

0800a59c <_read_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4d07      	ldr	r5, [pc, #28]	; (800a5bc <_read_r+0x20>)
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	4608      	mov	r0, r1
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	602a      	str	r2, [r5, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f7fd f8bf 	bl	800772e <_read>
 800a5b0:	1c43      	adds	r3, r0, #1
 800a5b2:	d102      	bne.n	800a5ba <_read_r+0x1e>
 800a5b4:	682b      	ldr	r3, [r5, #0]
 800a5b6:	b103      	cbz	r3, 800a5ba <_read_r+0x1e>
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}
 800a5bc:	200004f4 	.word	0x200004f4

0800a5c0 <abort>:
 800a5c0:	b508      	push	{r3, lr}
 800a5c2:	2006      	movs	r0, #6
 800a5c4:	f000 f8aa 	bl	800a71c <raise>
 800a5c8:	2001      	movs	r0, #1
 800a5ca:	f000 f927 	bl	800a81c <_exit>
	...

0800a5d0 <_fstat_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4d07      	ldr	r5, [pc, #28]	; (800a5f0 <_fstat_r+0x20>)
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	4608      	mov	r0, r1
 800a5da:	4611      	mov	r1, r2
 800a5dc:	602b      	str	r3, [r5, #0]
 800a5de:	f7fd f98a 	bl	80078f6 <_fstat>
 800a5e2:	1c43      	adds	r3, r0, #1
 800a5e4:	d102      	bne.n	800a5ec <_fstat_r+0x1c>
 800a5e6:	682b      	ldr	r3, [r5, #0]
 800a5e8:	b103      	cbz	r3, 800a5ec <_fstat_r+0x1c>
 800a5ea:	6023      	str	r3, [r4, #0]
 800a5ec:	bd38      	pop	{r3, r4, r5, pc}
 800a5ee:	bf00      	nop
 800a5f0:	200004f4 	.word	0x200004f4

0800a5f4 <_isatty_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4d06      	ldr	r5, [pc, #24]	; (800a610 <_isatty_r+0x1c>)
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	4608      	mov	r0, r1
 800a5fe:	602b      	str	r3, [r5, #0]
 800a600:	f7fd f987 	bl	8007912 <_isatty>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	d102      	bne.n	800a60e <_isatty_r+0x1a>
 800a608:	682b      	ldr	r3, [r5, #0]
 800a60a:	b103      	cbz	r3, 800a60e <_isatty_r+0x1a>
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	200004f4 	.word	0x200004f4

0800a614 <__ascii_mbtowc>:
 800a614:	b082      	sub	sp, #8
 800a616:	b901      	cbnz	r1, 800a61a <__ascii_mbtowc+0x6>
 800a618:	a901      	add	r1, sp, #4
 800a61a:	b142      	cbz	r2, 800a62e <__ascii_mbtowc+0x1a>
 800a61c:	b14b      	cbz	r3, 800a632 <__ascii_mbtowc+0x1e>
 800a61e:	7813      	ldrb	r3, [r2, #0]
 800a620:	600b      	str	r3, [r1, #0]
 800a622:	7812      	ldrb	r2, [r2, #0]
 800a624:	1e10      	subs	r0, r2, #0
 800a626:	bf18      	it	ne
 800a628:	2001      	movne	r0, #1
 800a62a:	b002      	add	sp, #8
 800a62c:	4770      	bx	lr
 800a62e:	4610      	mov	r0, r2
 800a630:	e7fb      	b.n	800a62a <__ascii_mbtowc+0x16>
 800a632:	f06f 0001 	mvn.w	r0, #1
 800a636:	e7f8      	b.n	800a62a <__ascii_mbtowc+0x16>

0800a638 <memmove>:
 800a638:	4288      	cmp	r0, r1
 800a63a:	b510      	push	{r4, lr}
 800a63c:	eb01 0402 	add.w	r4, r1, r2
 800a640:	d902      	bls.n	800a648 <memmove+0x10>
 800a642:	4284      	cmp	r4, r0
 800a644:	4623      	mov	r3, r4
 800a646:	d807      	bhi.n	800a658 <memmove+0x20>
 800a648:	1e43      	subs	r3, r0, #1
 800a64a:	42a1      	cmp	r1, r4
 800a64c:	d008      	beq.n	800a660 <memmove+0x28>
 800a64e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a652:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a656:	e7f8      	b.n	800a64a <memmove+0x12>
 800a658:	4402      	add	r2, r0
 800a65a:	4601      	mov	r1, r0
 800a65c:	428a      	cmp	r2, r1
 800a65e:	d100      	bne.n	800a662 <memmove+0x2a>
 800a660:	bd10      	pop	{r4, pc}
 800a662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a66a:	e7f7      	b.n	800a65c <memmove+0x24>

0800a66c <_realloc_r>:
 800a66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a670:	4680      	mov	r8, r0
 800a672:	4614      	mov	r4, r2
 800a674:	460e      	mov	r6, r1
 800a676:	b921      	cbnz	r1, 800a682 <_realloc_r+0x16>
 800a678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a67c:	4611      	mov	r1, r2
 800a67e:	f7fd babf 	b.w	8007c00 <_malloc_r>
 800a682:	b92a      	cbnz	r2, 800a690 <_realloc_r+0x24>
 800a684:	f7ff fc88 	bl	8009f98 <_free_r>
 800a688:	4625      	mov	r5, r4
 800a68a:	4628      	mov	r0, r5
 800a68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a690:	f000 f86d 	bl	800a76e <_malloc_usable_size_r>
 800a694:	4284      	cmp	r4, r0
 800a696:	4607      	mov	r7, r0
 800a698:	d802      	bhi.n	800a6a0 <_realloc_r+0x34>
 800a69a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a69e:	d812      	bhi.n	800a6c6 <_realloc_r+0x5a>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	f7fd faac 	bl	8007c00 <_malloc_r>
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d0ed      	beq.n	800a68a <_realloc_r+0x1e>
 800a6ae:	42bc      	cmp	r4, r7
 800a6b0:	4622      	mov	r2, r4
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	bf28      	it	cs
 800a6b6:	463a      	movcs	r2, r7
 800a6b8:	f7fd fa6b 	bl	8007b92 <memcpy>
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4640      	mov	r0, r8
 800a6c0:	f7ff fc6a 	bl	8009f98 <_free_r>
 800a6c4:	e7e1      	b.n	800a68a <_realloc_r+0x1e>
 800a6c6:	4635      	mov	r5, r6
 800a6c8:	e7df      	b.n	800a68a <_realloc_r+0x1e>

0800a6ca <_raise_r>:
 800a6ca:	291f      	cmp	r1, #31
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	460d      	mov	r5, r1
 800a6d2:	d904      	bls.n	800a6de <_raise_r+0x14>
 800a6d4:	2316      	movs	r3, #22
 800a6d6:	6003      	str	r3, [r0, #0]
 800a6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6dc:	bd38      	pop	{r3, r4, r5, pc}
 800a6de:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6e0:	b112      	cbz	r2, 800a6e8 <_raise_r+0x1e>
 800a6e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6e6:	b94b      	cbnz	r3, 800a6fc <_raise_r+0x32>
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f000 f831 	bl	800a750 <_getpid_r>
 800a6ee:	462a      	mov	r2, r5
 800a6f0:	4601      	mov	r1, r0
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6f8:	f000 b818 	b.w	800a72c <_kill_r>
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d00a      	beq.n	800a716 <_raise_r+0x4c>
 800a700:	1c59      	adds	r1, r3, #1
 800a702:	d103      	bne.n	800a70c <_raise_r+0x42>
 800a704:	2316      	movs	r3, #22
 800a706:	6003      	str	r3, [r0, #0]
 800a708:	2001      	movs	r0, #1
 800a70a:	e7e7      	b.n	800a6dc <_raise_r+0x12>
 800a70c:	2400      	movs	r4, #0
 800a70e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a712:	4628      	mov	r0, r5
 800a714:	4798      	blx	r3
 800a716:	2000      	movs	r0, #0
 800a718:	e7e0      	b.n	800a6dc <_raise_r+0x12>
	...

0800a71c <raise>:
 800a71c:	4b02      	ldr	r3, [pc, #8]	; (800a728 <raise+0xc>)
 800a71e:	4601      	mov	r1, r0
 800a720:	6818      	ldr	r0, [r3, #0]
 800a722:	f7ff bfd2 	b.w	800a6ca <_raise_r>
 800a726:	bf00      	nop
 800a728:	20000074 	.word	0x20000074

0800a72c <_kill_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4d07      	ldr	r5, [pc, #28]	; (800a74c <_kill_r+0x20>)
 800a730:	2300      	movs	r3, #0
 800a732:	4604      	mov	r4, r0
 800a734:	4608      	mov	r0, r1
 800a736:	4611      	mov	r1, r2
 800a738:	602b      	str	r3, [r5, #0]
 800a73a:	f000 f867 	bl	800a80c <_kill>
 800a73e:	1c43      	adds	r3, r0, #1
 800a740:	d102      	bne.n	800a748 <_kill_r+0x1c>
 800a742:	682b      	ldr	r3, [r5, #0]
 800a744:	b103      	cbz	r3, 800a748 <_kill_r+0x1c>
 800a746:	6023      	str	r3, [r4, #0]
 800a748:	bd38      	pop	{r3, r4, r5, pc}
 800a74a:	bf00      	nop
 800a74c:	200004f4 	.word	0x200004f4

0800a750 <_getpid_r>:
 800a750:	f7fd b8ae 	b.w	80078b0 <_getpid>

0800a754 <__ascii_wctomb>:
 800a754:	b149      	cbz	r1, 800a76a <__ascii_wctomb+0x16>
 800a756:	2aff      	cmp	r2, #255	; 0xff
 800a758:	bf85      	ittet	hi
 800a75a:	238a      	movhi	r3, #138	; 0x8a
 800a75c:	6003      	strhi	r3, [r0, #0]
 800a75e:	700a      	strbls	r2, [r1, #0]
 800a760:	f04f 30ff 	movhi.w	r0, #4294967295
 800a764:	bf98      	it	ls
 800a766:	2001      	movls	r0, #1
 800a768:	4770      	bx	lr
 800a76a:	4608      	mov	r0, r1
 800a76c:	4770      	bx	lr

0800a76e <_malloc_usable_size_r>:
 800a76e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a772:	1f18      	subs	r0, r3, #4
 800a774:	2b00      	cmp	r3, #0
 800a776:	bfbc      	itt	lt
 800a778:	580b      	ldrlt	r3, [r1, r0]
 800a77a:	18c0      	addlt	r0, r0, r3
 800a77c:	4770      	bx	lr
	...

0800a780 <round>:
 800a780:	ec51 0b10 	vmov	r0, r1, d0
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800a78a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800a78e:	2c13      	cmp	r4, #19
 800a790:	ee10 2a10 	vmov	r2, s0
 800a794:	460b      	mov	r3, r1
 800a796:	dc19      	bgt.n	800a7cc <round+0x4c>
 800a798:	2c00      	cmp	r4, #0
 800a79a:	da09      	bge.n	800a7b0 <round+0x30>
 800a79c:	3401      	adds	r4, #1
 800a79e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a7a2:	d103      	bne.n	800a7ac <round+0x2c>
 800a7a4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a7a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	e028      	b.n	800a802 <round+0x82>
 800a7b0:	4d15      	ldr	r5, [pc, #84]	; (800a808 <round+0x88>)
 800a7b2:	4125      	asrs	r5, r4
 800a7b4:	ea01 0605 	and.w	r6, r1, r5
 800a7b8:	4332      	orrs	r2, r6
 800a7ba:	d00e      	beq.n	800a7da <round+0x5a>
 800a7bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a7c0:	fa42 f404 	asr.w	r4, r2, r4
 800a7c4:	4423      	add	r3, r4
 800a7c6:	ea23 0305 	bic.w	r3, r3, r5
 800a7ca:	e7ef      	b.n	800a7ac <round+0x2c>
 800a7cc:	2c33      	cmp	r4, #51	; 0x33
 800a7ce:	dd07      	ble.n	800a7e0 <round+0x60>
 800a7d0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a7d4:	d101      	bne.n	800a7da <round+0x5a>
 800a7d6:	f7f5 fd59 	bl	800028c <__adddf3>
 800a7da:	ec41 0b10 	vmov	d0, r0, r1
 800a7de:	bd70      	pop	{r4, r5, r6, pc}
 800a7e0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800a7e4:	f04f 35ff 	mov.w	r5, #4294967295
 800a7e8:	40f5      	lsrs	r5, r6
 800a7ea:	4228      	tst	r0, r5
 800a7ec:	d0f5      	beq.n	800a7da <round+0x5a>
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a7f4:	fa01 f404 	lsl.w	r4, r1, r4
 800a7f8:	1912      	adds	r2, r2, r4
 800a7fa:	bf28      	it	cs
 800a7fc:	185b      	addcs	r3, r3, r1
 800a7fe:	ea22 0205 	bic.w	r2, r2, r5
 800a802:	4619      	mov	r1, r3
 800a804:	4610      	mov	r0, r2
 800a806:	e7e8      	b.n	800a7da <round+0x5a>
 800a808:	000fffff 	.word	0x000fffff

0800a80c <_kill>:
 800a80c:	4b02      	ldr	r3, [pc, #8]	; (800a818 <_kill+0xc>)
 800a80e:	2258      	movs	r2, #88	; 0x58
 800a810:	601a      	str	r2, [r3, #0]
 800a812:	f04f 30ff 	mov.w	r0, #4294967295
 800a816:	4770      	bx	lr
 800a818:	200004f4 	.word	0x200004f4

0800a81c <_exit>:
 800a81c:	e7fe      	b.n	800a81c <_exit>
	...

0800a820 <_init>:
 800a820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a822:	bf00      	nop
 800a824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a826:	bc08      	pop	{r3}
 800a828:	469e      	mov	lr, r3
 800a82a:	4770      	bx	lr

0800a82c <_fini>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	bf00      	nop
 800a830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a832:	bc08      	pop	{r3}
 800a834:	469e      	mov	lr, r3
 800a836:	4770      	bx	lr
