
Assignment 2 Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009180  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  08009310  08009310  00019310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a28  08009a28  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  08009a28  08009a28  00019a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a30  08009a30  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a30  08009a30  00019a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a34  08009a34  00019a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08009a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000228  08009c60  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08009c60  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dea5  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ec  00000000  00000000  0002e0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  000302f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  00030fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002882a  00000000  00000000  00031b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f254  00000000  00000000  0005a362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5443  00000000  00000000  000695b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e9f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c24  00000000  00000000  0015ea4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00163670  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  00163694  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092f8 	.word	0x080092f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	080092f8 	.word	0x080092f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <main>:

static void LSM6DSL_AccGyroInit(void);
static void HTS221_HumTempInit(int16_t* p_h0_lsb, int16_t* p_h1_lsb, int16_t* p_h0_rh, int16_t* p_h1_rh, int16_t* p_t0_lsb, int16_t* p_t1_lsb, int16_t* p_t0_degc, int16_t* p_t1_degc);

int main(void)
{
 8000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4e:	b08b      	sub	sp, #44	; 0x2c
 8000f50:	af08      	add	r7, sp, #32
    HAL_Init();
 8000f52:	f002 f9b5 	bl	80032c0 <HAL_Init>
    UART1_Init();
 8000f56:	f000 fc21 	bl	800179c <UART1_Init>

    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f001 fcc9 	bl	80028f4 <BSP_PB_Init>
    BSP_LED_Init(LED2);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f001 fc6a 	bl	800283c <BSP_LED_Init>

    // must init this for I2C to configure the sensors
    SENSOR_IO_Init();
 8000f68:	f001 fe0a 	bl	8002b80 <SENSOR_IO_Init>

    LSM6DSL_AccGyroInit();
 8000f6c:	f001 f8f4 	bl	8002158 <LSM6DSL_AccGyroInit>
    HTS221_HumTempInit(&h0_lsb, &h1_lsb, &h0_rh, &h1_rh, &t0_lsb, &t1_lsb, &t0_degc, &t1_degc);
 8000f70:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <main+0x114>)
 8000f72:	9303      	str	r3, [sp, #12]
 8000f74:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <main+0x118>)
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <main+0x11c>)
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	4b3b      	ldr	r3, [pc, #236]	; (800106c <main+0x120>)
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <main+0x124>)
 8000f82:	4a3c      	ldr	r2, [pc, #240]	; (8001074 <main+0x128>)
 8000f84:	493c      	ldr	r1, [pc, #240]	; (8001078 <main+0x12c>)
 8000f86:	483d      	ldr	r0, [pc, #244]	; (800107c <main+0x130>)
 8000f88:	f001 f98e 	bl	80022a8 <HTS221_HumTempInit>
    BSP_MAGNETO_Init();
 8000f8c:	f001 fe58 	bl	8002c40 <BSP_MAGNETO_Init>
    BSP_PSENSOR_Init();
 8000f90:	f001 fe82 	bl	8002c98 <BSP_PSENSOR_Init>

    // print Entering STANDBY MODE when going to STANDBY_MODE
    sprintf(uart_buffer, "Entering STANDBY MODE\r\n");
 8000f94:	493a      	ldr	r1, [pc, #232]	; (8001080 <main+0x134>)
 8000f96:	483b      	ldr	r0, [pc, #236]	; (8001084 <main+0x138>)
 8000f98:	f005 f98c 	bl	80062b4 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8000f9c:	4839      	ldr	r0, [pc, #228]	; (8001084 <main+0x138>)
 8000f9e:	f7ff f917 	bl	80001d0 <strlen>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000faa:	4936      	ldr	r1, [pc, #216]	; (8001084 <main+0x138>)
 8000fac:	4836      	ldr	r0, [pc, #216]	; (8001088 <main+0x13c>)
 8000fae:	f003 fc57 	bl	8004860 <HAL_UART_Transmit>

    while (1) {
        button_press();
 8000fb2:	f000 fc77 	bl	80018a4 <button_press>

        // read data if DRDY triggered
        read_ready_acc_gyro_d6d(accel_data, gyro_data, &d6d_data, &acc_thres_flag, &gyro_thres_flag);
 8000fb6:	4b35      	ldr	r3, [pc, #212]	; (800108c <main+0x140>)
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	4b35      	ldr	r3, [pc, #212]	; (8001090 <main+0x144>)
 8000fbc:	4a35      	ldr	r2, [pc, #212]	; (8001094 <main+0x148>)
 8000fbe:	4936      	ldr	r1, [pc, #216]	; (8001098 <main+0x14c>)
 8000fc0:	4836      	ldr	r0, [pc, #216]	; (800109c <main+0x150>)
 8000fc2:	f000 fcdd 	bl	8001980 <read_ready_acc_gyro_d6d>
        read_ready_hum_temp(&humidity_data, &temp_data, &humidity_thres_flag, &temp_thres_flag, h0_lsb, h1_lsb, h0_rh, h1_rh, t0_lsb, t1_lsb, t0_degc, t1_degc);
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <main+0x130>)
 8000fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4a2a      	ldr	r2, [pc, #168]	; (8001078 <main+0x12c>)
 8000fd0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fd4:	4927      	ldr	r1, [pc, #156]	; (8001074 <main+0x128>)
 8000fd6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000fda:	4825      	ldr	r0, [pc, #148]	; (8001070 <main+0x124>)
 8000fdc:	f9b0 0000 	ldrsh.w	r0, [r0]
 8000fe0:	4c22      	ldr	r4, [pc, #136]	; (800106c <main+0x120>)
 8000fe2:	f9b4 4000 	ldrsh.w	r4, [r4]
 8000fe6:	4d20      	ldr	r5, [pc, #128]	; (8001068 <main+0x11c>)
 8000fe8:	f9b5 5000 	ldrsh.w	r5, [r5]
 8000fec:	4e1d      	ldr	r6, [pc, #116]	; (8001064 <main+0x118>)
 8000fee:	f9b6 6000 	ldrsh.w	r6, [r6]
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <main+0x114>)
 8000ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff8:	9307      	str	r3, [sp, #28]
 8000ffa:	9606      	str	r6, [sp, #24]
 8000ffc:	9505      	str	r5, [sp, #20]
 8000ffe:	9404      	str	r4, [sp, #16]
 8001000:	9003      	str	r0, [sp, #12]
 8001002:	9102      	str	r1, [sp, #8]
 8001004:	9201      	str	r2, [sp, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <main+0x154>)
 800100c:	4a25      	ldr	r2, [pc, #148]	; (80010a4 <main+0x158>)
 800100e:	4926      	ldr	r1, [pc, #152]	; (80010a8 <main+0x15c>)
 8001010:	4826      	ldr	r0, [pc, #152]	; (80010ac <main+0x160>)
 8001012:	f000 fdeb 	bl	8001bec <read_ready_hum_temp>

        switch (state) {
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <main+0x164>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b03      	cmp	r3, #3
 800101c:	d81a      	bhi.n	8001054 <main+0x108>
 800101e:	a201      	add	r2, pc, #4	; (adr r2, 8001024 <main+0xd8>)
 8001020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001024:	08001035 	.word	0x08001035
 8001028:	0800103d 	.word	0x0800103d
 800102c:	08001045 	.word	0x08001045
 8001030:	0800104d 	.word	0x0800104d
        case STANDBY_MODE:
            standby_mode(&state);
 8001034:	481e      	ldr	r0, [pc, #120]	; (80010b0 <main+0x164>)
 8001036:	f000 f83d 	bl	80010b4 <standby_mode>
            break;
 800103a:	e00f      	b.n	800105c <main+0x110>
        case BATTLE_NO_LAST_OF_EE2028_MODE:
            battle_no_last_of_ee2028_mode(&state);
 800103c:	481c      	ldr	r0, [pc, #112]	; (80010b0 <main+0x164>)
 800103e:	f000 f93d 	bl	80012bc <battle_no_last_of_ee2028_mode>
            break;
 8001042:	e00b      	b.n	800105c <main+0x110>
        case BATTLE_LAST_OF_EE2028_MODE:
            battle_last_of_ee2028_mode(&state);
 8001044:	481a      	ldr	r0, [pc, #104]	; (80010b0 <main+0x164>)
 8001046:	f000 fb07 	bl	8001658 <battle_last_of_ee2028_mode>
            break;
 800104a:	e007      	b.n	800105c <main+0x110>
        case DEAD_MODE:
            dead_mode(&state);
 800104c:	4818      	ldr	r0, [pc, #96]	; (80010b0 <main+0x164>)
 800104e:	f000 fb87 	bl	8001760 <dead_mode>
            break;
 8001052:	e003      	b.n	800105c <main+0x110>
        default:
            // for debugging incase state somehow get here
            led_blink(LED_10HZ);
 8001054:	2064      	movs	r0, #100	; 0x64
 8001056:	f000 fc6f 	bl	8001938 <led_blink>
            break;
 800105a:	bf00      	nop
        button_press();
 800105c:	e7a9      	b.n	8000fb2 <main+0x66>
 800105e:	bf00      	nop
 8001060:	200003a0 	.word	0x200003a0
 8001064:	2000039e 	.word	0x2000039e
 8001068:	2000039c 	.word	0x2000039c
 800106c:	2000039a 	.word	0x2000039a
 8001070:	20000398 	.word	0x20000398
 8001074:	20000396 	.word	0x20000396
 8001078:	20000394 	.word	0x20000394
 800107c:	20000392 	.word	0x20000392
 8001080:	08009310 	.word	0x08009310
 8001084:	20000254 	.word	0x20000254
 8001088:	200002d4 	.word	0x200002d4
 800108c:	20000376 	.word	0x20000376
 8001090:	20000375 	.word	0x20000375
 8001094:	20000374 	.word	0x20000374
 8001098:	20000368 	.word	0x20000368
 800109c:	2000035c 	.word	0x2000035c
 80010a0:	20000391 	.word	0x20000391
 80010a4:	20000390 	.word	0x20000390
 80010a8:	2000038c 	.word	0x2000038c
 80010ac:	20000388 	.word	0x20000388
 80010b0:	20000244 	.word	0x20000244

080010b4 <standby_mode>:
        }
    }
}

static void standby_mode(uint8_t* p_state)
{
 80010b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010b8:	b088      	sub	sp, #32
 80010ba:	af04      	add	r7, sp, #16
 80010bc:	6078      	str	r0, [r7, #4]
    // in STANDBY_MODE, LED always on
    led_blink(LED_ALWAYS_ON);
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 fc3a 	bl	8001938 <led_blink>

    // in STANDBY_MODE, double press to enter BATTLE_NO_LAST_OF_EE2028_MODE
    if (double_press) {
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <standby_mode+0x1c0>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d02c      	beq.n	8001126 <standby_mode+0x72>
        // if upside down, go to BATTLE_LAST_OF_EE2028_MODE else BATTLE_NO_LAST_OF_EE2028_MODE
        uint8_t d6d_src = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_D6D_SRC);
 80010cc:	211d      	movs	r1, #29
 80010ce:	20d4      	movs	r0, #212	; 0xd4
 80010d0:	f001 fd7a 	bl	8002bc8 <SENSOR_IO_Read>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]

        if (d6d_src & D6D_SRC_UPSIDEDOWN) {
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d008      	beq.n	80010f4 <standby_mode+0x40>
            *p_state = BATTLE_LAST_OF_EE2028_MODE;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2202      	movs	r2, #2
 80010e6:	701a      	strb	r2, [r3, #0]
            last_of_ee2028_tick = HAL_GetTick();
 80010e8:	f002 f94e 	bl	8003388 <HAL_GetTick>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a62      	ldr	r2, [pc, #392]	; (8001278 <standby_mode+0x1c4>)
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e002      	b.n	80010fa <standby_mode+0x46>
        } else {
            *p_state = BATTLE_NO_LAST_OF_EE2028_MODE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
        }

        // print Entering BATTLE MODE when going to BATTLE_NO_LAST_OF_EE2028_MODE/BATTLE_LAST_OF_EE2028_MODE as thats how it is logically
        sprintf(uart_buffer, "Entering BATTLE MODE\r\n");
 80010fa:	4960      	ldr	r1, [pc, #384]	; (800127c <standby_mode+0x1c8>)
 80010fc:	4860      	ldr	r0, [pc, #384]	; (8001280 <standby_mode+0x1cc>)
 80010fe:	f005 f8d9 	bl	80062b4 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001102:	485f      	ldr	r0, [pc, #380]	; (8001280 <standby_mode+0x1cc>)
 8001104:	f7ff f864 	bl	80001d0 <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	b29a      	uxth	r2, r3
 800110c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001110:	495b      	ldr	r1, [pc, #364]	; (8001280 <standby_mode+0x1cc>)
 8001112:	485c      	ldr	r0, [pc, #368]	; (8001284 <standby_mode+0x1d0>)
 8001114:	f003 fba4 	bl	8004860 <HAL_UART_Transmit>

        last_telem_tick = 0;
 8001118:	4b5b      	ldr	r3, [pc, #364]	; (8001288 <standby_mode+0x1d4>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]

        // clear flag
        double_press = BOOL_CLR;
 800111e:	4b55      	ldr	r3, [pc, #340]	; (8001274 <standby_mode+0x1c0>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
        return;
 8001124:	e0a1      	b.n	800126a <standby_mode+0x1b6>
    }

    // in STANDBY_MODE, single press does nothing
    if (single_press) {
 8001126:	4b59      	ldr	r3, [pc, #356]	; (800128c <standby_mode+0x1d8>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <standby_mode+0x80>
        // does nothing, but still need to reset the flag
        single_press = BOOL_CLR;
 800112e:	4b57      	ldr	r3, [pc, #348]	; (800128c <standby_mode+0x1d8>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
    }

    // read GMPH telem and send UART @ 1 Hz
    if (HAL_GetTick() - last_telem_tick >= 1000) {
 8001134:	f002 f928 	bl	8003388 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	4b53      	ldr	r3, [pc, #332]	; (8001288 <standby_mode+0x1d4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001144:	f0c0 8091 	bcc.w	800126a <standby_mode+0x1b6>
        read_mag(mag_data);
 8001148:	4851      	ldr	r0, [pc, #324]	; (8001290 <standby_mode+0x1dc>)
 800114a:	f000 fd35 	bl	8001bb8 <read_mag>
        pressure_data = read_pressure();
 800114e:	f000 fd3e 	bl	8001bce <read_pressure>
 8001152:	eef0 7a40 	vmov.f32	s15, s0
 8001156:	4b4f      	ldr	r3, [pc, #316]	; (8001294 <standby_mode+0x1e0>)
 8001158:	edc3 7a00 	vstr	s15, [r3]

        print_threshold_gyro();
 800115c:	f000 fe8c 	bl	8001e78 <print_threshold_gyro>
        print_threshold_mag();
 8001160:	f000 fefe 	bl	8001f60 <print_threshold_mag>
        print_threshold_press();
 8001164:	f000 ff9e 	bl	80020a4 <print_threshold_press>
        print_threshold_hum();
 8001168:	f000 ff70 	bl	800204c <print_threshold_hum>

        if ((gyro_thres_flag | mag_thres_flag | pressure_thres_flag | humidity_thres_flag) == BOOL_CLR) {
 800116c:	4b4a      	ldr	r3, [pc, #296]	; (8001298 <standby_mode+0x1e4>)
 800116e:	781a      	ldrb	r2, [r3, #0]
 8001170:	4b4a      	ldr	r3, [pc, #296]	; (800129c <standby_mode+0x1e8>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4313      	orrs	r3, r2
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <standby_mode+0x1ec>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4313      	orrs	r3, r2
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <standby_mode+0x1f0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f083 0301 	eor.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d066      	beq.n	8001260 <standby_mode+0x1ac>
            // no threshold violation, print normal telem
            // split to multiple messages to fit in buffer
            sprintf(uart_buffer, "Gx: %.2f dps, Gy: %.2f dps, Gz: %.2f dps, ", gyro_data[0], gyro_data[1], gyro_data[2]);
 8001192:	4b45      	ldr	r3, [pc, #276]	; (80012a8 <standby_mode+0x1f4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9d6 	bl	8000548 <__aeabi_f2d>
 800119c:	4680      	mov	r8, r0
 800119e:	4689      	mov	r9, r1
 80011a0:	4b41      	ldr	r3, [pc, #260]	; (80012a8 <standby_mode+0x1f4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f9cf 	bl	8000548 <__aeabi_f2d>
 80011aa:	4604      	mov	r4, r0
 80011ac:	460d      	mov	r5, r1
 80011ae:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <standby_mode+0x1f4>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9c8 	bl	8000548 <__aeabi_f2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011c0:	e9cd 4500 	strd	r4, r5, [sp]
 80011c4:	4642      	mov	r2, r8
 80011c6:	464b      	mov	r3, r9
 80011c8:	4938      	ldr	r1, [pc, #224]	; (80012ac <standby_mode+0x1f8>)
 80011ca:	482d      	ldr	r0, [pc, #180]	; (8001280 <standby_mode+0x1cc>)
 80011cc:	f005 f872 	bl	80062b4 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80011d0:	482b      	ldr	r0, [pc, #172]	; (8001280 <standby_mode+0x1cc>)
 80011d2:	f7fe fffd 	bl	80001d0 <strlen>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b29a      	uxth	r2, r3
 80011da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011de:	4928      	ldr	r1, [pc, #160]	; (8001280 <standby_mode+0x1cc>)
 80011e0:	4828      	ldr	r0, [pc, #160]	; (8001284 <standby_mode+0x1d0>)
 80011e2:	f003 fb3d 	bl	8004860 <HAL_UART_Transmit>

            sprintf(uart_buffer, "Mx: %d mG, My: %d mG, Mz: %d mG, ", mag_data[0], mag_data[1], mag_data[2]);
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <standby_mode+0x1dc>)
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b28      	ldr	r3, [pc, #160]	; (8001290 <standby_mode+0x1dc>)
 80011f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <standby_mode+0x1dc>)
 80011f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	460b      	mov	r3, r1
 8001200:	492b      	ldr	r1, [pc, #172]	; (80012b0 <standby_mode+0x1fc>)
 8001202:	481f      	ldr	r0, [pc, #124]	; (8001280 <standby_mode+0x1cc>)
 8001204:	f005 f856 	bl	80062b4 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001208:	481d      	ldr	r0, [pc, #116]	; (8001280 <standby_mode+0x1cc>)
 800120a:	f7fe ffe1 	bl	80001d0 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	b29a      	uxth	r2, r3
 8001212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001216:	491a      	ldr	r1, [pc, #104]	; (8001280 <standby_mode+0x1cc>)
 8001218:	481a      	ldr	r0, [pc, #104]	; (8001284 <standby_mode+0x1d0>)
 800121a:	f003 fb21 	bl	8004860 <HAL_UART_Transmit>

            sprintf(uart_buffer, "P: %.2f kPA, H: %.2f%%\r\n", pressure_data, humidity_data);
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <standby_mode+0x1e0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f990 	bl	8000548 <__aeabi_f2d>
 8001228:	4604      	mov	r4, r0
 800122a:	460d      	mov	r5, r1
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <standby_mode+0x200>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f989 	bl	8000548 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	e9cd 2300 	strd	r2, r3, [sp]
 800123e:	4622      	mov	r2, r4
 8001240:	462b      	mov	r3, r5
 8001242:	491d      	ldr	r1, [pc, #116]	; (80012b8 <standby_mode+0x204>)
 8001244:	480e      	ldr	r0, [pc, #56]	; (8001280 <standby_mode+0x1cc>)
 8001246:	f005 f835 	bl	80062b4 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <standby_mode+0x1cc>)
 800124c:	f7fe ffc0 	bl	80001d0 <strlen>
 8001250:	4603      	mov	r3, r0
 8001252:	b29a      	uxth	r2, r3
 8001254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001258:	4909      	ldr	r1, [pc, #36]	; (8001280 <standby_mode+0x1cc>)
 800125a:	480a      	ldr	r0, [pc, #40]	; (8001284 <standby_mode+0x1d0>)
 800125c:	f003 fb00 	bl	8004860 <HAL_UART_Transmit>
        }

        last_telem_tick = HAL_GetTick();
 8001260:	f002 f892 	bl	8003388 <HAL_GetTick>
 8001264:	4603      	mov	r3, r0
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <standby_mode+0x1d4>)
 8001268:	6013      	str	r3, [r2, #0]
    }
}
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001272:	bf00      	nop
 8001274:	20000252 	.word	0x20000252
 8001278:	20000248 	.word	0x20000248
 800127c:	08009328 	.word	0x08009328
 8001280:	20000254 	.word	0x20000254
 8001284:	200002d4 	.word	0x200002d4
 8001288:	20000354 	.word	0x20000354
 800128c:	20000251 	.word	0x20000251
 8001290:	20000378 	.word	0x20000378
 8001294:	20000380 	.word	0x20000380
 8001298:	20000376 	.word	0x20000376
 800129c:	2000037e 	.word	0x2000037e
 80012a0:	20000384 	.word	0x20000384
 80012a4:	20000390 	.word	0x20000390
 80012a8:	20000368 	.word	0x20000368
 80012ac:	08009340 	.word	0x08009340
 80012b0:	0800936c 	.word	0x0800936c
 80012b4:	20000388 	.word	0x20000388
 80012b8:	08009390 	.word	0x08009390

080012bc <battle_no_last_of_ee2028_mode>:

static void battle_no_last_of_ee2028_mode(uint8_t* p_state)
{
 80012bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af04      	add	r7, sp, #16
 80012c4:	6078      	str	r0, [r7, #4]
    static uint8_t gun_charge = 0;
    if (gun_charge > 10) {
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <battle_no_last_of_ee2028_mode+0xc0>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b0a      	cmp	r3, #10
 80012cc:	d902      	bls.n	80012d4 <battle_no_last_of_ee2028_mode+0x18>
        // incase somehow charge gets more than 10, cap at 10/10
        gun_charge = 10;
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <battle_no_last_of_ee2028_mode+0xc0>)
 80012d0:	220a      	movs	r2, #10
 80012d2:	701a      	strb	r2, [r3, #0]
    }

    if (gun_charge >= 5) {
 80012d4:	4b29      	ldr	r3, [pc, #164]	; (800137c <battle_no_last_of_ee2028_mode+0xc0>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d92e      	bls.n	800133a <battle_no_last_of_ee2028_mode+0x7e>
        // each shot cost 5 units
        gun_charge -= 5;
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <battle_no_last_of_ee2028_mode+0xc0>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3b05      	subs	r3, #5
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b25      	ldr	r3, [pc, #148]	; (800137c <battle_no_last_of_ee2028_mode+0xc0>)
 80012e6:	701a      	strb	r2, [r3, #0]

        sprintf(uart_buffer, "Gun Shot:    %.*s%.*s %d%%\r\n",
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <battle_no_last_of_ee2028_mode+0xc0>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	1899      	adds	r1, r3, r2
            (gun_charge)*3, "[#][#][#][#][#][#][#][#][#][#]",
            (10 - gun_charge) * 3, "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]",
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <battle_no_last_of_ee2028_mode+0xc0>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	f1c3 020a 	rsb	r2, r3, #10
        sprintf(uart_buffer, "Gun Shot:    %.*s%.*s %d%%\r\n",
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	441a      	add	r2, r3
 8001302:	4b1e      	ldr	r3, [pc, #120]	; (800137c <battle_no_last_of_ee2028_mode+0xc0>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	4603      	mov	r3, r0
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4403      	add	r3, r0
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <battle_no_last_of_ee2028_mode+0xc4>)
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <battle_no_last_of_ee2028_mode+0xc8>)
 800131a:	460a      	mov	r2, r1
 800131c:	491a      	ldr	r1, [pc, #104]	; (8001388 <battle_no_last_of_ee2028_mode+0xcc>)
 800131e:	481b      	ldr	r0, [pc, #108]	; (800138c <battle_no_last_of_ee2028_mode+0xd0>)
 8001320:	f004 ffc8 	bl	80062b4 <siprintf>
            gun_charge * 10);
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001324:	4819      	ldr	r0, [pc, #100]	; (800138c <battle_no_last_of_ee2028_mode+0xd0>)
 8001326:	f7fe ff53 	bl	80001d0 <strlen>
 800132a:	4603      	mov	r3, r0
 800132c:	b29a      	uxth	r2, r3
 800132e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001332:	4916      	ldr	r1, [pc, #88]	; (800138c <battle_no_last_of_ee2028_mode+0xd0>)
 8001334:	4816      	ldr	r0, [pc, #88]	; (8001390 <battle_no_last_of_ee2028_mode+0xd4>)
 8001336:	f003 fa93 	bl	8004860 <HAL_UART_Transmit>
    }

    // in BATTLE_NO_LAST_OF_EE2028_MODE, LED blinks at 1 Hz
    led_blink(LED_1HZ);
 800133a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800133e:	f000 fafb 	bl	8001938 <led_blink>

    // in BATTLE_NO_LAST_OF_EE2028_MODE, double press to enter STANDBY_MODE
    if (double_press) {
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <battle_no_last_of_ee2028_mode+0xd8>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d02a      	beq.n	80013a0 <battle_no_last_of_ee2028_mode+0xe4>
        // goes to STANDBY_MODE
        *p_state = STANDBY_MODE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]

        // print Entering STANDBY MODE when going to STANDBY_MODE
        sprintf(uart_buffer, "Entering STANDBY MODE\r\n");
 8001350:	4911      	ldr	r1, [pc, #68]	; (8001398 <battle_no_last_of_ee2028_mode+0xdc>)
 8001352:	480e      	ldr	r0, [pc, #56]	; (800138c <battle_no_last_of_ee2028_mode+0xd0>)
 8001354:	f004 ffae 	bl	80062b4 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <battle_no_last_of_ee2028_mode+0xd0>)
 800135a:	f7fe ff39 	bl	80001d0 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	b29a      	uxth	r2, r3
 8001362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001366:	4909      	ldr	r1, [pc, #36]	; (800138c <battle_no_last_of_ee2028_mode+0xd0>)
 8001368:	4809      	ldr	r0, [pc, #36]	; (8001390 <battle_no_last_of_ee2028_mode+0xd4>)
 800136a:	f003 fa79 	bl	8004860 <HAL_UART_Transmit>
        last_telem_tick = 0;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <battle_no_last_of_ee2028_mode+0xe0>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]

        // clear flag
        double_press = BOOL_CLR;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <battle_no_last_of_ee2028_mode+0xd8>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
        return;
 800137a:	e134      	b.n	80015e6 <battle_no_last_of_ee2028_mode+0x32a>
 800137c:	200003a2 	.word	0x200003a2
 8001380:	080093ec 	.word	0x080093ec
 8001384:	080093ac 	.word	0x080093ac
 8001388:	080093cc 	.word	0x080093cc
 800138c:	20000254 	.word	0x20000254
 8001390:	200002d4 	.word	0x200002d4
 8001394:	20000252 	.word	0x20000252
 8001398:	08009310 	.word	0x08009310
 800139c:	20000354 	.word	0x20000354
    }

    // in BATTLE_NO_LAST_OF_EE2028_MODE, single press charge gun by 3
    if (single_press) {
 80013a0:	4b93      	ldr	r3, [pc, #588]	; (80015f0 <battle_no_last_of_ee2028_mode+0x334>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d031      	beq.n	800140c <battle_no_last_of_ee2028_mode+0x150>
        gun_charge += 3;
 80013a8:	4b92      	ldr	r3, [pc, #584]	; (80015f4 <battle_no_last_of_ee2028_mode+0x338>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	3303      	adds	r3, #3
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b90      	ldr	r3, [pc, #576]	; (80015f4 <battle_no_last_of_ee2028_mode+0x338>)
 80013b2:	701a      	strb	r2, [r3, #0]

        // print gun status
        sprintf(uart_buffer, "Gun Charged: %.*s%.*s %d%%\r\n",
 80013b4:	4b8f      	ldr	r3, [pc, #572]	; (80015f4 <battle_no_last_of_ee2028_mode+0x338>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	1899      	adds	r1, r3, r2
            (gun_charge)*3, "[#][#][#][#][#][#][#][#][#][#]",
            (10 - gun_charge) * 3, "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]",
 80013c0:	4b8c      	ldr	r3, [pc, #560]	; (80015f4 <battle_no_last_of_ee2028_mode+0x338>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	f1c3 020a 	rsb	r2, r3, #10
        sprintf(uart_buffer, "Gun Charged: %.*s%.*s %d%%\r\n",
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	441a      	add	r2, r3
 80013ce:	4b89      	ldr	r3, [pc, #548]	; (80015f4 <battle_no_last_of_ee2028_mode+0x338>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	4603      	mov	r3, r0
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4403      	add	r3, r0
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	4b86      	ldr	r3, [pc, #536]	; (80015f8 <battle_no_last_of_ee2028_mode+0x33c>)
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	9200      	str	r2, [sp, #0]
 80013e4:	4b85      	ldr	r3, [pc, #532]	; (80015fc <battle_no_last_of_ee2028_mode+0x340>)
 80013e6:	460a      	mov	r2, r1
 80013e8:	4985      	ldr	r1, [pc, #532]	; (8001600 <battle_no_last_of_ee2028_mode+0x344>)
 80013ea:	4886      	ldr	r0, [pc, #536]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 80013ec:	f004 ff62 	bl	80062b4 <siprintf>
            gun_charge * 10);
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80013f0:	4884      	ldr	r0, [pc, #528]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 80013f2:	f7fe feed 	bl	80001d0 <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fe:	4981      	ldr	r1, [pc, #516]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 8001400:	4881      	ldr	r0, [pc, #516]	; (8001608 <battle_no_last_of_ee2028_mode+0x34c>)
 8001402:	f003 fa2d 	bl	8004860 <HAL_UART_Transmit>

        // clear flag
        single_press = BOOL_CLR;
 8001406:	4b7a      	ldr	r3, [pc, #488]	; (80015f0 <battle_no_last_of_ee2028_mode+0x334>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    }

    // read TPHAGM telem and send UART @ 1 Hz
    if (HAL_GetTick() - last_telem_tick >= 1000) {
 800140c:	f001 ffbc 	bl	8003388 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	4b7e      	ldr	r3, [pc, #504]	; (800160c <battle_no_last_of_ee2028_mode+0x350>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800141c:	f0c0 80d1 	bcc.w	80015c2 <battle_no_last_of_ee2028_mode+0x306>
        pressure_data = read_pressure();
 8001420:	f000 fbd5 	bl	8001bce <read_pressure>
 8001424:	eef0 7a40 	vmov.f32	s15, s0
 8001428:	4b79      	ldr	r3, [pc, #484]	; (8001610 <battle_no_last_of_ee2028_mode+0x354>)
 800142a:	edc3 7a00 	vstr	s15, [r3]
        read_mag(mag_data);
 800142e:	4879      	ldr	r0, [pc, #484]	; (8001614 <battle_no_last_of_ee2028_mode+0x358>)
 8001430:	f000 fbc2 	bl	8001bb8 <read_mag>

        print_threshold_acc();
 8001434:	f000 fcac 	bl	8001d90 <print_threshold_acc>
        print_threshold_gyro();
 8001438:	f000 fd1e 	bl	8001e78 <print_threshold_gyro>
        print_threshold_mag();
 800143c:	f000 fd90 	bl	8001f60 <print_threshold_mag>
        print_threshold_hum();
 8001440:	f000 fe04 	bl	800204c <print_threshold_hum>
        print_threshold_press();
 8001444:	f000 fe2e 	bl	80020a4 <print_threshold_press>
        print_threshold_temp();
 8001448:	f000 fe5a 	bl	8002100 <print_threshold_temp>

        if ((acc_thres_flag | gyro_thres_flag | mag_thres_flag | pressure_thres_flag | humidity_thres_flag | temp_thres_flag) == BOOL_CLR) {
 800144c:	4b72      	ldr	r3, [pc, #456]	; (8001618 <battle_no_last_of_ee2028_mode+0x35c>)
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	4b72      	ldr	r3, [pc, #456]	; (800161c <battle_no_last_of_ee2028_mode+0x360>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4313      	orrs	r3, r2
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b71      	ldr	r3, [pc, #452]	; (8001620 <battle_no_last_of_ee2028_mode+0x364>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4313      	orrs	r3, r2
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b70      	ldr	r3, [pc, #448]	; (8001624 <battle_no_last_of_ee2028_mode+0x368>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4313      	orrs	r3, r2
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b6f      	ldr	r3, [pc, #444]	; (8001628 <battle_no_last_of_ee2028_mode+0x36c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4313      	orrs	r3, r2
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b6e      	ldr	r3, [pc, #440]	; (800162c <battle_no_last_of_ee2028_mode+0x370>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4313      	orrs	r3, r2
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f083 0301 	eor.w	r3, r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 809a 	beq.w	80015b8 <battle_no_last_of_ee2028_mode+0x2fc>
            // no threshold violation, print normal telem

            // split to multiple messages to fit in buffer
            sprintf(uart_buffer, "T: %.2f degC, P: %.2f kPA, H: %.2f%%, ", temp_data, pressure_data, humidity_data);
 8001484:	4b6a      	ldr	r3, [pc, #424]	; (8001630 <battle_no_last_of_ee2028_mode+0x374>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f85d 	bl	8000548 <__aeabi_f2d>
 800148e:	4680      	mov	r8, r0
 8001490:	4689      	mov	r9, r1
 8001492:	4b5f      	ldr	r3, [pc, #380]	; (8001610 <battle_no_last_of_ee2028_mode+0x354>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f856 	bl	8000548 <__aeabi_f2d>
 800149c:	4604      	mov	r4, r0
 800149e:	460d      	mov	r5, r1
 80014a0:	4b64      	ldr	r3, [pc, #400]	; (8001634 <battle_no_last_of_ee2028_mode+0x378>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f84f 	bl	8000548 <__aeabi_f2d>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014b2:	e9cd 4500 	strd	r4, r5, [sp]
 80014b6:	4642      	mov	r2, r8
 80014b8:	464b      	mov	r3, r9
 80014ba:	495f      	ldr	r1, [pc, #380]	; (8001638 <battle_no_last_of_ee2028_mode+0x37c>)
 80014bc:	4851      	ldr	r0, [pc, #324]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 80014be:	f004 fef9 	bl	80062b4 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80014c2:	4850      	ldr	r0, [pc, #320]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 80014c4:	f7fe fe84 	bl	80001d0 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d0:	494c      	ldr	r1, [pc, #304]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 80014d2:	484d      	ldr	r0, [pc, #308]	; (8001608 <battle_no_last_of_ee2028_mode+0x34c>)
 80014d4:	f003 f9c4 	bl	8004860 <HAL_UART_Transmit>

            sprintf(uart_buffer, "Ax: %.2f ms-2, Ay: %.2f ms-2, Az: %.2f ms-2, ", accel_data[0], accel_data[1], accel_data[2]);
 80014d8:	4b58      	ldr	r3, [pc, #352]	; (800163c <battle_no_last_of_ee2028_mode+0x380>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f833 	bl	8000548 <__aeabi_f2d>
 80014e2:	4680      	mov	r8, r0
 80014e4:	4689      	mov	r9, r1
 80014e6:	4b55      	ldr	r3, [pc, #340]	; (800163c <battle_no_last_of_ee2028_mode+0x380>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f82c 	bl	8000548 <__aeabi_f2d>
 80014f0:	4604      	mov	r4, r0
 80014f2:	460d      	mov	r5, r1
 80014f4:	4b51      	ldr	r3, [pc, #324]	; (800163c <battle_no_last_of_ee2028_mode+0x380>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f825 	bl	8000548 <__aeabi_f2d>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001506:	e9cd 4500 	strd	r4, r5, [sp]
 800150a:	4642      	mov	r2, r8
 800150c:	464b      	mov	r3, r9
 800150e:	494c      	ldr	r1, [pc, #304]	; (8001640 <battle_no_last_of_ee2028_mode+0x384>)
 8001510:	483c      	ldr	r0, [pc, #240]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 8001512:	f004 fecf 	bl	80062b4 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001516:	483b      	ldr	r0, [pc, #236]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 8001518:	f7fe fe5a 	bl	80001d0 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	b29a      	uxth	r2, r3
 8001520:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001524:	4937      	ldr	r1, [pc, #220]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 8001526:	4838      	ldr	r0, [pc, #224]	; (8001608 <battle_no_last_of_ee2028_mode+0x34c>)
 8001528:	f003 f99a 	bl	8004860 <HAL_UART_Transmit>

            sprintf(uart_buffer, "Gx: %.2f dps, Gy: %.2f dps, Gz: %.2f dps, ", gyro_data[0], gyro_data[1], gyro_data[2]);
 800152c:	4b45      	ldr	r3, [pc, #276]	; (8001644 <battle_no_last_of_ee2028_mode+0x388>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f809 	bl	8000548 <__aeabi_f2d>
 8001536:	4680      	mov	r8, r0
 8001538:	4689      	mov	r9, r1
 800153a:	4b42      	ldr	r3, [pc, #264]	; (8001644 <battle_no_last_of_ee2028_mode+0x388>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f802 	bl	8000548 <__aeabi_f2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <battle_no_last_of_ee2028_mode+0x388>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fffb 	bl	8000548 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800155a:	e9cd 4500 	strd	r4, r5, [sp]
 800155e:	4642      	mov	r2, r8
 8001560:	464b      	mov	r3, r9
 8001562:	4939      	ldr	r1, [pc, #228]	; (8001648 <battle_no_last_of_ee2028_mode+0x38c>)
 8001564:	4827      	ldr	r0, [pc, #156]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 8001566:	f004 fea5 	bl	80062b4 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 800156a:	4826      	ldr	r0, [pc, #152]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 800156c:	f7fe fe30 	bl	80001d0 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	b29a      	uxth	r2, r3
 8001574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001578:	4922      	ldr	r1, [pc, #136]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 800157a:	4823      	ldr	r0, [pc, #140]	; (8001608 <battle_no_last_of_ee2028_mode+0x34c>)
 800157c:	f003 f970 	bl	8004860 <HAL_UART_Transmit>

            sprintf(uart_buffer, "Mx: %d mG, My: %d mG, Mz: %d mG\r\n", mag_data[0], mag_data[1], mag_data[2]);
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <battle_no_last_of_ee2028_mode+0x358>)
 8001582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001586:	461a      	mov	r2, r3
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <battle_no_last_of_ee2028_mode+0x358>)
 800158a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800158e:	4619      	mov	r1, r3
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <battle_no_last_of_ee2028_mode+0x358>)
 8001592:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	460b      	mov	r3, r1
 800159a:	492c      	ldr	r1, [pc, #176]	; (800164c <battle_no_last_of_ee2028_mode+0x390>)
 800159c:	4819      	ldr	r0, [pc, #100]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 800159e:	f004 fe89 	bl	80062b4 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80015a2:	4818      	ldr	r0, [pc, #96]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 80015a4:	f7fe fe14 	bl	80001d0 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015b0:	4914      	ldr	r1, [pc, #80]	; (8001604 <battle_no_last_of_ee2028_mode+0x348>)
 80015b2:	4815      	ldr	r0, [pc, #84]	; (8001608 <battle_no_last_of_ee2028_mode+0x34c>)
 80015b4:	f003 f954 	bl	8004860 <HAL_UART_Transmit>
        }

        last_telem_tick = HAL_GetTick();
 80015b8:	f001 fee6 	bl	8003388 <HAL_GetTick>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <battle_no_last_of_ee2028_mode+0x350>)
 80015c0:	6013      	str	r3, [r2, #0]
    }

    // if upside down, go to BATTLE_LAST_OF_EE2028_MODE
    if (d6d_data & D6D_SRC_UPSIDEDOWN) {
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <battle_no_last_of_ee2028_mode+0x394>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00b      	beq.n	80015e6 <battle_no_last_of_ee2028_mode+0x32a>
        *p_state = BATTLE_LAST_OF_EE2028_MODE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2202      	movs	r2, #2
 80015d2:	701a      	strb	r2, [r3, #0]
        last_telem_tick = 0;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <battle_no_last_of_ee2028_mode+0x350>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
        last_of_ee2028_tick = HAL_GetTick();
 80015da:	f001 fed5 	bl	8003388 <HAL_GetTick>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <battle_no_last_of_ee2028_mode+0x398>)
 80015e2:	6013      	str	r3, [r2, #0]
        return;
 80015e4:	bf00      	nop
    }
}
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015ee:	bf00      	nop
 80015f0:	20000251 	.word	0x20000251
 80015f4:	200003a2 	.word	0x200003a2
 80015f8:	080093ec 	.word	0x080093ec
 80015fc:	080093ac 	.word	0x080093ac
 8001600:	0800940c 	.word	0x0800940c
 8001604:	20000254 	.word	0x20000254
 8001608:	200002d4 	.word	0x200002d4
 800160c:	20000354 	.word	0x20000354
 8001610:	20000380 	.word	0x20000380
 8001614:	20000378 	.word	0x20000378
 8001618:	20000375 	.word	0x20000375
 800161c:	20000376 	.word	0x20000376
 8001620:	2000037e 	.word	0x2000037e
 8001624:	20000384 	.word	0x20000384
 8001628:	20000390 	.word	0x20000390
 800162c:	20000391 	.word	0x20000391
 8001630:	2000038c 	.word	0x2000038c
 8001634:	20000388 	.word	0x20000388
 8001638:	0800942c 	.word	0x0800942c
 800163c:	2000035c 	.word	0x2000035c
 8001640:	08009454 	.word	0x08009454
 8001644:	20000368 	.word	0x20000368
 8001648:	08009340 	.word	0x08009340
 800164c:	08009484 	.word	0x08009484
 8001650:	20000374 	.word	0x20000374
 8001654:	20000248 	.word	0x20000248

08001658 <battle_last_of_ee2028_mode>:

static void battle_last_of_ee2028_mode(uint8_t* p_state)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
    // in BATTLE_LAST_OF_EE2028_MODE, LED blinks at 2 Hz
    led_blink(LED_2HZ);
 8001660:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001664:	f000 f968 	bl	8001938 <led_blink>

    // send help UART @ 1 Hz
    if (HAL_GetTick() - last_telem_tick >= 1000) {
 8001668:	f001 fe8e 	bl	8003388 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	4b33      	ldr	r3, [pc, #204]	; (800173c <battle_last_of_ee2028_mode+0xe4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001678:	d313      	bcc.n	80016a2 <battle_last_of_ee2028_mode+0x4a>
        sprintf(uart_buffer, "Drone Was Attacked! \r\n");
 800167a:	4931      	ldr	r1, [pc, #196]	; (8001740 <battle_last_of_ee2028_mode+0xe8>)
 800167c:	4831      	ldr	r0, [pc, #196]	; (8001744 <battle_last_of_ee2028_mode+0xec>)
 800167e:	f004 fe19 	bl	80062b4 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001682:	4830      	ldr	r0, [pc, #192]	; (8001744 <battle_last_of_ee2028_mode+0xec>)
 8001684:	f7fe fda4 	bl	80001d0 <strlen>
 8001688:	4603      	mov	r3, r0
 800168a:	b29a      	uxth	r2, r3
 800168c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001690:	492c      	ldr	r1, [pc, #176]	; (8001744 <battle_last_of_ee2028_mode+0xec>)
 8001692:	482d      	ldr	r0, [pc, #180]	; (8001748 <battle_last_of_ee2028_mode+0xf0>)
 8001694:	f003 f8e4 	bl	8004860 <HAL_UART_Transmit>
        last_telem_tick = HAL_GetTick();
 8001698:	f001 fe76 	bl	8003388 <HAL_GetTick>
 800169c:	4603      	mov	r3, r0
 800169e:	4a27      	ldr	r2, [pc, #156]	; (800173c <battle_last_of_ee2028_mode+0xe4>)
 80016a0:	6013      	str	r3, [r2, #0]
    }

    // TODO Disable interupt for telem monitoring

    // in STANDBY_MODE, single press does nothing
    if (single_press) {
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <battle_last_of_ee2028_mode+0xf4>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <battle_last_of_ee2028_mode+0x58>
        // does nothing, but still need to reset the flag
        single_press = BOOL_CLR;
 80016aa:	4b28      	ldr	r3, [pc, #160]	; (800174c <battle_last_of_ee2028_mode+0xf4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
    }

    // in BATTLE_LAST_OF_EE2028_MODE, double press within 10 s to enter BATTLE_NO_LAST_OF_EE2028_MODE else DEAD_MODE
    if (HAL_GetTick() - last_of_ee2028_tick <= 10000) {
 80016b0:	f001 fe6a 	bl	8003388 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <battle_last_of_ee2028_mode+0xf8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d824      	bhi.n	800170e <battle_last_of_ee2028_mode+0xb6>
        if (double_press) {
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <battle_last_of_ee2028_mode+0xfc>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d033      	beq.n	8001734 <battle_last_of_ee2028_mode+0xdc>
            uint8_t d6d_src = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_D6D_SRC);
 80016cc:	211d      	movs	r1, #29
 80016ce:	20d4      	movs	r0, #212	; 0xd4
 80016d0:	f001 fa7a 	bl	8002bc8 <SENSOR_IO_Read>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]

            // if not upside down, go to BATTLE_NO_LAST_OF_EE2028_MODE
            if (!(d6d_src & D6D_SRC_UPSIDEDOWN)) {
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d111      	bne.n	8001706 <battle_last_of_ee2028_mode+0xae>
                *p_state = BATTLE_NO_LAST_OF_EE2028_MODE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
                sprintf(uart_buffer, "Rescued :D \r\n");
 80016e8:	491b      	ldr	r1, [pc, #108]	; (8001758 <battle_last_of_ee2028_mode+0x100>)
 80016ea:	4816      	ldr	r0, [pc, #88]	; (8001744 <battle_last_of_ee2028_mode+0xec>)
 80016ec:	f004 fde2 	bl	80062b4 <siprintf>
                HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80016f0:	4814      	ldr	r0, [pc, #80]	; (8001744 <battle_last_of_ee2028_mode+0xec>)
 80016f2:	f7fe fd6d 	bl	80001d0 <strlen>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016fe:	4911      	ldr	r1, [pc, #68]	; (8001744 <battle_last_of_ee2028_mode+0xec>)
 8001700:	4811      	ldr	r0, [pc, #68]	; (8001748 <battle_last_of_ee2028_mode+0xf0>)
 8001702:	f003 f8ad 	bl	8004860 <HAL_UART_Transmit>
            }

            double_press = BOOL_CLR;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <battle_last_of_ee2028_mode+0xfc>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
            return;
 800170c:	e012      	b.n	8001734 <battle_last_of_ee2028_mode+0xdc>
        }
    } else {
        // goes to DEAD_MODE
        *p_state = DEAD_MODE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2203      	movs	r2, #3
 8001712:	701a      	strb	r2, [r3, #0]
        sprintf(uart_buffer, "Dead :( \r\n");
 8001714:	4911      	ldr	r1, [pc, #68]	; (800175c <battle_last_of_ee2028_mode+0x104>)
 8001716:	480b      	ldr	r0, [pc, #44]	; (8001744 <battle_last_of_ee2028_mode+0xec>)
 8001718:	f004 fdcc 	bl	80062b4 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 800171c:	4809      	ldr	r0, [pc, #36]	; (8001744 <battle_last_of_ee2028_mode+0xec>)
 800171e:	f7fe fd57 	bl	80001d0 <strlen>
 8001722:	4603      	mov	r3, r0
 8001724:	b29a      	uxth	r2, r3
 8001726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800172a:	4906      	ldr	r1, [pc, #24]	; (8001744 <battle_last_of_ee2028_mode+0xec>)
 800172c:	4806      	ldr	r0, [pc, #24]	; (8001748 <battle_last_of_ee2028_mode+0xf0>)
 800172e:	f003 f897 	bl	8004860 <HAL_UART_Transmit>
        return;
 8001732:	bf00      	nop
    }
}
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000354 	.word	0x20000354
 8001740:	080094a8 	.word	0x080094a8
 8001744:	20000254 	.word	0x20000254
 8001748:	200002d4 	.word	0x200002d4
 800174c:	20000251 	.word	0x20000251
 8001750:	20000248 	.word	0x20000248
 8001754:	20000252 	.word	0x20000252
 8001758:	080094c0 	.word	0x080094c0
 800175c:	080094d0 	.word	0x080094d0

08001760 <dead_mode>:

static void dead_mode(uint8_t* p_state)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
    // in DEAD_MODE, LED blinks at 2 Hz
    led_blink(LED_2HZ);
 8001768:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800176c:	f000 f8e4 	bl	8001938 <led_blink>

    // in DEAD_MODE, double press does nothing
    if (double_press) {
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <dead_mode+0x34>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <dead_mode+0x1e>
        // does nothing, but still need to reset the flag
        double_press = BOOL_CLR;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <dead_mode+0x34>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
    }

    // in DEAD_MODE, single press does nothing
    if (single_press) {
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <dead_mode+0x38>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <dead_mode+0x2c>
        // does nothing, but still need to reset the flag
        single_press = BOOL_CLR;
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <dead_mode+0x38>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
    }
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000252 	.word	0x20000252
 8001798:	20000251 	.word	0x20000251

0800179c <UART1_Init>:

static void UART1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
    /* Pin configuration for UART. BSP_COM_Init() can do this automatically */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <UART1_Init+0xa0>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a25      	ldr	r2, [pc, #148]	; (800183c <UART1_Init+0xa0>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b23      	ldr	r3, [pc, #140]	; (800183c <UART1_Init+0xa0>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017c8:	2307      	movs	r3, #7
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 80017cc:	23c0      	movs	r3, #192	; 0xc0
 80017ce:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	4619      	mov	r1, r3
 80017e0:	4817      	ldr	r0, [pc, #92]	; (8001840 <UART1_Init+0xa4>)
 80017e2:	f001 feef 	bl	80035c4 <HAL_GPIO_Init>

    /* Configuring UART1 */
    huart1.Instance = USART1;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <UART1_Init+0xa8>)
 80017e8:	4a17      	ldr	r2, [pc, #92]	; (8001848 <UART1_Init+0xac>)
 80017ea:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <UART1_Init+0xa8>)
 80017ee:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f2:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <UART1_Init+0xa8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <UART1_Init+0xa8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001800:	4b10      	ldr	r3, [pc, #64]	; (8001844 <UART1_Init+0xa8>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <UART1_Init+0xa8>)
 8001808:	220c      	movs	r2, #12
 800180a:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <UART1_Init+0xa8>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <UART1_Init+0xa8>)
 8001814:	2200      	movs	r2, #0
 8001816:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <UART1_Init+0xa8>)
 800181a:	2200      	movs	r2, #0
 800181c:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <UART1_Init+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001824:	4807      	ldr	r0, [pc, #28]	; (8001844 <UART1_Init+0xa8>)
 8001826:	f002 ffcd 	bl	80047c4 <HAL_UART_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d000      	beq.n	8001832 <UART1_Init+0x96>
        while (1) { }
 8001830:	e7fe      	b.n	8001830 <UART1_Init+0x94>
    }
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	48000400 	.word	0x48000400
 8001844:	200002d4 	.word	0x200002d4
 8001848:	40013800 	.word	0x40013800

0800184c <HAL_GPIO_EXTI_Callback>:
 * @brief ISR for GPIO
 * @param uint16_t GPIO_Pin
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
    // button
    if (GPIO_Pin == USER_BUTTON_PIN) {
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800185c:	d107      	bne.n	800186e <HAL_GPIO_EXTI_Callback+0x22>
        button_press_tick = HAL_GetTick();
 800185e:	f001 fd93 	bl	8003388 <HAL_GetTick>
 8001862:	4603      	mov	r3, r0
 8001864:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <HAL_GPIO_EXTI_Callback+0x48>)
 8001866:	6013      	str	r3, [r2, #0]
        button_flag = BOOL_SET;
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_GPIO_EXTI_Callback+0x4c>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
    }

    // EXTI from LSM6DSL, flag to read Accel Data, Gyro Data and LSM6DSL_ACC_GYRO_D6D_SRC
    if (GPIO_Pin == GPIO_PIN_11) {
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001874:	d102      	bne.n	800187c <HAL_GPIO_EXTI_Callback+0x30>
        acc_gyro_d6d_ready = BOOL_SET;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_GPIO_EXTI_Callback+0x50>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
    }

    // EXTI from HTS221, flag to read Humidity and Temperature
    if (GPIO_Pin == GPIO_PIN_15) {
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001882:	d102      	bne.n	800188a <HAL_GPIO_EXTI_Callback+0x3e>
        hum_temp_ready = BOOL_SET;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
    }
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2000024c 	.word	0x2000024c
 8001898:	20000250 	.word	0x20000250
 800189c:	20000358 	.word	0x20000358
 80018a0:	20000000 	.word	0x20000000

080018a4 <button_press>:
 * double press changes the single_press and double_press global variable
 * @param None
 * @retval None
 */
static void button_press(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
    static uint32_t button_last_tick = 0;
    static bool button_wait_flag = BOOL_CLR;

    if (button_flag == BOOL_SET) {
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <button_press+0x7c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d01e      	beq.n	80018f0 <button_press+0x4c>
        if (button_press_tick - button_last_tick > 500) {
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <button_press+0x80>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <button_press+0x84>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018c0:	d907      	bls.n	80018d2 <button_press+0x2e>
            // new event: either a single click or the first click of a double click
            button_last_tick = button_press_tick;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <button_press+0x80>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a18      	ldr	r2, [pc, #96]	; (8001928 <button_press+0x84>)
 80018c8:	6013      	str	r3, [r2, #0]
            button_wait_flag = BOOL_SET; // used to check for single press later
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <button_press+0x88>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e00b      	b.n	80018ea <button_press+0x46>
        } else {
            // forces the next click to be a new event
            // prevents triple click within 500ms to be taken as two double clicks
            button_last_tick = 0;
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <button_press+0x84>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

            // the last time pressed is within 500ms ==> double press
            double_press = BOOL_SET;
 80018d8:	4b15      	ldr	r3, [pc, #84]	; (8001930 <button_press+0x8c>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
            single_press = BOOL_CLR;
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <button_press+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
            button_wait_flag = BOOL_CLR;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <button_press+0x88>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
        }
        button_flag = BOOL_CLR;
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <button_press+0x7c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
    }

    if (button_wait_flag == BOOL_SET && (HAL_GetTick() - button_last_tick > 500)) {
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <button_press+0x88>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d011      	beq.n	800191c <button_press+0x78>
 80018f8:	f001 fd46 	bl	8003388 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <button_press+0x84>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001908:	d908      	bls.n	800191c <button_press+0x78>
        // wait for 0.5 to decide its single press or not
        double_press = BOOL_CLR;
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <button_press+0x8c>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
        single_press = BOOL_SET;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <button_press+0x90>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
        button_wait_flag = BOOL_CLR;
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <button_press+0x88>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
    }
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000250 	.word	0x20000250
 8001924:	2000024c 	.word	0x2000024c
 8001928:	200003a4 	.word	0x200003a4
 800192c:	200003a8 	.word	0x200003a8
 8001930:	20000252 	.word	0x20000252
 8001934:	20000251 	.word	0x20000251

08001938 <led_blink>:
 * always on
 * @param uint32_t period
 * @retval None
 */
static void led_blink(uint32_t period)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
    static uint32_t last_tick = 0;
    if (period == LED_ALWAYS_ON) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d103      	bne.n	800194e <led_blink+0x16>
        BSP_LED_On(LED2);
 8001946:	2000      	movs	r0, #0
 8001948:	f000 ffa8 	bl	800289c <BSP_LED_On>
    } else if ((HAL_GetTick() - last_tick) >= (period >> 1)) {
        // toggle every half a period, >> 1  to aproximate half, duty cycle is 50%
        BSP_LED_Toggle(LED2);
        last_tick = HAL_GetTick();
    }
}
 800194c:	e011      	b.n	8001972 <led_blink+0x3a>
    } else if ((HAL_GetTick() - last_tick) >= (period >> 1)) {
 800194e:	f001 fd1b 	bl	8003388 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <led_blink+0x44>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	1ad2      	subs	r2, r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	429a      	cmp	r2, r3
 8001960:	d307      	bcc.n	8001972 <led_blink+0x3a>
        BSP_LED_Toggle(LED2);
 8001962:	2000      	movs	r0, #0
 8001964:	f000 ffb0 	bl	80028c8 <BSP_LED_Toggle>
        last_tick = HAL_GetTick();
 8001968:	f001 fd0e 	bl	8003388 <HAL_GetTick>
 800196c:	4603      	mov	r3, r0
 800196e:	4a03      	ldr	r2, [pc, #12]	; (800197c <led_blink+0x44>)
 8001970:	6013      	str	r3, [r2, #0]
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200003ac 	.word	0x200003ac

08001980 <read_ready_acc_gyro_d6d>:
 * @param p_acc_thres_flag pointer bool for the threshold monitoring
 * @param p_gyro_thres_flag pointer bool for the threshold monitoring
 * @retval None
 */
static void read_ready_acc_gyro_d6d(float* p_acc, float* p_gyro, uint8_t* p_d6d, bool* p_acc_thres_flag, bool* p_gyro_thres_flag)
{
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
    // only read when data is ready to reduce I2C overhead and unnecessary reads
    if (acc_gyro_d6d_ready == BOOL_SET) {
 800198e:	4b86      	ldr	r3, [pc, #536]	; (8001ba8 <read_ready_acc_gyro_d6d+0x228>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80fb 	beq.w	8001b90 <read_ready_acc_gyro_d6d+0x210>
        int16_t accel_data_i16[3] = { 0 }; // array to store the x, y and z readings.
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	809a      	strh	r2, [r3, #4]
        LSM6DSL_AccReadXYZ(accel_data_i16); // read accelerometer
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 fb5d 	bl	8003068 <LSM6DSL_AccReadXYZ>
        // the function above returns 16 bit integers which are acceleration in mg (9.8/1000 m/s^2).
        // Converting to float in m/s^2
        for (int i = 0; i < 3; i++) {
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
 80019b2:	e021      	b.n	80019f8 <read_ready_acc_gyro_d6d+0x78>
            *(p_acc + i) = (float)accel_data_i16[i] * (9.8 / 1000.0f);
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	3328      	adds	r3, #40	; 0x28
 80019ba:	443b      	add	r3, r7
 80019bc:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c8:	ee17 0a90 	vmov	r0, s15
 80019cc:	f7fe fdbc 	bl	8000548 <__aeabi_f2d>
 80019d0:	a371      	add	r3, pc, #452	; (adr r3, 8001b98 <read_ready_acc_gyro_d6d+0x218>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fe0f 	bl	80005f8 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	18d4      	adds	r4, r2, r3
 80019ea:	f7ff f8dd 	bl	8000ba8 <__aeabi_d2f>
 80019ee:	4603      	mov	r3, r0
 80019f0:	6023      	str	r3, [r4, #0]
        for (int i = 0; i < 3; i++) {
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	3301      	adds	r3, #1
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	ddda      	ble.n	80019b4 <read_ready_acc_gyro_d6d+0x34>
        }

        // the function does sensitivity conversion to mdps and returns float in mdps
        LSM6DSL_GyroReadXYZAngRate(p_gyro);
 80019fe:	68b8      	ldr	r0, [r7, #8]
 8001a00:	f001 fbca 	bl	8003198 <LSM6DSL_GyroReadXYZAngRate>
        // Converting to float in dps
        for (int i = 0; i < 3; i++) {
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
 8001a08:	e012      	b.n	8001a30 <read_ready_acc_gyro_d6d+0xb0>
            *(p_gyro + i) = *(p_gyro + i) / 1000.0f;
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	4413      	add	r3, r2
 8001a12:	ed93 7a00 	vldr	s14, [r3]
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	eddf 6a63 	vldr	s13, [pc, #396]	; 8001bac <read_ready_acc_gyro_d6d+0x22c>
 8001a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a26:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	623b      	str	r3, [r7, #32]
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	dde9      	ble.n	8001a0a <read_ready_acc_gyro_d6d+0x8a>
        }

        // flag threshold if the magnitude exceed
        float magnitude = pow(*(p_acc), 2) + pow(*(p_acc + 1), 2) + pow(*(p_acc + 2), 2);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd84 	bl	8000548 <__aeabi_f2d>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8001ba0 <read_ready_acc_gyro_d6d+0x220>
 8001a48:	ec43 2b10 	vmov	d0, r2, r3
 8001a4c:	f006 fd04 	bl	8008458 <pow>
 8001a50:	ec55 4b10 	vmov	r4, r5, d0
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3304      	adds	r3, #4
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd74 	bl	8000548 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8001ba0 <read_ready_acc_gyro_d6d+0x220>
 8001a68:	ec43 2b10 	vmov	d0, r2, r3
 8001a6c:	f006 fcf4 	bl	8008458 <pow>
 8001a70:	ec53 2b10 	vmov	r2, r3, d0
 8001a74:	4620      	mov	r0, r4
 8001a76:	4629      	mov	r1, r5
 8001a78:	f7fe fc08 	bl	800028c <__adddf3>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4614      	mov	r4, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3308      	adds	r3, #8
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd5c 	bl	8000548 <__aeabi_f2d>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8001ba0 <read_ready_acc_gyro_d6d+0x220>
 8001a98:	ec43 2b10 	vmov	d0, r2, r3
 8001a9c:	f006 fcdc 	bl	8008458 <pow>
 8001aa0:	ec53 2b10 	vmov	r2, r3, d0
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	f7fe fbf0 	bl	800028c <__adddf3>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff f878 	bl	8000ba8 <__aeabi_d2f>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	61fb      	str	r3, [r7, #28]
        *p_acc_thres_flag = (magnitude > ACCEL_SQR_UPPER_THRES) ? BOOL_SET : BOOL_CLR;
 8001abc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ac0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001bb0 <read_ready_acc_gyro_d6d+0x230>
 8001ac4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001acc:	bfcc      	ite	gt
 8001ace:	2301      	movgt	r3, #1
 8001ad0:	2300      	movle	r3, #0
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	701a      	strb	r2, [r3, #0]

        magnitude = pow(*(p_gyro), 2) + pow(*(p_gyro + 1), 2) + pow(*(p_gyro + 2), 2);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fd33 	bl	8000548 <__aeabi_f2d>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8001ba0 <read_ready_acc_gyro_d6d+0x220>
 8001aea:	ec43 2b10 	vmov	d0, r2, r3
 8001aee:	f006 fcb3 	bl	8008458 <pow>
 8001af2:	ec55 4b10 	vmov	r4, r5, d0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3304      	adds	r3, #4
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fd23 	bl	8000548 <__aeabi_f2d>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001ba0 <read_ready_acc_gyro_d6d+0x220>
 8001b0a:	ec43 2b10 	vmov	d0, r2, r3
 8001b0e:	f006 fca3 	bl	8008458 <pow>
 8001b12:	ec53 2b10 	vmov	r2, r3, d0
 8001b16:	4620      	mov	r0, r4
 8001b18:	4629      	mov	r1, r5
 8001b1a:	f7fe fbb7 	bl	800028c <__adddf3>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4614      	mov	r4, r2
 8001b24:	461d      	mov	r5, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	3308      	adds	r3, #8
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fd0b 	bl	8000548 <__aeabi_f2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001ba0 <read_ready_acc_gyro_d6d+0x220>
 8001b3a:	ec43 2b10 	vmov	d0, r2, r3
 8001b3e:	f006 fc8b 	bl	8008458 <pow>
 8001b42:	ec53 2b10 	vmov	r2, r3, d0
 8001b46:	4620      	mov	r0, r4
 8001b48:	4629      	mov	r1, r5
 8001b4a:	f7fe fb9f 	bl	800028c <__adddf3>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	f7ff f827 	bl	8000ba8 <__aeabi_d2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	61fb      	str	r3, [r7, #28]
        *p_gyro_thres_flag = (magnitude > GYRO_SQR_UPPER_THRES) ? BOOL_SET : BOOL_CLR;
 8001b5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b62:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001bb4 <read_ready_acc_gyro_d6d+0x234>
 8001b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	bfcc      	ite	gt
 8001b70:	2301      	movgt	r3, #1
 8001b72:	2300      	movle	r3, #0
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b78:	701a      	strb	r2, [r3, #0]

        // read the D6D register to give the orientation
        *p_d6d = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_D6D_SRC);
 8001b7a:	211d      	movs	r1, #29
 8001b7c:	20d4      	movs	r0, #212	; 0xd4
 8001b7e:	f001 f823 	bl	8002bc8 <SENSOR_IO_Read>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	701a      	strb	r2, [r3, #0]

        // clear the DRDY flag
        acc_gyro_d6d_ready = BOOL_CLR;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <read_ready_acc_gyro_d6d+0x228>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
    }
}
 8001b90:	bf00      	nop
 8001b92:	3728      	adds	r7, #40	; 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bdb0      	pop	{r4, r5, r7, pc}
 8001b98:	bc01a36f 	.word	0xbc01a36f
 8001b9c:	3f841205 	.word	0x3f841205
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40000000 	.word	0x40000000
 8001ba8:	20000358 	.word	0x20000358
 8001bac:	447a0000 	.word	0x447a0000
 8001bb0:	42f20000 	.word	0x42f20000
 8001bb4:	461c4000 	.word	0x461c4000

08001bb8 <read_mag>:
 * @brief read mag from LIS3MDL
 * @param int16_t* p_mag pointer to int16_t array of 3 elements
 * @retval None
 */
static void read_mag(int16_t* p_mag)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
    // the function that actually reads the xyz is LIS3MDL_MagReadXYZ in lis3mdl.c
    // the function also does sensitivity conversion to mGauss
    // returns int16_t in mGauss
    LIS3MDL_MagReadXYZ(p_mag);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f001 f909 	bl	8002dd8 <LIS3MDL_MagReadXYZ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <read_pressure>:
 * @brief read pressure from LPS22HB
 * @param None
 * @retval humidity
 */
static float read_pressure(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
    // the function that actually reads the value is LPS22HB_P_ReadPressure in lps22hb.c
    // returns as float in hPa, the read does the concatenation of 3 bytes, 2's complement and *100/4096 then /100
    // divide 10 to convert to kPa
    return BSP_PSENSOR_ReadPressure() / 10;
 8001bd2:	f001 f881 	bl	8002cd8 <BSP_PSENSOR_ReadPressure>
 8001bd6:	eef0 7a40 	vmov.f32	s15, s0
 8001bda:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001be2:	eef0 7a66 	vmov.f32	s15, s13
}
 8001be6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bea:	bd80      	pop	{r7, pc}

08001bec <read_ready_hum_temp>:
 * @param humidity_thres_flag pointer to bool flag
 * @param temp_thres_flag pointer to bool flag
 * @retval None
 */
static void read_ready_hum_temp(float* p_hum, float* p_temp, bool* humidity_thres_flag, bool* temp_thres_flag, int16_t h0_lsb, int16_t h1_lsb, int16_t h0_rh, int16_t h1_rh, int16_t t0_lsb, int16_t t1_lsb, int16_t t0_degc, int16_t t1_degc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
    if (hum_temp_ready == BOOL_SET) {
 8001bfa:	4b61      	ldr	r3, [pc, #388]	; (8001d80 <read_ready_hum_temp+0x194>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80b8 	beq.w	8001d76 <read_ready_hum_temp+0x18a>
        int16_t H_T_out;
        uint8_t buffer[2];
        float tmp_f; 

        // reading humidity
        SENSOR_IO_ReadMultiple(HTS221_I2C_ADDRESS, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001c06:	f107 0214 	add.w	r2, r7, #20
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	21a8      	movs	r1, #168	; 0xa8
 8001c0e:	20be      	movs	r0, #190	; 0xbe
 8001c10:	f000 fff8 	bl	8002c04 <SENSOR_IO_ReadMultiple>

        H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001c14:	7d7b      	ldrb	r3, [r7, #21]
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	7d3b      	ldrb	r3, [r7, #20]
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	83fb      	strh	r3, [r7, #30]

        tmp_f = (float)(H_T_out - h0_lsb) * (float)(h1_rh - h0_rh) / (float)(h1_lsb - h0_lsb)  +  h0_rh;
 8001c22:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001c26:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c34:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8001c38:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c46:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c4a:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001c4e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	ee07 3a90 	vmov	s15, r3
 8001c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c60:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c70:	edc7 7a06 	vstr	s15, [r7, #24]
        tmp_f *= 10.0f;
 8001c74:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c80:	edc7 7a06 	vstr	s15, [r7, #24]

        tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
                : ( tmp_f <    0.0f ) ?    0.0f
 8001c84:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c88:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001d84 <read_ready_hum_temp+0x198>
 8001c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	dd01      	ble.n	8001c9a <read_ready_hum_temp+0xae>
 8001c96:	4b3c      	ldr	r3, [pc, #240]	; (8001d88 <read_ready_hum_temp+0x19c>)
 8001c98:	e00a      	b.n	8001cb0 <read_ready_hum_temp+0xc4>
                : tmp_f;
 8001c9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca6:	d502      	bpl.n	8001cae <read_ready_hum_temp+0xc2>
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	e000      	b.n	8001cb0 <read_ready_hum_temp+0xc4>
 8001cae:	69bb      	ldr	r3, [r7, #24]
        tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001cb0:	61bb      	str	r3, [r7, #24]

        *p_hum = (tmp_f / 10.0f); // returns as float in %
 8001cb2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cb6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001cba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	edc3 7a00 	vstr	s15, [r3]
        
        // reading temperature
        SENSOR_IO_ReadMultiple(HTS221_I2C_ADDRESS, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001cc4:	f107 0214 	add.w	r2, r7, #20
 8001cc8:	2302      	movs	r3, #2
 8001cca:	21aa      	movs	r1, #170	; 0xaa
 8001ccc:	20be      	movs	r0, #190	; 0xbe
 8001cce:	f000 ff99 	bl	8002c04 <SENSOR_IO_ReadMultiple>

        H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001cd2:	7d7b      	ldrb	r3, [r7, #21]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	7d3b      	ldrb	r3, [r7, #20]
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	83fb      	strh	r3, [r7, #30]

        *p_temp = (float)(H_T_out - t0_lsb) * (float)(t1_degc - t0_degc) / (float)(t1_lsb - t0_lsb)  +  t0_degc; // returns as float in deg c
 8001ce0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001ce4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf2:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8001cf6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	ee07 3a90 	vmov	s15, r3
 8001d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d04:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d08:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8001d0c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d1e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	edc3 7a00 	vstr	s15, [r3]

        // flag threshold if the magnitude exceed
        *humidity_thres_flag = *p_hum < HUM_LOWER_THRES ? BOOL_SET : BOOL_CLR;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edd3 7a00 	vldr	s15, [r3]
 8001d3a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001d8c <read_ready_hum_temp+0x1a0>
 8001d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	bf4c      	ite	mi
 8001d48:	2301      	movmi	r3, #1
 8001d4a:	2300      	movpl	r3, #0
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	701a      	strb	r2, [r3, #0]
        *temp_thres_flag = *p_temp > TEMP_UPPER_THRES ? BOOL_SET : BOOL_CLR;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d64:	bfcc      	ite	gt
 8001d66:	2301      	movgt	r3, #1
 8001d68:	2300      	movle	r3, #0
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	701a      	strb	r2, [r3, #0]
        
        // clear the DRDY flag
        hum_temp_ready = BOOL_CLR;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <read_ready_hum_temp+0x194>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
    }
}
 8001d76:	bf00      	nop
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000
 8001d84:	447a0000 	.word	0x447a0000
 8001d88:	447a0000 	.word	0x447a0000
 8001d8c:	42a00000 	.word	0x42a00000

08001d90 <print_threshold_acc>:
/**
 * @brief print warning if over threshold for accel
 * @param None
 * @retval None
 */
static void print_threshold_acc(void){
 8001d90:	b5b0      	push	{r4, r5, r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af02      	add	r7, sp, #8
    if (acc_thres_flag == BOOL_SET) {
 8001d96:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <print_threshold_acc+0xd0>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d057      	beq.n	8001e4e <print_threshold_acc+0xbe>
        // accel exceed print warning
        sprintf(uart_buffer, "|A|: %.2f ms-2 exceed threshold of %d ms-2\r\n", sqrt(pow(accel_data[0], 2) + pow(accel_data[1], 2) + pow(accel_data[2], 2)), ACCEL_UPPER_THRES);
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <print_threshold_acc+0xd4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbd0 	bl	8000548 <__aeabi_f2d>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001e58 <print_threshold_acc+0xc8>
 8001db0:	ec43 2b10 	vmov	d0, r2, r3
 8001db4:	f006 fb50 	bl	8008458 <pow>
 8001db8:	ec55 4b10 	vmov	r4, r5, d0
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <print_threshold_acc+0xd4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbc1 	bl	8000548 <__aeabi_f2d>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001e58 <print_threshold_acc+0xc8>
 8001dce:	ec43 2b10 	vmov	d0, r2, r3
 8001dd2:	f006 fb41 	bl	8008458 <pow>
 8001dd6:	ec53 2b10 	vmov	r2, r3, d0
 8001dda:	4620      	mov	r0, r4
 8001ddc:	4629      	mov	r1, r5
 8001dde:	f7fe fa55 	bl	800028c <__adddf3>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4614      	mov	r4, r2
 8001de8:	461d      	mov	r5, r3
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <print_threshold_acc+0xd4>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbaa 	bl	8000548 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001e58 <print_threshold_acc+0xc8>
 8001dfc:	ec43 2b10 	vmov	d0, r2, r3
 8001e00:	f006 fb2a 	bl	8008458 <pow>
 8001e04:	ec53 2b10 	vmov	r2, r3, d0
 8001e08:	4620      	mov	r0, r4
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	f7fe fa3e 	bl	800028c <__adddf3>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	ec43 2b17 	vmov	d7, r2, r3
 8001e18:	eeb0 0a47 	vmov.f32	s0, s14
 8001e1c:	eef0 0a67 	vmov.f32	s1, s15
 8001e20:	f006 fb8a 	bl	8008538 <sqrt>
 8001e24:	ec51 0b10 	vmov	r0, r1, d0
 8001e28:	230b      	movs	r3, #11
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	490d      	ldr	r1, [pc, #52]	; (8001e68 <print_threshold_acc+0xd8>)
 8001e32:	480e      	ldr	r0, [pc, #56]	; (8001e6c <print_threshold_acc+0xdc>)
 8001e34:	f004 fa3e 	bl	80062b4 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <print_threshold_acc+0xdc>)
 8001e3a:	f7fe f9c9 	bl	80001d0 <strlen>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e46:	4909      	ldr	r1, [pc, #36]	; (8001e6c <print_threshold_acc+0xdc>)
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <print_threshold_acc+0xe0>)
 8001e4a:	f002 fd09 	bl	8004860 <HAL_UART_Transmit>
    }
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bdb0      	pop	{r4, r5, r7, pc}
 8001e54:	f3af 8000 	nop.w
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	40000000 	.word	0x40000000
 8001e60:	20000375 	.word	0x20000375
 8001e64:	2000035c 	.word	0x2000035c
 8001e68:	080094dc 	.word	0x080094dc
 8001e6c:	20000254 	.word	0x20000254
 8001e70:	200002d4 	.word	0x200002d4
 8001e74:	00000000 	.word	0x00000000

08001e78 <print_threshold_gyro>:
/**
 * @brief print warning if over threshold for gyro
 * @param None
 * @retval None
 */
static void print_threshold_gyro(void){
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af02      	add	r7, sp, #8
    if (gyro_thres_flag == BOOL_SET) {
 8001e7e:	4b32      	ldr	r3, [pc, #200]	; (8001f48 <print_threshold_gyro+0xd0>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d057      	beq.n	8001f36 <print_threshold_gyro+0xbe>
        // gyro exceed print warning
        sprintf(uart_buffer, "|G|: %.2f dps exceed threshold of %d dps\r\n", sqrt(pow(gyro_data[0], 2) + pow(gyro_data[1], 2) + pow(gyro_data[2], 2)), GYRO_UPPER_THRES);
 8001e86:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <print_threshold_gyro+0xd4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fb5c 	bl	8000548 <__aeabi_f2d>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001f40 <print_threshold_gyro+0xc8>
 8001e98:	ec43 2b10 	vmov	d0, r2, r3
 8001e9c:	f006 fadc 	bl	8008458 <pow>
 8001ea0:	ec55 4b10 	vmov	r4, r5, d0
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <print_threshold_gyro+0xd4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb4d 	bl	8000548 <__aeabi_f2d>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001f40 <print_threshold_gyro+0xc8>
 8001eb6:	ec43 2b10 	vmov	d0, r2, r3
 8001eba:	f006 facd 	bl	8008458 <pow>
 8001ebe:	ec53 2b10 	vmov	r2, r3, d0
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	f7fe f9e1 	bl	800028c <__adddf3>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4614      	mov	r4, r2
 8001ed0:	461d      	mov	r5, r3
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <print_threshold_gyro+0xd4>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb36 	bl	8000548 <__aeabi_f2d>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001f40 <print_threshold_gyro+0xc8>
 8001ee4:	ec43 2b10 	vmov	d0, r2, r3
 8001ee8:	f006 fab6 	bl	8008458 <pow>
 8001eec:	ec53 2b10 	vmov	r2, r3, d0
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	f7fe f9ca 	bl	800028c <__adddf3>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	ec43 2b17 	vmov	d7, r2, r3
 8001f00:	eeb0 0a47 	vmov.f32	s0, s14
 8001f04:	eef0 0a67 	vmov.f32	s1, s15
 8001f08:	f006 fb16 	bl	8008538 <sqrt>
 8001f0c:	ec51 0b10 	vmov	r0, r1, d0
 8001f10:	2364      	movs	r3, #100	; 0x64
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	490d      	ldr	r1, [pc, #52]	; (8001f50 <print_threshold_gyro+0xd8>)
 8001f1a:	480e      	ldr	r0, [pc, #56]	; (8001f54 <print_threshold_gyro+0xdc>)
 8001f1c:	f004 f9ca 	bl	80062b4 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8001f20:	480c      	ldr	r0, [pc, #48]	; (8001f54 <print_threshold_gyro+0xdc>)
 8001f22:	f7fe f955 	bl	80001d0 <strlen>
 8001f26:	4603      	mov	r3, r0
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2e:	4909      	ldr	r1, [pc, #36]	; (8001f54 <print_threshold_gyro+0xdc>)
 8001f30:	4809      	ldr	r0, [pc, #36]	; (8001f58 <print_threshold_gyro+0xe0>)
 8001f32:	f002 fc95 	bl	8004860 <HAL_UART_Transmit>
    }
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f3c:	f3af 8000 	nop.w
 8001f40:	00000000 	.word	0x00000000
 8001f44:	40000000 	.word	0x40000000
 8001f48:	20000376 	.word	0x20000376
 8001f4c:	20000368 	.word	0x20000368
 8001f50:	0800950c 	.word	0x0800950c
 8001f54:	20000254 	.word	0x20000254
 8001f58:	200002d4 	.word	0x200002d4
 8001f5c:	00000000 	.word	0x00000000

08001f60 <print_threshold_mag>:
/**
 * @brief print warning if over threshold for mag
 * @param None
 * @retval None
 */
static void print_threshold_mag(void){
 8001f60:	b5b0      	push	{r4, r5, r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af02      	add	r7, sp, #8
    if (mag_thres_flag == BOOL_SET) {
 8001f66:	4b34      	ldr	r3, [pc, #208]	; (8002038 <print_threshold_mag+0xd8>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d05b      	beq.n	8002026 <print_threshold_mag+0xc6>
        // mag exceed print warning
        sprintf(uart_buffer, "|M|: %.2f mG exceed threshold of %d mG\r\n", sqrt(pow(mag_data[0], 2) + pow(mag_data[1], 2) + pow(mag_data[2], 2)), MAG_UPPER_THRES);
 8001f6e:	4b33      	ldr	r3, [pc, #204]	; (800203c <print_threshold_mag+0xdc>)
 8001f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fad5 	bl	8000524 <__aeabi_i2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8002030 <print_threshold_mag+0xd0>
 8001f82:	ec43 2b10 	vmov	d0, r2, r3
 8001f86:	f006 fa67 	bl	8008458 <pow>
 8001f8a:	ec55 4b10 	vmov	r4, r5, d0
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <print_threshold_mag+0xdc>)
 8001f90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fac5 	bl	8000524 <__aeabi_i2d>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8002030 <print_threshold_mag+0xd0>
 8001fa2:	ec43 2b10 	vmov	d0, r2, r3
 8001fa6:	f006 fa57 	bl	8008458 <pow>
 8001faa:	ec53 2b10 	vmov	r2, r3, d0
 8001fae:	4620      	mov	r0, r4
 8001fb0:	4629      	mov	r1, r5
 8001fb2:	f7fe f96b 	bl	800028c <__adddf3>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4614      	mov	r4, r2
 8001fbc:	461d      	mov	r5, r3
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <print_threshold_mag+0xdc>)
 8001fc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe faad 	bl	8000524 <__aeabi_i2d>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8002030 <print_threshold_mag+0xd0>
 8001fd2:	ec43 2b10 	vmov	d0, r2, r3
 8001fd6:	f006 fa3f 	bl	8008458 <pow>
 8001fda:	ec53 2b10 	vmov	r2, r3, d0
 8001fde:	4620      	mov	r0, r4
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	f7fe f953 	bl	800028c <__adddf3>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	ec43 2b17 	vmov	d7, r2, r3
 8001fee:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff2:	eef0 0a67 	vmov.f32	s1, s15
 8001ff6:	f006 fa9f 	bl	8008538 <sqrt>
 8001ffa:	ec51 0b10 	vmov	r0, r1, d0
 8001ffe:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	490d      	ldr	r1, [pc, #52]	; (8002040 <print_threshold_mag+0xe0>)
 800200a:	480e      	ldr	r0, [pc, #56]	; (8002044 <print_threshold_mag+0xe4>)
 800200c:	f004 f952 	bl	80062b4 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8002010:	480c      	ldr	r0, [pc, #48]	; (8002044 <print_threshold_mag+0xe4>)
 8002012:	f7fe f8dd 	bl	80001d0 <strlen>
 8002016:	4603      	mov	r3, r0
 8002018:	b29a      	uxth	r2, r3
 800201a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800201e:	4909      	ldr	r1, [pc, #36]	; (8002044 <print_threshold_mag+0xe4>)
 8002020:	4809      	ldr	r0, [pc, #36]	; (8002048 <print_threshold_mag+0xe8>)
 8002022:	f002 fc1d 	bl	8004860 <HAL_UART_Transmit>
    }
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	bdb0      	pop	{r4, r5, r7, pc}
 800202c:	f3af 8000 	nop.w
 8002030:	00000000 	.word	0x00000000
 8002034:	40000000 	.word	0x40000000
 8002038:	2000037e 	.word	0x2000037e
 800203c:	20000378 	.word	0x20000378
 8002040:	08009538 	.word	0x08009538
 8002044:	20000254 	.word	0x20000254
 8002048:	200002d4 	.word	0x200002d4

0800204c <print_threshold_hum>:
/**
 * @brief print warning if over threshold for hum
 * @param None
 * @retval None
 */
static void print_threshold_hum(void){
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af02      	add	r7, sp, #8
    if (humidity_thres_flag == BOOL_SET) {
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <print_threshold_hum+0x44>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d017      	beq.n	800208a <print_threshold_hum+0x3e>
        // hum exceed print warning
        sprintf(uart_buffer, "H: %.2f%% exceed threshold of %d%%\r\n", humidity_data, HUM_LOWER_THRES);
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <print_threshold_hum+0x48>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fa72 	bl	8000548 <__aeabi_f2d>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	2150      	movs	r1, #80	; 0x50
 800206a:	9100      	str	r1, [sp, #0]
 800206c:	490a      	ldr	r1, [pc, #40]	; (8002098 <print_threshold_hum+0x4c>)
 800206e:	480b      	ldr	r0, [pc, #44]	; (800209c <print_threshold_hum+0x50>)
 8002070:	f004 f920 	bl	80062b4 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8002074:	4809      	ldr	r0, [pc, #36]	; (800209c <print_threshold_hum+0x50>)
 8002076:	f7fe f8ab 	bl	80001d0 <strlen>
 800207a:	4603      	mov	r3, r0
 800207c:	b29a      	uxth	r2, r3
 800207e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002082:	4906      	ldr	r1, [pc, #24]	; (800209c <print_threshold_hum+0x50>)
 8002084:	4806      	ldr	r0, [pc, #24]	; (80020a0 <print_threshold_hum+0x54>)
 8002086:	f002 fbeb 	bl	8004860 <HAL_UART_Transmit>
    }
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000390 	.word	0x20000390
 8002094:	20000388 	.word	0x20000388
 8002098:	08009564 	.word	0x08009564
 800209c:	20000254 	.word	0x20000254
 80020a0:	200002d4 	.word	0x200002d4

080020a4 <print_threshold_press>:
/**
 * @brief print warning if over threshold for press
 * @param None
 * @retval None
 */
static void print_threshold_press(void){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af02      	add	r7, sp, #8
    if (pressure_thres_flag == BOOL_SET) {
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <print_threshold_press+0x44>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d017      	beq.n	80020e2 <print_threshold_press+0x3e>
        // press exceed print warning
        sprintf(uart_buffer, "P: %.2f kPa exceed threshold of %d kPa\r\n", pressure_data, PRESS_UPPER_THRES);
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <print_threshold_press+0x48>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa46 	bl	8000548 <__aeabi_f2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	490b      	ldr	r1, [pc, #44]	; (80020f0 <print_threshold_press+0x4c>)
 80020c2:	9100      	str	r1, [sp, #0]
 80020c4:	490b      	ldr	r1, [pc, #44]	; (80020f4 <print_threshold_press+0x50>)
 80020c6:	480c      	ldr	r0, [pc, #48]	; (80020f8 <print_threshold_press+0x54>)
 80020c8:	f004 f8f4 	bl	80062b4 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 80020cc:	480a      	ldr	r0, [pc, #40]	; (80020f8 <print_threshold_press+0x54>)
 80020ce:	f7fe f87f 	bl	80001d0 <strlen>
 80020d2:	4603      	mov	r3, r0
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020da:	4907      	ldr	r1, [pc, #28]	; (80020f8 <print_threshold_press+0x54>)
 80020dc:	4807      	ldr	r0, [pc, #28]	; (80020fc <print_threshold_press+0x58>)
 80020de:	f002 fbbf 	bl	8004860 <HAL_UART_Transmit>
    }
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000384 	.word	0x20000384
 80020ec:	20000380 	.word	0x20000380
 80020f0:	0001adb0 	.word	0x0001adb0
 80020f4:	0800958c 	.word	0x0800958c
 80020f8:	20000254 	.word	0x20000254
 80020fc:	200002d4 	.word	0x200002d4

08002100 <print_threshold_temp>:
/**
 * @brief print warning if over threshold for temp
 * @param None
 * @retval None
 */
static void print_threshold_temp(void){
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af02      	add	r7, sp, #8
    if (temp_thres_flag == BOOL_SET) {
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <print_threshold_temp+0x44>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d017      	beq.n	800213e <print_threshold_temp+0x3e>
        // press exceed print warning
        sprintf(uart_buffer, "T: %.2f degC exceed threshold of %d degC\r\n", temp_data, TEMP_UPPER_THRES);
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <print_threshold_temp+0x48>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa18 	bl	8000548 <__aeabi_f2d>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	211e      	movs	r1, #30
 800211e:	9100      	str	r1, [sp, #0]
 8002120:	490a      	ldr	r1, [pc, #40]	; (800214c <print_threshold_temp+0x4c>)
 8002122:	480b      	ldr	r0, [pc, #44]	; (8002150 <print_threshold_temp+0x50>)
 8002124:	f004 f8c6 	bl	80062b4 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 0xFFFF);
 8002128:	4809      	ldr	r0, [pc, #36]	; (8002150 <print_threshold_temp+0x50>)
 800212a:	f7fe f851 	bl	80001d0 <strlen>
 800212e:	4603      	mov	r3, r0
 8002130:	b29a      	uxth	r2, r3
 8002132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002136:	4906      	ldr	r1, [pc, #24]	; (8002150 <print_threshold_temp+0x50>)
 8002138:	4806      	ldr	r0, [pc, #24]	; (8002154 <print_threshold_temp+0x54>)
 800213a:	f002 fb91 	bl	8004860 <HAL_UART_Transmit>
    }
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000391 	.word	0x20000391
 8002148:	2000038c 	.word	0x2000038c
 800214c:	080095b8 	.word	0x080095b8
 8002150:	20000254 	.word	0x20000254
 8002154:	200002d4 	.word	0x200002d4

08002158 <LSM6DSL_AccGyroInit>:
 *        also init GPIO PD11 for the EXTI
 * @param None
 * @retval None
 */
static void LSM6DSL_AccGyroInit(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
    /*
    configuring the GPIO for EXTI from LSM6DSL at PD11
    */
    GPIO_InitTypeDef gpio_init_structure;

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800215e:	4b4f      	ldr	r3, [pc, #316]	; (800229c <LSM6DSL_AccGyroInit+0x144>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	4a4e      	ldr	r2, [pc, #312]	; (800229c <LSM6DSL_AccGyroInit+0x144>)
 8002164:	f043 0308 	orr.w	r3, r3, #8
 8002168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216a:	4b4c      	ldr	r3, [pc, #304]	; (800229c <LSM6DSL_AccGyroInit+0x144>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]

    // Configure PD11 pin as input with External interrupt
    gpio_init_structure.Pin = GPIO_PIN_11;
 8002176:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800217a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 800217c:	2302      	movs	r3, #2
 800217e:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	617b      	str	r3, [r7, #20]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING; // interupt is active high
 8002184:	4b46      	ldr	r3, [pc, #280]	; (80022a0 <LSM6DSL_AccGyroInit+0x148>)
 8002186:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002188:	f107 0308 	add.w	r3, r7, #8
 800218c:	4619      	mov	r1, r3
 800218e:	4845      	ldr	r0, [pc, #276]	; (80022a4 <LSM6DSL_AccGyroInit+0x14c>)
 8002190:	f001 fa18 	bl	80035c4 <HAL_GPIO_Init>

    // Enable and set EXTI Interrupt priority
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQn_PREEMPT_PRIO, EXTI15_10_IRQn_SUB_PRIO);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	2028      	movs	r0, #40	; 0x28
 800219a:	f001 f9dc 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800219e:	2028      	movs	r0, #40	; 0x28
 80021a0:	f001 f9f5 	bl	800358e <HAL_NVIC_EnableIRQ>

    //////////////////////////////////////////////////////////////////////////////////////////
    uint8_t ctrl = 0x00;
 80021a4:	2300      	movs	r3, #0
 80021a6:	77fb      	strb	r3, [r7, #31]

    /*
    configuring the LSM6DSL for 6D EXTI through INT1
    */
    // write 0x60 to 0x10 CTRL1_XL to set ODR_XL = 416 Hz and turn on device, FS_XL = ±2 g
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, 0x60);
 80021a8:	2260      	movs	r2, #96	; 0x60
 80021aa:	2110      	movs	r1, #16
 80021ac:	20d4      	movs	r0, #212	; 0xd4
 80021ae:	f000 fcf1 	bl	8002b94 <SENSOR_IO_Write>

    // Write 0x80 to 0x58 TAP_CFG Enable interrupts; latched mode disabled
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_CFG1, 0x80);
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	2158      	movs	r1, #88	; 0x58
 80021b6:	20d4      	movs	r0, #212	; 0xd4
 80021b8:	f000 fcec 	bl	8002b94 <SENSOR_IO_Write>

    // thershold at 50 deg seems good
    // Write 0x60 to 0x59 TAP_THS_6D Set 6D threshold (SIXD_THS[1:0] = 11b = 50 degrees), D4D disable
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_THS_6D, 0x60);
 80021bc:	2260      	movs	r2, #96	; 0x60
 80021be:	2159      	movs	r1, #89	; 0x59
 80021c0:	20d4      	movs	r0, #212	; 0xd4
 80021c2:	f000 fce7 	bl	8002b94 <SENSOR_IO_Write>
    //	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_THS_6D, 0x00);

    // Write set HPCF_XL[1:0] to 11, INPUT_COMPOSITE = 1, LOW_PASS_ON_6D = 1 in CTRL8_XL to
    // to config LPF2 filter to 6D functionality
    // this LPF has a very low BW, to avoid triggering of 6d when shaking the board
    tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL);
 80021c6:	2117      	movs	r1, #23
 80021c8:	20d4      	movs	r0, #212	; 0xd4
 80021ca:	f000 fcfd 	bl	8002bc8 <SENSOR_IO_Read>
 80021ce:	4603      	mov	r3, r0
 80021d0:	77bb      	strb	r3, [r7, #30]

    ctrl = 0x69;
 80021d2:	2369      	movs	r3, #105	; 0x69
 80021d4:	77fb      	strb	r3, [r7, #31]
    tmp &= ~(0x6B);
 80021d6:	7fbb      	ldrb	r3, [r7, #30]
 80021d8:	f023 036b 	bic.w	r3, r3, #107	; 0x6b
 80021dc:	77bb      	strb	r3, [r7, #30]
    tmp |= ctrl;
 80021de:	7fba      	ldrb	r2, [r7, #30]
 80021e0:	7ffb      	ldrb	r3, [r7, #31]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	77bb      	strb	r3, [r7, #30]
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL, tmp);
 80021e6:	7fbb      	ldrb	r3, [r7, #30]
 80021e8:	461a      	mov	r2, r3
 80021ea:	2117      	movs	r1, #23
 80021ec:	20d4      	movs	r0, #212	; 0xd4
 80021ee:	f000 fcd1 	bl	8002b94 <SENSOR_IO_Write>

    // Write 04h to 0x5E MD1_CFG 6D interrupt driven to INT1 pin
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, 0x04);
 80021f2:	2204      	movs	r2, #4
 80021f4:	215e      	movs	r1, #94	; 0x5e
 80021f6:	20d4      	movs	r0, #212	; 0xd4
 80021f8:	f000 fccc 	bl	8002b94 <SENSOR_IO_Write>
    // all necessary config are done along with the d6d

    /*
    configuring the LSM6DSL for gyro
    */
    tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80021fc:	2111      	movs	r1, #17
 80021fe:	20d4      	movs	r0, #212	; 0xd4
 8002200:	f000 fce2 	bl	8002bc8 <SENSOR_IO_Read>
 8002204:	4603      	mov	r3, r0
 8002206:	77bb      	strb	r3, [r7, #30]

    // Write value to GYRO MEMS CTRL2_G register: FS = 2000 dps and Data Rate 52 Hz
    ctrl = LSM6DSL_GYRO_FS_2000 | LSM6DSL_ODR_52Hz;
 8002208:	233c      	movs	r3, #60	; 0x3c
 800220a:	77fb      	strb	r3, [r7, #31]
    tmp &= ~(0xFC);
 800220c:	7fbb      	ldrb	r3, [r7, #30]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	77bb      	strb	r3, [r7, #30]
    tmp |= ctrl;
 8002214:	7fba      	ldrb	r2, [r7, #30]
 8002216:	7ffb      	ldrb	r3, [r7, #31]
 8002218:	4313      	orrs	r3, r2
 800221a:	77bb      	strb	r3, [r7, #30]
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800221c:	7fbb      	ldrb	r3, [r7, #30]
 800221e:	461a      	mov	r2, r3
 8002220:	2111      	movs	r1, #17
 8002222:	20d4      	movs	r0, #212	; 0xd4
 8002224:	f000 fcb6 	bl	8002b94 <SENSOR_IO_Write>
    /*
    Write value to CTRL3_C register: BDU and Auto-increment and active high int
    the same register to configure for both acc nd gyro
    */
    // Read CTRL3_C
    tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002228:	2112      	movs	r1, #18
 800222a:	20d4      	movs	r0, #212	; 0xd4
 800222c:	f000 fccc 	bl	8002bc8 <SENSOR_IO_Read>
 8002230:	4603      	mov	r3, r0
 8002232:	77bb      	strb	r3, [r7, #30]

    ctrl = LSM6DSL_BDU_BLOCK_UPDATE | LSM6DSL_ACC_GYRO_IF_INC_ENABLED;
 8002234:	2344      	movs	r3, #68	; 0x44
 8002236:	77fb      	strb	r3, [r7, #31]
    tmp &= ~(0x64); // clear BDU, IF_INC and H_LACTIVE (for interrupt to be active high)
 8002238:	7fbb      	ldrb	r3, [r7, #30]
 800223a:	f023 0364 	bic.w	r3, r3, #100	; 0x64
 800223e:	77bb      	strb	r3, [r7, #30]
    tmp |= ctrl;
 8002240:	7fba      	ldrb	r2, [r7, #30]
 8002242:	7ffb      	ldrb	r3, [r7, #31]
 8002244:	4313      	orrs	r3, r2
 8002246:	77bb      	strb	r3, [r7, #30]
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002248:	7fbb      	ldrb	r3, [r7, #30]
 800224a:	461a      	mov	r2, r3
 800224c:	2112      	movs	r1, #18
 800224e:	20d4      	movs	r0, #212	; 0xd4
 8002250:	f000 fca0 	bl	8002b94 <SENSOR_IO_Write>

    /*
    configuring the LSM6DSL for accel gyro DRDY INT1
    */
    // Write 0x03 to 0x0D INT1_CTRL, DRDY for both accel and gyro interrupt driven to INT1 pin
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, 0x03);
 8002254:	2203      	movs	r2, #3
 8002256:	210d      	movs	r1, #13
 8002258:	20d4      	movs	r0, #212	; 0xd4
 800225a:	f000 fc9b 	bl	8002b94 <SENSOR_IO_Write>

    // Write 0x80 to DRDY_PULSE_CFG_G (0Bh) to make DRDY be a pulse and not latched
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, 0x80);
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	210b      	movs	r1, #11
 8002262:	20d4      	movs	r0, #212	; 0xd4
 8002264:	f000 fc96 	bl	8002b94 <SENSOR_IO_Write>

    // set DRDY_MASK to 1 in CTRL4_C (13h) to wait LPF before DRDY
    tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL4_C);
 8002268:	2113      	movs	r1, #19
 800226a:	20d4      	movs	r0, #212	; 0xd4
 800226c:	f000 fcac 	bl	8002bc8 <SENSOR_IO_Read>
 8002270:	4603      	mov	r3, r0
 8002272:	77bb      	strb	r3, [r7, #30]

    ctrl = 0x08;
 8002274:	2308      	movs	r3, #8
 8002276:	77fb      	strb	r3, [r7, #31]
    tmp &= ~(0x09); // clear DRDY_MASK and bit 0 must set to 0
 8002278:	7fbb      	ldrb	r3, [r7, #30]
 800227a:	f023 0309 	bic.w	r3, r3, #9
 800227e:	77bb      	strb	r3, [r7, #30]
    tmp |= ctrl;
 8002280:	7fba      	ldrb	r2, [r7, #30]
 8002282:	7ffb      	ldrb	r3, [r7, #31]
 8002284:	4313      	orrs	r3, r2
 8002286:	77bb      	strb	r3, [r7, #30]
    SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL4_C, tmp);
 8002288:	7fbb      	ldrb	r3, [r7, #30]
 800228a:	461a      	mov	r2, r3
 800228c:	2113      	movs	r1, #19
 800228e:	20d4      	movs	r0, #212	; 0xd4
 8002290:	f000 fc80 	bl	8002b94 <SENSOR_IO_Write>
}
 8002294:	bf00      	nop
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	10110000 	.word	0x10110000
 80022a4:	48000c00 	.word	0x48000c00

080022a8 <HTS221_HumTempInit>:
 *        also init GPIO PD15 for the EXTI
 * @param None
 * @retval None
 */
static void HTS221_HumTempInit(int16_t* p_h0_lsb, int16_t* p_h1_lsb, int16_t* p_h0_rh, int16_t* p_h1_rh, int16_t* p_t0_lsb, int16_t* p_t1_lsb, int16_t* p_t0_degc, int16_t* p_t1_degc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	; 0x30
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	603b      	str	r3, [r7, #0]
    /*
    configuring the GPIO for EXTI from LSM6DSL at PD15
    */
    GPIO_InitTypeDef gpio_init_structure;

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b6:	4b6e      	ldr	r3, [pc, #440]	; (8002470 <HTS221_HumTempInit+0x1c8>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	4a6d      	ldr	r2, [pc, #436]	; (8002470 <HTS221_HumTempInit+0x1c8>)
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022c2:	4b6b      	ldr	r3, [pc, #428]	; (8002470 <HTS221_HumTempInit+0x1c8>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]

    // Configure PD15 pin as input with External interrupt
    gpio_init_structure.Pin = GPIO_PIN_15;
 80022ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80022d4:	2302      	movs	r3, #2
 80022d6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	627b      	str	r3, [r7, #36]	; 0x24

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING; // interupt is active high
 80022dc:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HTS221_HumTempInit+0x1cc>)
 80022de:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80022e0:	f107 0318 	add.w	r3, r7, #24
 80022e4:	4619      	mov	r1, r3
 80022e6:	4864      	ldr	r0, [pc, #400]	; (8002478 <HTS221_HumTempInit+0x1d0>)
 80022e8:	f001 f96c 	bl	80035c4 <HAL_GPIO_Init>

    // Enable and set EXTI Interrupt priority
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQn_PREEMPT_PRIO, EXTI15_10_IRQn_SUB_PRIO);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	2028      	movs	r0, #40	; 0x28
 80022f2:	f001 f930 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022f6:	2028      	movs	r0, #40	; 0x28
 80022f8:	f001 f949 	bl	800358e <HAL_NVIC_EnableIRQ>
    // DRDY_H_L 0 active high
    // PP_OD 0 push pull
    // DRDY_EN 1 enabled
    // clear 0xC4
    // set 0x04
    tmp = SENSOR_IO_Read(HTS221_I2C_ADDRESS, HTS221_CTRL_REG3);
 80022fc:	2122      	movs	r1, #34	; 0x22
 80022fe:	20be      	movs	r0, #190	; 0xbe
 8002300:	f000 fc62 	bl	8002bc8 <SENSOR_IO_Read>
 8002304:	4603      	mov	r3, r0
 8002306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    tmp &= ~0xC4;
 800230a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800230e:	f003 033b 	and.w	r3, r3, #59	; 0x3b
 8002312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    tmp |= 0x04;
 8002316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    SENSOR_IO_Write(HTS221_I2C_ADDRESS, HTS221_CTRL_REG3, tmp);
 8002322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002326:	461a      	mov	r2, r3
 8002328:	2122      	movs	r1, #34	; 0x22
 800232a:	20be      	movs	r0, #190	; 0xbe
 800232c:	f000 fc32 	bl	8002b94 <SENSOR_IO_Write>

    /*
    Init for H and T
    */
    /* Read CTRL_REG1 */
    tmp = SENSOR_IO_Read(HTS221_I2C_ADDRESS, HTS221_CTRL_REG1);
 8002330:	2120      	movs	r1, #32
 8002332:	20be      	movs	r0, #190	; 0xbe
 8002334:	f000 fc48 	bl	8002bc8 <SENSOR_IO_Read>
 8002338:	4603      	mov	r3, r0
 800233a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Enable BDU */
    tmp &= ~HTS221_BDU_MASK;
 800233e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002342:	f023 0304 	bic.w	r3, r3, #4
 8002346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    tmp |= (1 << HTS221_BDU_BIT);
 800234a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800234e:	f043 0304 	orr.w	r3, r3, #4
 8002352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Set default ODR */
    tmp &= ~HTS221_ODR_MASK;
 8002356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800235a:	f023 0303 	bic.w	r3, r3, #3
 800235e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Activate the device */
    tmp |= HTS221_PD_MASK;
 800236e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Apply settings to CTRL_REG1 */
    SENSOR_IO_Write(HTS221_I2C_ADDRESS, HTS221_CTRL_REG1, tmp);   
 800237a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800237e:	461a      	mov	r2, r3
 8002380:	2120      	movs	r1, #32
 8002382:	20be      	movs	r0, #190	; 0xbe
 8002384:	f000 fc06 	bl	8002b94 <SENSOR_IO_Write>
    */
    uint8_t buffer[4];

    // for hum
    // H0 * 2 and H1 * 2 in %
    SENSOR_IO_ReadMultiple(HTS221_I2C_ADDRESS, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002388:	f107 0214 	add.w	r2, r7, #20
 800238c:	2302      	movs	r3, #2
 800238e:	21b0      	movs	r1, #176	; 0xb0
 8002390:	20be      	movs	r0, #190	; 0xbe
 8002392:	f000 fc37 	bl	8002c04 <SENSOR_IO_ReadMultiple>
    
    // get H0 and H1 in %, rh = relative humidity
    *p_h0_rh = buffer[0] >> 1;
 8002396:	7d3b      	ldrb	r3, [r7, #20]
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	b21a      	sxth	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	801a      	strh	r2, [r3, #0]
    *p_h1_rh = buffer[1] >> 1;
 80023a2:	7d7b      	ldrb	r3, [r7, #21]
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	b21a      	sxth	r2, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	801a      	strh	r2, [r3, #0]

    // get H0 in LSB
    SENSOR_IO_ReadMultiple(HTS221_I2C_ADDRESS, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80023ae:	f107 0214 	add.w	r2, r7, #20
 80023b2:	2302      	movs	r3, #2
 80023b4:	21b6      	movs	r1, #182	; 0xb6
 80023b6:	20be      	movs	r0, #190	; 0xbe
 80023b8:	f000 fc24 	bl	8002c04 <SENSOR_IO_ReadMultiple>
    *p_h0_lsb = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80023bc:	7d7b      	ldrb	r3, [r7, #21]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	b21a      	sxth	r2, r3
 80023c2:	7d3b      	ldrb	r3, [r7, #20]
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	801a      	strh	r2, [r3, #0]

    // get H1 in LSB
    SENSOR_IO_ReadMultiple(HTS221_I2C_ADDRESS, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80023ce:	f107 0214 	add.w	r2, r7, #20
 80023d2:	2302      	movs	r3, #2
 80023d4:	21ba      	movs	r1, #186	; 0xba
 80023d6:	20be      	movs	r0, #190	; 0xbe
 80023d8:	f000 fc14 	bl	8002c04 <SENSOR_IO_ReadMultiple>
    *p_h1_lsb = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80023dc:	7d7b      	ldrb	r3, [r7, #21]
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	b21a      	sxth	r2, r3
 80023e2:	7d3b      	ldrb	r3, [r7, #20]
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	801a      	strh	r2, [r3, #0]

    // for temp
    // get T0 and T1 in degC, concat to 10 bits and divide 8
    SENSOR_IO_ReadMultiple(HTS221_I2C_ADDRESS, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80023ee:	f107 0214 	add.w	r2, r7, #20
 80023f2:	2302      	movs	r3, #2
 80023f4:	21b2      	movs	r1, #178	; 0xb2
 80023f6:	20be      	movs	r0, #190	; 0xbe
 80023f8:	f000 fc04 	bl	8002c04 <SENSOR_IO_ReadMultiple>
    tmp = SENSOR_IO_Read(HTS221_I2C_ADDRESS, HTS221_T0_T1_DEGC_H2);
 80023fc:	2135      	movs	r1, #53	; 0x35
 80023fe:	20be      	movs	r0, #190	; 0xbe
 8002400:	f000 fbe2 	bl	8002bc8 <SENSOR_IO_Read>
 8002404:	4603      	mov	r3, r0
 8002406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    *p_t0_degc = ((((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0])) >> 3;
 800240a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002414:	7d3a      	ldrb	r2, [r7, #20]
 8002416:	4313      	orrs	r3, r2
 8002418:	10db      	asrs	r3, r3, #3
 800241a:	b21a      	sxth	r2, r3
 800241c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241e:	801a      	strh	r2, [r3, #0]
    *p_t1_degc = ((((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1])) >> 3;
 8002420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002424:	019b      	lsls	r3, r3, #6
 8002426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242a:	7d7a      	ldrb	r2, [r7, #21]
 800242c:	4313      	orrs	r3, r2
 800242e:	10db      	asrs	r3, r3, #3
 8002430:	b21a      	sxth	r2, r3
 8002432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002434:	801a      	strh	r2, [r3, #0]

    // get T0 and T1 in lsb
    SENSOR_IO_ReadMultiple(HTS221_I2C_ADDRESS, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002436:	f107 0214 	add.w	r2, r7, #20
 800243a:	2304      	movs	r3, #4
 800243c:	21bc      	movs	r1, #188	; 0xbc
 800243e:	20be      	movs	r0, #190	; 0xbe
 8002440:	f000 fbe0 	bl	8002c04 <SENSOR_IO_ReadMultiple>

    *p_t0_lsb = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002444:	7d7b      	ldrb	r3, [r7, #21]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	b21a      	sxth	r2, r3
 800244a:	7d3b      	ldrb	r3, [r7, #20]
 800244c:	b21b      	sxth	r3, r3
 800244e:	4313      	orrs	r3, r2
 8002450:	b21a      	sxth	r2, r3
 8002452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002454:	801a      	strh	r2, [r3, #0]
    *p_t1_lsb = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002456:	7dfb      	ldrb	r3, [r7, #23]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	b21a      	sxth	r2, r3
 800245c:	7dbb      	ldrb	r3, [r7, #22]
 800245e:	b21b      	sxth	r3, r3
 8002460:	4313      	orrs	r3, r2
 8002462:	b21a      	sxth	r2, r3
 8002464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002466:	801a      	strh	r2, [r3, #0]
}
 8002468:	bf00      	nop
 800246a:	3730      	adds	r7, #48	; 0x30
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000
 8002474:	10110000 	.word	0x10110000
 8002478:	48000c00 	.word	0x48000c00

0800247c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_MspInit+0x44>)
 8002484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002486:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <HAL_MspInit+0x44>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6613      	str	r3, [r2, #96]	; 0x60
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_MspInit+0x44>)
 8002490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_MspInit+0x44>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <HAL_MspInit+0x44>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6593      	str	r3, [r2, #88]	; 0x58
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_MspInit+0x44>)
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000

080024c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a17      	ldr	r2, [pc, #92]	; (8002540 <HAL_I2C_MspInit+0x7c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d128      	bne.n	8002538 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_I2C_MspInit+0x80>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	4a16      	ldr	r2, [pc, #88]	; (8002544 <HAL_I2C_MspInit+0x80>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <HAL_I2C_MspInit+0x80>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80024fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002504:	2312      	movs	r3, #18
 8002506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002508:	2301      	movs	r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002510:	2304      	movs	r3, #4
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	480b      	ldr	r0, [pc, #44]	; (8002548 <HAL_I2C_MspInit+0x84>)
 800251c:	f001 f852 	bl	80035c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_I2C_MspInit+0x80>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_I2C_MspInit+0x80>)
 8002526:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800252a:	6593      	str	r3, [r2, #88]	; 0x58
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_I2C_MspInit+0x80>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002538:	bf00      	nop
 800253a:	3728      	adds	r7, #40	; 0x28
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40005800 	.word	0x40005800
 8002544:	40021000 	.word	0x40021000
 8002548:	48000400 	.word	0x48000400

0800254c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a08      	ldr	r2, [pc, #32]	; (800257c <HAL_I2C_MspDeInit+0x30>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10a      	bne.n	8002574 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_I2C_MspDeInit+0x34>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_I2C_MspDeInit+0x34>)
 8002564:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002568:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 800256a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800256e:	4805      	ldr	r0, [pc, #20]	; (8002584 <HAL_I2C_MspDeInit+0x38>)
 8002570:	f001 f9d2 	bl	8003918 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40005800 	.word	0x40005800
 8002580:	40021000 	.word	0x40021000
 8002584:	48000400 	.word	0x48000400

08002588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	; 0x30
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2e      	ldr	r2, [pc, #184]	; (8002660 <HAL_UART_MspInit+0xd8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d128      	bne.n	80025fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025aa:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <HAL_UART_MspInit+0xdc>)
 80025ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ae:	4a2d      	ldr	r2, [pc, #180]	; (8002664 <HAL_UART_MspInit+0xdc>)
 80025b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b4:	6613      	str	r3, [r2, #96]	; 0x60
 80025b6:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_UART_MspInit+0xdc>)
 80025b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	4b28      	ldr	r3, [pc, #160]	; (8002664 <HAL_UART_MspInit+0xdc>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	4a27      	ldr	r2, [pc, #156]	; (8002664 <HAL_UART_MspInit+0xdc>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_UART_MspInit+0xdc>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80025da:	23c0      	movs	r3, #192	; 0xc0
 80025dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e6:	2303      	movs	r3, #3
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025ea:	2307      	movs	r3, #7
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ee:	f107 031c 	add.w	r3, r7, #28
 80025f2:	4619      	mov	r1, r3
 80025f4:	481c      	ldr	r0, [pc, #112]	; (8002668 <HAL_UART_MspInit+0xe0>)
 80025f6:	f000 ffe5 	bl	80035c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025fa:	e02d      	b.n	8002658 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a1a      	ldr	r2, [pc, #104]	; (800266c <HAL_UART_MspInit+0xe4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d128      	bne.n	8002658 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002606:	4b17      	ldr	r3, [pc, #92]	; (8002664 <HAL_UART_MspInit+0xdc>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	4a16      	ldr	r2, [pc, #88]	; (8002664 <HAL_UART_MspInit+0xdc>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002610:	6593      	str	r3, [r2, #88]	; 0x58
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <HAL_UART_MspInit+0xdc>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_UART_MspInit+0xdc>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	4a10      	ldr	r2, [pc, #64]	; (8002664 <HAL_UART_MspInit+0xdc>)
 8002624:	f043 0308 	orr.w	r3, r3, #8
 8002628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_UART_MspInit+0xdc>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002636:	f44f 7340 	mov.w	r3, #768	; 0x300
 800263a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002644:	2303      	movs	r3, #3
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002648:	2307      	movs	r3, #7
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4619      	mov	r1, r3
 8002652:	4807      	ldr	r0, [pc, #28]	; (8002670 <HAL_UART_MspInit+0xe8>)
 8002654:	f000 ffb6 	bl	80035c4 <HAL_GPIO_Init>
}
 8002658:	bf00      	nop
 800265a:	3730      	adds	r7, #48	; 0x30
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40013800 	.word	0x40013800
 8002664:	40021000 	.word	0x40021000
 8002668:	48000400 	.word	0x48000400
 800266c:	40004800 	.word	0x40004800
 8002670:	48000c00 	.word	0x48000c00

08002674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002686:	e7fe      	b.n	8002686 <HardFault_Handler+0x4>

08002688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800268c:	e7fe      	b.n	800268c <MemManage_Handler+0x4>

0800268e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002692:	e7fe      	b.n	8002692 <BusFault_Handler+0x4>

08002694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002698:	e7fe      	b.n	8002698 <UsageFault_Handler+0x4>

0800269a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026c8:	f000 fe4c 	bl	8003364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80026d4:	2020      	movs	r0, #32
 80026d6:	f001 fa45 	bl	8003b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80026da:	2040      	movs	r0, #64	; 0x40
 80026dc:	f001 fa42 	bl	8003b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80026e0:	2080      	movs	r0, #128	; 0x80
 80026e2:	f001 fa3f 	bl	8003b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80026e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026ea:	f001 fa3b 	bl	8003b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80026f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026fa:	f001 fa33 	bl	8003b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80026fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002702:	f001 fa2f 	bl	8003b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002706:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800270a:	f001 fa2b 	bl	8003b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800270e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002712:	f001 fa27 	bl	8003b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002716:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800271a:	f001 fa23 	bl	8003b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <_sbrk+0x50>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <_sbrk+0x16>
		heap_end = &end;
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <_sbrk+0x50>)
 8002736:	4a10      	ldr	r2, [pc, #64]	; (8002778 <_sbrk+0x54>)
 8002738:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <_sbrk+0x50>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <_sbrk+0x50>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	466a      	mov	r2, sp
 800274a:	4293      	cmp	r3, r2
 800274c:	d907      	bls.n	800275e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800274e:	f002 ff69 	bl	8005624 <__errno>
 8002752:	4603      	mov	r3, r0
 8002754:	220c      	movs	r2, #12
 8002756:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002758:	f04f 33ff 	mov.w	r3, #4294967295
 800275c:	e006      	b.n	800276c <_sbrk+0x48>
	}

	heap_end += incr;
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <_sbrk+0x50>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	4a03      	ldr	r2, [pc, #12]	; (8002774 <_sbrk+0x50>)
 8002768:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200003b0 	.word	0x200003b0
 8002778:	200004c0 	.word	0x200004c0

0800277c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <SystemInit+0x64>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <SystemInit+0x64>)
 8002788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800278c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <SystemInit+0x68>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a13      	ldr	r2, [pc, #76]	; (80027e4 <SystemInit+0x68>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <SystemInit+0x68>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <SystemInit+0x68>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a0f      	ldr	r2, [pc, #60]	; (80027e4 <SystemInit+0x68>)
 80027a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80027ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80027b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <SystemInit+0x68>)
 80027b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <SystemInit+0x68>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <SystemInit+0x68>)
 80027c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <SystemInit+0x68>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <SystemInit+0x64>)
 80027ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027d2:	609a      	str	r2, [r3, #8]
#endif
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000ed00 	.word	0xe000ed00
 80027e4:	40021000 	.word	0x40021000

080027e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002820 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027ee:	e003      	b.n	80027f8 <LoopCopyDataInit>

080027f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027f6:	3104      	adds	r1, #4

080027f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027f8:	480b      	ldr	r0, [pc, #44]	; (8002828 <LoopForever+0xa>)
	ldr	r3, =_edata
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <LoopForever+0xe>)
	adds	r2, r0, r1
 80027fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002800:	d3f6      	bcc.n	80027f0 <CopyDataInit>
	ldr	r2, =_sbss
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002804:	e002      	b.n	800280c <LoopFillZerobss>

08002806 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002806:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002808:	f842 3b04 	str.w	r3, [r2], #4

0800280c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <LoopForever+0x16>)
	cmp	r2, r3
 800280e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002810:	d3f9      	bcc.n	8002806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002812:	f7ff ffb3 	bl	800277c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002816:	f003 f801 	bl	800581c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800281a:	f7fe fb97 	bl	8000f4c <main>

0800281e <LoopForever>:

LoopForever:
    b LoopForever
 800281e:	e7fe      	b.n	800281e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002820:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002824:	08009a38 	.word	0x08009a38
	ldr	r0, =_sdata
 8002828:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800282c:	20000228 	.word	0x20000228
	ldr	r2, =_sbss
 8002830:	20000228 	.word	0x20000228
	ldr	r3, = _ebss
 8002834:	200004bc 	.word	0x200004bc

08002838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002838:	e7fe      	b.n	8002838 <ADC1_2_IRQHandler>
	...

0800283c <BSP_LED_Init>:
  * @param  Led: LED to be configured. 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10b      	bne.n	8002864 <BSP_LED_Init+0x28>
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <BSP_LED_Init+0x58>)
 800284e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002850:	4a10      	ldr	r2, [pc, #64]	; (8002894 <BSP_LED_Init+0x58>)
 8002852:	f043 0302 	orr.w	r3, r3, #2
 8002856:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <BSP_LED_Init+0x58>)
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002864:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002868:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800286a:	2301      	movs	r3, #1
 800286c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002872:	2302      	movs	r3, #2
 8002874:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <BSP_LED_Init+0x5c>)
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	f107 020c 	add.w	r2, r7, #12
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fe9d 	bl	80035c4 <HAL_GPIO_Init>
}
 800288a:	bf00      	nop
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	20000008 	.word	0x20000008

0800289c <BSP_LED_On>:
  * @param  Led: LED to be set on 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <BSP_LED_On+0x28>)
 80028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028b2:	b291      	uxth	r1, r2
 80028b4:	2201      	movs	r2, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	f001 f922 	bl	8003b00 <HAL_GPIO_WritePin>
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000008 	.word	0x20000008

080028c8 <BSP_LED_Toggle>:
  * @param  Led: LED to be toggled
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4a06      	ldr	r2, [pc, #24]	; (80028f0 <BSP_LED_Toggle+0x28>)
 80028d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028de:	b292      	uxth	r2, r2
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 f924 	bl	8003b30 <HAL_GPIO_TogglePin>
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000008 	.word	0x20000008

080028f4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	460a      	mov	r2, r1
 80028fe:	71fb      	strb	r3, [r7, #7]
 8002900:	4613      	mov	r3, r2
 8002902:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <BSP_PB_Init+0xa0>)
 8002906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <BSP_PB_Init+0xa0>)
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002910:	4b20      	ldr	r3, [pc, #128]	; (8002994 <BSP_PB_Init+0xa0>)
 8002912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800291c:	79bb      	ldrb	r3, [r7, #6]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d112      	bne.n	8002948 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002926:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002928:	2300      	movs	r3, #0
 800292a:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800292c:	2301      	movs	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002930:	2302      	movs	r3, #2
 8002932:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	4a18      	ldr	r2, [pc, #96]	; (8002998 <BSP_PB_Init+0xa4>)
 8002938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293c:	f107 020c 	add.w	r2, r7, #12
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fe3e 	bl	80035c4 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002948:	79bb      	ldrb	r3, [r7, #6]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d11e      	bne.n	800298c <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800294e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002952:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8002954:	2301      	movs	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <BSP_PB_Init+0xa8>)
 800295e:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <BSP_PB_Init+0xa4>)
 8002964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002968:	f107 020c 	add.w	r2, r7, #12
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fe28 	bl	80035c4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002974:	2328      	movs	r3, #40	; 0x28
 8002976:	b25b      	sxtb	r3, r3
 8002978:	2200      	movs	r2, #0
 800297a:	210f      	movs	r1, #15
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fdea 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002982:	2328      	movs	r3, #40	; 0x28
 8002984:	b25b      	sxtb	r3, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fe01 	bl	800358e <HAL_NVIC_EnableIRQ>
  }
}
 800298c:	bf00      	nop
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	2000000c 	.word	0x2000000c
 800299c:	10110000 	.word	0x10110000

080029a0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80029a8:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <I2Cx_MspInit+0xa8>)
 80029aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ac:	4a26      	ldr	r2, [pc, #152]	; (8002a48 <I2Cx_MspInit+0xa8>)
 80029ae:	f043 0302 	orr.w	r3, r3, #2
 80029b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029b4:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <I2Cx_MspInit+0xa8>)
 80029b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80029c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80029c6:	2312      	movs	r3, #18
 80029c8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ce:	2303      	movs	r3, #3
 80029d0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80029d2:	2304      	movs	r3, #4
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	481b      	ldr	r0, [pc, #108]	; (8002a4c <I2Cx_MspInit+0xac>)
 80029de:	f000 fdf1 	bl	80035c4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	4818      	ldr	r0, [pc, #96]	; (8002a4c <I2Cx_MspInit+0xac>)
 80029ea:	f000 fdeb 	bl	80035c4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80029ee:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <I2Cx_MspInit+0xa8>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <I2Cx_MspInit+0xa8>)
 80029f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029f8:	6593      	str	r3, [r2, #88]	; 0x58
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <I2Cx_MspInit+0xa8>)
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <I2Cx_MspInit+0xa8>)
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	4a0f      	ldr	r2, [pc, #60]	; (8002a48 <I2Cx_MspInit+0xa8>)
 8002a0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a10:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002a12:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <I2Cx_MspInit+0xa8>)
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	4a0c      	ldr	r2, [pc, #48]	; (8002a48 <I2Cx_MspInit+0xa8>)
 8002a18:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a1c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	210f      	movs	r1, #15
 8002a22:	2021      	movs	r0, #33	; 0x21
 8002a24:	f000 fd97 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002a28:	2021      	movs	r0, #33	; 0x21
 8002a2a:	f000 fdb0 	bl	800358e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	210f      	movs	r1, #15
 8002a32:	2022      	movs	r0, #34	; 0x22
 8002a34:	f000 fd8f 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002a38:	2022      	movs	r0, #34	; 0x22
 8002a3a:	f000 fda8 	bl	800358e <HAL_NVIC_EnableIRQ>
}
 8002a3e:	bf00      	nop
 8002a40:	3728      	adds	r7, #40	; 0x28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	48000400 	.word	0x48000400

08002a50 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <I2Cx_Init+0x54>)
 8002a5c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a11      	ldr	r2, [pc, #68]	; (8002aa8 <I2Cx_Init+0x58>)
 8002a62:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff89 	bl	80029a0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f001 f880 	bl	8003b94 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002a94:	2100      	movs	r1, #0
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f001 fd84 	bl	80045a4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40005800 	.word	0x40005800
 8002aa8:	00702681 	.word	0x00702681

08002aac <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af04      	add	r7, sp, #16
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	4608      	mov	r0, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	72fb      	strb	r3, [r7, #11]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	813b      	strh	r3, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002aca:	7afb      	ldrb	r3, [r7, #11]
 8002acc:	b299      	uxth	r1, r3
 8002ace:	88f8      	ldrh	r0, [r7, #6]
 8002ad0:	893a      	ldrh	r2, [r7, #8]
 8002ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad6:	9302      	str	r3, [sp, #8]
 8002ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f001 fa28 	bl	8003f38 <HAL_I2C_Mem_Read>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8002af2:	7afb      	ldrb	r3, [r7, #11]
 8002af4:	4619      	mov	r1, r3
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f832 	bl	8002b60 <I2Cx_Error>
  }
  return status;
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b08a      	sub	sp, #40	; 0x28
 8002b0a:	af04      	add	r7, sp, #16
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	4608      	mov	r0, r1
 8002b10:	4611      	mov	r1, r2
 8002b12:	461a      	mov	r2, r3
 8002b14:	4603      	mov	r3, r0
 8002b16:	72fb      	strb	r3, [r7, #11]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	813b      	strh	r3, [r7, #8]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002b24:	7afb      	ldrb	r3, [r7, #11]
 8002b26:	b299      	uxth	r1, r3
 8002b28:	88f8      	ldrh	r0, [r7, #6]
 8002b2a:	893a      	ldrh	r2, [r7, #8]
 8002b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b30:	9302      	str	r3, [sp, #8]
 8002b32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f001 f8e7 	bl	8003d10 <HAL_I2C_Mem_Write>
 8002b42:	4603      	mov	r3, r0
 8002b44:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002b4c:	7afb      	ldrb	r3, [r7, #11]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f805 	bl	8002b60 <I2Cx_Error>
  }
  return status;
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f001 f8a0 	bl	8003cb2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ff6c 	bl	8002a50 <I2Cx_Init>
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002b84:	4802      	ldr	r0, [pc, #8]	; (8002b90 <SENSOR_IO_Init+0x10>)
 8002b86:	f7ff ff63 	bl	8002a50 <I2Cx_Init>
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200003b4 	.word	0x200003b4

08002b94 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	71bb      	strb	r3, [r7, #6]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	79f9      	ldrb	r1, [r7, #7]
 8002bac:	2301      	movs	r3, #1
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	1d7b      	adds	r3, r7, #5
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	4803      	ldr	r0, [pc, #12]	; (8002bc4 <SENSOR_IO_Write+0x30>)
 8002bb8:	f7ff ffa5 	bl	8002b06 <I2Cx_WriteMultiple>
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	200003b4 	.word	0x200003b4

08002bc8 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	4603      	mov	r3, r0
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	71fb      	strb	r3, [r7, #7]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002bdc:	79bb      	ldrb	r3, [r7, #6]
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	79f9      	ldrb	r1, [r7, #7]
 8002be2:	2301      	movs	r3, #1
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	f107 030f 	add.w	r3, r7, #15
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	2301      	movs	r3, #1
 8002bee:	4804      	ldr	r0, [pc, #16]	; (8002c00 <SENSOR_IO_Read+0x38>)
 8002bf0:	f7ff ff5c 	bl	8002aac <I2Cx_ReadMultiple>

  return read_value;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200003b4 	.word	0x200003b4

08002c04 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	603a      	str	r2, [r7, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
 8002c12:	460b      	mov	r3, r1
 8002c14:	71bb      	strb	r3, [r7, #6]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002c1a:	79bb      	ldrb	r3, [r7, #6]
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	79f9      	ldrb	r1, [r7, #7]
 8002c20:	88bb      	ldrh	r3, [r7, #4]
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2301      	movs	r3, #1
 8002c2a:	4804      	ldr	r0, [pc, #16]	; (8002c3c <SENSOR_IO_ReadMultiple+0x38>)
 8002c2c:	f7ff ff3e 	bl	8002aac <I2Cx_ReadMultiple>
 8002c30:	4603      	mov	r3, r0
 8002c32:	b29b      	uxth	r3, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	200003b4 	.word	0x200003b4

08002c40 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <BSP_MAGNETO_Init+0x50>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	4798      	blx	r3
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b3d      	cmp	r3, #61	; 0x3d
 8002c54:	d002      	beq.n	8002c5c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	71fb      	strb	r3, [r7, #7]
 8002c5a:	e013      	b.n	8002c84 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <BSP_MAGNETO_Init+0x54>)
 8002c5e:	4a0c      	ldr	r2, [pc, #48]	; (8002c90 <BSP_MAGNETO_Init+0x50>)
 8002c60:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8002c62:	2358      	movs	r3, #88	; 0x58
 8002c64:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002c66:	2300      	movs	r3, #0
 8002c68:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002c6e:	2308      	movs	r3, #8
 8002c70:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002c72:	2340      	movs	r3, #64	; 0x40
 8002c74:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002c76:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <BSP_MAGNETO_Init+0x54>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	463a      	mov	r2, r7
 8002c7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c82:	4798      	blx	r3
  } 

  return ret;  
 8002c84:	79fb      	ldrb	r3, [r7, #7]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000010 	.word	0x20000010
 8002c94:	20000400 	.word	0x20000400

08002c98 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8002c9e:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <BSP_PSENSOR_Init+0x38>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	20ba      	movs	r0, #186	; 0xba
 8002ca4:	4798      	blx	r3
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2bb1      	cmp	r3, #177	; 0xb1
 8002caa:	d002      	beq.n	8002cb2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	e009      	b.n	8002cc6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <BSP_PSENSOR_Init+0x3c>)
 8002cb4:	4a06      	ldr	r2, [pc, #24]	; (8002cd0 <BSP_PSENSOR_Init+0x38>)
 8002cb6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <BSP_PSENSOR_Init+0x3c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	20ba      	movs	r0, #186	; 0xba
 8002cc0:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002cc6:	687b      	ldr	r3, [r7, #4]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000044 	.word	0x20000044
 8002cd4:	20000404 	.word	0x20000404

08002cd8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <BSP_PSENSOR_ReadPressure+0x18>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	20ba      	movs	r0, #186	; 0xba
 8002ce4:	4798      	blx	r3
 8002ce6:	eef0 7a40 	vmov.f32	s15, s0
}
 8002cea:	eeb0 0a67 	vmov.f32	s0, s15
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000404 	.word	0x20000404

08002cf4 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	463b      	mov	r3, r7
 8002cfc:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002d00:	783b      	ldrb	r3, [r7, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	2120      	movs	r1, #32
 8002d06:	203c      	movs	r0, #60	; 0x3c
 8002d08:	f7ff ff44 	bl	8002b94 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002d0c:	787b      	ldrb	r3, [r7, #1]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2121      	movs	r1, #33	; 0x21
 8002d12:	203c      	movs	r0, #60	; 0x3c
 8002d14:	f7ff ff3e 	bl	8002b94 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002d18:	78bb      	ldrb	r3, [r7, #2]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2122      	movs	r1, #34	; 0x22
 8002d1e:	203c      	movs	r0, #60	; 0x3c
 8002d20:	f7ff ff38 	bl	8002b94 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	461a      	mov	r2, r3
 8002d28:	2123      	movs	r1, #35	; 0x23
 8002d2a:	203c      	movs	r0, #60	; 0x3c
 8002d2c:	f7ff ff32 	bl	8002b94 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002d30:	793b      	ldrb	r3, [r7, #4]
 8002d32:	461a      	mov	r2, r3
 8002d34:	2124      	movs	r1, #36	; 0x24
 8002d36:	203c      	movs	r0, #60	; 0x3c
 8002d38:	f7ff ff2c 	bl	8002b94 <SENSOR_IO_Write>
}
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002d4e:	2122      	movs	r1, #34	; 0x22
 8002d50:	203c      	movs	r0, #60	; 0x3c
 8002d52:	f7ff ff39 	bl	8002bc8 <SENSOR_IO_Read>
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	f023 0303 	bic.w	r3, r3, #3
 8002d60:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	f043 0303 	orr.w	r3, r3, #3
 8002d68:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2122      	movs	r1, #34	; 0x22
 8002d70:	203c      	movs	r0, #60	; 0x3c
 8002d72:	f7ff ff0f 	bl	8002b94 <SENSOR_IO_Write>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002d82:	f7ff fefd 	bl	8002b80 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002d86:	210f      	movs	r1, #15
 8002d88:	203c      	movs	r0, #60	; 0x3c
 8002d8a:	f7ff ff1d 	bl	8002bc8 <SENSOR_IO_Read>
 8002d8e:	4603      	mov	r3, r0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002da2:	2122      	movs	r1, #34	; 0x22
 8002da4:	203c      	movs	r0, #60	; 0x3c
 8002da6:	f7ff ff0f 	bl	8002bc8 <SENSOR_IO_Read>
 8002daa:	4603      	mov	r3, r0
 8002dac:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	f023 0320 	bic.w	r3, r3, #32
 8002db4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	f043 0320 	orr.w	r3, r3, #32
 8002dc2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2122      	movs	r1, #34	; 0x22
 8002dca:	203c      	movs	r0, #60	; 0x3c
 8002dcc:	f7ff fee2 	bl	8002b94 <SENSOR_IO_Write>
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002dee:	2121      	movs	r1, #33	; 0x21
 8002df0:	203c      	movs	r0, #60	; 0x3c
 8002df2:	f7ff fee9 	bl	8002bc8 <SENSOR_IO_Read>
 8002df6:	4603      	mov	r3, r0
 8002df8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002dfa:	f107 0208 	add.w	r2, r7, #8
 8002dfe:	2306      	movs	r3, #6
 8002e00:	21a8      	movs	r1, #168	; 0xa8
 8002e02:	203c      	movs	r0, #60	; 0x3c
 8002e04:	f7ff fefe 	bl	8002c04 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	e01c      	b.n	8002e48 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002e0e:	7ffb      	ldrb	r3, [r7, #31]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	3301      	adds	r3, #1
 8002e14:	3320      	adds	r3, #32
 8002e16:	443b      	add	r3, r7
 8002e18:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	3320      	adds	r3, #32
 8002e28:	443b      	add	r3, r7
 8002e2a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	7ffb      	ldrb	r3, [r7, #31]
 8002e36:	b212      	sxth	r2, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	3320      	adds	r3, #32
 8002e3c:	443b      	add	r3, r7
 8002e3e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002e42:	7ffb      	ldrb	r3, [r7, #31]
 8002e44:	3301      	adds	r3, #1
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	7ffb      	ldrb	r3, [r7, #31]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d9df      	bls.n	8002e0e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
 8002e50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002e54:	2b60      	cmp	r3, #96	; 0x60
 8002e56:	d013      	beq.n	8002e80 <LIS3MDL_MagReadXYZ+0xa8>
 8002e58:	2b60      	cmp	r3, #96	; 0x60
 8002e5a:	dc14      	bgt.n	8002e86 <LIS3MDL_MagReadXYZ+0xae>
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d00c      	beq.n	8002e7a <LIS3MDL_MagReadXYZ+0xa2>
 8002e60:	2b40      	cmp	r3, #64	; 0x40
 8002e62:	dc10      	bgt.n	8002e86 <LIS3MDL_MagReadXYZ+0xae>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <LIS3MDL_MagReadXYZ+0x96>
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d003      	beq.n	8002e74 <LIS3MDL_MagReadXYZ+0x9c>
 8002e6c:	e00b      	b.n	8002e86 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <LIS3MDL_MagReadXYZ+0xfc>)
 8002e70:	61bb      	str	r3, [r7, #24]
    break;
 8002e72:	e008      	b.n	8002e86 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <LIS3MDL_MagReadXYZ+0x100>)
 8002e76:	61bb      	str	r3, [r7, #24]
    break;
 8002e78:	e005      	b.n	8002e86 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002e7a:	4b18      	ldr	r3, [pc, #96]	; (8002edc <LIS3MDL_MagReadXYZ+0x104>)
 8002e7c:	61bb      	str	r3, [r7, #24]
    break;
 8002e7e:	e002      	b.n	8002e86 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002e80:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <LIS3MDL_MagReadXYZ+0x108>)
 8002e82:	61bb      	str	r3, [r7, #24]
    break;    
 8002e84:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	77fb      	strb	r3, [r7, #31]
 8002e8a:	e01a      	b.n	8002ec2 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002e8c:	7ffb      	ldrb	r3, [r7, #31]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	3320      	adds	r3, #32
 8002e92:	443b      	add	r3, r7
 8002e94:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002e98:	ee07 3a90 	vmov	s15, r3
 8002e9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ea0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea8:	7ffb      	ldrb	r3, [r7, #31]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	4413      	add	r3, r2
 8002eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb4:	ee17 2a90 	vmov	r2, s15
 8002eb8:	b212      	sxth	r2, r2
 8002eba:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002ebc:	7ffb      	ldrb	r3, [r7, #31]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d9e1      	bls.n	8002e8c <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	3e0f5c29 	.word	0x3e0f5c29
 8002ed8:	3e947ae1 	.word	0x3e947ae1
 8002edc:	3edc28f6 	.word	0x3edc28f6
 8002ee0:	3f147ae1 	.word	0x3f147ae1

08002ee4 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f879 	bl	8002fe8 <LPS22HB_Init>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002f0c:	f7ff fe38 	bl	8002b80 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	210f      	movs	r1, #15
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fe56 	bl	8002bc8 <SENSOR_IO_Read>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	74fb      	strb	r3, [r7, #19]
 8002f3e:	e013      	b.n	8002f68 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	3328      	adds	r3, #40	; 0x28
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	7cfc      	ldrb	r4, [r7, #19]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f7ff fe3a 	bl	8002bc8 <SENSOR_IO_Read>
 8002f54:	4603      	mov	r3, r0
 8002f56:	461a      	mov	r2, r3
 8002f58:	f104 0318 	add.w	r3, r4, #24
 8002f5c:	443b      	add	r3, r7
 8002f5e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	3301      	adds	r3, #1
 8002f66:	74fb      	strb	r3, [r7, #19]
 8002f68:	7cfb      	ldrb	r3, [r7, #19]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d9e8      	bls.n	8002f40 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	74fb      	strb	r3, [r7, #19]
 8002f72:	e00f      	b.n	8002f94 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	3318      	adds	r3, #24
 8002f78:	443b      	add	r3, r7
 8002f7a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	3301      	adds	r3, #1
 8002f92:	74fb      	strb	r3, [r7, #19]
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d9ec      	bls.n	8002f74 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002faa:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2264      	movs	r2, #100	; 0x64
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	da01      	bge.n	8002fc0 <LPS22HB_P_ReadPressure+0x94>
 8002fbc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002fc0:	131b      	asrs	r3, r3, #12
 8002fc2:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002fe4 <LPS22HB_P_ReadPressure+0xb8>
 8002fd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8002fda:	eeb0 0a67 	vmov.f32	s0, s15
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd90      	pop	{r4, r7, pc}
 8002fe4:	42c80000 	.word	0x42c80000

08002fe8 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	211a      	movs	r1, #26
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fde5 	bl	8002bc8 <SENSOR_IO_Read>
 8002ffe:	4603      	mov	r3, r0
 8003000:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	211a      	movs	r1, #26
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fdba 	bl	8002b94 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2110      	movs	r1, #16
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fdce 	bl	8002bc8 <SENSOR_IO_Read>
 800302c:	4603      	mov	r3, r0
 800302e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003036:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800303e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	f023 0302 	bic.w	r3, r3, #2
 8003046:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	f043 0302 	orr.w	r3, r3, #2
 800304e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	2110      	movs	r1, #16
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fd9b 	bl	8002b94 <SENSOR_IO_Write>
}  
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003070:	2300      	movs	r3, #0
 8003072:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800307e:	2110      	movs	r1, #16
 8003080:	20d4      	movs	r0, #212	; 0xd4
 8003082:	f7ff fda1 	bl	8002bc8 <SENSOR_IO_Read>
 8003086:	4603      	mov	r3, r0
 8003088:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800308a:	f107 0208 	add.w	r2, r7, #8
 800308e:	2306      	movs	r3, #6
 8003090:	2128      	movs	r1, #40	; 0x28
 8003092:	20d4      	movs	r0, #212	; 0xd4
 8003094:	f7ff fdb6 	bl	8002c04 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003098:	2300      	movs	r3, #0
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e01c      	b.n	80030d8 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800309e:	7ffb      	ldrb	r3, [r7, #31]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	3301      	adds	r3, #1
 80030a4:	3320      	adds	r3, #32
 80030a6:	443b      	add	r3, r7
 80030a8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	7ffb      	ldrb	r3, [r7, #31]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	3320      	adds	r3, #32
 80030b8:	443b      	add	r3, r7
 80030ba:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	7ffb      	ldrb	r3, [r7, #31]
 80030c6:	b212      	sxth	r2, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	3320      	adds	r3, #32
 80030cc:	443b      	add	r3, r7
 80030ce:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80030d2:	7ffb      	ldrb	r3, [r7, #31]
 80030d4:	3301      	adds	r3, #1
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	7ffb      	ldrb	r3, [r7, #31]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d9df      	bls.n	800309e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d829      	bhi.n	800313c <LSM6DSL_AccReadXYZ+0xd4>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <LSM6DSL_AccReadXYZ+0x88>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003125 	.word	0x08003125
 80030f4:	0800313d 	.word	0x0800313d
 80030f8:	0800313d 	.word	0x0800313d
 80030fc:	0800313d 	.word	0x0800313d
 8003100:	08003137 	.word	0x08003137
 8003104:	0800313d 	.word	0x0800313d
 8003108:	0800313d 	.word	0x0800313d
 800310c:	0800313d 	.word	0x0800313d
 8003110:	0800312b 	.word	0x0800312b
 8003114:	0800313d 	.word	0x0800313d
 8003118:	0800313d 	.word	0x0800313d
 800311c:	0800313d 	.word	0x0800313d
 8003120:	08003131 	.word	0x08003131
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003124:	4b18      	ldr	r3, [pc, #96]	; (8003188 <LSM6DSL_AccReadXYZ+0x120>)
 8003126:	61bb      	str	r3, [r7, #24]
    break;
 8003128:	e008      	b.n	800313c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <LSM6DSL_AccReadXYZ+0x124>)
 800312c:	61bb      	str	r3, [r7, #24]
    break;
 800312e:	e005      	b.n	800313c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <LSM6DSL_AccReadXYZ+0x128>)
 8003132:	61bb      	str	r3, [r7, #24]
    break;
 8003134:	e002      	b.n	800313c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003136:	4b17      	ldr	r3, [pc, #92]	; (8003194 <LSM6DSL_AccReadXYZ+0x12c>)
 8003138:	61bb      	str	r3, [r7, #24]
    break;    
 800313a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800313c:	2300      	movs	r3, #0
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e01a      	b.n	8003178 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003142:	7ffb      	ldrb	r3, [r7, #31]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	3320      	adds	r3, #32
 8003148:	443b      	add	r3, r7
 800314a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003156:	edd7 7a06 	vldr	s15, [r7, #24]
 800315a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315e:	7ffb      	ldrb	r3, [r7, #31]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800316a:	ee17 2a90 	vmov	r2, s15
 800316e:	b212      	sxth	r2, r2
 8003170:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003172:	7ffb      	ldrb	r3, [r7, #31]
 8003174:	3301      	adds	r3, #1
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	7ffb      	ldrb	r3, [r7, #31]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d9e1      	bls.n	8003142 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800317e:	bf00      	nop
 8003180:	bf00      	nop
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	3d79db23 	.word	0x3d79db23
 800318c:	3df9db23 	.word	0x3df9db23
 8003190:	3e79db23 	.word	0x3e79db23
 8003194:	3ef9db23 	.word	0x3ef9db23

08003198 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80031ae:	2111      	movs	r1, #17
 80031b0:	20d4      	movs	r0, #212	; 0xd4
 80031b2:	f7ff fd09 	bl	8002bc8 <SENSOR_IO_Read>
 80031b6:	4603      	mov	r3, r0
 80031b8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80031ba:	f107 0208 	add.w	r2, r7, #8
 80031be:	2306      	movs	r3, #6
 80031c0:	2122      	movs	r1, #34	; 0x22
 80031c2:	20d4      	movs	r0, #212	; 0xd4
 80031c4:	f7ff fd1e 	bl	8002c04 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80031c8:	2300      	movs	r3, #0
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e01c      	b.n	8003208 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80031ce:	7ffb      	ldrb	r3, [r7, #31]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	3301      	adds	r3, #1
 80031d4:	3320      	adds	r3, #32
 80031d6:	443b      	add	r3, r7
 80031d8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	3320      	adds	r3, #32
 80031e8:	443b      	add	r3, r7
 80031ea:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	7ffb      	ldrb	r3, [r7, #31]
 80031f6:	b212      	sxth	r2, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	3320      	adds	r3, #32
 80031fc:	443b      	add	r3, r7
 80031fe:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003202:	7ffb      	ldrb	r3, [r7, #31]
 8003204:	3301      	adds	r3, #1
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	7ffb      	ldrb	r3, [r7, #31]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d9df      	bls.n	80031ce <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800320e:	7dfb      	ldrb	r3, [r7, #23]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b0c      	cmp	r3, #12
 8003216:	d829      	bhi.n	800326c <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8003218:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003255 	.word	0x08003255
 8003224:	0800326d 	.word	0x0800326d
 8003228:	0800326d 	.word	0x0800326d
 800322c:	0800326d 	.word	0x0800326d
 8003230:	0800325b 	.word	0x0800325b
 8003234:	0800326d 	.word	0x0800326d
 8003238:	0800326d 	.word	0x0800326d
 800323c:	0800326d 	.word	0x0800326d
 8003240:	08003261 	.word	0x08003261
 8003244:	0800326d 	.word	0x0800326d
 8003248:	0800326d 	.word	0x0800326d
 800324c:	0800326d 	.word	0x0800326d
 8003250:	08003267 	.word	0x08003267
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003254:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8003256:	61bb      	str	r3, [r7, #24]
    break;
 8003258:	e008      	b.n	800326c <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800325a:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 800325c:	61bb      	str	r3, [r7, #24]
    break;
 800325e:	e005      	b.n	800326c <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8003260:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8003262:	61bb      	str	r3, [r7, #24]
    break;
 8003264:	e002      	b.n	800326c <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8003268:	61bb      	str	r3, [r7, #24]
    break;    
 800326a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800326c:	2300      	movs	r3, #0
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e016      	b.n	80032a0 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8003272:	7ffb      	ldrb	r3, [r7, #31]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	3320      	adds	r3, #32
 8003278:	443b      	add	r3, r7
 800327a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003286:	7ffb      	ldrb	r3, [r7, #31]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003296:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800329a:	7ffb      	ldrb	r3, [r7, #31]
 800329c:	3301      	adds	r3, #1
 800329e:	77fb      	strb	r3, [r7, #31]
 80032a0:	7ffb      	ldrb	r3, [r7, #31]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d9e5      	bls.n	8003272 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	410c0000 	.word	0x410c0000
 80032b4:	418c0000 	.word	0x418c0000
 80032b8:	420c0000 	.word	0x420c0000
 80032bc:	428c0000 	.word	0x428c0000

080032c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032ca:	2003      	movs	r0, #3
 80032cc:	f000 f938 	bl	8003540 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032d0:	2000      	movs	r0, #0
 80032d2:	f000 f80d 	bl	80032f0 <HAL_InitTick>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	71fb      	strb	r3, [r7, #7]
 80032e0:	e001      	b.n	80032e6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032e2:	f7ff f8cb 	bl	800247c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032e6:	79fb      	ldrb	r3, [r7, #7]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80032fc:	4b16      	ldr	r3, [pc, #88]	; (8003358 <HAL_InitTick+0x68>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d022      	beq.n	800334a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003304:	4b15      	ldr	r3, [pc, #84]	; (800335c <HAL_InitTick+0x6c>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <HAL_InitTick+0x68>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003310:	fbb1 f3f3 	udiv	r3, r1, r3
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f946 	bl	80035aa <HAL_SYSTICK_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10f      	bne.n	8003344 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b0f      	cmp	r3, #15
 8003328:	d809      	bhi.n	800333e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800332a:	2200      	movs	r2, #0
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	f04f 30ff 	mov.w	r0, #4294967295
 8003332:	f000 f910 	bl	8003556 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <HAL_InitTick+0x70>)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	e007      	b.n	800334e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
 8003342:	e004      	b.n	800334e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	e001      	b.n	800334e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800334e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000054 	.word	0x20000054
 800335c:	20000004 	.word	0x20000004
 8003360:	20000050 	.word	0x20000050

08003364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_IncTick+0x1c>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_IncTick+0x20>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4413      	add	r3, r2
 8003372:	4a03      	ldr	r2, [pc, #12]	; (8003380 <HAL_IncTick+0x1c>)
 8003374:	6013      	str	r3, [r2, #0]
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	20000408 	.word	0x20000408
 8003384:	20000054 	.word	0x20000054

08003388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return uwTick;
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <HAL_GetTick+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000408 	.word	0x20000408

080033a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033bc:	4013      	ands	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	60d3      	str	r3, [r2, #12]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <__NVIC_GetPriorityGrouping+0x18>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	f003 0307 	and.w	r3, r3, #7
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db0b      	blt.n	800342e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	4907      	ldr	r1, [pc, #28]	; (800343c <__NVIC_EnableIRQ+0x38>)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2001      	movs	r0, #1
 8003426:	fa00 f202 	lsl.w	r2, r0, r2
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000e100 	.word	0xe000e100

08003440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	2b00      	cmp	r3, #0
 8003452:	db0a      	blt.n	800346a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	b2da      	uxtb	r2, r3
 8003458:	490c      	ldr	r1, [pc, #48]	; (800348c <__NVIC_SetPriority+0x4c>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	0112      	lsls	r2, r2, #4
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	440b      	add	r3, r1
 8003464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003468:	e00a      	b.n	8003480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4908      	ldr	r1, [pc, #32]	; (8003490 <__NVIC_SetPriority+0x50>)
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	3b04      	subs	r3, #4
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	440b      	add	r3, r1
 800347e:	761a      	strb	r2, [r3, #24]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000e100 	.word	0xe000e100
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	; 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f1c3 0307 	rsb	r3, r3, #7
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	bf28      	it	cs
 80034b2:	2304      	movcs	r3, #4
 80034b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d902      	bls.n	80034c4 <NVIC_EncodePriority+0x30>
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3b03      	subs	r3, #3
 80034c2:	e000      	b.n	80034c6 <NVIC_EncodePriority+0x32>
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	401a      	ands	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034dc:	f04f 31ff 	mov.w	r1, #4294967295
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	43d9      	mvns	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	4313      	orrs	r3, r2
         );
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	; 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800350c:	d301      	bcc.n	8003512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800350e:	2301      	movs	r3, #1
 8003510:	e00f      	b.n	8003532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003512:	4a0a      	ldr	r2, [pc, #40]	; (800353c <SysTick_Config+0x40>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800351a:	210f      	movs	r1, #15
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	f7ff ff8e 	bl	8003440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <SysTick_Config+0x40>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <SysTick_Config+0x40>)
 800352c:	2207      	movs	r2, #7
 800352e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	e000e010 	.word	0xe000e010

08003540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff ff29 	bl	80033a0 <__NVIC_SetPriorityGrouping>
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b086      	sub	sp, #24
 800355a:	af00      	add	r7, sp, #0
 800355c:	4603      	mov	r3, r0
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003568:	f7ff ff3e 	bl	80033e8 <__NVIC_GetPriorityGrouping>
 800356c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	6978      	ldr	r0, [r7, #20]
 8003574:	f7ff ff8e 	bl	8003494 <NVIC_EncodePriority>
 8003578:	4602      	mov	r2, r0
 800357a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff5d 	bl	8003440 <__NVIC_SetPriority>
}
 8003586:	bf00      	nop
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	4603      	mov	r3, r0
 8003596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff31 	bl	8003404 <__NVIC_EnableIRQ>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ffa2 	bl	80034fc <SysTick_Config>
 80035b8:	4603      	mov	r3, r0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035d2:	e17f      	b.n	80038d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2101      	movs	r1, #1
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	4013      	ands	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8171 	beq.w	80038ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d00b      	beq.n	800360c <HAL_GPIO_Init+0x48>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d007      	beq.n	800360c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003600:	2b11      	cmp	r3, #17
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b12      	cmp	r3, #18
 800360a:	d130      	bne.n	800366e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	2203      	movs	r2, #3
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003642:	2201      	movs	r2, #1
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 0201 	and.w	r2, r3, #1
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b03      	cmp	r3, #3
 8003678:	d118      	bne.n	80036ac <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003680:	2201      	movs	r2, #1
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	08db      	lsrs	r3, r3, #3
 8003696:	f003 0201 	and.w	r2, r3, #1
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	2203      	movs	r2, #3
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x128>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b12      	cmp	r3, #18
 80036ea:	d123      	bne.n	8003734 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	08da      	lsrs	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3208      	adds	r2, #8
 80036f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	220f      	movs	r2, #15
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	08da      	lsrs	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3208      	adds	r2, #8
 800372e:	6939      	ldr	r1, [r7, #16]
 8003730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	2203      	movs	r2, #3
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 0203 	and.w	r2, r3, #3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80ac 	beq.w	80038ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003776:	4b5f      	ldr	r3, [pc, #380]	; (80038f4 <HAL_GPIO_Init+0x330>)
 8003778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377a:	4a5e      	ldr	r2, [pc, #376]	; (80038f4 <HAL_GPIO_Init+0x330>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	6613      	str	r3, [r2, #96]	; 0x60
 8003782:	4b5c      	ldr	r3, [pc, #368]	; (80038f4 <HAL_GPIO_Init+0x330>)
 8003784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800378e:	4a5a      	ldr	r2, [pc, #360]	; (80038f8 <HAL_GPIO_Init+0x334>)
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	089b      	lsrs	r3, r3, #2
 8003794:	3302      	adds	r3, #2
 8003796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	220f      	movs	r2, #15
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4013      	ands	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037b8:	d025      	beq.n	8003806 <HAL_GPIO_Init+0x242>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a4f      	ldr	r2, [pc, #316]	; (80038fc <HAL_GPIO_Init+0x338>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01f      	beq.n	8003802 <HAL_GPIO_Init+0x23e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a4e      	ldr	r2, [pc, #312]	; (8003900 <HAL_GPIO_Init+0x33c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d019      	beq.n	80037fe <HAL_GPIO_Init+0x23a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a4d      	ldr	r2, [pc, #308]	; (8003904 <HAL_GPIO_Init+0x340>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_GPIO_Init+0x236>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a4c      	ldr	r2, [pc, #304]	; (8003908 <HAL_GPIO_Init+0x344>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00d      	beq.n	80037f6 <HAL_GPIO_Init+0x232>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a4b      	ldr	r2, [pc, #300]	; (800390c <HAL_GPIO_Init+0x348>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <HAL_GPIO_Init+0x22e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a4a      	ldr	r2, [pc, #296]	; (8003910 <HAL_GPIO_Init+0x34c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_GPIO_Init+0x22a>
 80037ea:	2306      	movs	r3, #6
 80037ec:	e00c      	b.n	8003808 <HAL_GPIO_Init+0x244>
 80037ee:	2307      	movs	r3, #7
 80037f0:	e00a      	b.n	8003808 <HAL_GPIO_Init+0x244>
 80037f2:	2305      	movs	r3, #5
 80037f4:	e008      	b.n	8003808 <HAL_GPIO_Init+0x244>
 80037f6:	2304      	movs	r3, #4
 80037f8:	e006      	b.n	8003808 <HAL_GPIO_Init+0x244>
 80037fa:	2303      	movs	r3, #3
 80037fc:	e004      	b.n	8003808 <HAL_GPIO_Init+0x244>
 80037fe:	2302      	movs	r3, #2
 8003800:	e002      	b.n	8003808 <HAL_GPIO_Init+0x244>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_GPIO_Init+0x244>
 8003806:	2300      	movs	r3, #0
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	f002 0203 	and.w	r2, r2, #3
 800380e:	0092      	lsls	r2, r2, #2
 8003810:	4093      	lsls	r3, r2
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003818:	4937      	ldr	r1, [pc, #220]	; (80038f8 <HAL_GPIO_Init+0x334>)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	089b      	lsrs	r3, r3, #2
 800381e:	3302      	adds	r3, #2
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003826:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <HAL_GPIO_Init+0x350>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	43db      	mvns	r3, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800384a:	4a32      	ldr	r2, [pc, #200]	; (8003914 <HAL_GPIO_Init+0x350>)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003850:	4b30      	ldr	r3, [pc, #192]	; (8003914 <HAL_GPIO_Init+0x350>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	43db      	mvns	r3, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003874:	4a27      	ldr	r2, [pc, #156]	; (8003914 <HAL_GPIO_Init+0x350>)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800387a:	4b26      	ldr	r3, [pc, #152]	; (8003914 <HAL_GPIO_Init+0x350>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43db      	mvns	r3, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800389e:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <HAL_GPIO_Init+0x350>)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038a4:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <HAL_GPIO_Init+0x350>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038c8:	4a12      	ldr	r2, [pc, #72]	; (8003914 <HAL_GPIO_Init+0x350>)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	3301      	adds	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f47f ae78 	bne.w	80035d4 <HAL_GPIO_Init+0x10>
  }
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40010000 	.word	0x40010000
 80038fc:	48000400 	.word	0x48000400
 8003900:	48000800 	.word	0x48000800
 8003904:	48000c00 	.word	0x48000c00
 8003908:	48001000 	.word	0x48001000
 800390c:	48001400 	.word	0x48001400
 8003910:	48001800 	.word	0x48001800
 8003914:	40010400 	.word	0x40010400

08003918 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003926:	e0cd      	b.n	8003ac4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003928:	2201      	movs	r2, #1
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80c0 	beq.w	8003abe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800393e:	4a68      	ldr	r2, [pc, #416]	; (8003ae0 <HAL_GPIO_DeInit+0x1c8>)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	3302      	adds	r3, #2
 8003946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	220f      	movs	r2, #15
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4013      	ands	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003966:	d025      	beq.n	80039b4 <HAL_GPIO_DeInit+0x9c>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a5e      	ldr	r2, [pc, #376]	; (8003ae4 <HAL_GPIO_DeInit+0x1cc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d01f      	beq.n	80039b0 <HAL_GPIO_DeInit+0x98>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a5d      	ldr	r2, [pc, #372]	; (8003ae8 <HAL_GPIO_DeInit+0x1d0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d019      	beq.n	80039ac <HAL_GPIO_DeInit+0x94>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a5c      	ldr	r2, [pc, #368]	; (8003aec <HAL_GPIO_DeInit+0x1d4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d013      	beq.n	80039a8 <HAL_GPIO_DeInit+0x90>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a5b      	ldr	r2, [pc, #364]	; (8003af0 <HAL_GPIO_DeInit+0x1d8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00d      	beq.n	80039a4 <HAL_GPIO_DeInit+0x8c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a5a      	ldr	r2, [pc, #360]	; (8003af4 <HAL_GPIO_DeInit+0x1dc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d007      	beq.n	80039a0 <HAL_GPIO_DeInit+0x88>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a59      	ldr	r2, [pc, #356]	; (8003af8 <HAL_GPIO_DeInit+0x1e0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d101      	bne.n	800399c <HAL_GPIO_DeInit+0x84>
 8003998:	2306      	movs	r3, #6
 800399a:	e00c      	b.n	80039b6 <HAL_GPIO_DeInit+0x9e>
 800399c:	2307      	movs	r3, #7
 800399e:	e00a      	b.n	80039b6 <HAL_GPIO_DeInit+0x9e>
 80039a0:	2305      	movs	r3, #5
 80039a2:	e008      	b.n	80039b6 <HAL_GPIO_DeInit+0x9e>
 80039a4:	2304      	movs	r3, #4
 80039a6:	e006      	b.n	80039b6 <HAL_GPIO_DeInit+0x9e>
 80039a8:	2303      	movs	r3, #3
 80039aa:	e004      	b.n	80039b6 <HAL_GPIO_DeInit+0x9e>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e002      	b.n	80039b6 <HAL_GPIO_DeInit+0x9e>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_GPIO_DeInit+0x9e>
 80039b4:	2300      	movs	r3, #0
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	f002 0203 	and.w	r2, r2, #3
 80039bc:	0092      	lsls	r2, r2, #2
 80039be:	4093      	lsls	r3, r2
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d132      	bne.n	8003a2c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80039c6:	4b4d      	ldr	r3, [pc, #308]	; (8003afc <HAL_GPIO_DeInit+0x1e4>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	494b      	ldr	r1, [pc, #300]	; (8003afc <HAL_GPIO_DeInit+0x1e4>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80039d4:	4b49      	ldr	r3, [pc, #292]	; (8003afc <HAL_GPIO_DeInit+0x1e4>)
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	43db      	mvns	r3, r3
 80039dc:	4947      	ldr	r1, [pc, #284]	; (8003afc <HAL_GPIO_DeInit+0x1e4>)
 80039de:	4013      	ands	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80039e2:	4b46      	ldr	r3, [pc, #280]	; (8003afc <HAL_GPIO_DeInit+0x1e4>)
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	4944      	ldr	r1, [pc, #272]	; (8003afc <HAL_GPIO_DeInit+0x1e4>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80039f0:	4b42      	ldr	r3, [pc, #264]	; (8003afc <HAL_GPIO_DeInit+0x1e4>)
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	4940      	ldr	r1, [pc, #256]	; (8003afc <HAL_GPIO_DeInit+0x1e4>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	220f      	movs	r2, #15
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003a0e:	4a34      	ldr	r2, [pc, #208]	; (8003ae0 <HAL_GPIO_DeInit+0x1c8>)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	3302      	adds	r3, #2
 8003a16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	43da      	mvns	r2, r3
 8003a1e:	4830      	ldr	r0, [pc, #192]	; (8003ae0 <HAL_GPIO_DeInit+0x1c8>)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	400a      	ands	r2, r1
 8003a26:	3302      	adds	r3, #2
 8003a28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	2103      	movs	r1, #3
 8003a36:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	08da      	lsrs	r2, r3, #3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3208      	adds	r2, #8
 8003a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	220f      	movs	r2, #15
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	08d2      	lsrs	r2, r2, #3
 8003a60:	4019      	ands	r1, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3208      	adds	r2, #8
 8003a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	2103      	movs	r1, #3
 8003a74:	fa01 f303 	lsl.w	r3, r1, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	2101      	movs	r1, #1
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	401a      	ands	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	2103      	movs	r1, #3
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aae:	2101      	movs	r1, #1
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	401a      	ands	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f47f af2b 	bne.w	8003928 <HAL_GPIO_DeInit+0x10>
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	48000400 	.word	0x48000400
 8003ae8:	48000800 	.word	0x48000800
 8003aec:	48000c00 	.word	0x48000c00
 8003af0:	48001000 	.word	0x48001000
 8003af4:	48001400 	.word	0x48001400
 8003af8:	48001800 	.word	0x48001800
 8003afc:	40010400 	.word	0x40010400

08003b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	807b      	strh	r3, [r7, #2]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b10:	787b      	ldrb	r3, [r7, #1]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b16:	887a      	ldrh	r2, [r7, #2]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b1c:	e002      	b.n	8003b24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	887b      	ldrh	r3, [r7, #2]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b48:	887a      	ldrh	r2, [r7, #2]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003b4e:	e002      	b.n	8003b56 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b50:	887a      	ldrh	r2, [r7, #2]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	619a      	str	r2, [r3, #24]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d006      	beq.n	8003b88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b7a:	4a05      	ldr	r2, [pc, #20]	; (8003b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd fe62 	bl	800184c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40010400 	.word	0x40010400

08003b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e081      	b.n	8003caa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fe fc82 	bl	80024c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	; 0x24
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003be4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d107      	bne.n	8003c0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	e006      	b.n	8003c1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d104      	bne.n	8003c2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	ea42 0103 	orr.w	r1, r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	021a      	lsls	r2, r3, #8
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69d9      	ldr	r1, [r3, #28]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1a      	ldr	r2, [r3, #32]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e021      	b.n	8003d08 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2224      	movs	r2, #36	; 0x24
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fe fc35 	bl	800254c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	4608      	mov	r0, r1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4603      	mov	r3, r0
 8003d20:	817b      	strh	r3, [r7, #10]
 8003d22:	460b      	mov	r3, r1
 8003d24:	813b      	strh	r3, [r7, #8]
 8003d26:	4613      	mov	r3, r2
 8003d28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	f040 80f9 	bne.w	8003f2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_I2C_Mem_Write+0x34>
 8003d3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0ed      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_I2C_Mem_Write+0x4e>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e0e6      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d66:	f7ff fb0f 	bl	8003388 <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	2319      	movs	r3, #25
 8003d72:	2201      	movs	r2, #1
 8003d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fac3 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0d1      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2221      	movs	r2, #33	; 0x21
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2240      	movs	r2, #64	; 0x40
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a3a      	ldr	r2, [r7, #32]
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003da8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003db0:	88f8      	ldrh	r0, [r7, #6]
 8003db2:	893a      	ldrh	r2, [r7, #8]
 8003db4:	8979      	ldrh	r1, [r7, #10]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f9d3 	bl	800416c <I2C_RequestMemoryWrite>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0a9      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2bff      	cmp	r3, #255	; 0xff
 8003de0:	d90e      	bls.n	8003e00 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	22ff      	movs	r2, #255	; 0xff
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	8979      	ldrh	r1, [r7, #10]
 8003df0:	2300      	movs	r3, #0
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fba5 	bl	8004548 <I2C_TransferConfig>
 8003dfe:	e00f      	b.n	8003e20 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	8979      	ldrh	r1, [r7, #10]
 8003e12:	2300      	movs	r3, #0
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fb94 	bl	8004548 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 faad 	bl	8004384 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e07b      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d034      	beq.n	8003ed8 <HAL_I2C_Mem_Write+0x1c8>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d130      	bne.n	8003ed8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2180      	movs	r1, #128	; 0x80
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fa3f 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e04d      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2bff      	cmp	r3, #255	; 0xff
 8003e98:	d90e      	bls.n	8003eb8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	22ff      	movs	r2, #255	; 0xff
 8003e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	8979      	ldrh	r1, [r7, #10]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fb49 	bl	8004548 <I2C_TransferConfig>
 8003eb6:	e00f      	b.n	8003ed8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	8979      	ldrh	r1, [r7, #10]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fb38 	bl	8004548 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d19e      	bne.n	8003e20 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fa8c 	bl	8004404 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e01a      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2220      	movs	r2, #32
 8003efc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <HAL_I2C_Mem_Write+0x224>)
 8003f0a:	400b      	ands	r3, r1
 8003f0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	e000      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f2a:	2302      	movs	r3, #2
  }
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	fe00e800 	.word	0xfe00e800

08003f38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	4608      	mov	r0, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	461a      	mov	r2, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	817b      	strh	r3, [r7, #10]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	813b      	strh	r3, [r7, #8]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	f040 80fd 	bne.w	800415a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_I2C_Mem_Read+0x34>
 8003f66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0f1      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_I2C_Mem_Read+0x4e>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e0ea      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f8e:	f7ff f9fb 	bl	8003388 <HAL_GetTick>
 8003f92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	2319      	movs	r3, #25
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f9af 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0d5      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2222      	movs	r2, #34	; 0x22
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2240      	movs	r2, #64	; 0x40
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a3a      	ldr	r2, [r7, #32]
 8003fca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fd8:	88f8      	ldrh	r0, [r7, #6]
 8003fda:	893a      	ldrh	r2, [r7, #8]
 8003fdc:	8979      	ldrh	r1, [r7, #10]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f913 	bl	8004214 <I2C_RequestMemoryRead>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0ad      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	2bff      	cmp	r3, #255	; 0xff
 8004008:	d90e      	bls.n	8004028 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	22ff      	movs	r2, #255	; 0xff
 800400e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004014:	b2da      	uxtb	r2, r3
 8004016:	8979      	ldrh	r1, [r7, #10]
 8004018:	4b52      	ldr	r3, [pc, #328]	; (8004164 <HAL_I2C_Mem_Read+0x22c>)
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fa91 	bl	8004548 <I2C_TransferConfig>
 8004026:	e00f      	b.n	8004048 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004036:	b2da      	uxtb	r2, r3
 8004038:	8979      	ldrh	r1, [r7, #10]
 800403a:	4b4a      	ldr	r3, [pc, #296]	; (8004164 <HAL_I2C_Mem_Read+0x22c>)
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fa80 	bl	8004548 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	2200      	movs	r2, #0
 8004050:	2104      	movs	r1, #4
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f956 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07c      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d034      	beq.n	8004108 <HAL_I2C_Mem_Read+0x1d0>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d130      	bne.n	8004108 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	2200      	movs	r2, #0
 80040ae:	2180      	movs	r1, #128	; 0x80
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f927 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e04d      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2bff      	cmp	r3, #255	; 0xff
 80040c8:	d90e      	bls.n	80040e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	22ff      	movs	r2, #255	; 0xff
 80040ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	8979      	ldrh	r1, [r7, #10]
 80040d8:	2300      	movs	r3, #0
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fa31 	bl	8004548 <I2C_TransferConfig>
 80040e6:	e00f      	b.n	8004108 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	8979      	ldrh	r1, [r7, #10]
 80040fa:	2300      	movs	r3, #0
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fa20 	bl	8004548 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d19a      	bne.n	8004048 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f974 	bl	8004404 <I2C_WaitOnSTOPFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e01a      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2220      	movs	r2, #32
 800412c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_I2C_Mem_Read+0x230>)
 800413a:	400b      	ands	r3, r1
 800413c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e000      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800415a:	2302      	movs	r3, #2
  }
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	80002400 	.word	0x80002400
 8004168:	fe00e800 	.word	0xfe00e800

0800416c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	4608      	mov	r0, r1
 8004176:	4611      	mov	r1, r2
 8004178:	461a      	mov	r2, r3
 800417a:	4603      	mov	r3, r0
 800417c:	817b      	strh	r3, [r7, #10]
 800417e:	460b      	mov	r3, r1
 8004180:	813b      	strh	r3, [r7, #8]
 8004182:	4613      	mov	r3, r2
 8004184:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	8979      	ldrh	r1, [r7, #10]
 800418c:	4b20      	ldr	r3, [pc, #128]	; (8004210 <I2C_RequestMemoryWrite+0xa4>)
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f9d7 	bl	8004548 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	69b9      	ldr	r1, [r7, #24]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f8f0 	bl	8004384 <I2C_WaitOnTXISFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e02c      	b.n	8004208 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d105      	bne.n	80041c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041b4:	893b      	ldrh	r3, [r7, #8]
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	629a      	str	r2, [r3, #40]	; 0x28
 80041be:	e015      	b.n	80041ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041c0:	893b      	ldrh	r3, [r7, #8]
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	69b9      	ldr	r1, [r7, #24]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f8d6 	bl	8004384 <I2C_WaitOnTXISFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e012      	b.n	8004208 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041e2:	893b      	ldrh	r3, [r7, #8]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2200      	movs	r2, #0
 80041f4:	2180      	movs	r1, #128	; 0x80
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f884 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	80002000 	.word	0x80002000

08004214 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	461a      	mov	r2, r3
 8004222:	4603      	mov	r3, r0
 8004224:	817b      	strh	r3, [r7, #10]
 8004226:	460b      	mov	r3, r1
 8004228:	813b      	strh	r3, [r7, #8]
 800422a:	4613      	mov	r3, r2
 800422c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	8979      	ldrh	r1, [r7, #10]
 8004234:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <I2C_RequestMemoryRead+0xa4>)
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2300      	movs	r3, #0
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f984 	bl	8004548 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	69b9      	ldr	r1, [r7, #24]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f89d 	bl	8004384 <I2C_WaitOnTXISFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e02c      	b.n	80042ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d105      	bne.n	8004266 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800425a:	893b      	ldrh	r3, [r7, #8]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
 8004264:	e015      	b.n	8004292 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004266:	893b      	ldrh	r3, [r7, #8]
 8004268:	0a1b      	lsrs	r3, r3, #8
 800426a:	b29b      	uxth	r3, r3
 800426c:	b2da      	uxtb	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	69b9      	ldr	r1, [r7, #24]
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f883 	bl	8004384 <I2C_WaitOnTXISFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e012      	b.n	80042ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004288:	893b      	ldrh	r3, [r7, #8]
 800428a:	b2da      	uxtb	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2200      	movs	r2, #0
 800429a:	2140      	movs	r1, #64	; 0x40
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f831 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	80002000 	.word	0x80002000

080042bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d103      	bne.n	80042da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2200      	movs	r2, #0
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d007      	beq.n	80042f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	619a      	str	r2, [r3, #24]
  }
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004314:	e022      	b.n	800435c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d01e      	beq.n	800435c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7ff f833 	bl	8003388 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <I2C_WaitOnFlagUntilTimeout+0x30>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d113      	bne.n	800435c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e00f      	b.n	800437c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4013      	ands	r3, r2
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	429a      	cmp	r2, r3
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	429a      	cmp	r2, r3
 8004378:	d0cd      	beq.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004390:	e02c      	b.n	80043ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f870 	bl	800447c <I2C_IsAcknowledgeFailed>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e02a      	b.n	80043fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d01e      	beq.n	80043ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fe ffeb 	bl	8003388 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d113      	bne.n	80043ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	f043 0220 	orr.w	r2, r3, #32
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e007      	b.n	80043fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d1cb      	bne.n	8004392 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004410:	e028      	b.n	8004464 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f830 	bl	800447c <I2C_IsAcknowledgeFailed>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e026      	b.n	8004474 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fe ffaf 	bl	8003388 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d113      	bne.n	8004464 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004440:	f043 0220 	orr.w	r2, r3, #32
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e007      	b.n	8004474 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b20      	cmp	r3, #32
 8004470:	d1cf      	bne.n	8004412 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b10      	cmp	r3, #16
 8004494:	d151      	bne.n	800453a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004496:	e022      	b.n	80044de <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d01e      	beq.n	80044de <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a0:	f7fe ff72 	bl	8003388 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <I2C_IsAcknowledgeFailed+0x3a>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d113      	bne.n	80044de <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	f043 0220 	orr.w	r2, r3, #32
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e02e      	b.n	800453c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d1d5      	bne.n	8004498 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2210      	movs	r2, #16
 80044f2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2220      	movs	r2, #32
 80044fa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff fedd 	bl	80042bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6859      	ldr	r1, [r3, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <I2C_IsAcknowledgeFailed+0xc8>)
 800450e:	400b      	ands	r3, r1
 8004510:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f043 0204 	orr.w	r2, r3, #4
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	fe00e800 	.word	0xfe00e800

08004548 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	460b      	mov	r3, r1
 8004554:	817b      	strh	r3, [r7, #10]
 8004556:	4613      	mov	r3, r2
 8004558:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	0d5b      	lsrs	r3, r3, #21
 8004564:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004568:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <I2C_TransferConfig+0x58>)
 800456a:	430b      	orrs	r3, r1
 800456c:	43db      	mvns	r3, r3
 800456e:	ea02 0103 	and.w	r1, r2, r3
 8004572:	897b      	ldrh	r3, [r7, #10]
 8004574:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004578:	7a7b      	ldrb	r3, [r7, #9]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	431a      	orrs	r2, r3
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	431a      	orrs	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	03ff63ff 	.word	0x03ff63ff

080045a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d138      	bne.n	800462c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e032      	b.n	800462e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2224      	movs	r2, #36	; 0x24
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0201 	bic.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6819      	ldr	r1, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	e000      	b.n	800462e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800462c:	2302      	movs	r3, #2
  }
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800464a:	4b3e      	ldr	r3, [pc, #248]	; (8004744 <HAL_RCC_GetSysClockFreq+0x108>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004654:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <HAL_RCC_GetSysClockFreq+0x108>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0x34>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b0c      	cmp	r3, #12
 8004668:	d121      	bne.n	80046ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d11e      	bne.n	80046ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004670:	4b34      	ldr	r3, [pc, #208]	; (8004744 <HAL_RCC_GetSysClockFreq+0x108>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d107      	bne.n	800468c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800467c:	4b31      	ldr	r3, [pc, #196]	; (8004744 <HAL_RCC_GetSysClockFreq+0x108>)
 800467e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	e005      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800468c:	4b2d      	ldr	r3, [pc, #180]	; (8004744 <HAL_RCC_GetSysClockFreq+0x108>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004698:	4a2b      	ldr	r2, [pc, #172]	; (8004748 <HAL_RCC_GetSysClockFreq+0x10c>)
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10d      	bne.n	80046c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046ac:	e00a      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d102      	bne.n	80046ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046b4:	4b25      	ldr	r3, [pc, #148]	; (800474c <HAL_RCC_GetSysClockFreq+0x110>)
 80046b6:	61bb      	str	r3, [r7, #24]
 80046b8:	e004      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046c0:	4b23      	ldr	r3, [pc, #140]	; (8004750 <HAL_RCC_GetSysClockFreq+0x114>)
 80046c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2b0c      	cmp	r3, #12
 80046c8:	d134      	bne.n	8004734 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ca:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <HAL_RCC_GetSysClockFreq+0x108>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d003      	beq.n	80046e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d003      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0xac>
 80046e0:	e005      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046e2:	4b1a      	ldr	r3, [pc, #104]	; (800474c <HAL_RCC_GetSysClockFreq+0x110>)
 80046e4:	617b      	str	r3, [r7, #20]
      break;
 80046e6:	e005      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046e8:	4b19      	ldr	r3, [pc, #100]	; (8004750 <HAL_RCC_GetSysClockFreq+0x114>)
 80046ea:	617b      	str	r3, [r7, #20]
      break;
 80046ec:	e002      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	617b      	str	r3, [r7, #20]
      break;
 80046f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046f4:	4b13      	ldr	r3, [pc, #76]	; (8004744 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	3301      	adds	r3, #1
 8004700:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004702:	4b10      	ldr	r3, [pc, #64]	; (8004744 <HAL_RCC_GetSysClockFreq+0x108>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	fb03 f202 	mul.w	r2, r3, r2
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	fbb2 f3f3 	udiv	r3, r2, r3
 8004718:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <HAL_RCC_GetSysClockFreq+0x108>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	0e5b      	lsrs	r3, r3, #25
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	3301      	adds	r3, #1
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004734:	69bb      	ldr	r3, [r7, #24]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3724      	adds	r7, #36	; 0x24
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40021000 	.word	0x40021000
 8004748:	080095ec 	.word	0x080095ec
 800474c:	00f42400 	.word	0x00f42400
 8004750:	007a1200 	.word	0x007a1200

08004754 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004758:	4b03      	ldr	r3, [pc, #12]	; (8004768 <HAL_RCC_GetHCLKFreq+0x14>)
 800475a:	681b      	ldr	r3, [r3, #0]
}
 800475c:	4618      	mov	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	20000004 	.word	0x20000004

0800476c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004770:	f7ff fff0 	bl	8004754 <HAL_RCC_GetHCLKFreq>
 8004774:	4602      	mov	r2, r0
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	0a1b      	lsrs	r3, r3, #8
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	4904      	ldr	r1, [pc, #16]	; (8004794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004782:	5ccb      	ldrb	r3, [r1, r3]
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800478c:	4618      	mov	r0, r3
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40021000 	.word	0x40021000
 8004794:	080095e4 	.word	0x080095e4

08004798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800479c:	f7ff ffda 	bl	8004754 <HAL_RCC_GetHCLKFreq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4b06      	ldr	r3, [pc, #24]	; (80047bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	0adb      	lsrs	r3, r3, #11
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	4904      	ldr	r1, [pc, #16]	; (80047c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047ae:	5ccb      	ldrb	r3, [r1, r3]
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40021000 	.word	0x40021000
 80047c0:	080095e4 	.word	0x080095e4

080047c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e040      	b.n	8004858 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fd fece 	bl	8002588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2224      	movs	r2, #36	; 0x24
 80047f0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f8c0 	bl	8004988 <UART_SetConfig>
 8004808:	4603      	mov	r3, r0
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e022      	b.n	8004858 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fc54 	bl	80050c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800482e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800483e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fcdb 	bl	800520c <UART_CheckIdleState>
 8004856:	4603      	mov	r3, r0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08a      	sub	sp, #40	; 0x28
 8004864:	af02      	add	r7, sp, #8
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	4613      	mov	r3, r2
 800486e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004874:	2b20      	cmp	r3, #32
 8004876:	f040 8081 	bne.w	800497c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_UART_Transmit+0x26>
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e079      	b.n	800497e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_UART_Transmit+0x38>
 8004894:	2302      	movs	r3, #2
 8004896:	e072      	b.n	800497e <HAL_UART_Transmit+0x11e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2221      	movs	r2, #33	; 0x21
 80048aa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80048ac:	f7fe fd6c 	bl	8003388 <HAL_GetTick>
 80048b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	88fa      	ldrh	r2, [r7, #6]
 80048b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	88fa      	ldrh	r2, [r7, #6]
 80048be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ca:	d108      	bne.n	80048de <HAL_UART_Transmit+0x7e>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	e003      	b.n	80048e6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80048ee:	e02d      	b.n	800494c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2200      	movs	r2, #0
 80048f8:	2180      	movs	r1, #128	; 0x80
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fccb 	bl	8005296 <UART_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e039      	b.n	800497e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	881a      	ldrh	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800491c:	b292      	uxth	r2, r2
 800491e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	3302      	adds	r3, #2
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	e008      	b.n	800493a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	b292      	uxth	r2, r2
 8004932:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1cb      	bne.n	80048f0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2200      	movs	r2, #0
 8004960:	2140      	movs	r1, #64	; 0x40
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fc97 	bl	8005296 <UART_WaitOnFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e005      	b.n	800497e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
  }
}
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800498c:	b0a0      	sub	sp, #128	; 0x80
 800498e:	af00      	add	r7, sp, #0
 8004990:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004992:	2300      	movs	r3, #0
 8004994:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800499c:	2300      	movs	r3, #0
 800499e:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	49a4      	ldr	r1, [pc, #656]	; (8004c50 <UART_SetConfig+0x2c8>)
 80049c0:	4019      	ands	r1, r3
 80049c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049c8:	430b      	orrs	r3, r1
 80049ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d8:	68d9      	ldr	r1, [r3, #12]
 80049da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	ea40 0301 	orr.w	r3, r0, r1
 80049e2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b99      	ldr	r3, [pc, #612]	; (8004c54 <UART_SetConfig+0x2cc>)
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d004      	beq.n	80049fe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f6:	6a1a      	ldr	r2, [r3, #32]
 80049f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049fa:	4313      	orrs	r3, r2
 80049fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b90      	ldr	r3, [pc, #576]	; (8004c58 <UART_SetConfig+0x2d0>)
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d125      	bne.n	8004a68 <UART_SetConfig+0xe0>
 8004a1c:	4b8f      	ldr	r3, [pc, #572]	; (8004c5c <UART_SetConfig+0x2d4>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d81a      	bhi.n	8004a60 <UART_SetConfig+0xd8>
 8004a2a:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <UART_SetConfig+0xa8>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a41 	.word	0x08004a41
 8004a34:	08004a51 	.word	0x08004a51
 8004a38:	08004a49 	.word	0x08004a49
 8004a3c:	08004a59 	.word	0x08004a59
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a46:	e116      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a4e:	e112      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004a50:	2304      	movs	r3, #4
 8004a52:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a56:	e10e      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004a58:	2308      	movs	r3, #8
 8004a5a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a5e:	e10a      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004a60:	2310      	movs	r3, #16
 8004a62:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a66:	e106      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4b7c      	ldr	r3, [pc, #496]	; (8004c60 <UART_SetConfig+0x2d8>)
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d138      	bne.n	8004ae4 <UART_SetConfig+0x15c>
 8004a72:	4b7a      	ldr	r3, [pc, #488]	; (8004c5c <UART_SetConfig+0x2d4>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b0c      	cmp	r3, #12
 8004a7e:	d82d      	bhi.n	8004adc <UART_SetConfig+0x154>
 8004a80:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <UART_SetConfig+0x100>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004abd 	.word	0x08004abd
 8004a8c:	08004add 	.word	0x08004add
 8004a90:	08004add 	.word	0x08004add
 8004a94:	08004add 	.word	0x08004add
 8004a98:	08004acd 	.word	0x08004acd
 8004a9c:	08004add 	.word	0x08004add
 8004aa0:	08004add 	.word	0x08004add
 8004aa4:	08004add 	.word	0x08004add
 8004aa8:	08004ac5 	.word	0x08004ac5
 8004aac:	08004add 	.word	0x08004add
 8004ab0:	08004add 	.word	0x08004add
 8004ab4:	08004add 	.word	0x08004add
 8004ab8:	08004ad5 	.word	0x08004ad5
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004ac2:	e0d8      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004aca:	e0d4      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004acc:	2304      	movs	r3, #4
 8004ace:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004ad2:	e0d0      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004ada:	e0cc      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004adc:	2310      	movs	r3, #16
 8004ade:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004ae2:	e0c8      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	4b5e      	ldr	r3, [pc, #376]	; (8004c64 <UART_SetConfig+0x2dc>)
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d125      	bne.n	8004b3a <UART_SetConfig+0x1b2>
 8004aee:	4b5b      	ldr	r3, [pc, #364]	; (8004c5c <UART_SetConfig+0x2d4>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004af8:	2b30      	cmp	r3, #48	; 0x30
 8004afa:	d016      	beq.n	8004b2a <UART_SetConfig+0x1a2>
 8004afc:	2b30      	cmp	r3, #48	; 0x30
 8004afe:	d818      	bhi.n	8004b32 <UART_SetConfig+0x1aa>
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d00a      	beq.n	8004b1a <UART_SetConfig+0x192>
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d814      	bhi.n	8004b32 <UART_SetConfig+0x1aa>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <UART_SetConfig+0x18a>
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d008      	beq.n	8004b22 <UART_SetConfig+0x19a>
 8004b10:	e00f      	b.n	8004b32 <UART_SetConfig+0x1aa>
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b18:	e0ad      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b20:	e0a9      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004b22:	2304      	movs	r3, #4
 8004b24:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b28:	e0a5      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b30:	e0a1      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004b32:	2310      	movs	r3, #16
 8004b34:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b38:	e09d      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b4a      	ldr	r3, [pc, #296]	; (8004c68 <UART_SetConfig+0x2e0>)
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d125      	bne.n	8004b90 <UART_SetConfig+0x208>
 8004b44:	4b45      	ldr	r3, [pc, #276]	; (8004c5c <UART_SetConfig+0x2d4>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b4e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b50:	d016      	beq.n	8004b80 <UART_SetConfig+0x1f8>
 8004b52:	2bc0      	cmp	r3, #192	; 0xc0
 8004b54:	d818      	bhi.n	8004b88 <UART_SetConfig+0x200>
 8004b56:	2b80      	cmp	r3, #128	; 0x80
 8004b58:	d00a      	beq.n	8004b70 <UART_SetConfig+0x1e8>
 8004b5a:	2b80      	cmp	r3, #128	; 0x80
 8004b5c:	d814      	bhi.n	8004b88 <UART_SetConfig+0x200>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <UART_SetConfig+0x1e0>
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	d008      	beq.n	8004b78 <UART_SetConfig+0x1f0>
 8004b66:	e00f      	b.n	8004b88 <UART_SetConfig+0x200>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b6e:	e082      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004b70:	2302      	movs	r3, #2
 8004b72:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b76:	e07e      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b7e:	e07a      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004b80:	2308      	movs	r3, #8
 8004b82:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b86:	e076      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b8e:	e072      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4b35      	ldr	r3, [pc, #212]	; (8004c6c <UART_SetConfig+0x2e4>)
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d12a      	bne.n	8004bf0 <UART_SetConfig+0x268>
 8004b9a:	4b30      	ldr	r3, [pc, #192]	; (8004c5c <UART_SetConfig+0x2d4>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ba8:	d01a      	beq.n	8004be0 <UART_SetConfig+0x258>
 8004baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bae:	d81b      	bhi.n	8004be8 <UART_SetConfig+0x260>
 8004bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb4:	d00c      	beq.n	8004bd0 <UART_SetConfig+0x248>
 8004bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bba:	d815      	bhi.n	8004be8 <UART_SetConfig+0x260>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <UART_SetConfig+0x240>
 8004bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc4:	d008      	beq.n	8004bd8 <UART_SetConfig+0x250>
 8004bc6:	e00f      	b.n	8004be8 <UART_SetConfig+0x260>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004bce:	e052      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004bd6:	e04e      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004bde:	e04a      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004be0:	2308      	movs	r3, #8
 8004be2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004be6:	e046      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004be8:	2310      	movs	r3, #16
 8004bea:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004bee:	e042      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b17      	ldr	r3, [pc, #92]	; (8004c54 <UART_SetConfig+0x2cc>)
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d13a      	bne.n	8004c70 <UART_SetConfig+0x2e8>
 8004bfa:	4b18      	ldr	r3, [pc, #96]	; (8004c5c <UART_SetConfig+0x2d4>)
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c08:	d01a      	beq.n	8004c40 <UART_SetConfig+0x2b8>
 8004c0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c0e:	d81b      	bhi.n	8004c48 <UART_SetConfig+0x2c0>
 8004c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c14:	d00c      	beq.n	8004c30 <UART_SetConfig+0x2a8>
 8004c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1a:	d815      	bhi.n	8004c48 <UART_SetConfig+0x2c0>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <UART_SetConfig+0x2a0>
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c24:	d008      	beq.n	8004c38 <UART_SetConfig+0x2b0>
 8004c26:	e00f      	b.n	8004c48 <UART_SetConfig+0x2c0>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004c2e:	e022      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004c30:	2302      	movs	r3, #2
 8004c32:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004c36:	e01e      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004c38:	2304      	movs	r3, #4
 8004c3a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004c3e:	e01a      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004c40:	2308      	movs	r3, #8
 8004c42:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004c46:	e016      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004c48:	2310      	movs	r3, #16
 8004c4a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004c4e:	e012      	b.n	8004c76 <UART_SetConfig+0x2ee>
 8004c50:	efff69f3 	.word	0xefff69f3
 8004c54:	40008000 	.word	0x40008000
 8004c58:	40013800 	.word	0x40013800
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40004400 	.word	0x40004400
 8004c64:	40004800 	.word	0x40004800
 8004c68:	40004c00 	.word	0x40004c00
 8004c6c:	40005000 	.word	0x40005000
 8004c70:	2310      	movs	r3, #16
 8004c72:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4bb6      	ldr	r3, [pc, #728]	; (8004f54 <UART_SetConfig+0x5cc>)
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	f040 810c 	bne.w	8004e9a <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c82:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d823      	bhi.n	8004cd2 <UART_SetConfig+0x34a>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <UART_SetConfig+0x308>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004cb5 	.word	0x08004cb5
 8004c94:	08004cd3 	.word	0x08004cd3
 8004c98:	08004cbd 	.word	0x08004cbd
 8004c9c:	08004cd3 	.word	0x08004cd3
 8004ca0:	08004cc3 	.word	0x08004cc3
 8004ca4:	08004cd3 	.word	0x08004cd3
 8004ca8:	08004cd3 	.word	0x08004cd3
 8004cac:	08004cd3 	.word	0x08004cd3
 8004cb0:	08004ccb 	.word	0x08004ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004cb4:	f7ff fd5a 	bl	800476c <HAL_RCC_GetPCLK1Freq>
 8004cb8:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cba:	e00e      	b.n	8004cda <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004cbc:	4ba6      	ldr	r3, [pc, #664]	; (8004f58 <UART_SetConfig+0x5d0>)
 8004cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cc0:	e00b      	b.n	8004cda <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004cc2:	f7ff fcbb 	bl	800463c <HAL_RCC_GetSysClockFreq>
 8004cc6:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cc8:	e007      	b.n	8004cda <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cce:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cd0:	e003      	b.n	8004cda <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004cd8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 81e5 	beq.w	80050ac <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	441a      	add	r2, r3
 8004cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d305      	bcc.n	8004cfe <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d903      	bls.n	8004d06 <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004d04:	e1d2      	b.n	80050ac <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 8004d06:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	f200 80b0 	bhi.w	8004e70 <UART_SetConfig+0x4e8>
 8004d10:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <UART_SetConfig+0x390>)
 8004d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d16:	bf00      	nop
 8004d18:	08004d3d 	.word	0x08004d3d
 8004d1c:	08004e71 	.word	0x08004e71
 8004d20:	08004d9d 	.word	0x08004d9d
 8004d24:	08004e71 	.word	0x08004e71
 8004d28:	08004ddd 	.word	0x08004ddd
 8004d2c:	08004e71 	.word	0x08004e71
 8004d30:	08004e71 	.word	0x08004e71
 8004d34:	08004e71 	.word	0x08004e71
 8004d38:	08004e39 	.word	0x08004e39
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004d3c:	f7ff fd16 	bl	800476c <HAL_RCC_GetPCLK1Freq>
 8004d40:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d44:	2200      	movs	r2, #0
 8004d46:	4698      	mov	r8, r3
 8004d48:	4691      	mov	r9, r2
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8004d56:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8004d5a:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8004d5e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004d60:	6849      	ldr	r1, [r1, #4]
 8004d62:	0849      	lsrs	r1, r1, #1
 8004d64:	2000      	movs	r0, #0
 8004d66:	6539      	str	r1, [r7, #80]	; 0x50
 8004d68:	6578      	str	r0, [r7, #84]	; 0x54
 8004d6a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004d6e:	4621      	mov	r1, r4
 8004d70:	1851      	adds	r1, r2, r1
 8004d72:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d74:	4629      	mov	r1, r5
 8004d76:	eb43 0101 	adc.w	r1, r3, r1
 8004d7a:	64f9      	str	r1, [r7, #76]	; 0x4c
 8004d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	643b      	str	r3, [r7, #64]	; 0x40
 8004d84:	647a      	str	r2, [r7, #68]	; 0x44
 8004d86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d8e:	f7fb ff5b 	bl	8000c48 <__aeabi_uldivmod>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4613      	mov	r3, r2
 8004d98:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d9a:	e06d      	b.n	8004e78 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	2200      	movs	r2, #0
 8004da4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004da6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004da8:	4b6c      	ldr	r3, [pc, #432]	; (8004f5c <UART_SetConfig+0x5d4>)
 8004daa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004dae:	4602      	mov	r2, r0
 8004db0:	18d3      	adds	r3, r2, r3
 8004db2:	633b      	str	r3, [r7, #48]	; 0x30
 8004db4:	460b      	mov	r3, r1
 8004db6:	f143 0300 	adc.w	r3, r3, #0
 8004dba:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004dce:	f7fb ff3b 	bl	8000c48 <__aeabi_uldivmod>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004dda:	e04d      	b.n	8004e78 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004ddc:	f7ff fc2e 	bl	800463c <HAL_RCC_GetSysClockFreq>
 8004de0:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004de2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004de4:	2200      	movs	r2, #0
 8004de6:	461c      	mov	r4, r3
 8004de8:	4615      	mov	r5, r2
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	022b      	lsls	r3, r5, #8
 8004df4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004df8:	0222      	lsls	r2, r4, #8
 8004dfa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004dfc:	6849      	ldr	r1, [r1, #4]
 8004dfe:	0849      	lsrs	r1, r1, #1
 8004e00:	2000      	movs	r0, #0
 8004e02:	6239      	str	r1, [r7, #32]
 8004e04:	6278      	str	r0, [r7, #36]	; 0x24
 8004e06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	1851      	adds	r1, r2, r1
 8004e0e:	61b9      	str	r1, [r7, #24]
 8004e10:	4629      	mov	r1, r5
 8004e12:	eb43 0101 	adc.w	r1, r3, r1
 8004e16:	61f9      	str	r1, [r7, #28]
 8004e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	617a      	str	r2, [r7, #20]
 8004e22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e2a:	f7fb ff0d 	bl	8000c48 <__aeabi_uldivmod>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4613      	mov	r3, r2
 8004e34:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e36:	e01f      	b.n	8004e78 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	085b      	lsrs	r3, r3, #1
 8004e3e:	2200      	movs	r2, #0
 8004e40:	469a      	mov	sl, r3
 8004e42:	4693      	mov	fp, r2
 8004e44:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	f14b 0300 	adc.w	r3, fp, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e62:	f7fb fef1 	bl	8000c48 <__aeabi_uldivmod>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e6e:	e003      	b.n	8004e78 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 8004e76:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e7e:	d308      	bcc.n	8004e92 <UART_SetConfig+0x50a>
 8004e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e86:	d204      	bcs.n	8004e92 <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 8004e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e8e:	60da      	str	r2, [r3, #12]
 8004e90:	e10c      	b.n	80050ac <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004e98:	e108      	b.n	80050ac <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea2:	f040 808f 	bne.w	8004fc4 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 8004ea6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d864      	bhi.n	8004f78 <UART_SetConfig+0x5f0>
 8004eae:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <UART_SetConfig+0x52c>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004ef9 	.word	0x08004ef9
 8004ebc:	08004f19 	.word	0x08004f19
 8004ec0:	08004f79 	.word	0x08004f79
 8004ec4:	08004f35 	.word	0x08004f35
 8004ec8:	08004f79 	.word	0x08004f79
 8004ecc:	08004f79 	.word	0x08004f79
 8004ed0:	08004f79 	.word	0x08004f79
 8004ed4:	08004f61 	.word	0x08004f61
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed8:	f7ff fc48 	bl	800476c <HAL_RCC_GetPCLK1Freq>
 8004edc:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee0:	005a      	lsls	r2, r3, #1
 8004ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	441a      	add	r2, r3
 8004eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ef6:	e043      	b.n	8004f80 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef8:	f7ff fc4e 	bl	8004798 <HAL_RCC_GetPCLK2Freq>
 8004efc:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f00:	005a      	lsls	r2, r3, #1
 8004f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	441a      	add	r2, r3
 8004f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f16:	e033      	b.n	8004f80 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004f22:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004f26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f28:	6852      	ldr	r2, [r2, #4]
 8004f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f32:	e025      	b.n	8004f80 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f34:	f7ff fb82 	bl	800463c <HAL_RCC_GetSysClockFreq>
 8004f38:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f3c:	005a      	lsls	r2, r3, #1
 8004f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	441a      	add	r2, r3
 8004f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f52:	e015      	b.n	8004f80 <UART_SetConfig+0x5f8>
 8004f54:	40008000 	.word	0x40008000
 8004f58:	00f42400 	.word	0x00f42400
 8004f5c:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	085b      	lsrs	r3, r3, #1
 8004f66:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f76:	e003      	b.n	8004f80 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004f7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f82:	2b0f      	cmp	r3, #15
 8004f84:	d91a      	bls.n	8004fbc <UART_SetConfig+0x634>
 8004f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8c:	d216      	bcs.n	8004fbc <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f023 030f 	bic.w	r3, r3, #15
 8004f96:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f9c:	085b      	lsrs	r3, r3, #1
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 8004fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	e077      	b.n	80050ac <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004fc2:	e073      	b.n	80050ac <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8004fc4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d85c      	bhi.n	8005086 <UART_SetConfig+0x6fe>
 8004fcc:	a201      	add	r2, pc, #4	; (adr r2, 8004fd4 <UART_SetConfig+0x64c>)
 8004fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd2:	bf00      	nop
 8004fd4:	08004ff9 	.word	0x08004ff9
 8004fd8:	08005017 	.word	0x08005017
 8004fdc:	08005035 	.word	0x08005035
 8004fe0:	08005087 	.word	0x08005087
 8004fe4:	08005051 	.word	0x08005051
 8004fe8:	08005087 	.word	0x08005087
 8004fec:	08005087 	.word	0x08005087
 8004ff0:	08005087 	.word	0x08005087
 8004ff4:	0800506f 	.word	0x0800506f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff8:	f7ff fbb8 	bl	800476c <HAL_RCC_GetPCLK1Freq>
 8004ffc:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	085a      	lsrs	r2, r3, #1
 8005004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005006:	441a      	add	r2, r3
 8005008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005010:	b29b      	uxth	r3, r3
 8005012:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005014:	e03b      	b.n	800508e <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005016:	f7ff fbbf 	bl	8004798 <HAL_RCC_GetPCLK2Freq>
 800501a:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800501c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	085a      	lsrs	r2, r3, #1
 8005022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005024:	441a      	add	r2, r3
 8005026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	fbb2 f3f3 	udiv	r3, r2, r3
 800502e:	b29b      	uxth	r3, r3
 8005030:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005032:	e02c      	b.n	800508e <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	085b      	lsrs	r3, r3, #1
 800503a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800503e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005042:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005044:	6852      	ldr	r2, [r2, #4]
 8005046:	fbb3 f3f2 	udiv	r3, r3, r2
 800504a:	b29b      	uxth	r3, r3
 800504c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800504e:	e01e      	b.n	800508e <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005050:	f7ff faf4 	bl	800463c <HAL_RCC_GetSysClockFreq>
 8005054:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	085a      	lsrs	r2, r3, #1
 800505c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800505e:	441a      	add	r2, r3
 8005060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	fbb2 f3f3 	udiv	r3, r2, r3
 8005068:	b29b      	uxth	r3, r3
 800506a:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800506c:	e00f      	b.n	800508e <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800506e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	085b      	lsrs	r3, r3, #1
 8005074:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	b29b      	uxth	r3, r3
 8005082:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005084:	e003      	b.n	800508e <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 800508c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800508e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005090:	2b0f      	cmp	r3, #15
 8005092:	d908      	bls.n	80050a6 <UART_SetConfig+0x71e>
 8005094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509a:	d204      	bcs.n	80050a6 <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 800509c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80050a2:	60da      	str	r2, [r3, #12]
 80050a4:	e002      	b.n	80050ac <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ae:	2200      	movs	r2, #0
 80050b0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80050b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b4:	2200      	movs	r2, #0
 80050b6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80050b8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3780      	adds	r7, #128	; 0x80
 80050c0:	46bd      	mov	sp, r7
 80050c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c6:	bf00      	nop

080050c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01a      	beq.n	80051de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c6:	d10a      	bne.n	80051de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	605a      	str	r2, [r3, #4]
  }
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af02      	add	r7, sp, #8
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800521a:	f7fe f8b5 	bl	8003388 <HAL_GetTick>
 800521e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b08      	cmp	r3, #8
 800522c:	d10e      	bne.n	800524c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800522e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f82a 	bl	8005296 <UART_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e020      	b.n	800528e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b04      	cmp	r3, #4
 8005258:	d10e      	bne.n	8005278 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800525a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f814 	bl	8005296 <UART_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e00a      	b.n	800528e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b084      	sub	sp, #16
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	4613      	mov	r3, r2
 80052a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a6:	e05d      	b.n	8005364 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ae:	d059      	beq.n	8005364 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b0:	f7fe f86a 	bl	8003388 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d302      	bcc.n	80052c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d11b      	bne.n	80052fe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e042      	b.n	8005384 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d02b      	beq.n	8005364 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800531a:	d123      	bne.n	8005364 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005324:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005334:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0201 	bic.w	r2, r2, #1
 8005344:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e00f      	b.n	8005384 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69da      	ldr	r2, [r3, #28]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4013      	ands	r3, r2
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	429a      	cmp	r2, r3
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	429a      	cmp	r2, r3
 8005380:	d092      	beq.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <findslot>:
 800538c:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <findslot+0x2c>)
 800538e:	b510      	push	{r4, lr}
 8005390:	4604      	mov	r4, r0
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	b118      	cbz	r0, 800539e <findslot+0x12>
 8005396:	6983      	ldr	r3, [r0, #24]
 8005398:	b90b      	cbnz	r3, 800539e <findslot+0x12>
 800539a:	f000 f9a1 	bl	80056e0 <__sinit>
 800539e:	2c13      	cmp	r4, #19
 80053a0:	d807      	bhi.n	80053b2 <findslot+0x26>
 80053a2:	4806      	ldr	r0, [pc, #24]	; (80053bc <findslot+0x30>)
 80053a4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80053a8:	3201      	adds	r2, #1
 80053aa:	d002      	beq.n	80053b2 <findslot+0x26>
 80053ac:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	2000      	movs	r0, #0
 80053b4:	e7fc      	b.n	80053b0 <findslot+0x24>
 80053b6:	bf00      	nop
 80053b8:	20000058 	.word	0x20000058
 80053bc:	2000040c 	.word	0x2000040c

080053c0 <error>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	4604      	mov	r4, r0
 80053c4:	f000 f92e 	bl	8005624 <__errno>
 80053c8:	2613      	movs	r6, #19
 80053ca:	4605      	mov	r5, r0
 80053cc:	2700      	movs	r7, #0
 80053ce:	4630      	mov	r0, r6
 80053d0:	4639      	mov	r1, r7
 80053d2:	beab      	bkpt	0x00ab
 80053d4:	4606      	mov	r6, r0
 80053d6:	602e      	str	r6, [r5, #0]
 80053d8:	4620      	mov	r0, r4
 80053da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080053dc <checkerror>:
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d101      	bne.n	80053e4 <checkerror+0x8>
 80053e0:	f7ff bfee 	b.w	80053c0 <error>
 80053e4:	4770      	bx	lr

080053e6 <_swiread>:
 80053e6:	b530      	push	{r4, r5, lr}
 80053e8:	b085      	sub	sp, #20
 80053ea:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80053ee:	9203      	str	r2, [sp, #12]
 80053f0:	2406      	movs	r4, #6
 80053f2:	ad01      	add	r5, sp, #4
 80053f4:	4620      	mov	r0, r4
 80053f6:	4629      	mov	r1, r5
 80053f8:	beab      	bkpt	0x00ab
 80053fa:	4604      	mov	r4, r0
 80053fc:	4620      	mov	r0, r4
 80053fe:	f7ff ffed 	bl	80053dc <checkerror>
 8005402:	b005      	add	sp, #20
 8005404:	bd30      	pop	{r4, r5, pc}

08005406 <_read>:
 8005406:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005408:	4615      	mov	r5, r2
 800540a:	9101      	str	r1, [sp, #4]
 800540c:	f7ff ffbe 	bl	800538c <findslot>
 8005410:	9901      	ldr	r1, [sp, #4]
 8005412:	4604      	mov	r4, r0
 8005414:	b938      	cbnz	r0, 8005426 <_read+0x20>
 8005416:	f000 f905 	bl	8005624 <__errno>
 800541a:	2309      	movs	r3, #9
 800541c:	6003      	str	r3, [r0, #0]
 800541e:	f04f 30ff 	mov.w	r0, #4294967295
 8005422:	b003      	add	sp, #12
 8005424:	bd30      	pop	{r4, r5, pc}
 8005426:	6800      	ldr	r0, [r0, #0]
 8005428:	462a      	mov	r2, r5
 800542a:	f7ff ffdc 	bl	80053e6 <_swiread>
 800542e:	1c43      	adds	r3, r0, #1
 8005430:	d0f7      	beq.n	8005422 <_read+0x1c>
 8005432:	6863      	ldr	r3, [r4, #4]
 8005434:	1a2a      	subs	r2, r5, r0
 8005436:	4413      	add	r3, r2
 8005438:	6063      	str	r3, [r4, #4]
 800543a:	4610      	mov	r0, r2
 800543c:	e7f1      	b.n	8005422 <_read+0x1c>

0800543e <_swilseek>:
 800543e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005440:	460c      	mov	r4, r1
 8005442:	4616      	mov	r6, r2
 8005444:	f7ff ffa2 	bl	800538c <findslot>
 8005448:	4605      	mov	r5, r0
 800544a:	b940      	cbnz	r0, 800545e <_swilseek+0x20>
 800544c:	f000 f8ea 	bl	8005624 <__errno>
 8005450:	2309      	movs	r3, #9
 8005452:	6003      	str	r3, [r0, #0]
 8005454:	f04f 34ff 	mov.w	r4, #4294967295
 8005458:	4620      	mov	r0, r4
 800545a:	b003      	add	sp, #12
 800545c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800545e:	2e02      	cmp	r6, #2
 8005460:	d903      	bls.n	800546a <_swilseek+0x2c>
 8005462:	f000 f8df 	bl	8005624 <__errno>
 8005466:	2316      	movs	r3, #22
 8005468:	e7f3      	b.n	8005452 <_swilseek+0x14>
 800546a:	2e01      	cmp	r6, #1
 800546c:	d112      	bne.n	8005494 <_swilseek+0x56>
 800546e:	6843      	ldr	r3, [r0, #4]
 8005470:	18e4      	adds	r4, r4, r3
 8005472:	d4f6      	bmi.n	8005462 <_swilseek+0x24>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	260a      	movs	r6, #10
 8005478:	e9cd 3400 	strd	r3, r4, [sp]
 800547c:	466f      	mov	r7, sp
 800547e:	4630      	mov	r0, r6
 8005480:	4639      	mov	r1, r7
 8005482:	beab      	bkpt	0x00ab
 8005484:	4606      	mov	r6, r0
 8005486:	4630      	mov	r0, r6
 8005488:	f7ff ffa8 	bl	80053dc <checkerror>
 800548c:	2800      	cmp	r0, #0
 800548e:	dbe1      	blt.n	8005454 <_swilseek+0x16>
 8005490:	606c      	str	r4, [r5, #4]
 8005492:	e7e1      	b.n	8005458 <_swilseek+0x1a>
 8005494:	2e02      	cmp	r6, #2
 8005496:	d1ed      	bne.n	8005474 <_swilseek+0x36>
 8005498:	6803      	ldr	r3, [r0, #0]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	260c      	movs	r6, #12
 800549e:	466f      	mov	r7, sp
 80054a0:	4630      	mov	r0, r6
 80054a2:	4639      	mov	r1, r7
 80054a4:	beab      	bkpt	0x00ab
 80054a6:	4606      	mov	r6, r0
 80054a8:	4630      	mov	r0, r6
 80054aa:	f7ff ff97 	bl	80053dc <checkerror>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	d0d0      	beq.n	8005454 <_swilseek+0x16>
 80054b2:	4404      	add	r4, r0
 80054b4:	e7de      	b.n	8005474 <_swilseek+0x36>

080054b6 <_lseek>:
 80054b6:	f7ff bfc2 	b.w	800543e <_swilseek>

080054ba <_swiwrite>:
 80054ba:	b530      	push	{r4, r5, lr}
 80054bc:	b085      	sub	sp, #20
 80054be:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80054c2:	9203      	str	r2, [sp, #12]
 80054c4:	2405      	movs	r4, #5
 80054c6:	ad01      	add	r5, sp, #4
 80054c8:	4620      	mov	r0, r4
 80054ca:	4629      	mov	r1, r5
 80054cc:	beab      	bkpt	0x00ab
 80054ce:	4604      	mov	r4, r0
 80054d0:	4620      	mov	r0, r4
 80054d2:	f7ff ff83 	bl	80053dc <checkerror>
 80054d6:	b005      	add	sp, #20
 80054d8:	bd30      	pop	{r4, r5, pc}

080054da <_write>:
 80054da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054dc:	4615      	mov	r5, r2
 80054de:	9101      	str	r1, [sp, #4]
 80054e0:	f7ff ff54 	bl	800538c <findslot>
 80054e4:	9901      	ldr	r1, [sp, #4]
 80054e6:	4604      	mov	r4, r0
 80054e8:	b930      	cbnz	r0, 80054f8 <_write+0x1e>
 80054ea:	f000 f89b 	bl	8005624 <__errno>
 80054ee:	2309      	movs	r3, #9
 80054f0:	6003      	str	r3, [r0, #0]
 80054f2:	f04f 30ff 	mov.w	r0, #4294967295
 80054f6:	e012      	b.n	800551e <_write+0x44>
 80054f8:	6800      	ldr	r0, [r0, #0]
 80054fa:	462a      	mov	r2, r5
 80054fc:	f7ff ffdd 	bl	80054ba <_swiwrite>
 8005500:	2800      	cmp	r0, #0
 8005502:	dbf6      	blt.n	80054f2 <_write+0x18>
 8005504:	6862      	ldr	r2, [r4, #4]
 8005506:	1a2b      	subs	r3, r5, r0
 8005508:	441a      	add	r2, r3
 800550a:	42a8      	cmp	r0, r5
 800550c:	6062      	str	r2, [r4, #4]
 800550e:	d105      	bne.n	800551c <_write+0x42>
 8005510:	2000      	movs	r0, #0
 8005512:	b003      	add	sp, #12
 8005514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005518:	f7ff bf52 	b.w	80053c0 <error>
 800551c:	4618      	mov	r0, r3
 800551e:	b003      	add	sp, #12
 8005520:	bd30      	pop	{r4, r5, pc}

08005522 <_swiclose>:
 8005522:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005524:	2402      	movs	r4, #2
 8005526:	9001      	str	r0, [sp, #4]
 8005528:	ad01      	add	r5, sp, #4
 800552a:	4620      	mov	r0, r4
 800552c:	4629      	mov	r1, r5
 800552e:	beab      	bkpt	0x00ab
 8005530:	4604      	mov	r4, r0
 8005532:	4620      	mov	r0, r4
 8005534:	f7ff ff52 	bl	80053dc <checkerror>
 8005538:	b003      	add	sp, #12
 800553a:	bd30      	pop	{r4, r5, pc}

0800553c <_close>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4605      	mov	r5, r0
 8005540:	f7ff ff24 	bl	800538c <findslot>
 8005544:	4604      	mov	r4, r0
 8005546:	b930      	cbnz	r0, 8005556 <_close+0x1a>
 8005548:	f000 f86c 	bl	8005624 <__errno>
 800554c:	2309      	movs	r3, #9
 800554e:	6003      	str	r3, [r0, #0]
 8005550:	f04f 30ff 	mov.w	r0, #4294967295
 8005554:	bd38      	pop	{r3, r4, r5, pc}
 8005556:	3d01      	subs	r5, #1
 8005558:	2d01      	cmp	r5, #1
 800555a:	d809      	bhi.n	8005570 <_close+0x34>
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <_close+0x48>)
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	429a      	cmp	r2, r3
 8005564:	d104      	bne.n	8005570 <_close+0x34>
 8005566:	f04f 33ff 	mov.w	r3, #4294967295
 800556a:	6003      	str	r3, [r0, #0]
 800556c:	2000      	movs	r0, #0
 800556e:	e7f1      	b.n	8005554 <_close+0x18>
 8005570:	6820      	ldr	r0, [r4, #0]
 8005572:	f7ff ffd6 	bl	8005522 <_swiclose>
 8005576:	2800      	cmp	r0, #0
 8005578:	d1ec      	bne.n	8005554 <_close+0x18>
 800557a:	f04f 33ff 	mov.w	r3, #4294967295
 800557e:	6023      	str	r3, [r4, #0]
 8005580:	e7e8      	b.n	8005554 <_close+0x18>
 8005582:	bf00      	nop
 8005584:	2000040c 	.word	0x2000040c

08005588 <_getpid>:
 8005588:	2001      	movs	r0, #1
 800558a:	4770      	bx	lr

0800558c <_swistat>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	460c      	mov	r4, r1
 8005590:	f7ff fefc 	bl	800538c <findslot>
 8005594:	4605      	mov	r5, r0
 8005596:	b930      	cbnz	r0, 80055a6 <_swistat+0x1a>
 8005598:	f000 f844 	bl	8005624 <__errno>
 800559c:	2309      	movs	r3, #9
 800559e:	6003      	str	r3, [r0, #0]
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295
 80055a4:	bd70      	pop	{r4, r5, r6, pc}
 80055a6:	6863      	ldr	r3, [r4, #4]
 80055a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055ac:	6063      	str	r3, [r4, #4]
 80055ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b2:	64a3      	str	r3, [r4, #72]	; 0x48
 80055b4:	260c      	movs	r6, #12
 80055b6:	4630      	mov	r0, r6
 80055b8:	4629      	mov	r1, r5
 80055ba:	beab      	bkpt	0x00ab
 80055bc:	4605      	mov	r5, r0
 80055be:	4628      	mov	r0, r5
 80055c0:	f7ff ff0c 	bl	80053dc <checkerror>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	bf1c      	itt	ne
 80055c8:	6120      	strne	r0, [r4, #16]
 80055ca:	2000      	movne	r0, #0
 80055cc:	e7ea      	b.n	80055a4 <_swistat+0x18>

080055ce <_fstat>:
 80055ce:	460b      	mov	r3, r1
 80055d0:	b510      	push	{r4, lr}
 80055d2:	2100      	movs	r1, #0
 80055d4:	4604      	mov	r4, r0
 80055d6:	2258      	movs	r2, #88	; 0x58
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 f954 	bl	8005886 <memset>
 80055de:	4601      	mov	r1, r0
 80055e0:	4620      	mov	r0, r4
 80055e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e6:	f7ff bfd1 	b.w	800558c <_swistat>

080055ea <_isatty>:
 80055ea:	b570      	push	{r4, r5, r6, lr}
 80055ec:	f7ff fece 	bl	800538c <findslot>
 80055f0:	2509      	movs	r5, #9
 80055f2:	4604      	mov	r4, r0
 80055f4:	b920      	cbnz	r0, 8005600 <_isatty+0x16>
 80055f6:	f000 f815 	bl	8005624 <__errno>
 80055fa:	6005      	str	r5, [r0, #0]
 80055fc:	4620      	mov	r0, r4
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
 8005600:	4628      	mov	r0, r5
 8005602:	4621      	mov	r1, r4
 8005604:	beab      	bkpt	0x00ab
 8005606:	4604      	mov	r4, r0
 8005608:	2c01      	cmp	r4, #1
 800560a:	d0f7      	beq.n	80055fc <_isatty+0x12>
 800560c:	f000 f80a 	bl	8005624 <__errno>
 8005610:	2400      	movs	r4, #0
 8005612:	4605      	mov	r5, r0
 8005614:	2613      	movs	r6, #19
 8005616:	4630      	mov	r0, r6
 8005618:	4621      	mov	r1, r4
 800561a:	beab      	bkpt	0x00ab
 800561c:	4606      	mov	r6, r0
 800561e:	602e      	str	r6, [r5, #0]
 8005620:	e7ec      	b.n	80055fc <_isatty+0x12>
	...

08005624 <__errno>:
 8005624:	4b01      	ldr	r3, [pc, #4]	; (800562c <__errno+0x8>)
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	20000058 	.word	0x20000058

08005630 <std>:
 8005630:	2300      	movs	r3, #0
 8005632:	b510      	push	{r4, lr}
 8005634:	4604      	mov	r4, r0
 8005636:	e9c0 3300 	strd	r3, r3, [r0]
 800563a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800563e:	6083      	str	r3, [r0, #8]
 8005640:	8181      	strh	r1, [r0, #12]
 8005642:	6643      	str	r3, [r0, #100]	; 0x64
 8005644:	81c2      	strh	r2, [r0, #14]
 8005646:	6183      	str	r3, [r0, #24]
 8005648:	4619      	mov	r1, r3
 800564a:	2208      	movs	r2, #8
 800564c:	305c      	adds	r0, #92	; 0x5c
 800564e:	f000 f91a 	bl	8005886 <memset>
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <std+0x38>)
 8005654:	6263      	str	r3, [r4, #36]	; 0x24
 8005656:	4b05      	ldr	r3, [pc, #20]	; (800566c <std+0x3c>)
 8005658:	62a3      	str	r3, [r4, #40]	; 0x28
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <std+0x40>)
 800565c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <std+0x44>)
 8005660:	6224      	str	r4, [r4, #32]
 8005662:	6323      	str	r3, [r4, #48]	; 0x30
 8005664:	bd10      	pop	{r4, pc}
 8005666:	bf00      	nop
 8005668:	080062f5 	.word	0x080062f5
 800566c:	08006317 	.word	0x08006317
 8005670:	0800634f 	.word	0x0800634f
 8005674:	08006373 	.word	0x08006373

08005678 <_cleanup_r>:
 8005678:	4901      	ldr	r1, [pc, #4]	; (8005680 <_cleanup_r+0x8>)
 800567a:	f000 b8af 	b.w	80057dc <_fwalk_reent>
 800567e:	bf00      	nop
 8005680:	08007381 	.word	0x08007381

08005684 <__sfmoreglue>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	2268      	movs	r2, #104	; 0x68
 8005688:	1e4d      	subs	r5, r1, #1
 800568a:	4355      	muls	r5, r2
 800568c:	460e      	mov	r6, r1
 800568e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005692:	f000 f921 	bl	80058d8 <_malloc_r>
 8005696:	4604      	mov	r4, r0
 8005698:	b140      	cbz	r0, 80056ac <__sfmoreglue+0x28>
 800569a:	2100      	movs	r1, #0
 800569c:	e9c0 1600 	strd	r1, r6, [r0]
 80056a0:	300c      	adds	r0, #12
 80056a2:	60a0      	str	r0, [r4, #8]
 80056a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056a8:	f000 f8ed 	bl	8005886 <memset>
 80056ac:	4620      	mov	r0, r4
 80056ae:	bd70      	pop	{r4, r5, r6, pc}

080056b0 <__sfp_lock_acquire>:
 80056b0:	4801      	ldr	r0, [pc, #4]	; (80056b8 <__sfp_lock_acquire+0x8>)
 80056b2:	f000 b8d8 	b.w	8005866 <__retarget_lock_acquire_recursive>
 80056b6:	bf00      	nop
 80056b8:	200004ad 	.word	0x200004ad

080056bc <__sfp_lock_release>:
 80056bc:	4801      	ldr	r0, [pc, #4]	; (80056c4 <__sfp_lock_release+0x8>)
 80056be:	f000 b8d3 	b.w	8005868 <__retarget_lock_release_recursive>
 80056c2:	bf00      	nop
 80056c4:	200004ad 	.word	0x200004ad

080056c8 <__sinit_lock_acquire>:
 80056c8:	4801      	ldr	r0, [pc, #4]	; (80056d0 <__sinit_lock_acquire+0x8>)
 80056ca:	f000 b8cc 	b.w	8005866 <__retarget_lock_acquire_recursive>
 80056ce:	bf00      	nop
 80056d0:	200004ae 	.word	0x200004ae

080056d4 <__sinit_lock_release>:
 80056d4:	4801      	ldr	r0, [pc, #4]	; (80056dc <__sinit_lock_release+0x8>)
 80056d6:	f000 b8c7 	b.w	8005868 <__retarget_lock_release_recursive>
 80056da:	bf00      	nop
 80056dc:	200004ae 	.word	0x200004ae

080056e0 <__sinit>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	4604      	mov	r4, r0
 80056e4:	f7ff fff0 	bl	80056c8 <__sinit_lock_acquire>
 80056e8:	69a3      	ldr	r3, [r4, #24]
 80056ea:	b11b      	cbz	r3, 80056f4 <__sinit+0x14>
 80056ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f0:	f7ff bff0 	b.w	80056d4 <__sinit_lock_release>
 80056f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056f8:	6523      	str	r3, [r4, #80]	; 0x50
 80056fa:	4b13      	ldr	r3, [pc, #76]	; (8005748 <__sinit+0x68>)
 80056fc:	4a13      	ldr	r2, [pc, #76]	; (800574c <__sinit+0x6c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	62a2      	str	r2, [r4, #40]	; 0x28
 8005702:	42a3      	cmp	r3, r4
 8005704:	bf04      	itt	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	61a3      	streq	r3, [r4, #24]
 800570a:	4620      	mov	r0, r4
 800570c:	f000 f820 	bl	8005750 <__sfp>
 8005710:	6060      	str	r0, [r4, #4]
 8005712:	4620      	mov	r0, r4
 8005714:	f000 f81c 	bl	8005750 <__sfp>
 8005718:	60a0      	str	r0, [r4, #8]
 800571a:	4620      	mov	r0, r4
 800571c:	f000 f818 	bl	8005750 <__sfp>
 8005720:	2200      	movs	r2, #0
 8005722:	60e0      	str	r0, [r4, #12]
 8005724:	2104      	movs	r1, #4
 8005726:	6860      	ldr	r0, [r4, #4]
 8005728:	f7ff ff82 	bl	8005630 <std>
 800572c:	68a0      	ldr	r0, [r4, #8]
 800572e:	2201      	movs	r2, #1
 8005730:	2109      	movs	r1, #9
 8005732:	f7ff ff7d 	bl	8005630 <std>
 8005736:	68e0      	ldr	r0, [r4, #12]
 8005738:	2202      	movs	r2, #2
 800573a:	2112      	movs	r1, #18
 800573c:	f7ff ff78 	bl	8005630 <std>
 8005740:	2301      	movs	r3, #1
 8005742:	61a3      	str	r3, [r4, #24]
 8005744:	e7d2      	b.n	80056ec <__sinit+0xc>
 8005746:	bf00      	nop
 8005748:	0800967c 	.word	0x0800967c
 800574c:	08005679 	.word	0x08005679

08005750 <__sfp>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	4607      	mov	r7, r0
 8005754:	f7ff ffac 	bl	80056b0 <__sfp_lock_acquire>
 8005758:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <__sfp+0x84>)
 800575a:	681e      	ldr	r6, [r3, #0]
 800575c:	69b3      	ldr	r3, [r6, #24]
 800575e:	b913      	cbnz	r3, 8005766 <__sfp+0x16>
 8005760:	4630      	mov	r0, r6
 8005762:	f7ff ffbd 	bl	80056e0 <__sinit>
 8005766:	3648      	adds	r6, #72	; 0x48
 8005768:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800576c:	3b01      	subs	r3, #1
 800576e:	d503      	bpl.n	8005778 <__sfp+0x28>
 8005770:	6833      	ldr	r3, [r6, #0]
 8005772:	b30b      	cbz	r3, 80057b8 <__sfp+0x68>
 8005774:	6836      	ldr	r6, [r6, #0]
 8005776:	e7f7      	b.n	8005768 <__sfp+0x18>
 8005778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800577c:	b9d5      	cbnz	r5, 80057b4 <__sfp+0x64>
 800577e:	4b16      	ldr	r3, [pc, #88]	; (80057d8 <__sfp+0x88>)
 8005780:	60e3      	str	r3, [r4, #12]
 8005782:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005786:	6665      	str	r5, [r4, #100]	; 0x64
 8005788:	f000 f86c 	bl	8005864 <__retarget_lock_init_recursive>
 800578c:	f7ff ff96 	bl	80056bc <__sfp_lock_release>
 8005790:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005794:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005798:	6025      	str	r5, [r4, #0]
 800579a:	61a5      	str	r5, [r4, #24]
 800579c:	2208      	movs	r2, #8
 800579e:	4629      	mov	r1, r5
 80057a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057a4:	f000 f86f 	bl	8005886 <memset>
 80057a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057b0:	4620      	mov	r0, r4
 80057b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b4:	3468      	adds	r4, #104	; 0x68
 80057b6:	e7d9      	b.n	800576c <__sfp+0x1c>
 80057b8:	2104      	movs	r1, #4
 80057ba:	4638      	mov	r0, r7
 80057bc:	f7ff ff62 	bl	8005684 <__sfmoreglue>
 80057c0:	4604      	mov	r4, r0
 80057c2:	6030      	str	r0, [r6, #0]
 80057c4:	2800      	cmp	r0, #0
 80057c6:	d1d5      	bne.n	8005774 <__sfp+0x24>
 80057c8:	f7ff ff78 	bl	80056bc <__sfp_lock_release>
 80057cc:	230c      	movs	r3, #12
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	e7ee      	b.n	80057b0 <__sfp+0x60>
 80057d2:	bf00      	nop
 80057d4:	0800967c 	.word	0x0800967c
 80057d8:	ffff0001 	.word	0xffff0001

080057dc <_fwalk_reent>:
 80057dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057e0:	4606      	mov	r6, r0
 80057e2:	4688      	mov	r8, r1
 80057e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057e8:	2700      	movs	r7, #0
 80057ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057ee:	f1b9 0901 	subs.w	r9, r9, #1
 80057f2:	d505      	bpl.n	8005800 <_fwalk_reent+0x24>
 80057f4:	6824      	ldr	r4, [r4, #0]
 80057f6:	2c00      	cmp	r4, #0
 80057f8:	d1f7      	bne.n	80057ea <_fwalk_reent+0xe>
 80057fa:	4638      	mov	r0, r7
 80057fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005800:	89ab      	ldrh	r3, [r5, #12]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d907      	bls.n	8005816 <_fwalk_reent+0x3a>
 8005806:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800580a:	3301      	adds	r3, #1
 800580c:	d003      	beq.n	8005816 <_fwalk_reent+0x3a>
 800580e:	4629      	mov	r1, r5
 8005810:	4630      	mov	r0, r6
 8005812:	47c0      	blx	r8
 8005814:	4307      	orrs	r7, r0
 8005816:	3568      	adds	r5, #104	; 0x68
 8005818:	e7e9      	b.n	80057ee <_fwalk_reent+0x12>
	...

0800581c <__libc_init_array>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	4d0d      	ldr	r5, [pc, #52]	; (8005854 <__libc_init_array+0x38>)
 8005820:	4c0d      	ldr	r4, [pc, #52]	; (8005858 <__libc_init_array+0x3c>)
 8005822:	1b64      	subs	r4, r4, r5
 8005824:	10a4      	asrs	r4, r4, #2
 8005826:	2600      	movs	r6, #0
 8005828:	42a6      	cmp	r6, r4
 800582a:	d109      	bne.n	8005840 <__libc_init_array+0x24>
 800582c:	4d0b      	ldr	r5, [pc, #44]	; (800585c <__libc_init_array+0x40>)
 800582e:	4c0c      	ldr	r4, [pc, #48]	; (8005860 <__libc_init_array+0x44>)
 8005830:	f003 fd62 	bl	80092f8 <_init>
 8005834:	1b64      	subs	r4, r4, r5
 8005836:	10a4      	asrs	r4, r4, #2
 8005838:	2600      	movs	r6, #0
 800583a:	42a6      	cmp	r6, r4
 800583c:	d105      	bne.n	800584a <__libc_init_array+0x2e>
 800583e:	bd70      	pop	{r4, r5, r6, pc}
 8005840:	f855 3b04 	ldr.w	r3, [r5], #4
 8005844:	4798      	blx	r3
 8005846:	3601      	adds	r6, #1
 8005848:	e7ee      	b.n	8005828 <__libc_init_array+0xc>
 800584a:	f855 3b04 	ldr.w	r3, [r5], #4
 800584e:	4798      	blx	r3
 8005850:	3601      	adds	r6, #1
 8005852:	e7f2      	b.n	800583a <__libc_init_array+0x1e>
 8005854:	08009a30 	.word	0x08009a30
 8005858:	08009a30 	.word	0x08009a30
 800585c:	08009a30 	.word	0x08009a30
 8005860:	08009a34 	.word	0x08009a34

08005864 <__retarget_lock_init_recursive>:
 8005864:	4770      	bx	lr

08005866 <__retarget_lock_acquire_recursive>:
 8005866:	4770      	bx	lr

08005868 <__retarget_lock_release_recursive>:
 8005868:	4770      	bx	lr

0800586a <memcpy>:
 800586a:	440a      	add	r2, r1
 800586c:	4291      	cmp	r1, r2
 800586e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005872:	d100      	bne.n	8005876 <memcpy+0xc>
 8005874:	4770      	bx	lr
 8005876:	b510      	push	{r4, lr}
 8005878:	f811 4b01 	ldrb.w	r4, [r1], #1
 800587c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005880:	4291      	cmp	r1, r2
 8005882:	d1f9      	bne.n	8005878 <memcpy+0xe>
 8005884:	bd10      	pop	{r4, pc}

08005886 <memset>:
 8005886:	4402      	add	r2, r0
 8005888:	4603      	mov	r3, r0
 800588a:	4293      	cmp	r3, r2
 800588c:	d100      	bne.n	8005890 <memset+0xa>
 800588e:	4770      	bx	lr
 8005890:	f803 1b01 	strb.w	r1, [r3], #1
 8005894:	e7f9      	b.n	800588a <memset+0x4>
	...

08005898 <sbrk_aligned>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	4e0e      	ldr	r6, [pc, #56]	; (80058d4 <sbrk_aligned+0x3c>)
 800589c:	460c      	mov	r4, r1
 800589e:	6831      	ldr	r1, [r6, #0]
 80058a0:	4605      	mov	r5, r0
 80058a2:	b911      	cbnz	r1, 80058aa <sbrk_aligned+0x12>
 80058a4:	f000 fcf6 	bl	8006294 <_sbrk_r>
 80058a8:	6030      	str	r0, [r6, #0]
 80058aa:	4621      	mov	r1, r4
 80058ac:	4628      	mov	r0, r5
 80058ae:	f000 fcf1 	bl	8006294 <_sbrk_r>
 80058b2:	1c43      	adds	r3, r0, #1
 80058b4:	d00a      	beq.n	80058cc <sbrk_aligned+0x34>
 80058b6:	1cc4      	adds	r4, r0, #3
 80058b8:	f024 0403 	bic.w	r4, r4, #3
 80058bc:	42a0      	cmp	r0, r4
 80058be:	d007      	beq.n	80058d0 <sbrk_aligned+0x38>
 80058c0:	1a21      	subs	r1, r4, r0
 80058c2:	4628      	mov	r0, r5
 80058c4:	f000 fce6 	bl	8006294 <_sbrk_r>
 80058c8:	3001      	adds	r0, #1
 80058ca:	d101      	bne.n	80058d0 <sbrk_aligned+0x38>
 80058cc:	f04f 34ff 	mov.w	r4, #4294967295
 80058d0:	4620      	mov	r0, r4
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
 80058d4:	200004b4 	.word	0x200004b4

080058d8 <_malloc_r>:
 80058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	1ccd      	adds	r5, r1, #3
 80058de:	f025 0503 	bic.w	r5, r5, #3
 80058e2:	3508      	adds	r5, #8
 80058e4:	2d0c      	cmp	r5, #12
 80058e6:	bf38      	it	cc
 80058e8:	250c      	movcc	r5, #12
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	4607      	mov	r7, r0
 80058ee:	db01      	blt.n	80058f4 <_malloc_r+0x1c>
 80058f0:	42a9      	cmp	r1, r5
 80058f2:	d905      	bls.n	8005900 <_malloc_r+0x28>
 80058f4:	230c      	movs	r3, #12
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	2600      	movs	r6, #0
 80058fa:	4630      	mov	r0, r6
 80058fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005900:	4e2e      	ldr	r6, [pc, #184]	; (80059bc <_malloc_r+0xe4>)
 8005902:	f001 fe0f 	bl	8007524 <__malloc_lock>
 8005906:	6833      	ldr	r3, [r6, #0]
 8005908:	461c      	mov	r4, r3
 800590a:	bb34      	cbnz	r4, 800595a <_malloc_r+0x82>
 800590c:	4629      	mov	r1, r5
 800590e:	4638      	mov	r0, r7
 8005910:	f7ff ffc2 	bl	8005898 <sbrk_aligned>
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	4604      	mov	r4, r0
 8005918:	d14d      	bne.n	80059b6 <_malloc_r+0xde>
 800591a:	6834      	ldr	r4, [r6, #0]
 800591c:	4626      	mov	r6, r4
 800591e:	2e00      	cmp	r6, #0
 8005920:	d140      	bne.n	80059a4 <_malloc_r+0xcc>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	4631      	mov	r1, r6
 8005926:	4638      	mov	r0, r7
 8005928:	eb04 0803 	add.w	r8, r4, r3
 800592c:	f000 fcb2 	bl	8006294 <_sbrk_r>
 8005930:	4580      	cmp	r8, r0
 8005932:	d13a      	bne.n	80059aa <_malloc_r+0xd2>
 8005934:	6821      	ldr	r1, [r4, #0]
 8005936:	3503      	adds	r5, #3
 8005938:	1a6d      	subs	r5, r5, r1
 800593a:	f025 0503 	bic.w	r5, r5, #3
 800593e:	3508      	adds	r5, #8
 8005940:	2d0c      	cmp	r5, #12
 8005942:	bf38      	it	cc
 8005944:	250c      	movcc	r5, #12
 8005946:	4629      	mov	r1, r5
 8005948:	4638      	mov	r0, r7
 800594a:	f7ff ffa5 	bl	8005898 <sbrk_aligned>
 800594e:	3001      	adds	r0, #1
 8005950:	d02b      	beq.n	80059aa <_malloc_r+0xd2>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	442b      	add	r3, r5
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	e00e      	b.n	8005978 <_malloc_r+0xa0>
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	1b52      	subs	r2, r2, r5
 800595e:	d41e      	bmi.n	800599e <_malloc_r+0xc6>
 8005960:	2a0b      	cmp	r2, #11
 8005962:	d916      	bls.n	8005992 <_malloc_r+0xba>
 8005964:	1961      	adds	r1, r4, r5
 8005966:	42a3      	cmp	r3, r4
 8005968:	6025      	str	r5, [r4, #0]
 800596a:	bf18      	it	ne
 800596c:	6059      	strne	r1, [r3, #4]
 800596e:	6863      	ldr	r3, [r4, #4]
 8005970:	bf08      	it	eq
 8005972:	6031      	streq	r1, [r6, #0]
 8005974:	5162      	str	r2, [r4, r5]
 8005976:	604b      	str	r3, [r1, #4]
 8005978:	4638      	mov	r0, r7
 800597a:	f104 060b 	add.w	r6, r4, #11
 800597e:	f001 fdd7 	bl	8007530 <__malloc_unlock>
 8005982:	f026 0607 	bic.w	r6, r6, #7
 8005986:	1d23      	adds	r3, r4, #4
 8005988:	1af2      	subs	r2, r6, r3
 800598a:	d0b6      	beq.n	80058fa <_malloc_r+0x22>
 800598c:	1b9b      	subs	r3, r3, r6
 800598e:	50a3      	str	r3, [r4, r2]
 8005990:	e7b3      	b.n	80058fa <_malloc_r+0x22>
 8005992:	6862      	ldr	r2, [r4, #4]
 8005994:	42a3      	cmp	r3, r4
 8005996:	bf0c      	ite	eq
 8005998:	6032      	streq	r2, [r6, #0]
 800599a:	605a      	strne	r2, [r3, #4]
 800599c:	e7ec      	b.n	8005978 <_malloc_r+0xa0>
 800599e:	4623      	mov	r3, r4
 80059a0:	6864      	ldr	r4, [r4, #4]
 80059a2:	e7b2      	b.n	800590a <_malloc_r+0x32>
 80059a4:	4634      	mov	r4, r6
 80059a6:	6876      	ldr	r6, [r6, #4]
 80059a8:	e7b9      	b.n	800591e <_malloc_r+0x46>
 80059aa:	230c      	movs	r3, #12
 80059ac:	603b      	str	r3, [r7, #0]
 80059ae:	4638      	mov	r0, r7
 80059b0:	f001 fdbe 	bl	8007530 <__malloc_unlock>
 80059b4:	e7a1      	b.n	80058fa <_malloc_r+0x22>
 80059b6:	6025      	str	r5, [r4, #0]
 80059b8:	e7de      	b.n	8005978 <_malloc_r+0xa0>
 80059ba:	bf00      	nop
 80059bc:	200004b0 	.word	0x200004b0

080059c0 <__cvt>:
 80059c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059c4:	ec55 4b10 	vmov	r4, r5, d0
 80059c8:	2d00      	cmp	r5, #0
 80059ca:	460e      	mov	r6, r1
 80059cc:	4619      	mov	r1, r3
 80059ce:	462b      	mov	r3, r5
 80059d0:	bfbb      	ittet	lt
 80059d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80059d6:	461d      	movlt	r5, r3
 80059d8:	2300      	movge	r3, #0
 80059da:	232d      	movlt	r3, #45	; 0x2d
 80059dc:	700b      	strb	r3, [r1, #0]
 80059de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80059e4:	4691      	mov	r9, r2
 80059e6:	f023 0820 	bic.w	r8, r3, #32
 80059ea:	bfbc      	itt	lt
 80059ec:	4622      	movlt	r2, r4
 80059ee:	4614      	movlt	r4, r2
 80059f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059f4:	d005      	beq.n	8005a02 <__cvt+0x42>
 80059f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80059fa:	d100      	bne.n	80059fe <__cvt+0x3e>
 80059fc:	3601      	adds	r6, #1
 80059fe:	2102      	movs	r1, #2
 8005a00:	e000      	b.n	8005a04 <__cvt+0x44>
 8005a02:	2103      	movs	r1, #3
 8005a04:	ab03      	add	r3, sp, #12
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	ab02      	add	r3, sp, #8
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	ec45 4b10 	vmov	d0, r4, r5
 8005a10:	4653      	mov	r3, sl
 8005a12:	4632      	mov	r2, r6
 8005a14:	f000 fe40 	bl	8006698 <_dtoa_r>
 8005a18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	d102      	bne.n	8005a26 <__cvt+0x66>
 8005a20:	f019 0f01 	tst.w	r9, #1
 8005a24:	d022      	beq.n	8005a6c <__cvt+0xac>
 8005a26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a2a:	eb07 0906 	add.w	r9, r7, r6
 8005a2e:	d110      	bne.n	8005a52 <__cvt+0x92>
 8005a30:	783b      	ldrb	r3, [r7, #0]
 8005a32:	2b30      	cmp	r3, #48	; 0x30
 8005a34:	d10a      	bne.n	8005a4c <__cvt+0x8c>
 8005a36:	2200      	movs	r2, #0
 8005a38:	2300      	movs	r3, #0
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	f7fb f843 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a42:	b918      	cbnz	r0, 8005a4c <__cvt+0x8c>
 8005a44:	f1c6 0601 	rsb	r6, r6, #1
 8005a48:	f8ca 6000 	str.w	r6, [sl]
 8005a4c:	f8da 3000 	ldr.w	r3, [sl]
 8005a50:	4499      	add	r9, r3
 8005a52:	2200      	movs	r2, #0
 8005a54:	2300      	movs	r3, #0
 8005a56:	4620      	mov	r0, r4
 8005a58:	4629      	mov	r1, r5
 8005a5a:	f7fb f835 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a5e:	b108      	cbz	r0, 8005a64 <__cvt+0xa4>
 8005a60:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a64:	2230      	movs	r2, #48	; 0x30
 8005a66:	9b03      	ldr	r3, [sp, #12]
 8005a68:	454b      	cmp	r3, r9
 8005a6a:	d307      	bcc.n	8005a7c <__cvt+0xbc>
 8005a6c:	9b03      	ldr	r3, [sp, #12]
 8005a6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a70:	1bdb      	subs	r3, r3, r7
 8005a72:	4638      	mov	r0, r7
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	b004      	add	sp, #16
 8005a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7c:	1c59      	adds	r1, r3, #1
 8005a7e:	9103      	str	r1, [sp, #12]
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	e7f0      	b.n	8005a66 <__cvt+0xa6>

08005a84 <__exponent>:
 8005a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a86:	4603      	mov	r3, r0
 8005a88:	2900      	cmp	r1, #0
 8005a8a:	bfb8      	it	lt
 8005a8c:	4249      	neglt	r1, r1
 8005a8e:	f803 2b02 	strb.w	r2, [r3], #2
 8005a92:	bfb4      	ite	lt
 8005a94:	222d      	movlt	r2, #45	; 0x2d
 8005a96:	222b      	movge	r2, #43	; 0x2b
 8005a98:	2909      	cmp	r1, #9
 8005a9a:	7042      	strb	r2, [r0, #1]
 8005a9c:	dd2a      	ble.n	8005af4 <__exponent+0x70>
 8005a9e:	f10d 0407 	add.w	r4, sp, #7
 8005aa2:	46a4      	mov	ip, r4
 8005aa4:	270a      	movs	r7, #10
 8005aa6:	46a6      	mov	lr, r4
 8005aa8:	460a      	mov	r2, r1
 8005aaa:	fb91 f6f7 	sdiv	r6, r1, r7
 8005aae:	fb07 1516 	mls	r5, r7, r6, r1
 8005ab2:	3530      	adds	r5, #48	; 0x30
 8005ab4:	2a63      	cmp	r2, #99	; 0x63
 8005ab6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005aba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005abe:	4631      	mov	r1, r6
 8005ac0:	dcf1      	bgt.n	8005aa6 <__exponent+0x22>
 8005ac2:	3130      	adds	r1, #48	; 0x30
 8005ac4:	f1ae 0502 	sub.w	r5, lr, #2
 8005ac8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005acc:	1c44      	adds	r4, r0, #1
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4561      	cmp	r1, ip
 8005ad2:	d30a      	bcc.n	8005aea <__exponent+0x66>
 8005ad4:	f10d 0209 	add.w	r2, sp, #9
 8005ad8:	eba2 020e 	sub.w	r2, r2, lr
 8005adc:	4565      	cmp	r5, ip
 8005ade:	bf88      	it	hi
 8005ae0:	2200      	movhi	r2, #0
 8005ae2:	4413      	add	r3, r2
 8005ae4:	1a18      	subs	r0, r3, r0
 8005ae6:	b003      	add	sp, #12
 8005ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005af2:	e7ed      	b.n	8005ad0 <__exponent+0x4c>
 8005af4:	2330      	movs	r3, #48	; 0x30
 8005af6:	3130      	adds	r1, #48	; 0x30
 8005af8:	7083      	strb	r3, [r0, #2]
 8005afa:	70c1      	strb	r1, [r0, #3]
 8005afc:	1d03      	adds	r3, r0, #4
 8005afe:	e7f1      	b.n	8005ae4 <__exponent+0x60>

08005b00 <_printf_float>:
 8005b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b04:	ed2d 8b02 	vpush	{d8}
 8005b08:	b08d      	sub	sp, #52	; 0x34
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b10:	4616      	mov	r6, r2
 8005b12:	461f      	mov	r7, r3
 8005b14:	4605      	mov	r5, r0
 8005b16:	f001 fc81 	bl	800741c <_localeconv_r>
 8005b1a:	f8d0 a000 	ldr.w	sl, [r0]
 8005b1e:	4650      	mov	r0, sl
 8005b20:	f7fa fb56 	bl	80001d0 <strlen>
 8005b24:	2300      	movs	r3, #0
 8005b26:	930a      	str	r3, [sp, #40]	; 0x28
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	9305      	str	r3, [sp, #20]
 8005b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b34:	3307      	adds	r3, #7
 8005b36:	f023 0307 	bic.w	r3, r3, #7
 8005b3a:	f103 0208 	add.w	r2, r3, #8
 8005b3e:	f8c8 2000 	str.w	r2, [r8]
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b52:	9307      	str	r3, [sp, #28]
 8005b54:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b58:	ee08 0a10 	vmov	s16, r0
 8005b5c:	4b9f      	ldr	r3, [pc, #636]	; (8005ddc <_printf_float+0x2dc>)
 8005b5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b62:	f04f 32ff 	mov.w	r2, #4294967295
 8005b66:	f7fa ffe1 	bl	8000b2c <__aeabi_dcmpun>
 8005b6a:	bb88      	cbnz	r0, 8005bd0 <_printf_float+0xd0>
 8005b6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b70:	4b9a      	ldr	r3, [pc, #616]	; (8005ddc <_printf_float+0x2dc>)
 8005b72:	f04f 32ff 	mov.w	r2, #4294967295
 8005b76:	f7fa ffbb 	bl	8000af0 <__aeabi_dcmple>
 8005b7a:	bb48      	cbnz	r0, 8005bd0 <_printf_float+0xd0>
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2300      	movs	r3, #0
 8005b80:	4640      	mov	r0, r8
 8005b82:	4649      	mov	r1, r9
 8005b84:	f7fa ffaa 	bl	8000adc <__aeabi_dcmplt>
 8005b88:	b110      	cbz	r0, 8005b90 <_printf_float+0x90>
 8005b8a:	232d      	movs	r3, #45	; 0x2d
 8005b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b90:	4b93      	ldr	r3, [pc, #588]	; (8005de0 <_printf_float+0x2e0>)
 8005b92:	4894      	ldr	r0, [pc, #592]	; (8005de4 <_printf_float+0x2e4>)
 8005b94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b98:	bf94      	ite	ls
 8005b9a:	4698      	movls	r8, r3
 8005b9c:	4680      	movhi	r8, r0
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	6123      	str	r3, [r4, #16]
 8005ba2:	9b05      	ldr	r3, [sp, #20]
 8005ba4:	f023 0204 	bic.w	r2, r3, #4
 8005ba8:	6022      	str	r2, [r4, #0]
 8005baa:	f04f 0900 	mov.w	r9, #0
 8005bae:	9700      	str	r7, [sp, #0]
 8005bb0:	4633      	mov	r3, r6
 8005bb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f000 f9d8 	bl	8005f6c <_printf_common>
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f040 8090 	bne.w	8005ce2 <_printf_float+0x1e2>
 8005bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc6:	b00d      	add	sp, #52	; 0x34
 8005bc8:	ecbd 8b02 	vpop	{d8}
 8005bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	f7fa ffa8 	bl	8000b2c <__aeabi_dcmpun>
 8005bdc:	b140      	cbz	r0, 8005bf0 <_printf_float+0xf0>
 8005bde:	464b      	mov	r3, r9
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	bfbc      	itt	lt
 8005be4:	232d      	movlt	r3, #45	; 0x2d
 8005be6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005bea:	487f      	ldr	r0, [pc, #508]	; (8005de8 <_printf_float+0x2e8>)
 8005bec:	4b7f      	ldr	r3, [pc, #508]	; (8005dec <_printf_float+0x2ec>)
 8005bee:	e7d1      	b.n	8005b94 <_printf_float+0x94>
 8005bf0:	6863      	ldr	r3, [r4, #4]
 8005bf2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005bf6:	9206      	str	r2, [sp, #24]
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	d13f      	bne.n	8005c7c <_printf_float+0x17c>
 8005bfc:	2306      	movs	r3, #6
 8005bfe:	6063      	str	r3, [r4, #4]
 8005c00:	9b05      	ldr	r3, [sp, #20]
 8005c02:	6861      	ldr	r1, [r4, #4]
 8005c04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9303      	str	r3, [sp, #12]
 8005c0c:	ab0a      	add	r3, sp, #40	; 0x28
 8005c0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c12:	ab09      	add	r3, sp, #36	; 0x24
 8005c14:	ec49 8b10 	vmov	d0, r8, r9
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	6022      	str	r2, [r4, #0]
 8005c1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c20:	4628      	mov	r0, r5
 8005c22:	f7ff fecd 	bl	80059c0 <__cvt>
 8005c26:	9b06      	ldr	r3, [sp, #24]
 8005c28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c2a:	2b47      	cmp	r3, #71	; 0x47
 8005c2c:	4680      	mov	r8, r0
 8005c2e:	d108      	bne.n	8005c42 <_printf_float+0x142>
 8005c30:	1cc8      	adds	r0, r1, #3
 8005c32:	db02      	blt.n	8005c3a <_printf_float+0x13a>
 8005c34:	6863      	ldr	r3, [r4, #4]
 8005c36:	4299      	cmp	r1, r3
 8005c38:	dd41      	ble.n	8005cbe <_printf_float+0x1be>
 8005c3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c3e:	fa5f fb8b 	uxtb.w	fp, fp
 8005c42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c46:	d820      	bhi.n	8005c8a <_printf_float+0x18a>
 8005c48:	3901      	subs	r1, #1
 8005c4a:	465a      	mov	r2, fp
 8005c4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c50:	9109      	str	r1, [sp, #36]	; 0x24
 8005c52:	f7ff ff17 	bl	8005a84 <__exponent>
 8005c56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c58:	1813      	adds	r3, r2, r0
 8005c5a:	2a01      	cmp	r2, #1
 8005c5c:	4681      	mov	r9, r0
 8005c5e:	6123      	str	r3, [r4, #16]
 8005c60:	dc02      	bgt.n	8005c68 <_printf_float+0x168>
 8005c62:	6822      	ldr	r2, [r4, #0]
 8005c64:	07d2      	lsls	r2, r2, #31
 8005c66:	d501      	bpl.n	8005c6c <_printf_float+0x16c>
 8005c68:	3301      	adds	r3, #1
 8005c6a:	6123      	str	r3, [r4, #16]
 8005c6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d09c      	beq.n	8005bae <_printf_float+0xae>
 8005c74:	232d      	movs	r3, #45	; 0x2d
 8005c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c7a:	e798      	b.n	8005bae <_printf_float+0xae>
 8005c7c:	9a06      	ldr	r2, [sp, #24]
 8005c7e:	2a47      	cmp	r2, #71	; 0x47
 8005c80:	d1be      	bne.n	8005c00 <_printf_float+0x100>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1bc      	bne.n	8005c00 <_printf_float+0x100>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e7b9      	b.n	8005bfe <_printf_float+0xfe>
 8005c8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c8e:	d118      	bne.n	8005cc2 <_printf_float+0x1c2>
 8005c90:	2900      	cmp	r1, #0
 8005c92:	6863      	ldr	r3, [r4, #4]
 8005c94:	dd0b      	ble.n	8005cae <_printf_float+0x1ae>
 8005c96:	6121      	str	r1, [r4, #16]
 8005c98:	b913      	cbnz	r3, 8005ca0 <_printf_float+0x1a0>
 8005c9a:	6822      	ldr	r2, [r4, #0]
 8005c9c:	07d0      	lsls	r0, r2, #31
 8005c9e:	d502      	bpl.n	8005ca6 <_printf_float+0x1a6>
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	440b      	add	r3, r1
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ca8:	f04f 0900 	mov.w	r9, #0
 8005cac:	e7de      	b.n	8005c6c <_printf_float+0x16c>
 8005cae:	b913      	cbnz	r3, 8005cb6 <_printf_float+0x1b6>
 8005cb0:	6822      	ldr	r2, [r4, #0]
 8005cb2:	07d2      	lsls	r2, r2, #31
 8005cb4:	d501      	bpl.n	8005cba <_printf_float+0x1ba>
 8005cb6:	3302      	adds	r3, #2
 8005cb8:	e7f4      	b.n	8005ca4 <_printf_float+0x1a4>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e7f2      	b.n	8005ca4 <_printf_float+0x1a4>
 8005cbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc4:	4299      	cmp	r1, r3
 8005cc6:	db05      	blt.n	8005cd4 <_printf_float+0x1d4>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	6121      	str	r1, [r4, #16]
 8005ccc:	07d8      	lsls	r0, r3, #31
 8005cce:	d5ea      	bpl.n	8005ca6 <_printf_float+0x1a6>
 8005cd0:	1c4b      	adds	r3, r1, #1
 8005cd2:	e7e7      	b.n	8005ca4 <_printf_float+0x1a4>
 8005cd4:	2900      	cmp	r1, #0
 8005cd6:	bfd4      	ite	le
 8005cd8:	f1c1 0202 	rsble	r2, r1, #2
 8005cdc:	2201      	movgt	r2, #1
 8005cde:	4413      	add	r3, r2
 8005ce0:	e7e0      	b.n	8005ca4 <_printf_float+0x1a4>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	055a      	lsls	r2, r3, #21
 8005ce6:	d407      	bmi.n	8005cf8 <_printf_float+0x1f8>
 8005ce8:	6923      	ldr	r3, [r4, #16]
 8005cea:	4642      	mov	r2, r8
 8005cec:	4631      	mov	r1, r6
 8005cee:	4628      	mov	r0, r5
 8005cf0:	47b8      	blx	r7
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d12c      	bne.n	8005d50 <_printf_float+0x250>
 8005cf6:	e764      	b.n	8005bc2 <_printf_float+0xc2>
 8005cf8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cfc:	f240 80e0 	bls.w	8005ec0 <_printf_float+0x3c0>
 8005d00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d04:	2200      	movs	r2, #0
 8005d06:	2300      	movs	r3, #0
 8005d08:	f7fa fede 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d034      	beq.n	8005d7a <_printf_float+0x27a>
 8005d10:	4a37      	ldr	r2, [pc, #220]	; (8005df0 <_printf_float+0x2f0>)
 8005d12:	2301      	movs	r3, #1
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b8      	blx	r7
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	f43f af51 	beq.w	8005bc2 <_printf_float+0xc2>
 8005d20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d24:	429a      	cmp	r2, r3
 8005d26:	db02      	blt.n	8005d2e <_printf_float+0x22e>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	07d8      	lsls	r0, r3, #31
 8005d2c:	d510      	bpl.n	8005d50 <_printf_float+0x250>
 8005d2e:	ee18 3a10 	vmov	r3, s16
 8005d32:	4652      	mov	r2, sl
 8005d34:	4631      	mov	r1, r6
 8005d36:	4628      	mov	r0, r5
 8005d38:	47b8      	blx	r7
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	f43f af41 	beq.w	8005bc2 <_printf_float+0xc2>
 8005d40:	f04f 0800 	mov.w	r8, #0
 8005d44:	f104 091a 	add.w	r9, r4, #26
 8005d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	4543      	cmp	r3, r8
 8005d4e:	dc09      	bgt.n	8005d64 <_printf_float+0x264>
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	079b      	lsls	r3, r3, #30
 8005d54:	f100 8105 	bmi.w	8005f62 <_printf_float+0x462>
 8005d58:	68e0      	ldr	r0, [r4, #12]
 8005d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d5c:	4298      	cmp	r0, r3
 8005d5e:	bfb8      	it	lt
 8005d60:	4618      	movlt	r0, r3
 8005d62:	e730      	b.n	8005bc6 <_printf_float+0xc6>
 8005d64:	2301      	movs	r3, #1
 8005d66:	464a      	mov	r2, r9
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47b8      	blx	r7
 8005d6e:	3001      	adds	r0, #1
 8005d70:	f43f af27 	beq.w	8005bc2 <_printf_float+0xc2>
 8005d74:	f108 0801 	add.w	r8, r8, #1
 8005d78:	e7e6      	b.n	8005d48 <_printf_float+0x248>
 8005d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	dc39      	bgt.n	8005df4 <_printf_float+0x2f4>
 8005d80:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <_printf_float+0x2f0>)
 8005d82:	2301      	movs	r3, #1
 8005d84:	4631      	mov	r1, r6
 8005d86:	4628      	mov	r0, r5
 8005d88:	47b8      	blx	r7
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	f43f af19 	beq.w	8005bc2 <_printf_float+0xc2>
 8005d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d94:	4313      	orrs	r3, r2
 8005d96:	d102      	bne.n	8005d9e <_printf_float+0x29e>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	07d9      	lsls	r1, r3, #31
 8005d9c:	d5d8      	bpl.n	8005d50 <_printf_float+0x250>
 8005d9e:	ee18 3a10 	vmov	r3, s16
 8005da2:	4652      	mov	r2, sl
 8005da4:	4631      	mov	r1, r6
 8005da6:	4628      	mov	r0, r5
 8005da8:	47b8      	blx	r7
 8005daa:	3001      	adds	r0, #1
 8005dac:	f43f af09 	beq.w	8005bc2 <_printf_float+0xc2>
 8005db0:	f04f 0900 	mov.w	r9, #0
 8005db4:	f104 0a1a 	add.w	sl, r4, #26
 8005db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dba:	425b      	negs	r3, r3
 8005dbc:	454b      	cmp	r3, r9
 8005dbe:	dc01      	bgt.n	8005dc4 <_printf_float+0x2c4>
 8005dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc2:	e792      	b.n	8005cea <_printf_float+0x1ea>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	4652      	mov	r2, sl
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4628      	mov	r0, r5
 8005dcc:	47b8      	blx	r7
 8005dce:	3001      	adds	r0, #1
 8005dd0:	f43f aef7 	beq.w	8005bc2 <_printf_float+0xc2>
 8005dd4:	f109 0901 	add.w	r9, r9, #1
 8005dd8:	e7ee      	b.n	8005db8 <_printf_float+0x2b8>
 8005dda:	bf00      	nop
 8005ddc:	7fefffff 	.word	0x7fefffff
 8005de0:	08009680 	.word	0x08009680
 8005de4:	08009684 	.word	0x08009684
 8005de8:	0800968c 	.word	0x0800968c
 8005dec:	08009688 	.word	0x08009688
 8005df0:	08009690 	.word	0x08009690
 8005df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005df6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	bfa8      	it	ge
 8005dfc:	461a      	movge	r2, r3
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	4691      	mov	r9, r2
 8005e02:	dc37      	bgt.n	8005e74 <_printf_float+0x374>
 8005e04:	f04f 0b00 	mov.w	fp, #0
 8005e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e0c:	f104 021a 	add.w	r2, r4, #26
 8005e10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e12:	9305      	str	r3, [sp, #20]
 8005e14:	eba3 0309 	sub.w	r3, r3, r9
 8005e18:	455b      	cmp	r3, fp
 8005e1a:	dc33      	bgt.n	8005e84 <_printf_float+0x384>
 8005e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e20:	429a      	cmp	r2, r3
 8005e22:	db3b      	blt.n	8005e9c <_printf_float+0x39c>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	07da      	lsls	r2, r3, #31
 8005e28:	d438      	bmi.n	8005e9c <_printf_float+0x39c>
 8005e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e2c:	9a05      	ldr	r2, [sp, #20]
 8005e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e30:	1a9a      	subs	r2, r3, r2
 8005e32:	eba3 0901 	sub.w	r9, r3, r1
 8005e36:	4591      	cmp	r9, r2
 8005e38:	bfa8      	it	ge
 8005e3a:	4691      	movge	r9, r2
 8005e3c:	f1b9 0f00 	cmp.w	r9, #0
 8005e40:	dc35      	bgt.n	8005eae <_printf_float+0x3ae>
 8005e42:	f04f 0800 	mov.w	r8, #0
 8005e46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e4a:	f104 0a1a 	add.w	sl, r4, #26
 8005e4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e52:	1a9b      	subs	r3, r3, r2
 8005e54:	eba3 0309 	sub.w	r3, r3, r9
 8005e58:	4543      	cmp	r3, r8
 8005e5a:	f77f af79 	ble.w	8005d50 <_printf_float+0x250>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4652      	mov	r2, sl
 8005e62:	4631      	mov	r1, r6
 8005e64:	4628      	mov	r0, r5
 8005e66:	47b8      	blx	r7
 8005e68:	3001      	adds	r0, #1
 8005e6a:	f43f aeaa 	beq.w	8005bc2 <_printf_float+0xc2>
 8005e6e:	f108 0801 	add.w	r8, r8, #1
 8005e72:	e7ec      	b.n	8005e4e <_printf_float+0x34e>
 8005e74:	4613      	mov	r3, r2
 8005e76:	4631      	mov	r1, r6
 8005e78:	4642      	mov	r2, r8
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	47b8      	blx	r7
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d1c0      	bne.n	8005e04 <_printf_float+0x304>
 8005e82:	e69e      	b.n	8005bc2 <_printf_float+0xc2>
 8005e84:	2301      	movs	r3, #1
 8005e86:	4631      	mov	r1, r6
 8005e88:	4628      	mov	r0, r5
 8005e8a:	9205      	str	r2, [sp, #20]
 8005e8c:	47b8      	blx	r7
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f43f ae97 	beq.w	8005bc2 <_printf_float+0xc2>
 8005e94:	9a05      	ldr	r2, [sp, #20]
 8005e96:	f10b 0b01 	add.w	fp, fp, #1
 8005e9a:	e7b9      	b.n	8005e10 <_printf_float+0x310>
 8005e9c:	ee18 3a10 	vmov	r3, s16
 8005ea0:	4652      	mov	r2, sl
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	47b8      	blx	r7
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d1be      	bne.n	8005e2a <_printf_float+0x32a>
 8005eac:	e689      	b.n	8005bc2 <_printf_float+0xc2>
 8005eae:	9a05      	ldr	r2, [sp, #20]
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	4442      	add	r2, r8
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	47b8      	blx	r7
 8005eba:	3001      	adds	r0, #1
 8005ebc:	d1c1      	bne.n	8005e42 <_printf_float+0x342>
 8005ebe:	e680      	b.n	8005bc2 <_printf_float+0xc2>
 8005ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ec2:	2a01      	cmp	r2, #1
 8005ec4:	dc01      	bgt.n	8005eca <_printf_float+0x3ca>
 8005ec6:	07db      	lsls	r3, r3, #31
 8005ec8:	d538      	bpl.n	8005f3c <_printf_float+0x43c>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	4642      	mov	r2, r8
 8005ece:	4631      	mov	r1, r6
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	47b8      	blx	r7
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	f43f ae74 	beq.w	8005bc2 <_printf_float+0xc2>
 8005eda:	ee18 3a10 	vmov	r3, s16
 8005ede:	4652      	mov	r2, sl
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	f43f ae6b 	beq.w	8005bc2 <_printf_float+0xc2>
 8005eec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f7fa fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ef8:	b9d8      	cbnz	r0, 8005f32 <_printf_float+0x432>
 8005efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005efc:	f108 0201 	add.w	r2, r8, #1
 8005f00:	3b01      	subs	r3, #1
 8005f02:	4631      	mov	r1, r6
 8005f04:	4628      	mov	r0, r5
 8005f06:	47b8      	blx	r7
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d10e      	bne.n	8005f2a <_printf_float+0x42a>
 8005f0c:	e659      	b.n	8005bc2 <_printf_float+0xc2>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4652      	mov	r2, sl
 8005f12:	4631      	mov	r1, r6
 8005f14:	4628      	mov	r0, r5
 8005f16:	47b8      	blx	r7
 8005f18:	3001      	adds	r0, #1
 8005f1a:	f43f ae52 	beq.w	8005bc2 <_printf_float+0xc2>
 8005f1e:	f108 0801 	add.w	r8, r8, #1
 8005f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f24:	3b01      	subs	r3, #1
 8005f26:	4543      	cmp	r3, r8
 8005f28:	dcf1      	bgt.n	8005f0e <_printf_float+0x40e>
 8005f2a:	464b      	mov	r3, r9
 8005f2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f30:	e6dc      	b.n	8005cec <_printf_float+0x1ec>
 8005f32:	f04f 0800 	mov.w	r8, #0
 8005f36:	f104 0a1a 	add.w	sl, r4, #26
 8005f3a:	e7f2      	b.n	8005f22 <_printf_float+0x422>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	4642      	mov	r2, r8
 8005f40:	e7df      	b.n	8005f02 <_printf_float+0x402>
 8005f42:	2301      	movs	r3, #1
 8005f44:	464a      	mov	r2, r9
 8005f46:	4631      	mov	r1, r6
 8005f48:	4628      	mov	r0, r5
 8005f4a:	47b8      	blx	r7
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	f43f ae38 	beq.w	8005bc2 <_printf_float+0xc2>
 8005f52:	f108 0801 	add.w	r8, r8, #1
 8005f56:	68e3      	ldr	r3, [r4, #12]
 8005f58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f5a:	1a5b      	subs	r3, r3, r1
 8005f5c:	4543      	cmp	r3, r8
 8005f5e:	dcf0      	bgt.n	8005f42 <_printf_float+0x442>
 8005f60:	e6fa      	b.n	8005d58 <_printf_float+0x258>
 8005f62:	f04f 0800 	mov.w	r8, #0
 8005f66:	f104 0919 	add.w	r9, r4, #25
 8005f6a:	e7f4      	b.n	8005f56 <_printf_float+0x456>

08005f6c <_printf_common>:
 8005f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f70:	4616      	mov	r6, r2
 8005f72:	4699      	mov	r9, r3
 8005f74:	688a      	ldr	r2, [r1, #8]
 8005f76:	690b      	ldr	r3, [r1, #16]
 8005f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	bfb8      	it	lt
 8005f80:	4613      	movlt	r3, r2
 8005f82:	6033      	str	r3, [r6, #0]
 8005f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f88:	4607      	mov	r7, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	b10a      	cbz	r2, 8005f92 <_printf_common+0x26>
 8005f8e:	3301      	adds	r3, #1
 8005f90:	6033      	str	r3, [r6, #0]
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	0699      	lsls	r1, r3, #26
 8005f96:	bf42      	ittt	mi
 8005f98:	6833      	ldrmi	r3, [r6, #0]
 8005f9a:	3302      	addmi	r3, #2
 8005f9c:	6033      	strmi	r3, [r6, #0]
 8005f9e:	6825      	ldr	r5, [r4, #0]
 8005fa0:	f015 0506 	ands.w	r5, r5, #6
 8005fa4:	d106      	bne.n	8005fb4 <_printf_common+0x48>
 8005fa6:	f104 0a19 	add.w	sl, r4, #25
 8005faa:	68e3      	ldr	r3, [r4, #12]
 8005fac:	6832      	ldr	r2, [r6, #0]
 8005fae:	1a9b      	subs	r3, r3, r2
 8005fb0:	42ab      	cmp	r3, r5
 8005fb2:	dc26      	bgt.n	8006002 <_printf_common+0x96>
 8005fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fb8:	1e13      	subs	r3, r2, #0
 8005fba:	6822      	ldr	r2, [r4, #0]
 8005fbc:	bf18      	it	ne
 8005fbe:	2301      	movne	r3, #1
 8005fc0:	0692      	lsls	r2, r2, #26
 8005fc2:	d42b      	bmi.n	800601c <_printf_common+0xb0>
 8005fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fc8:	4649      	mov	r1, r9
 8005fca:	4638      	mov	r0, r7
 8005fcc:	47c0      	blx	r8
 8005fce:	3001      	adds	r0, #1
 8005fd0:	d01e      	beq.n	8006010 <_printf_common+0xa4>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	68e5      	ldr	r5, [r4, #12]
 8005fd6:	6832      	ldr	r2, [r6, #0]
 8005fd8:	f003 0306 	and.w	r3, r3, #6
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	bf08      	it	eq
 8005fe0:	1aad      	subeq	r5, r5, r2
 8005fe2:	68a3      	ldr	r3, [r4, #8]
 8005fe4:	6922      	ldr	r2, [r4, #16]
 8005fe6:	bf0c      	ite	eq
 8005fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fec:	2500      	movne	r5, #0
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	bfc4      	itt	gt
 8005ff2:	1a9b      	subgt	r3, r3, r2
 8005ff4:	18ed      	addgt	r5, r5, r3
 8005ff6:	2600      	movs	r6, #0
 8005ff8:	341a      	adds	r4, #26
 8005ffa:	42b5      	cmp	r5, r6
 8005ffc:	d11a      	bne.n	8006034 <_printf_common+0xc8>
 8005ffe:	2000      	movs	r0, #0
 8006000:	e008      	b.n	8006014 <_printf_common+0xa8>
 8006002:	2301      	movs	r3, #1
 8006004:	4652      	mov	r2, sl
 8006006:	4649      	mov	r1, r9
 8006008:	4638      	mov	r0, r7
 800600a:	47c0      	blx	r8
 800600c:	3001      	adds	r0, #1
 800600e:	d103      	bne.n	8006018 <_printf_common+0xac>
 8006010:	f04f 30ff 	mov.w	r0, #4294967295
 8006014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006018:	3501      	adds	r5, #1
 800601a:	e7c6      	b.n	8005faa <_printf_common+0x3e>
 800601c:	18e1      	adds	r1, r4, r3
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	2030      	movs	r0, #48	; 0x30
 8006022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006026:	4422      	add	r2, r4
 8006028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800602c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006030:	3302      	adds	r3, #2
 8006032:	e7c7      	b.n	8005fc4 <_printf_common+0x58>
 8006034:	2301      	movs	r3, #1
 8006036:	4622      	mov	r2, r4
 8006038:	4649      	mov	r1, r9
 800603a:	4638      	mov	r0, r7
 800603c:	47c0      	blx	r8
 800603e:	3001      	adds	r0, #1
 8006040:	d0e6      	beq.n	8006010 <_printf_common+0xa4>
 8006042:	3601      	adds	r6, #1
 8006044:	e7d9      	b.n	8005ffa <_printf_common+0x8e>
	...

08006048 <_printf_i>:
 8006048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800604c:	7e0f      	ldrb	r7, [r1, #24]
 800604e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006050:	2f78      	cmp	r7, #120	; 0x78
 8006052:	4691      	mov	r9, r2
 8006054:	4680      	mov	r8, r0
 8006056:	460c      	mov	r4, r1
 8006058:	469a      	mov	sl, r3
 800605a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800605e:	d807      	bhi.n	8006070 <_printf_i+0x28>
 8006060:	2f62      	cmp	r7, #98	; 0x62
 8006062:	d80a      	bhi.n	800607a <_printf_i+0x32>
 8006064:	2f00      	cmp	r7, #0
 8006066:	f000 80d8 	beq.w	800621a <_printf_i+0x1d2>
 800606a:	2f58      	cmp	r7, #88	; 0x58
 800606c:	f000 80a3 	beq.w	80061b6 <_printf_i+0x16e>
 8006070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006078:	e03a      	b.n	80060f0 <_printf_i+0xa8>
 800607a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800607e:	2b15      	cmp	r3, #21
 8006080:	d8f6      	bhi.n	8006070 <_printf_i+0x28>
 8006082:	a101      	add	r1, pc, #4	; (adr r1, 8006088 <_printf_i+0x40>)
 8006084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006088:	080060e1 	.word	0x080060e1
 800608c:	080060f5 	.word	0x080060f5
 8006090:	08006071 	.word	0x08006071
 8006094:	08006071 	.word	0x08006071
 8006098:	08006071 	.word	0x08006071
 800609c:	08006071 	.word	0x08006071
 80060a0:	080060f5 	.word	0x080060f5
 80060a4:	08006071 	.word	0x08006071
 80060a8:	08006071 	.word	0x08006071
 80060ac:	08006071 	.word	0x08006071
 80060b0:	08006071 	.word	0x08006071
 80060b4:	08006201 	.word	0x08006201
 80060b8:	08006125 	.word	0x08006125
 80060bc:	080061e3 	.word	0x080061e3
 80060c0:	08006071 	.word	0x08006071
 80060c4:	08006071 	.word	0x08006071
 80060c8:	08006223 	.word	0x08006223
 80060cc:	08006071 	.word	0x08006071
 80060d0:	08006125 	.word	0x08006125
 80060d4:	08006071 	.word	0x08006071
 80060d8:	08006071 	.word	0x08006071
 80060dc:	080061eb 	.word	0x080061eb
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	1d1a      	adds	r2, r3, #4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	602a      	str	r2, [r5, #0]
 80060e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060f0:	2301      	movs	r3, #1
 80060f2:	e0a3      	b.n	800623c <_printf_i+0x1f4>
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	6829      	ldr	r1, [r5, #0]
 80060f8:	0606      	lsls	r6, r0, #24
 80060fa:	f101 0304 	add.w	r3, r1, #4
 80060fe:	d50a      	bpl.n	8006116 <_printf_i+0xce>
 8006100:	680e      	ldr	r6, [r1, #0]
 8006102:	602b      	str	r3, [r5, #0]
 8006104:	2e00      	cmp	r6, #0
 8006106:	da03      	bge.n	8006110 <_printf_i+0xc8>
 8006108:	232d      	movs	r3, #45	; 0x2d
 800610a:	4276      	negs	r6, r6
 800610c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006110:	485e      	ldr	r0, [pc, #376]	; (800628c <_printf_i+0x244>)
 8006112:	230a      	movs	r3, #10
 8006114:	e019      	b.n	800614a <_printf_i+0x102>
 8006116:	680e      	ldr	r6, [r1, #0]
 8006118:	602b      	str	r3, [r5, #0]
 800611a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800611e:	bf18      	it	ne
 8006120:	b236      	sxthne	r6, r6
 8006122:	e7ef      	b.n	8006104 <_printf_i+0xbc>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	6820      	ldr	r0, [r4, #0]
 8006128:	1d19      	adds	r1, r3, #4
 800612a:	6029      	str	r1, [r5, #0]
 800612c:	0601      	lsls	r1, r0, #24
 800612e:	d501      	bpl.n	8006134 <_printf_i+0xec>
 8006130:	681e      	ldr	r6, [r3, #0]
 8006132:	e002      	b.n	800613a <_printf_i+0xf2>
 8006134:	0646      	lsls	r6, r0, #25
 8006136:	d5fb      	bpl.n	8006130 <_printf_i+0xe8>
 8006138:	881e      	ldrh	r6, [r3, #0]
 800613a:	4854      	ldr	r0, [pc, #336]	; (800628c <_printf_i+0x244>)
 800613c:	2f6f      	cmp	r7, #111	; 0x6f
 800613e:	bf0c      	ite	eq
 8006140:	2308      	moveq	r3, #8
 8006142:	230a      	movne	r3, #10
 8006144:	2100      	movs	r1, #0
 8006146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800614a:	6865      	ldr	r5, [r4, #4]
 800614c:	60a5      	str	r5, [r4, #8]
 800614e:	2d00      	cmp	r5, #0
 8006150:	bfa2      	ittt	ge
 8006152:	6821      	ldrge	r1, [r4, #0]
 8006154:	f021 0104 	bicge.w	r1, r1, #4
 8006158:	6021      	strge	r1, [r4, #0]
 800615a:	b90e      	cbnz	r6, 8006160 <_printf_i+0x118>
 800615c:	2d00      	cmp	r5, #0
 800615e:	d04d      	beq.n	80061fc <_printf_i+0x1b4>
 8006160:	4615      	mov	r5, r2
 8006162:	fbb6 f1f3 	udiv	r1, r6, r3
 8006166:	fb03 6711 	mls	r7, r3, r1, r6
 800616a:	5dc7      	ldrb	r7, [r0, r7]
 800616c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006170:	4637      	mov	r7, r6
 8006172:	42bb      	cmp	r3, r7
 8006174:	460e      	mov	r6, r1
 8006176:	d9f4      	bls.n	8006162 <_printf_i+0x11a>
 8006178:	2b08      	cmp	r3, #8
 800617a:	d10b      	bne.n	8006194 <_printf_i+0x14c>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	07de      	lsls	r6, r3, #31
 8006180:	d508      	bpl.n	8006194 <_printf_i+0x14c>
 8006182:	6923      	ldr	r3, [r4, #16]
 8006184:	6861      	ldr	r1, [r4, #4]
 8006186:	4299      	cmp	r1, r3
 8006188:	bfde      	ittt	le
 800618a:	2330      	movle	r3, #48	; 0x30
 800618c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006190:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006194:	1b52      	subs	r2, r2, r5
 8006196:	6122      	str	r2, [r4, #16]
 8006198:	f8cd a000 	str.w	sl, [sp]
 800619c:	464b      	mov	r3, r9
 800619e:	aa03      	add	r2, sp, #12
 80061a0:	4621      	mov	r1, r4
 80061a2:	4640      	mov	r0, r8
 80061a4:	f7ff fee2 	bl	8005f6c <_printf_common>
 80061a8:	3001      	adds	r0, #1
 80061aa:	d14c      	bne.n	8006246 <_printf_i+0x1fe>
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	b004      	add	sp, #16
 80061b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b6:	4835      	ldr	r0, [pc, #212]	; (800628c <_printf_i+0x244>)
 80061b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061bc:	6829      	ldr	r1, [r5, #0]
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80061c4:	6029      	str	r1, [r5, #0]
 80061c6:	061d      	lsls	r5, r3, #24
 80061c8:	d514      	bpl.n	80061f4 <_printf_i+0x1ac>
 80061ca:	07df      	lsls	r7, r3, #31
 80061cc:	bf44      	itt	mi
 80061ce:	f043 0320 	orrmi.w	r3, r3, #32
 80061d2:	6023      	strmi	r3, [r4, #0]
 80061d4:	b91e      	cbnz	r6, 80061de <_printf_i+0x196>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	f023 0320 	bic.w	r3, r3, #32
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	2310      	movs	r3, #16
 80061e0:	e7b0      	b.n	8006144 <_printf_i+0xfc>
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	f043 0320 	orr.w	r3, r3, #32
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	2378      	movs	r3, #120	; 0x78
 80061ec:	4828      	ldr	r0, [pc, #160]	; (8006290 <_printf_i+0x248>)
 80061ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061f2:	e7e3      	b.n	80061bc <_printf_i+0x174>
 80061f4:	0659      	lsls	r1, r3, #25
 80061f6:	bf48      	it	mi
 80061f8:	b2b6      	uxthmi	r6, r6
 80061fa:	e7e6      	b.n	80061ca <_printf_i+0x182>
 80061fc:	4615      	mov	r5, r2
 80061fe:	e7bb      	b.n	8006178 <_printf_i+0x130>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	6826      	ldr	r6, [r4, #0]
 8006204:	6961      	ldr	r1, [r4, #20]
 8006206:	1d18      	adds	r0, r3, #4
 8006208:	6028      	str	r0, [r5, #0]
 800620a:	0635      	lsls	r5, r6, #24
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	d501      	bpl.n	8006214 <_printf_i+0x1cc>
 8006210:	6019      	str	r1, [r3, #0]
 8006212:	e002      	b.n	800621a <_printf_i+0x1d2>
 8006214:	0670      	lsls	r0, r6, #25
 8006216:	d5fb      	bpl.n	8006210 <_printf_i+0x1c8>
 8006218:	8019      	strh	r1, [r3, #0]
 800621a:	2300      	movs	r3, #0
 800621c:	6123      	str	r3, [r4, #16]
 800621e:	4615      	mov	r5, r2
 8006220:	e7ba      	b.n	8006198 <_printf_i+0x150>
 8006222:	682b      	ldr	r3, [r5, #0]
 8006224:	1d1a      	adds	r2, r3, #4
 8006226:	602a      	str	r2, [r5, #0]
 8006228:	681d      	ldr	r5, [r3, #0]
 800622a:	6862      	ldr	r2, [r4, #4]
 800622c:	2100      	movs	r1, #0
 800622e:	4628      	mov	r0, r5
 8006230:	f7f9 ffd6 	bl	80001e0 <memchr>
 8006234:	b108      	cbz	r0, 800623a <_printf_i+0x1f2>
 8006236:	1b40      	subs	r0, r0, r5
 8006238:	6060      	str	r0, [r4, #4]
 800623a:	6863      	ldr	r3, [r4, #4]
 800623c:	6123      	str	r3, [r4, #16]
 800623e:	2300      	movs	r3, #0
 8006240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006244:	e7a8      	b.n	8006198 <_printf_i+0x150>
 8006246:	6923      	ldr	r3, [r4, #16]
 8006248:	462a      	mov	r2, r5
 800624a:	4649      	mov	r1, r9
 800624c:	4640      	mov	r0, r8
 800624e:	47d0      	blx	sl
 8006250:	3001      	adds	r0, #1
 8006252:	d0ab      	beq.n	80061ac <_printf_i+0x164>
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	079b      	lsls	r3, r3, #30
 8006258:	d413      	bmi.n	8006282 <_printf_i+0x23a>
 800625a:	68e0      	ldr	r0, [r4, #12]
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	4298      	cmp	r0, r3
 8006260:	bfb8      	it	lt
 8006262:	4618      	movlt	r0, r3
 8006264:	e7a4      	b.n	80061b0 <_printf_i+0x168>
 8006266:	2301      	movs	r3, #1
 8006268:	4632      	mov	r2, r6
 800626a:	4649      	mov	r1, r9
 800626c:	4640      	mov	r0, r8
 800626e:	47d0      	blx	sl
 8006270:	3001      	adds	r0, #1
 8006272:	d09b      	beq.n	80061ac <_printf_i+0x164>
 8006274:	3501      	adds	r5, #1
 8006276:	68e3      	ldr	r3, [r4, #12]
 8006278:	9903      	ldr	r1, [sp, #12]
 800627a:	1a5b      	subs	r3, r3, r1
 800627c:	42ab      	cmp	r3, r5
 800627e:	dcf2      	bgt.n	8006266 <_printf_i+0x21e>
 8006280:	e7eb      	b.n	800625a <_printf_i+0x212>
 8006282:	2500      	movs	r5, #0
 8006284:	f104 0619 	add.w	r6, r4, #25
 8006288:	e7f5      	b.n	8006276 <_printf_i+0x22e>
 800628a:	bf00      	nop
 800628c:	08009692 	.word	0x08009692
 8006290:	080096a3 	.word	0x080096a3

08006294 <_sbrk_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4d06      	ldr	r5, [pc, #24]	; (80062b0 <_sbrk_r+0x1c>)
 8006298:	2300      	movs	r3, #0
 800629a:	4604      	mov	r4, r0
 800629c:	4608      	mov	r0, r1
 800629e:	602b      	str	r3, [r5, #0]
 80062a0:	f7fc fa40 	bl	8002724 <_sbrk>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_sbrk_r+0x1a>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_sbrk_r+0x1a>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	200004b8 	.word	0x200004b8

080062b4 <siprintf>:
 80062b4:	b40e      	push	{r1, r2, r3}
 80062b6:	b500      	push	{lr}
 80062b8:	b09c      	sub	sp, #112	; 0x70
 80062ba:	ab1d      	add	r3, sp, #116	; 0x74
 80062bc:	9002      	str	r0, [sp, #8]
 80062be:	9006      	str	r0, [sp, #24]
 80062c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062c4:	4809      	ldr	r0, [pc, #36]	; (80062ec <siprintf+0x38>)
 80062c6:	9107      	str	r1, [sp, #28]
 80062c8:	9104      	str	r1, [sp, #16]
 80062ca:	4909      	ldr	r1, [pc, #36]	; (80062f0 <siprintf+0x3c>)
 80062cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d0:	9105      	str	r1, [sp, #20]
 80062d2:	6800      	ldr	r0, [r0, #0]
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	a902      	add	r1, sp, #8
 80062d8:	f001 fd72 	bl	8007dc0 <_svfiprintf_r>
 80062dc:	9b02      	ldr	r3, [sp, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	b01c      	add	sp, #112	; 0x70
 80062e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062e8:	b003      	add	sp, #12
 80062ea:	4770      	bx	lr
 80062ec:	20000058 	.word	0x20000058
 80062f0:	ffff0208 	.word	0xffff0208

080062f4 <__sread>:
 80062f4:	b510      	push	{r4, lr}
 80062f6:	460c      	mov	r4, r1
 80062f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fc:	f001 ffba 	bl	8008274 <_read_r>
 8006300:	2800      	cmp	r0, #0
 8006302:	bfab      	itete	ge
 8006304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006306:	89a3      	ldrhlt	r3, [r4, #12]
 8006308:	181b      	addge	r3, r3, r0
 800630a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800630e:	bfac      	ite	ge
 8006310:	6563      	strge	r3, [r4, #84]	; 0x54
 8006312:	81a3      	strhlt	r3, [r4, #12]
 8006314:	bd10      	pop	{r4, pc}

08006316 <__swrite>:
 8006316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631a:	461f      	mov	r7, r3
 800631c:	898b      	ldrh	r3, [r1, #12]
 800631e:	05db      	lsls	r3, r3, #23
 8006320:	4605      	mov	r5, r0
 8006322:	460c      	mov	r4, r1
 8006324:	4616      	mov	r6, r2
 8006326:	d505      	bpl.n	8006334 <__swrite+0x1e>
 8006328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800632c:	2302      	movs	r3, #2
 800632e:	2200      	movs	r2, #0
 8006330:	f001 f878 	bl	8007424 <_lseek_r>
 8006334:	89a3      	ldrh	r3, [r4, #12]
 8006336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800633a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800633e:	81a3      	strh	r3, [r4, #12]
 8006340:	4632      	mov	r2, r6
 8006342:	463b      	mov	r3, r7
 8006344:	4628      	mov	r0, r5
 8006346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800634a:	f000 b869 	b.w	8006420 <_write_r>

0800634e <__sseek>:
 800634e:	b510      	push	{r4, lr}
 8006350:	460c      	mov	r4, r1
 8006352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006356:	f001 f865 	bl	8007424 <_lseek_r>
 800635a:	1c43      	adds	r3, r0, #1
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	bf15      	itete	ne
 8006360:	6560      	strne	r0, [r4, #84]	; 0x54
 8006362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800636a:	81a3      	strheq	r3, [r4, #12]
 800636c:	bf18      	it	ne
 800636e:	81a3      	strhne	r3, [r4, #12]
 8006370:	bd10      	pop	{r4, pc}

08006372 <__sclose>:
 8006372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006376:	f000 b8f1 	b.w	800655c <_close_r>
	...

0800637c <__swbuf_r>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	460e      	mov	r6, r1
 8006380:	4614      	mov	r4, r2
 8006382:	4605      	mov	r5, r0
 8006384:	b118      	cbz	r0, 800638e <__swbuf_r+0x12>
 8006386:	6983      	ldr	r3, [r0, #24]
 8006388:	b90b      	cbnz	r3, 800638e <__swbuf_r+0x12>
 800638a:	f7ff f9a9 	bl	80056e0 <__sinit>
 800638e:	4b21      	ldr	r3, [pc, #132]	; (8006414 <__swbuf_r+0x98>)
 8006390:	429c      	cmp	r4, r3
 8006392:	d12b      	bne.n	80063ec <__swbuf_r+0x70>
 8006394:	686c      	ldr	r4, [r5, #4]
 8006396:	69a3      	ldr	r3, [r4, #24]
 8006398:	60a3      	str	r3, [r4, #8]
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	071a      	lsls	r2, r3, #28
 800639e:	d52f      	bpl.n	8006400 <__swbuf_r+0x84>
 80063a0:	6923      	ldr	r3, [r4, #16]
 80063a2:	b36b      	cbz	r3, 8006400 <__swbuf_r+0x84>
 80063a4:	6923      	ldr	r3, [r4, #16]
 80063a6:	6820      	ldr	r0, [r4, #0]
 80063a8:	1ac0      	subs	r0, r0, r3
 80063aa:	6963      	ldr	r3, [r4, #20]
 80063ac:	b2f6      	uxtb	r6, r6
 80063ae:	4283      	cmp	r3, r0
 80063b0:	4637      	mov	r7, r6
 80063b2:	dc04      	bgt.n	80063be <__swbuf_r+0x42>
 80063b4:	4621      	mov	r1, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 ffe2 	bl	8007380 <_fflush_r>
 80063bc:	bb30      	cbnz	r0, 800640c <__swbuf_r+0x90>
 80063be:	68a3      	ldr	r3, [r4, #8]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	60a3      	str	r3, [r4, #8]
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	6022      	str	r2, [r4, #0]
 80063ca:	701e      	strb	r6, [r3, #0]
 80063cc:	6963      	ldr	r3, [r4, #20]
 80063ce:	3001      	adds	r0, #1
 80063d0:	4283      	cmp	r3, r0
 80063d2:	d004      	beq.n	80063de <__swbuf_r+0x62>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	07db      	lsls	r3, r3, #31
 80063d8:	d506      	bpl.n	80063e8 <__swbuf_r+0x6c>
 80063da:	2e0a      	cmp	r6, #10
 80063dc:	d104      	bne.n	80063e8 <__swbuf_r+0x6c>
 80063de:	4621      	mov	r1, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 ffcd 	bl	8007380 <_fflush_r>
 80063e6:	b988      	cbnz	r0, 800640c <__swbuf_r+0x90>
 80063e8:	4638      	mov	r0, r7
 80063ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <__swbuf_r+0x9c>)
 80063ee:	429c      	cmp	r4, r3
 80063f0:	d101      	bne.n	80063f6 <__swbuf_r+0x7a>
 80063f2:	68ac      	ldr	r4, [r5, #8]
 80063f4:	e7cf      	b.n	8006396 <__swbuf_r+0x1a>
 80063f6:	4b09      	ldr	r3, [pc, #36]	; (800641c <__swbuf_r+0xa0>)
 80063f8:	429c      	cmp	r4, r3
 80063fa:	bf08      	it	eq
 80063fc:	68ec      	ldreq	r4, [r5, #12]
 80063fe:	e7ca      	b.n	8006396 <__swbuf_r+0x1a>
 8006400:	4621      	mov	r1, r4
 8006402:	4628      	mov	r0, r5
 8006404:	f000 f81e 	bl	8006444 <__swsetup_r>
 8006408:	2800      	cmp	r0, #0
 800640a:	d0cb      	beq.n	80063a4 <__swbuf_r+0x28>
 800640c:	f04f 37ff 	mov.w	r7, #4294967295
 8006410:	e7ea      	b.n	80063e8 <__swbuf_r+0x6c>
 8006412:	bf00      	nop
 8006414:	0800963c 	.word	0x0800963c
 8006418:	0800965c 	.word	0x0800965c
 800641c:	0800961c 	.word	0x0800961c

08006420 <_write_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4d07      	ldr	r5, [pc, #28]	; (8006440 <_write_r+0x20>)
 8006424:	4604      	mov	r4, r0
 8006426:	4608      	mov	r0, r1
 8006428:	4611      	mov	r1, r2
 800642a:	2200      	movs	r2, #0
 800642c:	602a      	str	r2, [r5, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	f7ff f853 	bl	80054da <_write>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_write_r+0x1e>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_write_r+0x1e>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	200004b8 	.word	0x200004b8

08006444 <__swsetup_r>:
 8006444:	4b32      	ldr	r3, [pc, #200]	; (8006510 <__swsetup_r+0xcc>)
 8006446:	b570      	push	{r4, r5, r6, lr}
 8006448:	681d      	ldr	r5, [r3, #0]
 800644a:	4606      	mov	r6, r0
 800644c:	460c      	mov	r4, r1
 800644e:	b125      	cbz	r5, 800645a <__swsetup_r+0x16>
 8006450:	69ab      	ldr	r3, [r5, #24]
 8006452:	b913      	cbnz	r3, 800645a <__swsetup_r+0x16>
 8006454:	4628      	mov	r0, r5
 8006456:	f7ff f943 	bl	80056e0 <__sinit>
 800645a:	4b2e      	ldr	r3, [pc, #184]	; (8006514 <__swsetup_r+0xd0>)
 800645c:	429c      	cmp	r4, r3
 800645e:	d10f      	bne.n	8006480 <__swsetup_r+0x3c>
 8006460:	686c      	ldr	r4, [r5, #4]
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006468:	0719      	lsls	r1, r3, #28
 800646a:	d42c      	bmi.n	80064c6 <__swsetup_r+0x82>
 800646c:	06dd      	lsls	r5, r3, #27
 800646e:	d411      	bmi.n	8006494 <__swsetup_r+0x50>
 8006470:	2309      	movs	r3, #9
 8006472:	6033      	str	r3, [r6, #0]
 8006474:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006478:	81a3      	strh	r3, [r4, #12]
 800647a:	f04f 30ff 	mov.w	r0, #4294967295
 800647e:	e03e      	b.n	80064fe <__swsetup_r+0xba>
 8006480:	4b25      	ldr	r3, [pc, #148]	; (8006518 <__swsetup_r+0xd4>)
 8006482:	429c      	cmp	r4, r3
 8006484:	d101      	bne.n	800648a <__swsetup_r+0x46>
 8006486:	68ac      	ldr	r4, [r5, #8]
 8006488:	e7eb      	b.n	8006462 <__swsetup_r+0x1e>
 800648a:	4b24      	ldr	r3, [pc, #144]	; (800651c <__swsetup_r+0xd8>)
 800648c:	429c      	cmp	r4, r3
 800648e:	bf08      	it	eq
 8006490:	68ec      	ldreq	r4, [r5, #12]
 8006492:	e7e6      	b.n	8006462 <__swsetup_r+0x1e>
 8006494:	0758      	lsls	r0, r3, #29
 8006496:	d512      	bpl.n	80064be <__swsetup_r+0x7a>
 8006498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800649a:	b141      	cbz	r1, 80064ae <__swsetup_r+0x6a>
 800649c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064a0:	4299      	cmp	r1, r3
 80064a2:	d002      	beq.n	80064aa <__swsetup_r+0x66>
 80064a4:	4630      	mov	r0, r6
 80064a6:	f001 fbe3 	bl	8007c70 <_free_r>
 80064aa:	2300      	movs	r3, #0
 80064ac:	6363      	str	r3, [r4, #52]	; 0x34
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	2300      	movs	r3, #0
 80064b8:	6063      	str	r3, [r4, #4]
 80064ba:	6923      	ldr	r3, [r4, #16]
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	f043 0308 	orr.w	r3, r3, #8
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	b94b      	cbnz	r3, 80064de <__swsetup_r+0x9a>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d4:	d003      	beq.n	80064de <__swsetup_r+0x9a>
 80064d6:	4621      	mov	r1, r4
 80064d8:	4630      	mov	r0, r6
 80064da:	f000 ffdb 	bl	8007494 <__smakebuf_r>
 80064de:	89a0      	ldrh	r0, [r4, #12]
 80064e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064e4:	f010 0301 	ands.w	r3, r0, #1
 80064e8:	d00a      	beq.n	8006500 <__swsetup_r+0xbc>
 80064ea:	2300      	movs	r3, #0
 80064ec:	60a3      	str	r3, [r4, #8]
 80064ee:	6963      	ldr	r3, [r4, #20]
 80064f0:	425b      	negs	r3, r3
 80064f2:	61a3      	str	r3, [r4, #24]
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	b943      	cbnz	r3, 800650a <__swsetup_r+0xc6>
 80064f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064fc:	d1ba      	bne.n	8006474 <__swsetup_r+0x30>
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	0781      	lsls	r1, r0, #30
 8006502:	bf58      	it	pl
 8006504:	6963      	ldrpl	r3, [r4, #20]
 8006506:	60a3      	str	r3, [r4, #8]
 8006508:	e7f4      	b.n	80064f4 <__swsetup_r+0xb0>
 800650a:	2000      	movs	r0, #0
 800650c:	e7f7      	b.n	80064fe <__swsetup_r+0xba>
 800650e:	bf00      	nop
 8006510:	20000058 	.word	0x20000058
 8006514:	0800963c 	.word	0x0800963c
 8006518:	0800965c 	.word	0x0800965c
 800651c:	0800961c 	.word	0x0800961c

08006520 <__assert_func>:
 8006520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006522:	4614      	mov	r4, r2
 8006524:	461a      	mov	r2, r3
 8006526:	4b09      	ldr	r3, [pc, #36]	; (800654c <__assert_func+0x2c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4605      	mov	r5, r0
 800652c:	68d8      	ldr	r0, [r3, #12]
 800652e:	b14c      	cbz	r4, 8006544 <__assert_func+0x24>
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <__assert_func+0x30>)
 8006532:	9100      	str	r1, [sp, #0]
 8006534:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006538:	4906      	ldr	r1, [pc, #24]	; (8006554 <__assert_func+0x34>)
 800653a:	462b      	mov	r3, r5
 800653c:	f000 ff5c 	bl	80073f8 <fiprintf>
 8006540:	f001 feaa 	bl	8008298 <abort>
 8006544:	4b04      	ldr	r3, [pc, #16]	; (8006558 <__assert_func+0x38>)
 8006546:	461c      	mov	r4, r3
 8006548:	e7f3      	b.n	8006532 <__assert_func+0x12>
 800654a:	bf00      	nop
 800654c:	20000058 	.word	0x20000058
 8006550:	080096b4 	.word	0x080096b4
 8006554:	080096c1 	.word	0x080096c1
 8006558:	080096ef 	.word	0x080096ef

0800655c <_close_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4d06      	ldr	r5, [pc, #24]	; (8006578 <_close_r+0x1c>)
 8006560:	2300      	movs	r3, #0
 8006562:	4604      	mov	r4, r0
 8006564:	4608      	mov	r0, r1
 8006566:	602b      	str	r3, [r5, #0]
 8006568:	f7fe ffe8 	bl	800553c <_close>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_close_r+0x1a>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_close_r+0x1a>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	200004b8 	.word	0x200004b8

0800657c <quorem>:
 800657c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006580:	6903      	ldr	r3, [r0, #16]
 8006582:	690c      	ldr	r4, [r1, #16]
 8006584:	42a3      	cmp	r3, r4
 8006586:	4607      	mov	r7, r0
 8006588:	f2c0 8081 	blt.w	800668e <quorem+0x112>
 800658c:	3c01      	subs	r4, #1
 800658e:	f101 0814 	add.w	r8, r1, #20
 8006592:	f100 0514 	add.w	r5, r0, #20
 8006596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065a4:	3301      	adds	r3, #1
 80065a6:	429a      	cmp	r2, r3
 80065a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80065ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80065b4:	d331      	bcc.n	800661a <quorem+0x9e>
 80065b6:	f04f 0e00 	mov.w	lr, #0
 80065ba:	4640      	mov	r0, r8
 80065bc:	46ac      	mov	ip, r5
 80065be:	46f2      	mov	sl, lr
 80065c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80065c4:	b293      	uxth	r3, r2
 80065c6:	fb06 e303 	mla	r3, r6, r3, lr
 80065ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	ebaa 0303 	sub.w	r3, sl, r3
 80065d4:	f8dc a000 	ldr.w	sl, [ip]
 80065d8:	0c12      	lsrs	r2, r2, #16
 80065da:	fa13 f38a 	uxtah	r3, r3, sl
 80065de:	fb06 e202 	mla	r2, r6, r2, lr
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	9b00      	ldr	r3, [sp, #0]
 80065e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80065ea:	b292      	uxth	r2, r2
 80065ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80065f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80065f8:	4581      	cmp	r9, r0
 80065fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065fe:	f84c 3b04 	str.w	r3, [ip], #4
 8006602:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006606:	d2db      	bcs.n	80065c0 <quorem+0x44>
 8006608:	f855 300b 	ldr.w	r3, [r5, fp]
 800660c:	b92b      	cbnz	r3, 800661a <quorem+0x9e>
 800660e:	9b01      	ldr	r3, [sp, #4]
 8006610:	3b04      	subs	r3, #4
 8006612:	429d      	cmp	r5, r3
 8006614:	461a      	mov	r2, r3
 8006616:	d32e      	bcc.n	8006676 <quorem+0xfa>
 8006618:	613c      	str	r4, [r7, #16]
 800661a:	4638      	mov	r0, r7
 800661c:	f001 fa10 	bl	8007a40 <__mcmp>
 8006620:	2800      	cmp	r0, #0
 8006622:	db24      	blt.n	800666e <quorem+0xf2>
 8006624:	3601      	adds	r6, #1
 8006626:	4628      	mov	r0, r5
 8006628:	f04f 0c00 	mov.w	ip, #0
 800662c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006630:	f8d0 e000 	ldr.w	lr, [r0]
 8006634:	b293      	uxth	r3, r2
 8006636:	ebac 0303 	sub.w	r3, ip, r3
 800663a:	0c12      	lsrs	r2, r2, #16
 800663c:	fa13 f38e 	uxtah	r3, r3, lr
 8006640:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006648:	b29b      	uxth	r3, r3
 800664a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800664e:	45c1      	cmp	r9, r8
 8006650:	f840 3b04 	str.w	r3, [r0], #4
 8006654:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006658:	d2e8      	bcs.n	800662c <quorem+0xb0>
 800665a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800665e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006662:	b922      	cbnz	r2, 800666e <quorem+0xf2>
 8006664:	3b04      	subs	r3, #4
 8006666:	429d      	cmp	r5, r3
 8006668:	461a      	mov	r2, r3
 800666a:	d30a      	bcc.n	8006682 <quorem+0x106>
 800666c:	613c      	str	r4, [r7, #16]
 800666e:	4630      	mov	r0, r6
 8006670:	b003      	add	sp, #12
 8006672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006676:	6812      	ldr	r2, [r2, #0]
 8006678:	3b04      	subs	r3, #4
 800667a:	2a00      	cmp	r2, #0
 800667c:	d1cc      	bne.n	8006618 <quorem+0x9c>
 800667e:	3c01      	subs	r4, #1
 8006680:	e7c7      	b.n	8006612 <quorem+0x96>
 8006682:	6812      	ldr	r2, [r2, #0]
 8006684:	3b04      	subs	r3, #4
 8006686:	2a00      	cmp	r2, #0
 8006688:	d1f0      	bne.n	800666c <quorem+0xf0>
 800668a:	3c01      	subs	r4, #1
 800668c:	e7eb      	b.n	8006666 <quorem+0xea>
 800668e:	2000      	movs	r0, #0
 8006690:	e7ee      	b.n	8006670 <quorem+0xf4>
 8006692:	0000      	movs	r0, r0
 8006694:	0000      	movs	r0, r0
	...

08006698 <_dtoa_r>:
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	ed2d 8b04 	vpush	{d8-d9}
 80066a0:	ec57 6b10 	vmov	r6, r7, d0
 80066a4:	b093      	sub	sp, #76	; 0x4c
 80066a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80066a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80066ac:	9106      	str	r1, [sp, #24]
 80066ae:	ee10 aa10 	vmov	sl, s0
 80066b2:	4604      	mov	r4, r0
 80066b4:	9209      	str	r2, [sp, #36]	; 0x24
 80066b6:	930c      	str	r3, [sp, #48]	; 0x30
 80066b8:	46bb      	mov	fp, r7
 80066ba:	b975      	cbnz	r5, 80066da <_dtoa_r+0x42>
 80066bc:	2010      	movs	r0, #16
 80066be:	f000 ff29 	bl	8007514 <malloc>
 80066c2:	4602      	mov	r2, r0
 80066c4:	6260      	str	r0, [r4, #36]	; 0x24
 80066c6:	b920      	cbnz	r0, 80066d2 <_dtoa_r+0x3a>
 80066c8:	4ba7      	ldr	r3, [pc, #668]	; (8006968 <_dtoa_r+0x2d0>)
 80066ca:	21ea      	movs	r1, #234	; 0xea
 80066cc:	48a7      	ldr	r0, [pc, #668]	; (800696c <_dtoa_r+0x2d4>)
 80066ce:	f7ff ff27 	bl	8006520 <__assert_func>
 80066d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066d6:	6005      	str	r5, [r0, #0]
 80066d8:	60c5      	str	r5, [r0, #12]
 80066da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066dc:	6819      	ldr	r1, [r3, #0]
 80066de:	b151      	cbz	r1, 80066f6 <_dtoa_r+0x5e>
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	604a      	str	r2, [r1, #4]
 80066e4:	2301      	movs	r3, #1
 80066e6:	4093      	lsls	r3, r2
 80066e8:	608b      	str	r3, [r1, #8]
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 ff66 	bl	80075bc <_Bfree>
 80066f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	1e3b      	subs	r3, r7, #0
 80066f8:	bfaa      	itet	ge
 80066fa:	2300      	movge	r3, #0
 80066fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006700:	f8c8 3000 	strge.w	r3, [r8]
 8006704:	4b9a      	ldr	r3, [pc, #616]	; (8006970 <_dtoa_r+0x2d8>)
 8006706:	bfbc      	itt	lt
 8006708:	2201      	movlt	r2, #1
 800670a:	f8c8 2000 	strlt.w	r2, [r8]
 800670e:	ea33 030b 	bics.w	r3, r3, fp
 8006712:	d11b      	bne.n	800674c <_dtoa_r+0xb4>
 8006714:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006716:	f242 730f 	movw	r3, #9999	; 0x270f
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006720:	4333      	orrs	r3, r6
 8006722:	f000 8592 	beq.w	800724a <_dtoa_r+0xbb2>
 8006726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006728:	b963      	cbnz	r3, 8006744 <_dtoa_r+0xac>
 800672a:	4b92      	ldr	r3, [pc, #584]	; (8006974 <_dtoa_r+0x2dc>)
 800672c:	e022      	b.n	8006774 <_dtoa_r+0xdc>
 800672e:	4b92      	ldr	r3, [pc, #584]	; (8006978 <_dtoa_r+0x2e0>)
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	3308      	adds	r3, #8
 8006734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	9801      	ldr	r0, [sp, #4]
 800673a:	b013      	add	sp, #76	; 0x4c
 800673c:	ecbd 8b04 	vpop	{d8-d9}
 8006740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006744:	4b8b      	ldr	r3, [pc, #556]	; (8006974 <_dtoa_r+0x2dc>)
 8006746:	9301      	str	r3, [sp, #4]
 8006748:	3303      	adds	r3, #3
 800674a:	e7f3      	b.n	8006734 <_dtoa_r+0x9c>
 800674c:	2200      	movs	r2, #0
 800674e:	2300      	movs	r3, #0
 8006750:	4650      	mov	r0, sl
 8006752:	4659      	mov	r1, fp
 8006754:	f7fa f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006758:	ec4b ab19 	vmov	d9, sl, fp
 800675c:	4680      	mov	r8, r0
 800675e:	b158      	cbz	r0, 8006778 <_dtoa_r+0xe0>
 8006760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006762:	2301      	movs	r3, #1
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 856b 	beq.w	8007244 <_dtoa_r+0xbac>
 800676e:	4883      	ldr	r0, [pc, #524]	; (800697c <_dtoa_r+0x2e4>)
 8006770:	6018      	str	r0, [r3, #0]
 8006772:	1e43      	subs	r3, r0, #1
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	e7df      	b.n	8006738 <_dtoa_r+0xa0>
 8006778:	ec4b ab10 	vmov	d0, sl, fp
 800677c:	aa10      	add	r2, sp, #64	; 0x40
 800677e:	a911      	add	r1, sp, #68	; 0x44
 8006780:	4620      	mov	r0, r4
 8006782:	f001 fa03 	bl	8007b8c <__d2b>
 8006786:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800678a:	ee08 0a10 	vmov	s16, r0
 800678e:	2d00      	cmp	r5, #0
 8006790:	f000 8084 	beq.w	800689c <_dtoa_r+0x204>
 8006794:	ee19 3a90 	vmov	r3, s19
 8006798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800679c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80067a0:	4656      	mov	r6, sl
 80067a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80067a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80067aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80067ae:	4b74      	ldr	r3, [pc, #464]	; (8006980 <_dtoa_r+0x2e8>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	4630      	mov	r0, r6
 80067b4:	4639      	mov	r1, r7
 80067b6:	f7f9 fd67 	bl	8000288 <__aeabi_dsub>
 80067ba:	a365      	add	r3, pc, #404	; (adr r3, 8006950 <_dtoa_r+0x2b8>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7f9 ff1a 	bl	80005f8 <__aeabi_dmul>
 80067c4:	a364      	add	r3, pc, #400	; (adr r3, 8006958 <_dtoa_r+0x2c0>)
 80067c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ca:	f7f9 fd5f 	bl	800028c <__adddf3>
 80067ce:	4606      	mov	r6, r0
 80067d0:	4628      	mov	r0, r5
 80067d2:	460f      	mov	r7, r1
 80067d4:	f7f9 fea6 	bl	8000524 <__aeabi_i2d>
 80067d8:	a361      	add	r3, pc, #388	; (adr r3, 8006960 <_dtoa_r+0x2c8>)
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f7f9 ff0b 	bl	80005f8 <__aeabi_dmul>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4630      	mov	r0, r6
 80067e8:	4639      	mov	r1, r7
 80067ea:	f7f9 fd4f 	bl	800028c <__adddf3>
 80067ee:	4606      	mov	r6, r0
 80067f0:	460f      	mov	r7, r1
 80067f2:	f7fa f9b1 	bl	8000b58 <__aeabi_d2iz>
 80067f6:	2200      	movs	r2, #0
 80067f8:	9000      	str	r0, [sp, #0]
 80067fa:	2300      	movs	r3, #0
 80067fc:	4630      	mov	r0, r6
 80067fe:	4639      	mov	r1, r7
 8006800:	f7fa f96c 	bl	8000adc <__aeabi_dcmplt>
 8006804:	b150      	cbz	r0, 800681c <_dtoa_r+0x184>
 8006806:	9800      	ldr	r0, [sp, #0]
 8006808:	f7f9 fe8c 	bl	8000524 <__aeabi_i2d>
 800680c:	4632      	mov	r2, r6
 800680e:	463b      	mov	r3, r7
 8006810:	f7fa f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006814:	b910      	cbnz	r0, 800681c <_dtoa_r+0x184>
 8006816:	9b00      	ldr	r3, [sp, #0]
 8006818:	3b01      	subs	r3, #1
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	9b00      	ldr	r3, [sp, #0]
 800681e:	2b16      	cmp	r3, #22
 8006820:	d85a      	bhi.n	80068d8 <_dtoa_r+0x240>
 8006822:	9a00      	ldr	r2, [sp, #0]
 8006824:	4b57      	ldr	r3, [pc, #348]	; (8006984 <_dtoa_r+0x2ec>)
 8006826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	ec51 0b19 	vmov	r0, r1, d9
 8006832:	f7fa f953 	bl	8000adc <__aeabi_dcmplt>
 8006836:	2800      	cmp	r0, #0
 8006838:	d050      	beq.n	80068dc <_dtoa_r+0x244>
 800683a:	9b00      	ldr	r3, [sp, #0]
 800683c:	3b01      	subs	r3, #1
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	2300      	movs	r3, #0
 8006842:	930b      	str	r3, [sp, #44]	; 0x2c
 8006844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006846:	1b5d      	subs	r5, r3, r5
 8006848:	1e6b      	subs	r3, r5, #1
 800684a:	9305      	str	r3, [sp, #20]
 800684c:	bf45      	ittet	mi
 800684e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006852:	9304      	strmi	r3, [sp, #16]
 8006854:	2300      	movpl	r3, #0
 8006856:	2300      	movmi	r3, #0
 8006858:	bf4c      	ite	mi
 800685a:	9305      	strmi	r3, [sp, #20]
 800685c:	9304      	strpl	r3, [sp, #16]
 800685e:	9b00      	ldr	r3, [sp, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	db3d      	blt.n	80068e0 <_dtoa_r+0x248>
 8006864:	9b05      	ldr	r3, [sp, #20]
 8006866:	9a00      	ldr	r2, [sp, #0]
 8006868:	920a      	str	r2, [sp, #40]	; 0x28
 800686a:	4413      	add	r3, r2
 800686c:	9305      	str	r3, [sp, #20]
 800686e:	2300      	movs	r3, #0
 8006870:	9307      	str	r3, [sp, #28]
 8006872:	9b06      	ldr	r3, [sp, #24]
 8006874:	2b09      	cmp	r3, #9
 8006876:	f200 8089 	bhi.w	800698c <_dtoa_r+0x2f4>
 800687a:	2b05      	cmp	r3, #5
 800687c:	bfc4      	itt	gt
 800687e:	3b04      	subgt	r3, #4
 8006880:	9306      	strgt	r3, [sp, #24]
 8006882:	9b06      	ldr	r3, [sp, #24]
 8006884:	f1a3 0302 	sub.w	r3, r3, #2
 8006888:	bfcc      	ite	gt
 800688a:	2500      	movgt	r5, #0
 800688c:	2501      	movle	r5, #1
 800688e:	2b03      	cmp	r3, #3
 8006890:	f200 8087 	bhi.w	80069a2 <_dtoa_r+0x30a>
 8006894:	e8df f003 	tbb	[pc, r3]
 8006898:	59383a2d 	.word	0x59383a2d
 800689c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80068a0:	441d      	add	r5, r3
 80068a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	bfc1      	itttt	gt
 80068aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80068ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80068b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80068b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80068ba:	bfda      	itte	le
 80068bc:	f1c3 0320 	rsble	r3, r3, #32
 80068c0:	fa06 f003 	lslle.w	r0, r6, r3
 80068c4:	4318      	orrgt	r0, r3
 80068c6:	f7f9 fe1d 	bl	8000504 <__aeabi_ui2d>
 80068ca:	2301      	movs	r3, #1
 80068cc:	4606      	mov	r6, r0
 80068ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80068d2:	3d01      	subs	r5, #1
 80068d4:	930e      	str	r3, [sp, #56]	; 0x38
 80068d6:	e76a      	b.n	80067ae <_dtoa_r+0x116>
 80068d8:	2301      	movs	r3, #1
 80068da:	e7b2      	b.n	8006842 <_dtoa_r+0x1aa>
 80068dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80068de:	e7b1      	b.n	8006844 <_dtoa_r+0x1ac>
 80068e0:	9b04      	ldr	r3, [sp, #16]
 80068e2:	9a00      	ldr	r2, [sp, #0]
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	9304      	str	r3, [sp, #16]
 80068e8:	4253      	negs	r3, r2
 80068ea:	9307      	str	r3, [sp, #28]
 80068ec:	2300      	movs	r3, #0
 80068ee:	930a      	str	r3, [sp, #40]	; 0x28
 80068f0:	e7bf      	b.n	8006872 <_dtoa_r+0x1da>
 80068f2:	2300      	movs	r3, #0
 80068f4:	9308      	str	r3, [sp, #32]
 80068f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dc55      	bgt.n	80069a8 <_dtoa_r+0x310>
 80068fc:	2301      	movs	r3, #1
 80068fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006902:	461a      	mov	r2, r3
 8006904:	9209      	str	r2, [sp, #36]	; 0x24
 8006906:	e00c      	b.n	8006922 <_dtoa_r+0x28a>
 8006908:	2301      	movs	r3, #1
 800690a:	e7f3      	b.n	80068f4 <_dtoa_r+0x25c>
 800690c:	2300      	movs	r3, #0
 800690e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006910:	9308      	str	r3, [sp, #32]
 8006912:	9b00      	ldr	r3, [sp, #0]
 8006914:	4413      	add	r3, r2
 8006916:	9302      	str	r3, [sp, #8]
 8006918:	3301      	adds	r3, #1
 800691a:	2b01      	cmp	r3, #1
 800691c:	9303      	str	r3, [sp, #12]
 800691e:	bfb8      	it	lt
 8006920:	2301      	movlt	r3, #1
 8006922:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006924:	2200      	movs	r2, #0
 8006926:	6042      	str	r2, [r0, #4]
 8006928:	2204      	movs	r2, #4
 800692a:	f102 0614 	add.w	r6, r2, #20
 800692e:	429e      	cmp	r6, r3
 8006930:	6841      	ldr	r1, [r0, #4]
 8006932:	d93d      	bls.n	80069b0 <_dtoa_r+0x318>
 8006934:	4620      	mov	r0, r4
 8006936:	f000 fe01 	bl	800753c <_Balloc>
 800693a:	9001      	str	r0, [sp, #4]
 800693c:	2800      	cmp	r0, #0
 800693e:	d13b      	bne.n	80069b8 <_dtoa_r+0x320>
 8006940:	4b11      	ldr	r3, [pc, #68]	; (8006988 <_dtoa_r+0x2f0>)
 8006942:	4602      	mov	r2, r0
 8006944:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006948:	e6c0      	b.n	80066cc <_dtoa_r+0x34>
 800694a:	2301      	movs	r3, #1
 800694c:	e7df      	b.n	800690e <_dtoa_r+0x276>
 800694e:	bf00      	nop
 8006950:	636f4361 	.word	0x636f4361
 8006954:	3fd287a7 	.word	0x3fd287a7
 8006958:	8b60c8b3 	.word	0x8b60c8b3
 800695c:	3fc68a28 	.word	0x3fc68a28
 8006960:	509f79fb 	.word	0x509f79fb
 8006964:	3fd34413 	.word	0x3fd34413
 8006968:	080096fd 	.word	0x080096fd
 800696c:	08009714 	.word	0x08009714
 8006970:	7ff00000 	.word	0x7ff00000
 8006974:	080096f9 	.word	0x080096f9
 8006978:	080096f0 	.word	0x080096f0
 800697c:	08009691 	.word	0x08009691
 8006980:	3ff80000 	.word	0x3ff80000
 8006984:	08009808 	.word	0x08009808
 8006988:	0800976f 	.word	0x0800976f
 800698c:	2501      	movs	r5, #1
 800698e:	2300      	movs	r3, #0
 8006990:	9306      	str	r3, [sp, #24]
 8006992:	9508      	str	r5, [sp, #32]
 8006994:	f04f 33ff 	mov.w	r3, #4294967295
 8006998:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800699c:	2200      	movs	r2, #0
 800699e:	2312      	movs	r3, #18
 80069a0:	e7b0      	b.n	8006904 <_dtoa_r+0x26c>
 80069a2:	2301      	movs	r3, #1
 80069a4:	9308      	str	r3, [sp, #32]
 80069a6:	e7f5      	b.n	8006994 <_dtoa_r+0x2fc>
 80069a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069ae:	e7b8      	b.n	8006922 <_dtoa_r+0x28a>
 80069b0:	3101      	adds	r1, #1
 80069b2:	6041      	str	r1, [r0, #4]
 80069b4:	0052      	lsls	r2, r2, #1
 80069b6:	e7b8      	b.n	800692a <_dtoa_r+0x292>
 80069b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069ba:	9a01      	ldr	r2, [sp, #4]
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	2b0e      	cmp	r3, #14
 80069c2:	f200 809d 	bhi.w	8006b00 <_dtoa_r+0x468>
 80069c6:	2d00      	cmp	r5, #0
 80069c8:	f000 809a 	beq.w	8006b00 <_dtoa_r+0x468>
 80069cc:	9b00      	ldr	r3, [sp, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dd32      	ble.n	8006a38 <_dtoa_r+0x3a0>
 80069d2:	4ab7      	ldr	r2, [pc, #732]	; (8006cb0 <_dtoa_r+0x618>)
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069e0:	9b00      	ldr	r3, [sp, #0]
 80069e2:	05d8      	lsls	r0, r3, #23
 80069e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80069e8:	d516      	bpl.n	8006a18 <_dtoa_r+0x380>
 80069ea:	4bb2      	ldr	r3, [pc, #712]	; (8006cb4 <_dtoa_r+0x61c>)
 80069ec:	ec51 0b19 	vmov	r0, r1, d9
 80069f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069f4:	f7f9 ff2a 	bl	800084c <__aeabi_ddiv>
 80069f8:	f007 070f 	and.w	r7, r7, #15
 80069fc:	4682      	mov	sl, r0
 80069fe:	468b      	mov	fp, r1
 8006a00:	2503      	movs	r5, #3
 8006a02:	4eac      	ldr	r6, [pc, #688]	; (8006cb4 <_dtoa_r+0x61c>)
 8006a04:	b957      	cbnz	r7, 8006a1c <_dtoa_r+0x384>
 8006a06:	4642      	mov	r2, r8
 8006a08:	464b      	mov	r3, r9
 8006a0a:	4650      	mov	r0, sl
 8006a0c:	4659      	mov	r1, fp
 8006a0e:	f7f9 ff1d 	bl	800084c <__aeabi_ddiv>
 8006a12:	4682      	mov	sl, r0
 8006a14:	468b      	mov	fp, r1
 8006a16:	e028      	b.n	8006a6a <_dtoa_r+0x3d2>
 8006a18:	2502      	movs	r5, #2
 8006a1a:	e7f2      	b.n	8006a02 <_dtoa_r+0x36a>
 8006a1c:	07f9      	lsls	r1, r7, #31
 8006a1e:	d508      	bpl.n	8006a32 <_dtoa_r+0x39a>
 8006a20:	4640      	mov	r0, r8
 8006a22:	4649      	mov	r1, r9
 8006a24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a28:	f7f9 fde6 	bl	80005f8 <__aeabi_dmul>
 8006a2c:	3501      	adds	r5, #1
 8006a2e:	4680      	mov	r8, r0
 8006a30:	4689      	mov	r9, r1
 8006a32:	107f      	asrs	r7, r7, #1
 8006a34:	3608      	adds	r6, #8
 8006a36:	e7e5      	b.n	8006a04 <_dtoa_r+0x36c>
 8006a38:	f000 809b 	beq.w	8006b72 <_dtoa_r+0x4da>
 8006a3c:	9b00      	ldr	r3, [sp, #0]
 8006a3e:	4f9d      	ldr	r7, [pc, #628]	; (8006cb4 <_dtoa_r+0x61c>)
 8006a40:	425e      	negs	r6, r3
 8006a42:	4b9b      	ldr	r3, [pc, #620]	; (8006cb0 <_dtoa_r+0x618>)
 8006a44:	f006 020f 	and.w	r2, r6, #15
 8006a48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	ec51 0b19 	vmov	r0, r1, d9
 8006a54:	f7f9 fdd0 	bl	80005f8 <__aeabi_dmul>
 8006a58:	1136      	asrs	r6, r6, #4
 8006a5a:	4682      	mov	sl, r0
 8006a5c:	468b      	mov	fp, r1
 8006a5e:	2300      	movs	r3, #0
 8006a60:	2502      	movs	r5, #2
 8006a62:	2e00      	cmp	r6, #0
 8006a64:	d17a      	bne.n	8006b5c <_dtoa_r+0x4c4>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1d3      	bne.n	8006a12 <_dtoa_r+0x37a>
 8006a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 8082 	beq.w	8006b76 <_dtoa_r+0x4de>
 8006a72:	4b91      	ldr	r3, [pc, #580]	; (8006cb8 <_dtoa_r+0x620>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	4650      	mov	r0, sl
 8006a78:	4659      	mov	r1, fp
 8006a7a:	f7fa f82f 	bl	8000adc <__aeabi_dcmplt>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d079      	beq.n	8006b76 <_dtoa_r+0x4de>
 8006a82:	9b03      	ldr	r3, [sp, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d076      	beq.n	8006b76 <_dtoa_r+0x4de>
 8006a88:	9b02      	ldr	r3, [sp, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	dd36      	ble.n	8006afc <_dtoa_r+0x464>
 8006a8e:	9b00      	ldr	r3, [sp, #0]
 8006a90:	4650      	mov	r0, sl
 8006a92:	4659      	mov	r1, fp
 8006a94:	1e5f      	subs	r7, r3, #1
 8006a96:	2200      	movs	r2, #0
 8006a98:	4b88      	ldr	r3, [pc, #544]	; (8006cbc <_dtoa_r+0x624>)
 8006a9a:	f7f9 fdad 	bl	80005f8 <__aeabi_dmul>
 8006a9e:	9e02      	ldr	r6, [sp, #8]
 8006aa0:	4682      	mov	sl, r0
 8006aa2:	468b      	mov	fp, r1
 8006aa4:	3501      	adds	r5, #1
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f7f9 fd3c 	bl	8000524 <__aeabi_i2d>
 8006aac:	4652      	mov	r2, sl
 8006aae:	465b      	mov	r3, fp
 8006ab0:	f7f9 fda2 	bl	80005f8 <__aeabi_dmul>
 8006ab4:	4b82      	ldr	r3, [pc, #520]	; (8006cc0 <_dtoa_r+0x628>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f7f9 fbe8 	bl	800028c <__adddf3>
 8006abc:	46d0      	mov	r8, sl
 8006abe:	46d9      	mov	r9, fp
 8006ac0:	4682      	mov	sl, r0
 8006ac2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006ac6:	2e00      	cmp	r6, #0
 8006ac8:	d158      	bne.n	8006b7c <_dtoa_r+0x4e4>
 8006aca:	4b7e      	ldr	r3, [pc, #504]	; (8006cc4 <_dtoa_r+0x62c>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	4640      	mov	r0, r8
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	f7f9 fbd9 	bl	8000288 <__aeabi_dsub>
 8006ad6:	4652      	mov	r2, sl
 8006ad8:	465b      	mov	r3, fp
 8006ada:	4680      	mov	r8, r0
 8006adc:	4689      	mov	r9, r1
 8006ade:	f7fa f81b 	bl	8000b18 <__aeabi_dcmpgt>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	f040 8295 	bne.w	8007012 <_dtoa_r+0x97a>
 8006ae8:	4652      	mov	r2, sl
 8006aea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006aee:	4640      	mov	r0, r8
 8006af0:	4649      	mov	r1, r9
 8006af2:	f7f9 fff3 	bl	8000adc <__aeabi_dcmplt>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f040 8289 	bne.w	800700e <_dtoa_r+0x976>
 8006afc:	ec5b ab19 	vmov	sl, fp, d9
 8006b00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f2c0 8148 	blt.w	8006d98 <_dtoa_r+0x700>
 8006b08:	9a00      	ldr	r2, [sp, #0]
 8006b0a:	2a0e      	cmp	r2, #14
 8006b0c:	f300 8144 	bgt.w	8006d98 <_dtoa_r+0x700>
 8006b10:	4b67      	ldr	r3, [pc, #412]	; (8006cb0 <_dtoa_r+0x618>)
 8006b12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f280 80d5 	bge.w	8006ccc <_dtoa_r+0x634>
 8006b22:	9b03      	ldr	r3, [sp, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f300 80d1 	bgt.w	8006ccc <_dtoa_r+0x634>
 8006b2a:	f040 826f 	bne.w	800700c <_dtoa_r+0x974>
 8006b2e:	4b65      	ldr	r3, [pc, #404]	; (8006cc4 <_dtoa_r+0x62c>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	4640      	mov	r0, r8
 8006b34:	4649      	mov	r1, r9
 8006b36:	f7f9 fd5f 	bl	80005f8 <__aeabi_dmul>
 8006b3a:	4652      	mov	r2, sl
 8006b3c:	465b      	mov	r3, fp
 8006b3e:	f7f9 ffe1 	bl	8000b04 <__aeabi_dcmpge>
 8006b42:	9e03      	ldr	r6, [sp, #12]
 8006b44:	4637      	mov	r7, r6
 8006b46:	2800      	cmp	r0, #0
 8006b48:	f040 8245 	bne.w	8006fd6 <_dtoa_r+0x93e>
 8006b4c:	9d01      	ldr	r5, [sp, #4]
 8006b4e:	2331      	movs	r3, #49	; 0x31
 8006b50:	f805 3b01 	strb.w	r3, [r5], #1
 8006b54:	9b00      	ldr	r3, [sp, #0]
 8006b56:	3301      	adds	r3, #1
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	e240      	b.n	8006fde <_dtoa_r+0x946>
 8006b5c:	07f2      	lsls	r2, r6, #31
 8006b5e:	d505      	bpl.n	8006b6c <_dtoa_r+0x4d4>
 8006b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b64:	f7f9 fd48 	bl	80005f8 <__aeabi_dmul>
 8006b68:	3501      	adds	r5, #1
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	1076      	asrs	r6, r6, #1
 8006b6e:	3708      	adds	r7, #8
 8006b70:	e777      	b.n	8006a62 <_dtoa_r+0x3ca>
 8006b72:	2502      	movs	r5, #2
 8006b74:	e779      	b.n	8006a6a <_dtoa_r+0x3d2>
 8006b76:	9f00      	ldr	r7, [sp, #0]
 8006b78:	9e03      	ldr	r6, [sp, #12]
 8006b7a:	e794      	b.n	8006aa6 <_dtoa_r+0x40e>
 8006b7c:	9901      	ldr	r1, [sp, #4]
 8006b7e:	4b4c      	ldr	r3, [pc, #304]	; (8006cb0 <_dtoa_r+0x618>)
 8006b80:	4431      	add	r1, r6
 8006b82:	910d      	str	r1, [sp, #52]	; 0x34
 8006b84:	9908      	ldr	r1, [sp, #32]
 8006b86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b8e:	2900      	cmp	r1, #0
 8006b90:	d043      	beq.n	8006c1a <_dtoa_r+0x582>
 8006b92:	494d      	ldr	r1, [pc, #308]	; (8006cc8 <_dtoa_r+0x630>)
 8006b94:	2000      	movs	r0, #0
 8006b96:	f7f9 fe59 	bl	800084c <__aeabi_ddiv>
 8006b9a:	4652      	mov	r2, sl
 8006b9c:	465b      	mov	r3, fp
 8006b9e:	f7f9 fb73 	bl	8000288 <__aeabi_dsub>
 8006ba2:	9d01      	ldr	r5, [sp, #4]
 8006ba4:	4682      	mov	sl, r0
 8006ba6:	468b      	mov	fp, r1
 8006ba8:	4649      	mov	r1, r9
 8006baa:	4640      	mov	r0, r8
 8006bac:	f7f9 ffd4 	bl	8000b58 <__aeabi_d2iz>
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	f7f9 fcb7 	bl	8000524 <__aeabi_i2d>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4640      	mov	r0, r8
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	f7f9 fb63 	bl	8000288 <__aeabi_dsub>
 8006bc2:	3630      	adds	r6, #48	; 0x30
 8006bc4:	f805 6b01 	strb.w	r6, [r5], #1
 8006bc8:	4652      	mov	r2, sl
 8006bca:	465b      	mov	r3, fp
 8006bcc:	4680      	mov	r8, r0
 8006bce:	4689      	mov	r9, r1
 8006bd0:	f7f9 ff84 	bl	8000adc <__aeabi_dcmplt>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d163      	bne.n	8006ca0 <_dtoa_r+0x608>
 8006bd8:	4642      	mov	r2, r8
 8006bda:	464b      	mov	r3, r9
 8006bdc:	4936      	ldr	r1, [pc, #216]	; (8006cb8 <_dtoa_r+0x620>)
 8006bde:	2000      	movs	r0, #0
 8006be0:	f7f9 fb52 	bl	8000288 <__aeabi_dsub>
 8006be4:	4652      	mov	r2, sl
 8006be6:	465b      	mov	r3, fp
 8006be8:	f7f9 ff78 	bl	8000adc <__aeabi_dcmplt>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	f040 80b5 	bne.w	8006d5c <_dtoa_r+0x6c4>
 8006bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bf4:	429d      	cmp	r5, r3
 8006bf6:	d081      	beq.n	8006afc <_dtoa_r+0x464>
 8006bf8:	4b30      	ldr	r3, [pc, #192]	; (8006cbc <_dtoa_r+0x624>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4650      	mov	r0, sl
 8006bfe:	4659      	mov	r1, fp
 8006c00:	f7f9 fcfa 	bl	80005f8 <__aeabi_dmul>
 8006c04:	4b2d      	ldr	r3, [pc, #180]	; (8006cbc <_dtoa_r+0x624>)
 8006c06:	4682      	mov	sl, r0
 8006c08:	468b      	mov	fp, r1
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f7f9 fcf2 	bl	80005f8 <__aeabi_dmul>
 8006c14:	4680      	mov	r8, r0
 8006c16:	4689      	mov	r9, r1
 8006c18:	e7c6      	b.n	8006ba8 <_dtoa_r+0x510>
 8006c1a:	4650      	mov	r0, sl
 8006c1c:	4659      	mov	r1, fp
 8006c1e:	f7f9 fceb 	bl	80005f8 <__aeabi_dmul>
 8006c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c24:	9d01      	ldr	r5, [sp, #4]
 8006c26:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c28:	4682      	mov	sl, r0
 8006c2a:	468b      	mov	fp, r1
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	4640      	mov	r0, r8
 8006c30:	f7f9 ff92 	bl	8000b58 <__aeabi_d2iz>
 8006c34:	4606      	mov	r6, r0
 8006c36:	f7f9 fc75 	bl	8000524 <__aeabi_i2d>
 8006c3a:	3630      	adds	r6, #48	; 0x30
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4640      	mov	r0, r8
 8006c42:	4649      	mov	r1, r9
 8006c44:	f7f9 fb20 	bl	8000288 <__aeabi_dsub>
 8006c48:	f805 6b01 	strb.w	r6, [r5], #1
 8006c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c4e:	429d      	cmp	r5, r3
 8006c50:	4680      	mov	r8, r0
 8006c52:	4689      	mov	r9, r1
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	d124      	bne.n	8006ca4 <_dtoa_r+0x60c>
 8006c5a:	4b1b      	ldr	r3, [pc, #108]	; (8006cc8 <_dtoa_r+0x630>)
 8006c5c:	4650      	mov	r0, sl
 8006c5e:	4659      	mov	r1, fp
 8006c60:	f7f9 fb14 	bl	800028c <__adddf3>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4640      	mov	r0, r8
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	f7f9 ff54 	bl	8000b18 <__aeabi_dcmpgt>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d173      	bne.n	8006d5c <_dtoa_r+0x6c4>
 8006c74:	4652      	mov	r2, sl
 8006c76:	465b      	mov	r3, fp
 8006c78:	4913      	ldr	r1, [pc, #76]	; (8006cc8 <_dtoa_r+0x630>)
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	f7f9 fb04 	bl	8000288 <__aeabi_dsub>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4640      	mov	r0, r8
 8006c86:	4649      	mov	r1, r9
 8006c88:	f7f9 ff28 	bl	8000adc <__aeabi_dcmplt>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	f43f af35 	beq.w	8006afc <_dtoa_r+0x464>
 8006c92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c94:	1e6b      	subs	r3, r5, #1
 8006c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c9c:	2b30      	cmp	r3, #48	; 0x30
 8006c9e:	d0f8      	beq.n	8006c92 <_dtoa_r+0x5fa>
 8006ca0:	9700      	str	r7, [sp, #0]
 8006ca2:	e049      	b.n	8006d38 <_dtoa_r+0x6a0>
 8006ca4:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <_dtoa_r+0x624>)
 8006ca6:	f7f9 fca7 	bl	80005f8 <__aeabi_dmul>
 8006caa:	4680      	mov	r8, r0
 8006cac:	4689      	mov	r9, r1
 8006cae:	e7bd      	b.n	8006c2c <_dtoa_r+0x594>
 8006cb0:	08009808 	.word	0x08009808
 8006cb4:	080097e0 	.word	0x080097e0
 8006cb8:	3ff00000 	.word	0x3ff00000
 8006cbc:	40240000 	.word	0x40240000
 8006cc0:	401c0000 	.word	0x401c0000
 8006cc4:	40140000 	.word	0x40140000
 8006cc8:	3fe00000 	.word	0x3fe00000
 8006ccc:	9d01      	ldr	r5, [sp, #4]
 8006cce:	4656      	mov	r6, sl
 8006cd0:	465f      	mov	r7, fp
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	464b      	mov	r3, r9
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	4639      	mov	r1, r7
 8006cda:	f7f9 fdb7 	bl	800084c <__aeabi_ddiv>
 8006cde:	f7f9 ff3b 	bl	8000b58 <__aeabi_d2iz>
 8006ce2:	4682      	mov	sl, r0
 8006ce4:	f7f9 fc1e 	bl	8000524 <__aeabi_i2d>
 8006ce8:	4642      	mov	r2, r8
 8006cea:	464b      	mov	r3, r9
 8006cec:	f7f9 fc84 	bl	80005f8 <__aeabi_dmul>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006cfc:	f7f9 fac4 	bl	8000288 <__aeabi_dsub>
 8006d00:	f805 6b01 	strb.w	r6, [r5], #1
 8006d04:	9e01      	ldr	r6, [sp, #4]
 8006d06:	9f03      	ldr	r7, [sp, #12]
 8006d08:	1bae      	subs	r6, r5, r6
 8006d0a:	42b7      	cmp	r7, r6
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	d135      	bne.n	8006d7e <_dtoa_r+0x6e6>
 8006d12:	f7f9 fabb 	bl	800028c <__adddf3>
 8006d16:	4642      	mov	r2, r8
 8006d18:	464b      	mov	r3, r9
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	460f      	mov	r7, r1
 8006d1e:	f7f9 fefb 	bl	8000b18 <__aeabi_dcmpgt>
 8006d22:	b9d0      	cbnz	r0, 8006d5a <_dtoa_r+0x6c2>
 8006d24:	4642      	mov	r2, r8
 8006d26:	464b      	mov	r3, r9
 8006d28:	4630      	mov	r0, r6
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	f7f9 fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d30:	b110      	cbz	r0, 8006d38 <_dtoa_r+0x6a0>
 8006d32:	f01a 0f01 	tst.w	sl, #1
 8006d36:	d110      	bne.n	8006d5a <_dtoa_r+0x6c2>
 8006d38:	4620      	mov	r0, r4
 8006d3a:	ee18 1a10 	vmov	r1, s16
 8006d3e:	f000 fc3d 	bl	80075bc <_Bfree>
 8006d42:	2300      	movs	r3, #0
 8006d44:	9800      	ldr	r0, [sp, #0]
 8006d46:	702b      	strb	r3, [r5, #0]
 8006d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	6018      	str	r0, [r3, #0]
 8006d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f43f acf1 	beq.w	8006738 <_dtoa_r+0xa0>
 8006d56:	601d      	str	r5, [r3, #0]
 8006d58:	e4ee      	b.n	8006738 <_dtoa_r+0xa0>
 8006d5a:	9f00      	ldr	r7, [sp, #0]
 8006d5c:	462b      	mov	r3, r5
 8006d5e:	461d      	mov	r5, r3
 8006d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d64:	2a39      	cmp	r2, #57	; 0x39
 8006d66:	d106      	bne.n	8006d76 <_dtoa_r+0x6de>
 8006d68:	9a01      	ldr	r2, [sp, #4]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d1f7      	bne.n	8006d5e <_dtoa_r+0x6c6>
 8006d6e:	9901      	ldr	r1, [sp, #4]
 8006d70:	2230      	movs	r2, #48	; 0x30
 8006d72:	3701      	adds	r7, #1
 8006d74:	700a      	strb	r2, [r1, #0]
 8006d76:	781a      	ldrb	r2, [r3, #0]
 8006d78:	3201      	adds	r2, #1
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	e790      	b.n	8006ca0 <_dtoa_r+0x608>
 8006d7e:	4ba6      	ldr	r3, [pc, #664]	; (8007018 <_dtoa_r+0x980>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	f7f9 fc39 	bl	80005f8 <__aeabi_dmul>
 8006d86:	2200      	movs	r2, #0
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	460f      	mov	r7, r1
 8006d8e:	f7f9 fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d09d      	beq.n	8006cd2 <_dtoa_r+0x63a>
 8006d96:	e7cf      	b.n	8006d38 <_dtoa_r+0x6a0>
 8006d98:	9a08      	ldr	r2, [sp, #32]
 8006d9a:	2a00      	cmp	r2, #0
 8006d9c:	f000 80d7 	beq.w	8006f4e <_dtoa_r+0x8b6>
 8006da0:	9a06      	ldr	r2, [sp, #24]
 8006da2:	2a01      	cmp	r2, #1
 8006da4:	f300 80ba 	bgt.w	8006f1c <_dtoa_r+0x884>
 8006da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	f000 80b2 	beq.w	8006f14 <_dtoa_r+0x87c>
 8006db0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006db4:	9e07      	ldr	r6, [sp, #28]
 8006db6:	9d04      	ldr	r5, [sp, #16]
 8006db8:	9a04      	ldr	r2, [sp, #16]
 8006dba:	441a      	add	r2, r3
 8006dbc:	9204      	str	r2, [sp, #16]
 8006dbe:	9a05      	ldr	r2, [sp, #20]
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	441a      	add	r2, r3
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	9205      	str	r2, [sp, #20]
 8006dc8:	f000 fcb0 	bl	800772c <__i2b>
 8006dcc:	4607      	mov	r7, r0
 8006dce:	2d00      	cmp	r5, #0
 8006dd0:	dd0c      	ble.n	8006dec <_dtoa_r+0x754>
 8006dd2:	9b05      	ldr	r3, [sp, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	dd09      	ble.n	8006dec <_dtoa_r+0x754>
 8006dd8:	42ab      	cmp	r3, r5
 8006dda:	9a04      	ldr	r2, [sp, #16]
 8006ddc:	bfa8      	it	ge
 8006dde:	462b      	movge	r3, r5
 8006de0:	1ad2      	subs	r2, r2, r3
 8006de2:	9204      	str	r2, [sp, #16]
 8006de4:	9a05      	ldr	r2, [sp, #20]
 8006de6:	1aed      	subs	r5, r5, r3
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	9305      	str	r3, [sp, #20]
 8006dec:	9b07      	ldr	r3, [sp, #28]
 8006dee:	b31b      	cbz	r3, 8006e38 <_dtoa_r+0x7a0>
 8006df0:	9b08      	ldr	r3, [sp, #32]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 80af 	beq.w	8006f56 <_dtoa_r+0x8be>
 8006df8:	2e00      	cmp	r6, #0
 8006dfa:	dd13      	ble.n	8006e24 <_dtoa_r+0x78c>
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	4632      	mov	r2, r6
 8006e00:	4620      	mov	r0, r4
 8006e02:	f000 fd53 	bl	80078ac <__pow5mult>
 8006e06:	ee18 2a10 	vmov	r2, s16
 8006e0a:	4601      	mov	r1, r0
 8006e0c:	4607      	mov	r7, r0
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f000 fca2 	bl	8007758 <__multiply>
 8006e14:	ee18 1a10 	vmov	r1, s16
 8006e18:	4680      	mov	r8, r0
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 fbce 	bl	80075bc <_Bfree>
 8006e20:	ee08 8a10 	vmov	s16, r8
 8006e24:	9b07      	ldr	r3, [sp, #28]
 8006e26:	1b9a      	subs	r2, r3, r6
 8006e28:	d006      	beq.n	8006e38 <_dtoa_r+0x7a0>
 8006e2a:	ee18 1a10 	vmov	r1, s16
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 fd3c 	bl	80078ac <__pow5mult>
 8006e34:	ee08 0a10 	vmov	s16, r0
 8006e38:	2101      	movs	r1, #1
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 fc76 	bl	800772c <__i2b>
 8006e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	4606      	mov	r6, r0
 8006e46:	f340 8088 	ble.w	8006f5a <_dtoa_r+0x8c2>
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	4601      	mov	r1, r0
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f000 fd2c 	bl	80078ac <__pow5mult>
 8006e54:	9b06      	ldr	r3, [sp, #24]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	4606      	mov	r6, r0
 8006e5a:	f340 8081 	ble.w	8006f60 <_dtoa_r+0x8c8>
 8006e5e:	f04f 0800 	mov.w	r8, #0
 8006e62:	6933      	ldr	r3, [r6, #16]
 8006e64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e68:	6918      	ldr	r0, [r3, #16]
 8006e6a:	f000 fc0f 	bl	800768c <__hi0bits>
 8006e6e:	f1c0 0020 	rsb	r0, r0, #32
 8006e72:	9b05      	ldr	r3, [sp, #20]
 8006e74:	4418      	add	r0, r3
 8006e76:	f010 001f 	ands.w	r0, r0, #31
 8006e7a:	f000 8092 	beq.w	8006fa2 <_dtoa_r+0x90a>
 8006e7e:	f1c0 0320 	rsb	r3, r0, #32
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	f340 808a 	ble.w	8006f9c <_dtoa_r+0x904>
 8006e88:	f1c0 001c 	rsb	r0, r0, #28
 8006e8c:	9b04      	ldr	r3, [sp, #16]
 8006e8e:	4403      	add	r3, r0
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	9b05      	ldr	r3, [sp, #20]
 8006e94:	4403      	add	r3, r0
 8006e96:	4405      	add	r5, r0
 8006e98:	9305      	str	r3, [sp, #20]
 8006e9a:	9b04      	ldr	r3, [sp, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	dd07      	ble.n	8006eb0 <_dtoa_r+0x818>
 8006ea0:	ee18 1a10 	vmov	r1, s16
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f000 fd5a 	bl	8007960 <__lshift>
 8006eac:	ee08 0a10 	vmov	s16, r0
 8006eb0:	9b05      	ldr	r3, [sp, #20]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	dd05      	ble.n	8006ec2 <_dtoa_r+0x82a>
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 fd50 	bl	8007960 <__lshift>
 8006ec0:	4606      	mov	r6, r0
 8006ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d06e      	beq.n	8006fa6 <_dtoa_r+0x90e>
 8006ec8:	ee18 0a10 	vmov	r0, s16
 8006ecc:	4631      	mov	r1, r6
 8006ece:	f000 fdb7 	bl	8007a40 <__mcmp>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	da67      	bge.n	8006fa6 <_dtoa_r+0x90e>
 8006ed6:	9b00      	ldr	r3, [sp, #0]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	ee18 1a10 	vmov	r1, s16
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	220a      	movs	r2, #10
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f000 fb8b 	bl	8007600 <__multadd>
 8006eea:	9b08      	ldr	r3, [sp, #32]
 8006eec:	ee08 0a10 	vmov	s16, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 81b1 	beq.w	8007258 <_dtoa_r+0xbc0>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	4639      	mov	r1, r7
 8006efa:	220a      	movs	r2, #10
 8006efc:	4620      	mov	r0, r4
 8006efe:	f000 fb7f 	bl	8007600 <__multadd>
 8006f02:	9b02      	ldr	r3, [sp, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	4607      	mov	r7, r0
 8006f08:	f300 808e 	bgt.w	8007028 <_dtoa_r+0x990>
 8006f0c:	9b06      	ldr	r3, [sp, #24]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	dc51      	bgt.n	8006fb6 <_dtoa_r+0x91e>
 8006f12:	e089      	b.n	8007028 <_dtoa_r+0x990>
 8006f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f1a:	e74b      	b.n	8006db4 <_dtoa_r+0x71c>
 8006f1c:	9b03      	ldr	r3, [sp, #12]
 8006f1e:	1e5e      	subs	r6, r3, #1
 8006f20:	9b07      	ldr	r3, [sp, #28]
 8006f22:	42b3      	cmp	r3, r6
 8006f24:	bfbf      	itttt	lt
 8006f26:	9b07      	ldrlt	r3, [sp, #28]
 8006f28:	9607      	strlt	r6, [sp, #28]
 8006f2a:	1af2      	sublt	r2, r6, r3
 8006f2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006f2e:	bfb6      	itet	lt
 8006f30:	189b      	addlt	r3, r3, r2
 8006f32:	1b9e      	subge	r6, r3, r6
 8006f34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006f36:	9b03      	ldr	r3, [sp, #12]
 8006f38:	bfb8      	it	lt
 8006f3a:	2600      	movlt	r6, #0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	bfb7      	itett	lt
 8006f40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006f44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006f48:	1a9d      	sublt	r5, r3, r2
 8006f4a:	2300      	movlt	r3, #0
 8006f4c:	e734      	b.n	8006db8 <_dtoa_r+0x720>
 8006f4e:	9e07      	ldr	r6, [sp, #28]
 8006f50:	9d04      	ldr	r5, [sp, #16]
 8006f52:	9f08      	ldr	r7, [sp, #32]
 8006f54:	e73b      	b.n	8006dce <_dtoa_r+0x736>
 8006f56:	9a07      	ldr	r2, [sp, #28]
 8006f58:	e767      	b.n	8006e2a <_dtoa_r+0x792>
 8006f5a:	9b06      	ldr	r3, [sp, #24]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	dc18      	bgt.n	8006f92 <_dtoa_r+0x8fa>
 8006f60:	f1ba 0f00 	cmp.w	sl, #0
 8006f64:	d115      	bne.n	8006f92 <_dtoa_r+0x8fa>
 8006f66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f6a:	b993      	cbnz	r3, 8006f92 <_dtoa_r+0x8fa>
 8006f6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f70:	0d1b      	lsrs	r3, r3, #20
 8006f72:	051b      	lsls	r3, r3, #20
 8006f74:	b183      	cbz	r3, 8006f98 <_dtoa_r+0x900>
 8006f76:	9b04      	ldr	r3, [sp, #16]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	9304      	str	r3, [sp, #16]
 8006f7c:	9b05      	ldr	r3, [sp, #20]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	9305      	str	r3, [sp, #20]
 8006f82:	f04f 0801 	mov.w	r8, #1
 8006f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f47f af6a 	bne.w	8006e62 <_dtoa_r+0x7ca>
 8006f8e:	2001      	movs	r0, #1
 8006f90:	e76f      	b.n	8006e72 <_dtoa_r+0x7da>
 8006f92:	f04f 0800 	mov.w	r8, #0
 8006f96:	e7f6      	b.n	8006f86 <_dtoa_r+0x8ee>
 8006f98:	4698      	mov	r8, r3
 8006f9a:	e7f4      	b.n	8006f86 <_dtoa_r+0x8ee>
 8006f9c:	f43f af7d 	beq.w	8006e9a <_dtoa_r+0x802>
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	301c      	adds	r0, #28
 8006fa4:	e772      	b.n	8006e8c <_dtoa_r+0x7f4>
 8006fa6:	9b03      	ldr	r3, [sp, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dc37      	bgt.n	800701c <_dtoa_r+0x984>
 8006fac:	9b06      	ldr	r3, [sp, #24]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	dd34      	ble.n	800701c <_dtoa_r+0x984>
 8006fb2:	9b03      	ldr	r3, [sp, #12]
 8006fb4:	9302      	str	r3, [sp, #8]
 8006fb6:	9b02      	ldr	r3, [sp, #8]
 8006fb8:	b96b      	cbnz	r3, 8006fd6 <_dtoa_r+0x93e>
 8006fba:	4631      	mov	r1, r6
 8006fbc:	2205      	movs	r2, #5
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f000 fb1e 	bl	8007600 <__multadd>
 8006fc4:	4601      	mov	r1, r0
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	ee18 0a10 	vmov	r0, s16
 8006fcc:	f000 fd38 	bl	8007a40 <__mcmp>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	f73f adbb 	bgt.w	8006b4c <_dtoa_r+0x4b4>
 8006fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd8:	9d01      	ldr	r5, [sp, #4]
 8006fda:	43db      	mvns	r3, r3
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	f04f 0800 	mov.w	r8, #0
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f000 fae9 	bl	80075bc <_Bfree>
 8006fea:	2f00      	cmp	r7, #0
 8006fec:	f43f aea4 	beq.w	8006d38 <_dtoa_r+0x6a0>
 8006ff0:	f1b8 0f00 	cmp.w	r8, #0
 8006ff4:	d005      	beq.n	8007002 <_dtoa_r+0x96a>
 8006ff6:	45b8      	cmp	r8, r7
 8006ff8:	d003      	beq.n	8007002 <_dtoa_r+0x96a>
 8006ffa:	4641      	mov	r1, r8
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f000 fadd 	bl	80075bc <_Bfree>
 8007002:	4639      	mov	r1, r7
 8007004:	4620      	mov	r0, r4
 8007006:	f000 fad9 	bl	80075bc <_Bfree>
 800700a:	e695      	b.n	8006d38 <_dtoa_r+0x6a0>
 800700c:	2600      	movs	r6, #0
 800700e:	4637      	mov	r7, r6
 8007010:	e7e1      	b.n	8006fd6 <_dtoa_r+0x93e>
 8007012:	9700      	str	r7, [sp, #0]
 8007014:	4637      	mov	r7, r6
 8007016:	e599      	b.n	8006b4c <_dtoa_r+0x4b4>
 8007018:	40240000 	.word	0x40240000
 800701c:	9b08      	ldr	r3, [sp, #32]
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 80ca 	beq.w	80071b8 <_dtoa_r+0xb20>
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	9302      	str	r3, [sp, #8]
 8007028:	2d00      	cmp	r5, #0
 800702a:	dd05      	ble.n	8007038 <_dtoa_r+0x9a0>
 800702c:	4639      	mov	r1, r7
 800702e:	462a      	mov	r2, r5
 8007030:	4620      	mov	r0, r4
 8007032:	f000 fc95 	bl	8007960 <__lshift>
 8007036:	4607      	mov	r7, r0
 8007038:	f1b8 0f00 	cmp.w	r8, #0
 800703c:	d05b      	beq.n	80070f6 <_dtoa_r+0xa5e>
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	4620      	mov	r0, r4
 8007042:	f000 fa7b 	bl	800753c <_Balloc>
 8007046:	4605      	mov	r5, r0
 8007048:	b928      	cbnz	r0, 8007056 <_dtoa_r+0x9be>
 800704a:	4b87      	ldr	r3, [pc, #540]	; (8007268 <_dtoa_r+0xbd0>)
 800704c:	4602      	mov	r2, r0
 800704e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007052:	f7ff bb3b 	b.w	80066cc <_dtoa_r+0x34>
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	3202      	adds	r2, #2
 800705a:	0092      	lsls	r2, r2, #2
 800705c:	f107 010c 	add.w	r1, r7, #12
 8007060:	300c      	adds	r0, #12
 8007062:	f7fe fc02 	bl	800586a <memcpy>
 8007066:	2201      	movs	r2, #1
 8007068:	4629      	mov	r1, r5
 800706a:	4620      	mov	r0, r4
 800706c:	f000 fc78 	bl	8007960 <__lshift>
 8007070:	9b01      	ldr	r3, [sp, #4]
 8007072:	f103 0901 	add.w	r9, r3, #1
 8007076:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800707a:	4413      	add	r3, r2
 800707c:	9305      	str	r3, [sp, #20]
 800707e:	f00a 0301 	and.w	r3, sl, #1
 8007082:	46b8      	mov	r8, r7
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	4607      	mov	r7, r0
 8007088:	4631      	mov	r1, r6
 800708a:	ee18 0a10 	vmov	r0, s16
 800708e:	f7ff fa75 	bl	800657c <quorem>
 8007092:	4641      	mov	r1, r8
 8007094:	9002      	str	r0, [sp, #8]
 8007096:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800709a:	ee18 0a10 	vmov	r0, s16
 800709e:	f000 fccf 	bl	8007a40 <__mcmp>
 80070a2:	463a      	mov	r2, r7
 80070a4:	9003      	str	r0, [sp, #12]
 80070a6:	4631      	mov	r1, r6
 80070a8:	4620      	mov	r0, r4
 80070aa:	f000 fce5 	bl	8007a78 <__mdiff>
 80070ae:	68c2      	ldr	r2, [r0, #12]
 80070b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80070b4:	4605      	mov	r5, r0
 80070b6:	bb02      	cbnz	r2, 80070fa <_dtoa_r+0xa62>
 80070b8:	4601      	mov	r1, r0
 80070ba:	ee18 0a10 	vmov	r0, s16
 80070be:	f000 fcbf 	bl	8007a40 <__mcmp>
 80070c2:	4602      	mov	r2, r0
 80070c4:	4629      	mov	r1, r5
 80070c6:	4620      	mov	r0, r4
 80070c8:	9207      	str	r2, [sp, #28]
 80070ca:	f000 fa77 	bl	80075bc <_Bfree>
 80070ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80070d2:	ea43 0102 	orr.w	r1, r3, r2
 80070d6:	9b04      	ldr	r3, [sp, #16]
 80070d8:	430b      	orrs	r3, r1
 80070da:	464d      	mov	r5, r9
 80070dc:	d10f      	bne.n	80070fe <_dtoa_r+0xa66>
 80070de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070e2:	d02a      	beq.n	800713a <_dtoa_r+0xaa2>
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	dd02      	ble.n	80070f0 <_dtoa_r+0xa58>
 80070ea:	9b02      	ldr	r3, [sp, #8]
 80070ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80070f0:	f88b a000 	strb.w	sl, [fp]
 80070f4:	e775      	b.n	8006fe2 <_dtoa_r+0x94a>
 80070f6:	4638      	mov	r0, r7
 80070f8:	e7ba      	b.n	8007070 <_dtoa_r+0x9d8>
 80070fa:	2201      	movs	r2, #1
 80070fc:	e7e2      	b.n	80070c4 <_dtoa_r+0xa2c>
 80070fe:	9b03      	ldr	r3, [sp, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	db04      	blt.n	800710e <_dtoa_r+0xa76>
 8007104:	9906      	ldr	r1, [sp, #24]
 8007106:	430b      	orrs	r3, r1
 8007108:	9904      	ldr	r1, [sp, #16]
 800710a:	430b      	orrs	r3, r1
 800710c:	d122      	bne.n	8007154 <_dtoa_r+0xabc>
 800710e:	2a00      	cmp	r2, #0
 8007110:	ddee      	ble.n	80070f0 <_dtoa_r+0xa58>
 8007112:	ee18 1a10 	vmov	r1, s16
 8007116:	2201      	movs	r2, #1
 8007118:	4620      	mov	r0, r4
 800711a:	f000 fc21 	bl	8007960 <__lshift>
 800711e:	4631      	mov	r1, r6
 8007120:	ee08 0a10 	vmov	s16, r0
 8007124:	f000 fc8c 	bl	8007a40 <__mcmp>
 8007128:	2800      	cmp	r0, #0
 800712a:	dc03      	bgt.n	8007134 <_dtoa_r+0xa9c>
 800712c:	d1e0      	bne.n	80070f0 <_dtoa_r+0xa58>
 800712e:	f01a 0f01 	tst.w	sl, #1
 8007132:	d0dd      	beq.n	80070f0 <_dtoa_r+0xa58>
 8007134:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007138:	d1d7      	bne.n	80070ea <_dtoa_r+0xa52>
 800713a:	2339      	movs	r3, #57	; 0x39
 800713c:	f88b 3000 	strb.w	r3, [fp]
 8007140:	462b      	mov	r3, r5
 8007142:	461d      	mov	r5, r3
 8007144:	3b01      	subs	r3, #1
 8007146:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800714a:	2a39      	cmp	r2, #57	; 0x39
 800714c:	d071      	beq.n	8007232 <_dtoa_r+0xb9a>
 800714e:	3201      	adds	r2, #1
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	e746      	b.n	8006fe2 <_dtoa_r+0x94a>
 8007154:	2a00      	cmp	r2, #0
 8007156:	dd07      	ble.n	8007168 <_dtoa_r+0xad0>
 8007158:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800715c:	d0ed      	beq.n	800713a <_dtoa_r+0xaa2>
 800715e:	f10a 0301 	add.w	r3, sl, #1
 8007162:	f88b 3000 	strb.w	r3, [fp]
 8007166:	e73c      	b.n	8006fe2 <_dtoa_r+0x94a>
 8007168:	9b05      	ldr	r3, [sp, #20]
 800716a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800716e:	4599      	cmp	r9, r3
 8007170:	d047      	beq.n	8007202 <_dtoa_r+0xb6a>
 8007172:	ee18 1a10 	vmov	r1, s16
 8007176:	2300      	movs	r3, #0
 8007178:	220a      	movs	r2, #10
 800717a:	4620      	mov	r0, r4
 800717c:	f000 fa40 	bl	8007600 <__multadd>
 8007180:	45b8      	cmp	r8, r7
 8007182:	ee08 0a10 	vmov	s16, r0
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	f04f 020a 	mov.w	r2, #10
 800718e:	4641      	mov	r1, r8
 8007190:	4620      	mov	r0, r4
 8007192:	d106      	bne.n	80071a2 <_dtoa_r+0xb0a>
 8007194:	f000 fa34 	bl	8007600 <__multadd>
 8007198:	4680      	mov	r8, r0
 800719a:	4607      	mov	r7, r0
 800719c:	f109 0901 	add.w	r9, r9, #1
 80071a0:	e772      	b.n	8007088 <_dtoa_r+0x9f0>
 80071a2:	f000 fa2d 	bl	8007600 <__multadd>
 80071a6:	4639      	mov	r1, r7
 80071a8:	4680      	mov	r8, r0
 80071aa:	2300      	movs	r3, #0
 80071ac:	220a      	movs	r2, #10
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 fa26 	bl	8007600 <__multadd>
 80071b4:	4607      	mov	r7, r0
 80071b6:	e7f1      	b.n	800719c <_dtoa_r+0xb04>
 80071b8:	9b03      	ldr	r3, [sp, #12]
 80071ba:	9302      	str	r3, [sp, #8]
 80071bc:	9d01      	ldr	r5, [sp, #4]
 80071be:	ee18 0a10 	vmov	r0, s16
 80071c2:	4631      	mov	r1, r6
 80071c4:	f7ff f9da 	bl	800657c <quorem>
 80071c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80071cc:	9b01      	ldr	r3, [sp, #4]
 80071ce:	f805 ab01 	strb.w	sl, [r5], #1
 80071d2:	1aea      	subs	r2, r5, r3
 80071d4:	9b02      	ldr	r3, [sp, #8]
 80071d6:	4293      	cmp	r3, r2
 80071d8:	dd09      	ble.n	80071ee <_dtoa_r+0xb56>
 80071da:	ee18 1a10 	vmov	r1, s16
 80071de:	2300      	movs	r3, #0
 80071e0:	220a      	movs	r2, #10
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 fa0c 	bl	8007600 <__multadd>
 80071e8:	ee08 0a10 	vmov	s16, r0
 80071ec:	e7e7      	b.n	80071be <_dtoa_r+0xb26>
 80071ee:	9b02      	ldr	r3, [sp, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	bfc8      	it	gt
 80071f4:	461d      	movgt	r5, r3
 80071f6:	9b01      	ldr	r3, [sp, #4]
 80071f8:	bfd8      	it	le
 80071fa:	2501      	movle	r5, #1
 80071fc:	441d      	add	r5, r3
 80071fe:	f04f 0800 	mov.w	r8, #0
 8007202:	ee18 1a10 	vmov	r1, s16
 8007206:	2201      	movs	r2, #1
 8007208:	4620      	mov	r0, r4
 800720a:	f000 fba9 	bl	8007960 <__lshift>
 800720e:	4631      	mov	r1, r6
 8007210:	ee08 0a10 	vmov	s16, r0
 8007214:	f000 fc14 	bl	8007a40 <__mcmp>
 8007218:	2800      	cmp	r0, #0
 800721a:	dc91      	bgt.n	8007140 <_dtoa_r+0xaa8>
 800721c:	d102      	bne.n	8007224 <_dtoa_r+0xb8c>
 800721e:	f01a 0f01 	tst.w	sl, #1
 8007222:	d18d      	bne.n	8007140 <_dtoa_r+0xaa8>
 8007224:	462b      	mov	r3, r5
 8007226:	461d      	mov	r5, r3
 8007228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800722c:	2a30      	cmp	r2, #48	; 0x30
 800722e:	d0fa      	beq.n	8007226 <_dtoa_r+0xb8e>
 8007230:	e6d7      	b.n	8006fe2 <_dtoa_r+0x94a>
 8007232:	9a01      	ldr	r2, [sp, #4]
 8007234:	429a      	cmp	r2, r3
 8007236:	d184      	bne.n	8007142 <_dtoa_r+0xaaa>
 8007238:	9b00      	ldr	r3, [sp, #0]
 800723a:	3301      	adds	r3, #1
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	2331      	movs	r3, #49	; 0x31
 8007240:	7013      	strb	r3, [r2, #0]
 8007242:	e6ce      	b.n	8006fe2 <_dtoa_r+0x94a>
 8007244:	4b09      	ldr	r3, [pc, #36]	; (800726c <_dtoa_r+0xbd4>)
 8007246:	f7ff ba95 	b.w	8006774 <_dtoa_r+0xdc>
 800724a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800724c:	2b00      	cmp	r3, #0
 800724e:	f47f aa6e 	bne.w	800672e <_dtoa_r+0x96>
 8007252:	4b07      	ldr	r3, [pc, #28]	; (8007270 <_dtoa_r+0xbd8>)
 8007254:	f7ff ba8e 	b.w	8006774 <_dtoa_r+0xdc>
 8007258:	9b02      	ldr	r3, [sp, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	dcae      	bgt.n	80071bc <_dtoa_r+0xb24>
 800725e:	9b06      	ldr	r3, [sp, #24]
 8007260:	2b02      	cmp	r3, #2
 8007262:	f73f aea8 	bgt.w	8006fb6 <_dtoa_r+0x91e>
 8007266:	e7a9      	b.n	80071bc <_dtoa_r+0xb24>
 8007268:	0800976f 	.word	0x0800976f
 800726c:	08009690 	.word	0x08009690
 8007270:	080096f0 	.word	0x080096f0

08007274 <__sflush_r>:
 8007274:	898a      	ldrh	r2, [r1, #12]
 8007276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800727a:	4605      	mov	r5, r0
 800727c:	0710      	lsls	r0, r2, #28
 800727e:	460c      	mov	r4, r1
 8007280:	d458      	bmi.n	8007334 <__sflush_r+0xc0>
 8007282:	684b      	ldr	r3, [r1, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	dc05      	bgt.n	8007294 <__sflush_r+0x20>
 8007288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800728a:	2b00      	cmp	r3, #0
 800728c:	dc02      	bgt.n	8007294 <__sflush_r+0x20>
 800728e:	2000      	movs	r0, #0
 8007290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007296:	2e00      	cmp	r6, #0
 8007298:	d0f9      	beq.n	800728e <__sflush_r+0x1a>
 800729a:	2300      	movs	r3, #0
 800729c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072a0:	682f      	ldr	r7, [r5, #0]
 80072a2:	602b      	str	r3, [r5, #0]
 80072a4:	d032      	beq.n	800730c <__sflush_r+0x98>
 80072a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	075a      	lsls	r2, r3, #29
 80072ac:	d505      	bpl.n	80072ba <__sflush_r+0x46>
 80072ae:	6863      	ldr	r3, [r4, #4]
 80072b0:	1ac0      	subs	r0, r0, r3
 80072b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072b4:	b10b      	cbz	r3, 80072ba <__sflush_r+0x46>
 80072b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072b8:	1ac0      	subs	r0, r0, r3
 80072ba:	2300      	movs	r3, #0
 80072bc:	4602      	mov	r2, r0
 80072be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072c0:	6a21      	ldr	r1, [r4, #32]
 80072c2:	4628      	mov	r0, r5
 80072c4:	47b0      	blx	r6
 80072c6:	1c43      	adds	r3, r0, #1
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	d106      	bne.n	80072da <__sflush_r+0x66>
 80072cc:	6829      	ldr	r1, [r5, #0]
 80072ce:	291d      	cmp	r1, #29
 80072d0:	d82c      	bhi.n	800732c <__sflush_r+0xb8>
 80072d2:	4a2a      	ldr	r2, [pc, #168]	; (800737c <__sflush_r+0x108>)
 80072d4:	40ca      	lsrs	r2, r1
 80072d6:	07d6      	lsls	r6, r2, #31
 80072d8:	d528      	bpl.n	800732c <__sflush_r+0xb8>
 80072da:	2200      	movs	r2, #0
 80072dc:	6062      	str	r2, [r4, #4]
 80072de:	04d9      	lsls	r1, r3, #19
 80072e0:	6922      	ldr	r2, [r4, #16]
 80072e2:	6022      	str	r2, [r4, #0]
 80072e4:	d504      	bpl.n	80072f0 <__sflush_r+0x7c>
 80072e6:	1c42      	adds	r2, r0, #1
 80072e8:	d101      	bne.n	80072ee <__sflush_r+0x7a>
 80072ea:	682b      	ldr	r3, [r5, #0]
 80072ec:	b903      	cbnz	r3, 80072f0 <__sflush_r+0x7c>
 80072ee:	6560      	str	r0, [r4, #84]	; 0x54
 80072f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072f2:	602f      	str	r7, [r5, #0]
 80072f4:	2900      	cmp	r1, #0
 80072f6:	d0ca      	beq.n	800728e <__sflush_r+0x1a>
 80072f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072fc:	4299      	cmp	r1, r3
 80072fe:	d002      	beq.n	8007306 <__sflush_r+0x92>
 8007300:	4628      	mov	r0, r5
 8007302:	f000 fcb5 	bl	8007c70 <_free_r>
 8007306:	2000      	movs	r0, #0
 8007308:	6360      	str	r0, [r4, #52]	; 0x34
 800730a:	e7c1      	b.n	8007290 <__sflush_r+0x1c>
 800730c:	6a21      	ldr	r1, [r4, #32]
 800730e:	2301      	movs	r3, #1
 8007310:	4628      	mov	r0, r5
 8007312:	47b0      	blx	r6
 8007314:	1c41      	adds	r1, r0, #1
 8007316:	d1c7      	bne.n	80072a8 <__sflush_r+0x34>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0c4      	beq.n	80072a8 <__sflush_r+0x34>
 800731e:	2b1d      	cmp	r3, #29
 8007320:	d001      	beq.n	8007326 <__sflush_r+0xb2>
 8007322:	2b16      	cmp	r3, #22
 8007324:	d101      	bne.n	800732a <__sflush_r+0xb6>
 8007326:	602f      	str	r7, [r5, #0]
 8007328:	e7b1      	b.n	800728e <__sflush_r+0x1a>
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007330:	81a3      	strh	r3, [r4, #12]
 8007332:	e7ad      	b.n	8007290 <__sflush_r+0x1c>
 8007334:	690f      	ldr	r7, [r1, #16]
 8007336:	2f00      	cmp	r7, #0
 8007338:	d0a9      	beq.n	800728e <__sflush_r+0x1a>
 800733a:	0793      	lsls	r3, r2, #30
 800733c:	680e      	ldr	r6, [r1, #0]
 800733e:	bf08      	it	eq
 8007340:	694b      	ldreq	r3, [r1, #20]
 8007342:	600f      	str	r7, [r1, #0]
 8007344:	bf18      	it	ne
 8007346:	2300      	movne	r3, #0
 8007348:	eba6 0807 	sub.w	r8, r6, r7
 800734c:	608b      	str	r3, [r1, #8]
 800734e:	f1b8 0f00 	cmp.w	r8, #0
 8007352:	dd9c      	ble.n	800728e <__sflush_r+0x1a>
 8007354:	6a21      	ldr	r1, [r4, #32]
 8007356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007358:	4643      	mov	r3, r8
 800735a:	463a      	mov	r2, r7
 800735c:	4628      	mov	r0, r5
 800735e:	47b0      	blx	r6
 8007360:	2800      	cmp	r0, #0
 8007362:	dc06      	bgt.n	8007372 <__sflush_r+0xfe>
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	f04f 30ff 	mov.w	r0, #4294967295
 8007370:	e78e      	b.n	8007290 <__sflush_r+0x1c>
 8007372:	4407      	add	r7, r0
 8007374:	eba8 0800 	sub.w	r8, r8, r0
 8007378:	e7e9      	b.n	800734e <__sflush_r+0xda>
 800737a:	bf00      	nop
 800737c:	20400001 	.word	0x20400001

08007380 <_fflush_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	690b      	ldr	r3, [r1, #16]
 8007384:	4605      	mov	r5, r0
 8007386:	460c      	mov	r4, r1
 8007388:	b913      	cbnz	r3, 8007390 <_fflush_r+0x10>
 800738a:	2500      	movs	r5, #0
 800738c:	4628      	mov	r0, r5
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	b118      	cbz	r0, 800739a <_fflush_r+0x1a>
 8007392:	6983      	ldr	r3, [r0, #24]
 8007394:	b90b      	cbnz	r3, 800739a <_fflush_r+0x1a>
 8007396:	f7fe f9a3 	bl	80056e0 <__sinit>
 800739a:	4b14      	ldr	r3, [pc, #80]	; (80073ec <_fflush_r+0x6c>)
 800739c:	429c      	cmp	r4, r3
 800739e:	d11b      	bne.n	80073d8 <_fflush_r+0x58>
 80073a0:	686c      	ldr	r4, [r5, #4]
 80073a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0ef      	beq.n	800738a <_fflush_r+0xa>
 80073aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073ac:	07d0      	lsls	r0, r2, #31
 80073ae:	d404      	bmi.n	80073ba <_fflush_r+0x3a>
 80073b0:	0599      	lsls	r1, r3, #22
 80073b2:	d402      	bmi.n	80073ba <_fflush_r+0x3a>
 80073b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073b6:	f7fe fa56 	bl	8005866 <__retarget_lock_acquire_recursive>
 80073ba:	4628      	mov	r0, r5
 80073bc:	4621      	mov	r1, r4
 80073be:	f7ff ff59 	bl	8007274 <__sflush_r>
 80073c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073c4:	07da      	lsls	r2, r3, #31
 80073c6:	4605      	mov	r5, r0
 80073c8:	d4e0      	bmi.n	800738c <_fflush_r+0xc>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	059b      	lsls	r3, r3, #22
 80073ce:	d4dd      	bmi.n	800738c <_fflush_r+0xc>
 80073d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073d2:	f7fe fa49 	bl	8005868 <__retarget_lock_release_recursive>
 80073d6:	e7d9      	b.n	800738c <_fflush_r+0xc>
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <_fflush_r+0x70>)
 80073da:	429c      	cmp	r4, r3
 80073dc:	d101      	bne.n	80073e2 <_fflush_r+0x62>
 80073de:	68ac      	ldr	r4, [r5, #8]
 80073e0:	e7df      	b.n	80073a2 <_fflush_r+0x22>
 80073e2:	4b04      	ldr	r3, [pc, #16]	; (80073f4 <_fflush_r+0x74>)
 80073e4:	429c      	cmp	r4, r3
 80073e6:	bf08      	it	eq
 80073e8:	68ec      	ldreq	r4, [r5, #12]
 80073ea:	e7da      	b.n	80073a2 <_fflush_r+0x22>
 80073ec:	0800963c 	.word	0x0800963c
 80073f0:	0800965c 	.word	0x0800965c
 80073f4:	0800961c 	.word	0x0800961c

080073f8 <fiprintf>:
 80073f8:	b40e      	push	{r1, r2, r3}
 80073fa:	b503      	push	{r0, r1, lr}
 80073fc:	4601      	mov	r1, r0
 80073fe:	ab03      	add	r3, sp, #12
 8007400:	4805      	ldr	r0, [pc, #20]	; (8007418 <fiprintf+0x20>)
 8007402:	f853 2b04 	ldr.w	r2, [r3], #4
 8007406:	6800      	ldr	r0, [r0, #0]
 8007408:	9301      	str	r3, [sp, #4]
 800740a:	f000 fe03 	bl	8008014 <_vfiprintf_r>
 800740e:	b002      	add	sp, #8
 8007410:	f85d eb04 	ldr.w	lr, [sp], #4
 8007414:	b003      	add	sp, #12
 8007416:	4770      	bx	lr
 8007418:	20000058 	.word	0x20000058

0800741c <_localeconv_r>:
 800741c:	4800      	ldr	r0, [pc, #0]	; (8007420 <_localeconv_r+0x4>)
 800741e:	4770      	bx	lr
 8007420:	200001ac 	.word	0x200001ac

08007424 <_lseek_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4d07      	ldr	r5, [pc, #28]	; (8007444 <_lseek_r+0x20>)
 8007428:	4604      	mov	r4, r0
 800742a:	4608      	mov	r0, r1
 800742c:	4611      	mov	r1, r2
 800742e:	2200      	movs	r2, #0
 8007430:	602a      	str	r2, [r5, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	f7fe f83f 	bl	80054b6 <_lseek>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d102      	bne.n	8007442 <_lseek_r+0x1e>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	b103      	cbz	r3, 8007442 <_lseek_r+0x1e>
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	200004b8 	.word	0x200004b8

08007448 <__swhatbuf_r>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	460e      	mov	r6, r1
 800744c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007450:	2900      	cmp	r1, #0
 8007452:	b096      	sub	sp, #88	; 0x58
 8007454:	4614      	mov	r4, r2
 8007456:	461d      	mov	r5, r3
 8007458:	da08      	bge.n	800746c <__swhatbuf_r+0x24>
 800745a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	602a      	str	r2, [r5, #0]
 8007462:	061a      	lsls	r2, r3, #24
 8007464:	d410      	bmi.n	8007488 <__swhatbuf_r+0x40>
 8007466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800746a:	e00e      	b.n	800748a <__swhatbuf_r+0x42>
 800746c:	466a      	mov	r2, sp
 800746e:	f000 ff1b 	bl	80082a8 <_fstat_r>
 8007472:	2800      	cmp	r0, #0
 8007474:	dbf1      	blt.n	800745a <__swhatbuf_r+0x12>
 8007476:	9a01      	ldr	r2, [sp, #4]
 8007478:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800747c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007480:	425a      	negs	r2, r3
 8007482:	415a      	adcs	r2, r3
 8007484:	602a      	str	r2, [r5, #0]
 8007486:	e7ee      	b.n	8007466 <__swhatbuf_r+0x1e>
 8007488:	2340      	movs	r3, #64	; 0x40
 800748a:	2000      	movs	r0, #0
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	b016      	add	sp, #88	; 0x58
 8007490:	bd70      	pop	{r4, r5, r6, pc}
	...

08007494 <__smakebuf_r>:
 8007494:	898b      	ldrh	r3, [r1, #12]
 8007496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007498:	079d      	lsls	r5, r3, #30
 800749a:	4606      	mov	r6, r0
 800749c:	460c      	mov	r4, r1
 800749e:	d507      	bpl.n	80074b0 <__smakebuf_r+0x1c>
 80074a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	6123      	str	r3, [r4, #16]
 80074a8:	2301      	movs	r3, #1
 80074aa:	6163      	str	r3, [r4, #20]
 80074ac:	b002      	add	sp, #8
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	ab01      	add	r3, sp, #4
 80074b2:	466a      	mov	r2, sp
 80074b4:	f7ff ffc8 	bl	8007448 <__swhatbuf_r>
 80074b8:	9900      	ldr	r1, [sp, #0]
 80074ba:	4605      	mov	r5, r0
 80074bc:	4630      	mov	r0, r6
 80074be:	f7fe fa0b 	bl	80058d8 <_malloc_r>
 80074c2:	b948      	cbnz	r0, 80074d8 <__smakebuf_r+0x44>
 80074c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074c8:	059a      	lsls	r2, r3, #22
 80074ca:	d4ef      	bmi.n	80074ac <__smakebuf_r+0x18>
 80074cc:	f023 0303 	bic.w	r3, r3, #3
 80074d0:	f043 0302 	orr.w	r3, r3, #2
 80074d4:	81a3      	strh	r3, [r4, #12]
 80074d6:	e7e3      	b.n	80074a0 <__smakebuf_r+0xc>
 80074d8:	4b0d      	ldr	r3, [pc, #52]	; (8007510 <__smakebuf_r+0x7c>)
 80074da:	62b3      	str	r3, [r6, #40]	; 0x28
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	6020      	str	r0, [r4, #0]
 80074e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e4:	81a3      	strh	r3, [r4, #12]
 80074e6:	9b00      	ldr	r3, [sp, #0]
 80074e8:	6163      	str	r3, [r4, #20]
 80074ea:	9b01      	ldr	r3, [sp, #4]
 80074ec:	6120      	str	r0, [r4, #16]
 80074ee:	b15b      	cbz	r3, 8007508 <__smakebuf_r+0x74>
 80074f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074f4:	4630      	mov	r0, r6
 80074f6:	f000 fee9 	bl	80082cc <_isatty_r>
 80074fa:	b128      	cbz	r0, 8007508 <__smakebuf_r+0x74>
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	f023 0303 	bic.w	r3, r3, #3
 8007502:	f043 0301 	orr.w	r3, r3, #1
 8007506:	81a3      	strh	r3, [r4, #12]
 8007508:	89a0      	ldrh	r0, [r4, #12]
 800750a:	4305      	orrs	r5, r0
 800750c:	81a5      	strh	r5, [r4, #12]
 800750e:	e7cd      	b.n	80074ac <__smakebuf_r+0x18>
 8007510:	08005679 	.word	0x08005679

08007514 <malloc>:
 8007514:	4b02      	ldr	r3, [pc, #8]	; (8007520 <malloc+0xc>)
 8007516:	4601      	mov	r1, r0
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	f7fe b9dd 	b.w	80058d8 <_malloc_r>
 800751e:	bf00      	nop
 8007520:	20000058 	.word	0x20000058

08007524 <__malloc_lock>:
 8007524:	4801      	ldr	r0, [pc, #4]	; (800752c <__malloc_lock+0x8>)
 8007526:	f7fe b99e 	b.w	8005866 <__retarget_lock_acquire_recursive>
 800752a:	bf00      	nop
 800752c:	200004ac 	.word	0x200004ac

08007530 <__malloc_unlock>:
 8007530:	4801      	ldr	r0, [pc, #4]	; (8007538 <__malloc_unlock+0x8>)
 8007532:	f7fe b999 	b.w	8005868 <__retarget_lock_release_recursive>
 8007536:	bf00      	nop
 8007538:	200004ac 	.word	0x200004ac

0800753c <_Balloc>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007540:	4604      	mov	r4, r0
 8007542:	460d      	mov	r5, r1
 8007544:	b976      	cbnz	r6, 8007564 <_Balloc+0x28>
 8007546:	2010      	movs	r0, #16
 8007548:	f7ff ffe4 	bl	8007514 <malloc>
 800754c:	4602      	mov	r2, r0
 800754e:	6260      	str	r0, [r4, #36]	; 0x24
 8007550:	b920      	cbnz	r0, 800755c <_Balloc+0x20>
 8007552:	4b18      	ldr	r3, [pc, #96]	; (80075b4 <_Balloc+0x78>)
 8007554:	4818      	ldr	r0, [pc, #96]	; (80075b8 <_Balloc+0x7c>)
 8007556:	2166      	movs	r1, #102	; 0x66
 8007558:	f7fe ffe2 	bl	8006520 <__assert_func>
 800755c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007560:	6006      	str	r6, [r0, #0]
 8007562:	60c6      	str	r6, [r0, #12]
 8007564:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007566:	68f3      	ldr	r3, [r6, #12]
 8007568:	b183      	cbz	r3, 800758c <_Balloc+0x50>
 800756a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007572:	b9b8      	cbnz	r0, 80075a4 <_Balloc+0x68>
 8007574:	2101      	movs	r1, #1
 8007576:	fa01 f605 	lsl.w	r6, r1, r5
 800757a:	1d72      	adds	r2, r6, #5
 800757c:	0092      	lsls	r2, r2, #2
 800757e:	4620      	mov	r0, r4
 8007580:	f000 fb60 	bl	8007c44 <_calloc_r>
 8007584:	b160      	cbz	r0, 80075a0 <_Balloc+0x64>
 8007586:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800758a:	e00e      	b.n	80075aa <_Balloc+0x6e>
 800758c:	2221      	movs	r2, #33	; 0x21
 800758e:	2104      	movs	r1, #4
 8007590:	4620      	mov	r0, r4
 8007592:	f000 fb57 	bl	8007c44 <_calloc_r>
 8007596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007598:	60f0      	str	r0, [r6, #12]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e4      	bne.n	800756a <_Balloc+0x2e>
 80075a0:	2000      	movs	r0, #0
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	6802      	ldr	r2, [r0, #0]
 80075a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075aa:	2300      	movs	r3, #0
 80075ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075b0:	e7f7      	b.n	80075a2 <_Balloc+0x66>
 80075b2:	bf00      	nop
 80075b4:	080096fd 	.word	0x080096fd
 80075b8:	08009780 	.word	0x08009780

080075bc <_Bfree>:
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075c0:	4605      	mov	r5, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	b976      	cbnz	r6, 80075e4 <_Bfree+0x28>
 80075c6:	2010      	movs	r0, #16
 80075c8:	f7ff ffa4 	bl	8007514 <malloc>
 80075cc:	4602      	mov	r2, r0
 80075ce:	6268      	str	r0, [r5, #36]	; 0x24
 80075d0:	b920      	cbnz	r0, 80075dc <_Bfree+0x20>
 80075d2:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <_Bfree+0x3c>)
 80075d4:	4809      	ldr	r0, [pc, #36]	; (80075fc <_Bfree+0x40>)
 80075d6:	218a      	movs	r1, #138	; 0x8a
 80075d8:	f7fe ffa2 	bl	8006520 <__assert_func>
 80075dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075e0:	6006      	str	r6, [r0, #0]
 80075e2:	60c6      	str	r6, [r0, #12]
 80075e4:	b13c      	cbz	r4, 80075f6 <_Bfree+0x3a>
 80075e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075e8:	6862      	ldr	r2, [r4, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075f0:	6021      	str	r1, [r4, #0]
 80075f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075f6:	bd70      	pop	{r4, r5, r6, pc}
 80075f8:	080096fd 	.word	0x080096fd
 80075fc:	08009780 	.word	0x08009780

08007600 <__multadd>:
 8007600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007604:	690d      	ldr	r5, [r1, #16]
 8007606:	4607      	mov	r7, r0
 8007608:	460c      	mov	r4, r1
 800760a:	461e      	mov	r6, r3
 800760c:	f101 0c14 	add.w	ip, r1, #20
 8007610:	2000      	movs	r0, #0
 8007612:	f8dc 3000 	ldr.w	r3, [ip]
 8007616:	b299      	uxth	r1, r3
 8007618:	fb02 6101 	mla	r1, r2, r1, r6
 800761c:	0c1e      	lsrs	r6, r3, #16
 800761e:	0c0b      	lsrs	r3, r1, #16
 8007620:	fb02 3306 	mla	r3, r2, r6, r3
 8007624:	b289      	uxth	r1, r1
 8007626:	3001      	adds	r0, #1
 8007628:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800762c:	4285      	cmp	r5, r0
 800762e:	f84c 1b04 	str.w	r1, [ip], #4
 8007632:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007636:	dcec      	bgt.n	8007612 <__multadd+0x12>
 8007638:	b30e      	cbz	r6, 800767e <__multadd+0x7e>
 800763a:	68a3      	ldr	r3, [r4, #8]
 800763c:	42ab      	cmp	r3, r5
 800763e:	dc19      	bgt.n	8007674 <__multadd+0x74>
 8007640:	6861      	ldr	r1, [r4, #4]
 8007642:	4638      	mov	r0, r7
 8007644:	3101      	adds	r1, #1
 8007646:	f7ff ff79 	bl	800753c <_Balloc>
 800764a:	4680      	mov	r8, r0
 800764c:	b928      	cbnz	r0, 800765a <__multadd+0x5a>
 800764e:	4602      	mov	r2, r0
 8007650:	4b0c      	ldr	r3, [pc, #48]	; (8007684 <__multadd+0x84>)
 8007652:	480d      	ldr	r0, [pc, #52]	; (8007688 <__multadd+0x88>)
 8007654:	21b5      	movs	r1, #181	; 0xb5
 8007656:	f7fe ff63 	bl	8006520 <__assert_func>
 800765a:	6922      	ldr	r2, [r4, #16]
 800765c:	3202      	adds	r2, #2
 800765e:	f104 010c 	add.w	r1, r4, #12
 8007662:	0092      	lsls	r2, r2, #2
 8007664:	300c      	adds	r0, #12
 8007666:	f7fe f900 	bl	800586a <memcpy>
 800766a:	4621      	mov	r1, r4
 800766c:	4638      	mov	r0, r7
 800766e:	f7ff ffa5 	bl	80075bc <_Bfree>
 8007672:	4644      	mov	r4, r8
 8007674:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007678:	3501      	adds	r5, #1
 800767a:	615e      	str	r6, [r3, #20]
 800767c:	6125      	str	r5, [r4, #16]
 800767e:	4620      	mov	r0, r4
 8007680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007684:	0800976f 	.word	0x0800976f
 8007688:	08009780 	.word	0x08009780

0800768c <__hi0bits>:
 800768c:	0c03      	lsrs	r3, r0, #16
 800768e:	041b      	lsls	r3, r3, #16
 8007690:	b9d3      	cbnz	r3, 80076c8 <__hi0bits+0x3c>
 8007692:	0400      	lsls	r0, r0, #16
 8007694:	2310      	movs	r3, #16
 8007696:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800769a:	bf04      	itt	eq
 800769c:	0200      	lsleq	r0, r0, #8
 800769e:	3308      	addeq	r3, #8
 80076a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076a4:	bf04      	itt	eq
 80076a6:	0100      	lsleq	r0, r0, #4
 80076a8:	3304      	addeq	r3, #4
 80076aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076ae:	bf04      	itt	eq
 80076b0:	0080      	lsleq	r0, r0, #2
 80076b2:	3302      	addeq	r3, #2
 80076b4:	2800      	cmp	r0, #0
 80076b6:	db05      	blt.n	80076c4 <__hi0bits+0x38>
 80076b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076bc:	f103 0301 	add.w	r3, r3, #1
 80076c0:	bf08      	it	eq
 80076c2:	2320      	moveq	r3, #32
 80076c4:	4618      	mov	r0, r3
 80076c6:	4770      	bx	lr
 80076c8:	2300      	movs	r3, #0
 80076ca:	e7e4      	b.n	8007696 <__hi0bits+0xa>

080076cc <__lo0bits>:
 80076cc:	6803      	ldr	r3, [r0, #0]
 80076ce:	f013 0207 	ands.w	r2, r3, #7
 80076d2:	4601      	mov	r1, r0
 80076d4:	d00b      	beq.n	80076ee <__lo0bits+0x22>
 80076d6:	07da      	lsls	r2, r3, #31
 80076d8:	d423      	bmi.n	8007722 <__lo0bits+0x56>
 80076da:	0798      	lsls	r0, r3, #30
 80076dc:	bf49      	itett	mi
 80076de:	085b      	lsrmi	r3, r3, #1
 80076e0:	089b      	lsrpl	r3, r3, #2
 80076e2:	2001      	movmi	r0, #1
 80076e4:	600b      	strmi	r3, [r1, #0]
 80076e6:	bf5c      	itt	pl
 80076e8:	600b      	strpl	r3, [r1, #0]
 80076ea:	2002      	movpl	r0, #2
 80076ec:	4770      	bx	lr
 80076ee:	b298      	uxth	r0, r3
 80076f0:	b9a8      	cbnz	r0, 800771e <__lo0bits+0x52>
 80076f2:	0c1b      	lsrs	r3, r3, #16
 80076f4:	2010      	movs	r0, #16
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	b90a      	cbnz	r2, 80076fe <__lo0bits+0x32>
 80076fa:	3008      	adds	r0, #8
 80076fc:	0a1b      	lsrs	r3, r3, #8
 80076fe:	071a      	lsls	r2, r3, #28
 8007700:	bf04      	itt	eq
 8007702:	091b      	lsreq	r3, r3, #4
 8007704:	3004      	addeq	r0, #4
 8007706:	079a      	lsls	r2, r3, #30
 8007708:	bf04      	itt	eq
 800770a:	089b      	lsreq	r3, r3, #2
 800770c:	3002      	addeq	r0, #2
 800770e:	07da      	lsls	r2, r3, #31
 8007710:	d403      	bmi.n	800771a <__lo0bits+0x4e>
 8007712:	085b      	lsrs	r3, r3, #1
 8007714:	f100 0001 	add.w	r0, r0, #1
 8007718:	d005      	beq.n	8007726 <__lo0bits+0x5a>
 800771a:	600b      	str	r3, [r1, #0]
 800771c:	4770      	bx	lr
 800771e:	4610      	mov	r0, r2
 8007720:	e7e9      	b.n	80076f6 <__lo0bits+0x2a>
 8007722:	2000      	movs	r0, #0
 8007724:	4770      	bx	lr
 8007726:	2020      	movs	r0, #32
 8007728:	4770      	bx	lr
	...

0800772c <__i2b>:
 800772c:	b510      	push	{r4, lr}
 800772e:	460c      	mov	r4, r1
 8007730:	2101      	movs	r1, #1
 8007732:	f7ff ff03 	bl	800753c <_Balloc>
 8007736:	4602      	mov	r2, r0
 8007738:	b928      	cbnz	r0, 8007746 <__i2b+0x1a>
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <__i2b+0x24>)
 800773c:	4805      	ldr	r0, [pc, #20]	; (8007754 <__i2b+0x28>)
 800773e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007742:	f7fe feed 	bl	8006520 <__assert_func>
 8007746:	2301      	movs	r3, #1
 8007748:	6144      	str	r4, [r0, #20]
 800774a:	6103      	str	r3, [r0, #16]
 800774c:	bd10      	pop	{r4, pc}
 800774e:	bf00      	nop
 8007750:	0800976f 	.word	0x0800976f
 8007754:	08009780 	.word	0x08009780

08007758 <__multiply>:
 8007758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	4691      	mov	r9, r2
 800775e:	690a      	ldr	r2, [r1, #16]
 8007760:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007764:	429a      	cmp	r2, r3
 8007766:	bfb8      	it	lt
 8007768:	460b      	movlt	r3, r1
 800776a:	460c      	mov	r4, r1
 800776c:	bfbc      	itt	lt
 800776e:	464c      	movlt	r4, r9
 8007770:	4699      	movlt	r9, r3
 8007772:	6927      	ldr	r7, [r4, #16]
 8007774:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007778:	68a3      	ldr	r3, [r4, #8]
 800777a:	6861      	ldr	r1, [r4, #4]
 800777c:	eb07 060a 	add.w	r6, r7, sl
 8007780:	42b3      	cmp	r3, r6
 8007782:	b085      	sub	sp, #20
 8007784:	bfb8      	it	lt
 8007786:	3101      	addlt	r1, #1
 8007788:	f7ff fed8 	bl	800753c <_Balloc>
 800778c:	b930      	cbnz	r0, 800779c <__multiply+0x44>
 800778e:	4602      	mov	r2, r0
 8007790:	4b44      	ldr	r3, [pc, #272]	; (80078a4 <__multiply+0x14c>)
 8007792:	4845      	ldr	r0, [pc, #276]	; (80078a8 <__multiply+0x150>)
 8007794:	f240 115d 	movw	r1, #349	; 0x15d
 8007798:	f7fe fec2 	bl	8006520 <__assert_func>
 800779c:	f100 0514 	add.w	r5, r0, #20
 80077a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077a4:	462b      	mov	r3, r5
 80077a6:	2200      	movs	r2, #0
 80077a8:	4543      	cmp	r3, r8
 80077aa:	d321      	bcc.n	80077f0 <__multiply+0x98>
 80077ac:	f104 0314 	add.w	r3, r4, #20
 80077b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077b4:	f109 0314 	add.w	r3, r9, #20
 80077b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077bc:	9202      	str	r2, [sp, #8]
 80077be:	1b3a      	subs	r2, r7, r4
 80077c0:	3a15      	subs	r2, #21
 80077c2:	f022 0203 	bic.w	r2, r2, #3
 80077c6:	3204      	adds	r2, #4
 80077c8:	f104 0115 	add.w	r1, r4, #21
 80077cc:	428f      	cmp	r7, r1
 80077ce:	bf38      	it	cc
 80077d0:	2204      	movcc	r2, #4
 80077d2:	9201      	str	r2, [sp, #4]
 80077d4:	9a02      	ldr	r2, [sp, #8]
 80077d6:	9303      	str	r3, [sp, #12]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d80c      	bhi.n	80077f6 <__multiply+0x9e>
 80077dc:	2e00      	cmp	r6, #0
 80077de:	dd03      	ble.n	80077e8 <__multiply+0x90>
 80077e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d05a      	beq.n	800789e <__multiply+0x146>
 80077e8:	6106      	str	r6, [r0, #16]
 80077ea:	b005      	add	sp, #20
 80077ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f0:	f843 2b04 	str.w	r2, [r3], #4
 80077f4:	e7d8      	b.n	80077a8 <__multiply+0x50>
 80077f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80077fa:	f1ba 0f00 	cmp.w	sl, #0
 80077fe:	d024      	beq.n	800784a <__multiply+0xf2>
 8007800:	f104 0e14 	add.w	lr, r4, #20
 8007804:	46a9      	mov	r9, r5
 8007806:	f04f 0c00 	mov.w	ip, #0
 800780a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800780e:	f8d9 1000 	ldr.w	r1, [r9]
 8007812:	fa1f fb82 	uxth.w	fp, r2
 8007816:	b289      	uxth	r1, r1
 8007818:	fb0a 110b 	mla	r1, sl, fp, r1
 800781c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007820:	f8d9 2000 	ldr.w	r2, [r9]
 8007824:	4461      	add	r1, ip
 8007826:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800782a:	fb0a c20b 	mla	r2, sl, fp, ip
 800782e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007832:	b289      	uxth	r1, r1
 8007834:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007838:	4577      	cmp	r7, lr
 800783a:	f849 1b04 	str.w	r1, [r9], #4
 800783e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007842:	d8e2      	bhi.n	800780a <__multiply+0xb2>
 8007844:	9a01      	ldr	r2, [sp, #4]
 8007846:	f845 c002 	str.w	ip, [r5, r2]
 800784a:	9a03      	ldr	r2, [sp, #12]
 800784c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007850:	3304      	adds	r3, #4
 8007852:	f1b9 0f00 	cmp.w	r9, #0
 8007856:	d020      	beq.n	800789a <__multiply+0x142>
 8007858:	6829      	ldr	r1, [r5, #0]
 800785a:	f104 0c14 	add.w	ip, r4, #20
 800785e:	46ae      	mov	lr, r5
 8007860:	f04f 0a00 	mov.w	sl, #0
 8007864:	f8bc b000 	ldrh.w	fp, [ip]
 8007868:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800786c:	fb09 220b 	mla	r2, r9, fp, r2
 8007870:	4492      	add	sl, r2
 8007872:	b289      	uxth	r1, r1
 8007874:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007878:	f84e 1b04 	str.w	r1, [lr], #4
 800787c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007880:	f8be 1000 	ldrh.w	r1, [lr]
 8007884:	0c12      	lsrs	r2, r2, #16
 8007886:	fb09 1102 	mla	r1, r9, r2, r1
 800788a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800788e:	4567      	cmp	r7, ip
 8007890:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007894:	d8e6      	bhi.n	8007864 <__multiply+0x10c>
 8007896:	9a01      	ldr	r2, [sp, #4]
 8007898:	50a9      	str	r1, [r5, r2]
 800789a:	3504      	adds	r5, #4
 800789c:	e79a      	b.n	80077d4 <__multiply+0x7c>
 800789e:	3e01      	subs	r6, #1
 80078a0:	e79c      	b.n	80077dc <__multiply+0x84>
 80078a2:	bf00      	nop
 80078a4:	0800976f 	.word	0x0800976f
 80078a8:	08009780 	.word	0x08009780

080078ac <__pow5mult>:
 80078ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b0:	4615      	mov	r5, r2
 80078b2:	f012 0203 	ands.w	r2, r2, #3
 80078b6:	4606      	mov	r6, r0
 80078b8:	460f      	mov	r7, r1
 80078ba:	d007      	beq.n	80078cc <__pow5mult+0x20>
 80078bc:	4c25      	ldr	r4, [pc, #148]	; (8007954 <__pow5mult+0xa8>)
 80078be:	3a01      	subs	r2, #1
 80078c0:	2300      	movs	r3, #0
 80078c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078c6:	f7ff fe9b 	bl	8007600 <__multadd>
 80078ca:	4607      	mov	r7, r0
 80078cc:	10ad      	asrs	r5, r5, #2
 80078ce:	d03d      	beq.n	800794c <__pow5mult+0xa0>
 80078d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078d2:	b97c      	cbnz	r4, 80078f4 <__pow5mult+0x48>
 80078d4:	2010      	movs	r0, #16
 80078d6:	f7ff fe1d 	bl	8007514 <malloc>
 80078da:	4602      	mov	r2, r0
 80078dc:	6270      	str	r0, [r6, #36]	; 0x24
 80078de:	b928      	cbnz	r0, 80078ec <__pow5mult+0x40>
 80078e0:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <__pow5mult+0xac>)
 80078e2:	481e      	ldr	r0, [pc, #120]	; (800795c <__pow5mult+0xb0>)
 80078e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078e8:	f7fe fe1a 	bl	8006520 <__assert_func>
 80078ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078f0:	6004      	str	r4, [r0, #0]
 80078f2:	60c4      	str	r4, [r0, #12]
 80078f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078fc:	b94c      	cbnz	r4, 8007912 <__pow5mult+0x66>
 80078fe:	f240 2171 	movw	r1, #625	; 0x271
 8007902:	4630      	mov	r0, r6
 8007904:	f7ff ff12 	bl	800772c <__i2b>
 8007908:	2300      	movs	r3, #0
 800790a:	f8c8 0008 	str.w	r0, [r8, #8]
 800790e:	4604      	mov	r4, r0
 8007910:	6003      	str	r3, [r0, #0]
 8007912:	f04f 0900 	mov.w	r9, #0
 8007916:	07eb      	lsls	r3, r5, #31
 8007918:	d50a      	bpl.n	8007930 <__pow5mult+0x84>
 800791a:	4639      	mov	r1, r7
 800791c:	4622      	mov	r2, r4
 800791e:	4630      	mov	r0, r6
 8007920:	f7ff ff1a 	bl	8007758 <__multiply>
 8007924:	4639      	mov	r1, r7
 8007926:	4680      	mov	r8, r0
 8007928:	4630      	mov	r0, r6
 800792a:	f7ff fe47 	bl	80075bc <_Bfree>
 800792e:	4647      	mov	r7, r8
 8007930:	106d      	asrs	r5, r5, #1
 8007932:	d00b      	beq.n	800794c <__pow5mult+0xa0>
 8007934:	6820      	ldr	r0, [r4, #0]
 8007936:	b938      	cbnz	r0, 8007948 <__pow5mult+0x9c>
 8007938:	4622      	mov	r2, r4
 800793a:	4621      	mov	r1, r4
 800793c:	4630      	mov	r0, r6
 800793e:	f7ff ff0b 	bl	8007758 <__multiply>
 8007942:	6020      	str	r0, [r4, #0]
 8007944:	f8c0 9000 	str.w	r9, [r0]
 8007948:	4604      	mov	r4, r0
 800794a:	e7e4      	b.n	8007916 <__pow5mult+0x6a>
 800794c:	4638      	mov	r0, r7
 800794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007952:	bf00      	nop
 8007954:	080098d0 	.word	0x080098d0
 8007958:	080096fd 	.word	0x080096fd
 800795c:	08009780 	.word	0x08009780

08007960 <__lshift>:
 8007960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007964:	460c      	mov	r4, r1
 8007966:	6849      	ldr	r1, [r1, #4]
 8007968:	6923      	ldr	r3, [r4, #16]
 800796a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800796e:	68a3      	ldr	r3, [r4, #8]
 8007970:	4607      	mov	r7, r0
 8007972:	4691      	mov	r9, r2
 8007974:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007978:	f108 0601 	add.w	r6, r8, #1
 800797c:	42b3      	cmp	r3, r6
 800797e:	db0b      	blt.n	8007998 <__lshift+0x38>
 8007980:	4638      	mov	r0, r7
 8007982:	f7ff fddb 	bl	800753c <_Balloc>
 8007986:	4605      	mov	r5, r0
 8007988:	b948      	cbnz	r0, 800799e <__lshift+0x3e>
 800798a:	4602      	mov	r2, r0
 800798c:	4b2a      	ldr	r3, [pc, #168]	; (8007a38 <__lshift+0xd8>)
 800798e:	482b      	ldr	r0, [pc, #172]	; (8007a3c <__lshift+0xdc>)
 8007990:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007994:	f7fe fdc4 	bl	8006520 <__assert_func>
 8007998:	3101      	adds	r1, #1
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	e7ee      	b.n	800797c <__lshift+0x1c>
 800799e:	2300      	movs	r3, #0
 80079a0:	f100 0114 	add.w	r1, r0, #20
 80079a4:	f100 0210 	add.w	r2, r0, #16
 80079a8:	4618      	mov	r0, r3
 80079aa:	4553      	cmp	r3, sl
 80079ac:	db37      	blt.n	8007a1e <__lshift+0xbe>
 80079ae:	6920      	ldr	r0, [r4, #16]
 80079b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079b4:	f104 0314 	add.w	r3, r4, #20
 80079b8:	f019 091f 	ands.w	r9, r9, #31
 80079bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80079c4:	d02f      	beq.n	8007a26 <__lshift+0xc6>
 80079c6:	f1c9 0e20 	rsb	lr, r9, #32
 80079ca:	468a      	mov	sl, r1
 80079cc:	f04f 0c00 	mov.w	ip, #0
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	fa02 f209 	lsl.w	r2, r2, r9
 80079d6:	ea42 020c 	orr.w	r2, r2, ip
 80079da:	f84a 2b04 	str.w	r2, [sl], #4
 80079de:	f853 2b04 	ldr.w	r2, [r3], #4
 80079e2:	4298      	cmp	r0, r3
 80079e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80079e8:	d8f2      	bhi.n	80079d0 <__lshift+0x70>
 80079ea:	1b03      	subs	r3, r0, r4
 80079ec:	3b15      	subs	r3, #21
 80079ee:	f023 0303 	bic.w	r3, r3, #3
 80079f2:	3304      	adds	r3, #4
 80079f4:	f104 0215 	add.w	r2, r4, #21
 80079f8:	4290      	cmp	r0, r2
 80079fa:	bf38      	it	cc
 80079fc:	2304      	movcc	r3, #4
 80079fe:	f841 c003 	str.w	ip, [r1, r3]
 8007a02:	f1bc 0f00 	cmp.w	ip, #0
 8007a06:	d001      	beq.n	8007a0c <__lshift+0xac>
 8007a08:	f108 0602 	add.w	r6, r8, #2
 8007a0c:	3e01      	subs	r6, #1
 8007a0e:	4638      	mov	r0, r7
 8007a10:	612e      	str	r6, [r5, #16]
 8007a12:	4621      	mov	r1, r4
 8007a14:	f7ff fdd2 	bl	80075bc <_Bfree>
 8007a18:	4628      	mov	r0, r5
 8007a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a22:	3301      	adds	r3, #1
 8007a24:	e7c1      	b.n	80079aa <__lshift+0x4a>
 8007a26:	3904      	subs	r1, #4
 8007a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a30:	4298      	cmp	r0, r3
 8007a32:	d8f9      	bhi.n	8007a28 <__lshift+0xc8>
 8007a34:	e7ea      	b.n	8007a0c <__lshift+0xac>
 8007a36:	bf00      	nop
 8007a38:	0800976f 	.word	0x0800976f
 8007a3c:	08009780 	.word	0x08009780

08007a40 <__mcmp>:
 8007a40:	b530      	push	{r4, r5, lr}
 8007a42:	6902      	ldr	r2, [r0, #16]
 8007a44:	690c      	ldr	r4, [r1, #16]
 8007a46:	1b12      	subs	r2, r2, r4
 8007a48:	d10e      	bne.n	8007a68 <__mcmp+0x28>
 8007a4a:	f100 0314 	add.w	r3, r0, #20
 8007a4e:	3114      	adds	r1, #20
 8007a50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a60:	42a5      	cmp	r5, r4
 8007a62:	d003      	beq.n	8007a6c <__mcmp+0x2c>
 8007a64:	d305      	bcc.n	8007a72 <__mcmp+0x32>
 8007a66:	2201      	movs	r2, #1
 8007a68:	4610      	mov	r0, r2
 8007a6a:	bd30      	pop	{r4, r5, pc}
 8007a6c:	4283      	cmp	r3, r0
 8007a6e:	d3f3      	bcc.n	8007a58 <__mcmp+0x18>
 8007a70:	e7fa      	b.n	8007a68 <__mcmp+0x28>
 8007a72:	f04f 32ff 	mov.w	r2, #4294967295
 8007a76:	e7f7      	b.n	8007a68 <__mcmp+0x28>

08007a78 <__mdiff>:
 8007a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	4606      	mov	r6, r0
 8007a80:	4611      	mov	r1, r2
 8007a82:	4620      	mov	r0, r4
 8007a84:	4690      	mov	r8, r2
 8007a86:	f7ff ffdb 	bl	8007a40 <__mcmp>
 8007a8a:	1e05      	subs	r5, r0, #0
 8007a8c:	d110      	bne.n	8007ab0 <__mdiff+0x38>
 8007a8e:	4629      	mov	r1, r5
 8007a90:	4630      	mov	r0, r6
 8007a92:	f7ff fd53 	bl	800753c <_Balloc>
 8007a96:	b930      	cbnz	r0, 8007aa6 <__mdiff+0x2e>
 8007a98:	4b3a      	ldr	r3, [pc, #232]	; (8007b84 <__mdiff+0x10c>)
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	f240 2132 	movw	r1, #562	; 0x232
 8007aa0:	4839      	ldr	r0, [pc, #228]	; (8007b88 <__mdiff+0x110>)
 8007aa2:	f7fe fd3d 	bl	8006520 <__assert_func>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007aac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab0:	bfa4      	itt	ge
 8007ab2:	4643      	movge	r3, r8
 8007ab4:	46a0      	movge	r8, r4
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007abc:	bfa6      	itte	ge
 8007abe:	461c      	movge	r4, r3
 8007ac0:	2500      	movge	r5, #0
 8007ac2:	2501      	movlt	r5, #1
 8007ac4:	f7ff fd3a 	bl	800753c <_Balloc>
 8007ac8:	b920      	cbnz	r0, 8007ad4 <__mdiff+0x5c>
 8007aca:	4b2e      	ldr	r3, [pc, #184]	; (8007b84 <__mdiff+0x10c>)
 8007acc:	4602      	mov	r2, r0
 8007ace:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ad2:	e7e5      	b.n	8007aa0 <__mdiff+0x28>
 8007ad4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ad8:	6926      	ldr	r6, [r4, #16]
 8007ada:	60c5      	str	r5, [r0, #12]
 8007adc:	f104 0914 	add.w	r9, r4, #20
 8007ae0:	f108 0514 	add.w	r5, r8, #20
 8007ae4:	f100 0e14 	add.w	lr, r0, #20
 8007ae8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007aec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007af0:	f108 0210 	add.w	r2, r8, #16
 8007af4:	46f2      	mov	sl, lr
 8007af6:	2100      	movs	r1, #0
 8007af8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007afc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b00:	fa1f f883 	uxth.w	r8, r3
 8007b04:	fa11 f18b 	uxtah	r1, r1, fp
 8007b08:	0c1b      	lsrs	r3, r3, #16
 8007b0a:	eba1 0808 	sub.w	r8, r1, r8
 8007b0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b16:	fa1f f888 	uxth.w	r8, r8
 8007b1a:	1419      	asrs	r1, r3, #16
 8007b1c:	454e      	cmp	r6, r9
 8007b1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b22:	f84a 3b04 	str.w	r3, [sl], #4
 8007b26:	d8e7      	bhi.n	8007af8 <__mdiff+0x80>
 8007b28:	1b33      	subs	r3, r6, r4
 8007b2a:	3b15      	subs	r3, #21
 8007b2c:	f023 0303 	bic.w	r3, r3, #3
 8007b30:	3304      	adds	r3, #4
 8007b32:	3415      	adds	r4, #21
 8007b34:	42a6      	cmp	r6, r4
 8007b36:	bf38      	it	cc
 8007b38:	2304      	movcc	r3, #4
 8007b3a:	441d      	add	r5, r3
 8007b3c:	4473      	add	r3, lr
 8007b3e:	469e      	mov	lr, r3
 8007b40:	462e      	mov	r6, r5
 8007b42:	4566      	cmp	r6, ip
 8007b44:	d30e      	bcc.n	8007b64 <__mdiff+0xec>
 8007b46:	f10c 0203 	add.w	r2, ip, #3
 8007b4a:	1b52      	subs	r2, r2, r5
 8007b4c:	f022 0203 	bic.w	r2, r2, #3
 8007b50:	3d03      	subs	r5, #3
 8007b52:	45ac      	cmp	ip, r5
 8007b54:	bf38      	it	cc
 8007b56:	2200      	movcc	r2, #0
 8007b58:	441a      	add	r2, r3
 8007b5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b5e:	b17b      	cbz	r3, 8007b80 <__mdiff+0x108>
 8007b60:	6107      	str	r7, [r0, #16]
 8007b62:	e7a3      	b.n	8007aac <__mdiff+0x34>
 8007b64:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b68:	fa11 f288 	uxtah	r2, r1, r8
 8007b6c:	1414      	asrs	r4, r2, #16
 8007b6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b72:	b292      	uxth	r2, r2
 8007b74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007b78:	f84e 2b04 	str.w	r2, [lr], #4
 8007b7c:	1421      	asrs	r1, r4, #16
 8007b7e:	e7e0      	b.n	8007b42 <__mdiff+0xca>
 8007b80:	3f01      	subs	r7, #1
 8007b82:	e7ea      	b.n	8007b5a <__mdiff+0xe2>
 8007b84:	0800976f 	.word	0x0800976f
 8007b88:	08009780 	.word	0x08009780

08007b8c <__d2b>:
 8007b8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b90:	4689      	mov	r9, r1
 8007b92:	2101      	movs	r1, #1
 8007b94:	ec57 6b10 	vmov	r6, r7, d0
 8007b98:	4690      	mov	r8, r2
 8007b9a:	f7ff fccf 	bl	800753c <_Balloc>
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	b930      	cbnz	r0, 8007bb0 <__d2b+0x24>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	4b25      	ldr	r3, [pc, #148]	; (8007c3c <__d2b+0xb0>)
 8007ba6:	4826      	ldr	r0, [pc, #152]	; (8007c40 <__d2b+0xb4>)
 8007ba8:	f240 310a 	movw	r1, #778	; 0x30a
 8007bac:	f7fe fcb8 	bl	8006520 <__assert_func>
 8007bb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007bb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bb8:	bb35      	cbnz	r5, 8007c08 <__d2b+0x7c>
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	9301      	str	r3, [sp, #4]
 8007bbe:	d028      	beq.n	8007c12 <__d2b+0x86>
 8007bc0:	4668      	mov	r0, sp
 8007bc2:	9600      	str	r6, [sp, #0]
 8007bc4:	f7ff fd82 	bl	80076cc <__lo0bits>
 8007bc8:	9900      	ldr	r1, [sp, #0]
 8007bca:	b300      	cbz	r0, 8007c0e <__d2b+0x82>
 8007bcc:	9a01      	ldr	r2, [sp, #4]
 8007bce:	f1c0 0320 	rsb	r3, r0, #32
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	40c2      	lsrs	r2, r0
 8007bda:	6163      	str	r3, [r4, #20]
 8007bdc:	9201      	str	r2, [sp, #4]
 8007bde:	9b01      	ldr	r3, [sp, #4]
 8007be0:	61a3      	str	r3, [r4, #24]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bf14      	ite	ne
 8007be6:	2202      	movne	r2, #2
 8007be8:	2201      	moveq	r2, #1
 8007bea:	6122      	str	r2, [r4, #16]
 8007bec:	b1d5      	cbz	r5, 8007c24 <__d2b+0x98>
 8007bee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007bf2:	4405      	add	r5, r0
 8007bf4:	f8c9 5000 	str.w	r5, [r9]
 8007bf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bfc:	f8c8 0000 	str.w	r0, [r8]
 8007c00:	4620      	mov	r0, r4
 8007c02:	b003      	add	sp, #12
 8007c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c0c:	e7d5      	b.n	8007bba <__d2b+0x2e>
 8007c0e:	6161      	str	r1, [r4, #20]
 8007c10:	e7e5      	b.n	8007bde <__d2b+0x52>
 8007c12:	a801      	add	r0, sp, #4
 8007c14:	f7ff fd5a 	bl	80076cc <__lo0bits>
 8007c18:	9b01      	ldr	r3, [sp, #4]
 8007c1a:	6163      	str	r3, [r4, #20]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	6122      	str	r2, [r4, #16]
 8007c20:	3020      	adds	r0, #32
 8007c22:	e7e3      	b.n	8007bec <__d2b+0x60>
 8007c24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c2c:	f8c9 0000 	str.w	r0, [r9]
 8007c30:	6918      	ldr	r0, [r3, #16]
 8007c32:	f7ff fd2b 	bl	800768c <__hi0bits>
 8007c36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c3a:	e7df      	b.n	8007bfc <__d2b+0x70>
 8007c3c:	0800976f 	.word	0x0800976f
 8007c40:	08009780 	.word	0x08009780

08007c44 <_calloc_r>:
 8007c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c46:	fba1 2402 	umull	r2, r4, r1, r2
 8007c4a:	b94c      	cbnz	r4, 8007c60 <_calloc_r+0x1c>
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	9201      	str	r2, [sp, #4]
 8007c50:	f7fd fe42 	bl	80058d8 <_malloc_r>
 8007c54:	9a01      	ldr	r2, [sp, #4]
 8007c56:	4605      	mov	r5, r0
 8007c58:	b930      	cbnz	r0, 8007c68 <_calloc_r+0x24>
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	b003      	add	sp, #12
 8007c5e:	bd30      	pop	{r4, r5, pc}
 8007c60:	220c      	movs	r2, #12
 8007c62:	6002      	str	r2, [r0, #0]
 8007c64:	2500      	movs	r5, #0
 8007c66:	e7f8      	b.n	8007c5a <_calloc_r+0x16>
 8007c68:	4621      	mov	r1, r4
 8007c6a:	f7fd fe0c 	bl	8005886 <memset>
 8007c6e:	e7f4      	b.n	8007c5a <_calloc_r+0x16>

08007c70 <_free_r>:
 8007c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c72:	2900      	cmp	r1, #0
 8007c74:	d044      	beq.n	8007d00 <_free_r+0x90>
 8007c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c7a:	9001      	str	r0, [sp, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f1a1 0404 	sub.w	r4, r1, #4
 8007c82:	bfb8      	it	lt
 8007c84:	18e4      	addlt	r4, r4, r3
 8007c86:	f7ff fc4d 	bl	8007524 <__malloc_lock>
 8007c8a:	4a1e      	ldr	r2, [pc, #120]	; (8007d04 <_free_r+0x94>)
 8007c8c:	9801      	ldr	r0, [sp, #4]
 8007c8e:	6813      	ldr	r3, [r2, #0]
 8007c90:	b933      	cbnz	r3, 8007ca0 <_free_r+0x30>
 8007c92:	6063      	str	r3, [r4, #4]
 8007c94:	6014      	str	r4, [r2, #0]
 8007c96:	b003      	add	sp, #12
 8007c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c9c:	f7ff bc48 	b.w	8007530 <__malloc_unlock>
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	d908      	bls.n	8007cb6 <_free_r+0x46>
 8007ca4:	6825      	ldr	r5, [r4, #0]
 8007ca6:	1961      	adds	r1, r4, r5
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	bf01      	itttt	eq
 8007cac:	6819      	ldreq	r1, [r3, #0]
 8007cae:	685b      	ldreq	r3, [r3, #4]
 8007cb0:	1949      	addeq	r1, r1, r5
 8007cb2:	6021      	streq	r1, [r4, #0]
 8007cb4:	e7ed      	b.n	8007c92 <_free_r+0x22>
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	b10b      	cbz	r3, 8007cc0 <_free_r+0x50>
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	d9fa      	bls.n	8007cb6 <_free_r+0x46>
 8007cc0:	6811      	ldr	r1, [r2, #0]
 8007cc2:	1855      	adds	r5, r2, r1
 8007cc4:	42a5      	cmp	r5, r4
 8007cc6:	d10b      	bne.n	8007ce0 <_free_r+0x70>
 8007cc8:	6824      	ldr	r4, [r4, #0]
 8007cca:	4421      	add	r1, r4
 8007ccc:	1854      	adds	r4, r2, r1
 8007cce:	42a3      	cmp	r3, r4
 8007cd0:	6011      	str	r1, [r2, #0]
 8007cd2:	d1e0      	bne.n	8007c96 <_free_r+0x26>
 8007cd4:	681c      	ldr	r4, [r3, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	6053      	str	r3, [r2, #4]
 8007cda:	4421      	add	r1, r4
 8007cdc:	6011      	str	r1, [r2, #0]
 8007cde:	e7da      	b.n	8007c96 <_free_r+0x26>
 8007ce0:	d902      	bls.n	8007ce8 <_free_r+0x78>
 8007ce2:	230c      	movs	r3, #12
 8007ce4:	6003      	str	r3, [r0, #0]
 8007ce6:	e7d6      	b.n	8007c96 <_free_r+0x26>
 8007ce8:	6825      	ldr	r5, [r4, #0]
 8007cea:	1961      	adds	r1, r4, r5
 8007cec:	428b      	cmp	r3, r1
 8007cee:	bf04      	itt	eq
 8007cf0:	6819      	ldreq	r1, [r3, #0]
 8007cf2:	685b      	ldreq	r3, [r3, #4]
 8007cf4:	6063      	str	r3, [r4, #4]
 8007cf6:	bf04      	itt	eq
 8007cf8:	1949      	addeq	r1, r1, r5
 8007cfa:	6021      	streq	r1, [r4, #0]
 8007cfc:	6054      	str	r4, [r2, #4]
 8007cfe:	e7ca      	b.n	8007c96 <_free_r+0x26>
 8007d00:	b003      	add	sp, #12
 8007d02:	bd30      	pop	{r4, r5, pc}
 8007d04:	200004b0 	.word	0x200004b0

08007d08 <__ssputs_r>:
 8007d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d0c:	688e      	ldr	r6, [r1, #8]
 8007d0e:	429e      	cmp	r6, r3
 8007d10:	4682      	mov	sl, r0
 8007d12:	460c      	mov	r4, r1
 8007d14:	4690      	mov	r8, r2
 8007d16:	461f      	mov	r7, r3
 8007d18:	d838      	bhi.n	8007d8c <__ssputs_r+0x84>
 8007d1a:	898a      	ldrh	r2, [r1, #12]
 8007d1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d20:	d032      	beq.n	8007d88 <__ssputs_r+0x80>
 8007d22:	6825      	ldr	r5, [r4, #0]
 8007d24:	6909      	ldr	r1, [r1, #16]
 8007d26:	eba5 0901 	sub.w	r9, r5, r1
 8007d2a:	6965      	ldr	r5, [r4, #20]
 8007d2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d34:	3301      	adds	r3, #1
 8007d36:	444b      	add	r3, r9
 8007d38:	106d      	asrs	r5, r5, #1
 8007d3a:	429d      	cmp	r5, r3
 8007d3c:	bf38      	it	cc
 8007d3e:	461d      	movcc	r5, r3
 8007d40:	0553      	lsls	r3, r2, #21
 8007d42:	d531      	bpl.n	8007da8 <__ssputs_r+0xa0>
 8007d44:	4629      	mov	r1, r5
 8007d46:	f7fd fdc7 	bl	80058d8 <_malloc_r>
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	b950      	cbnz	r0, 8007d64 <__ssputs_r+0x5c>
 8007d4e:	230c      	movs	r3, #12
 8007d50:	f8ca 3000 	str.w	r3, [sl]
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d5a:	81a3      	strh	r3, [r4, #12]
 8007d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d64:	6921      	ldr	r1, [r4, #16]
 8007d66:	464a      	mov	r2, r9
 8007d68:	f7fd fd7f 	bl	800586a <memcpy>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d76:	81a3      	strh	r3, [r4, #12]
 8007d78:	6126      	str	r6, [r4, #16]
 8007d7a:	6165      	str	r5, [r4, #20]
 8007d7c:	444e      	add	r6, r9
 8007d7e:	eba5 0509 	sub.w	r5, r5, r9
 8007d82:	6026      	str	r6, [r4, #0]
 8007d84:	60a5      	str	r5, [r4, #8]
 8007d86:	463e      	mov	r6, r7
 8007d88:	42be      	cmp	r6, r7
 8007d8a:	d900      	bls.n	8007d8e <__ssputs_r+0x86>
 8007d8c:	463e      	mov	r6, r7
 8007d8e:	6820      	ldr	r0, [r4, #0]
 8007d90:	4632      	mov	r2, r6
 8007d92:	4641      	mov	r1, r8
 8007d94:	f000 fabc 	bl	8008310 <memmove>
 8007d98:	68a3      	ldr	r3, [r4, #8]
 8007d9a:	1b9b      	subs	r3, r3, r6
 8007d9c:	60a3      	str	r3, [r4, #8]
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	4433      	add	r3, r6
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	2000      	movs	r0, #0
 8007da6:	e7db      	b.n	8007d60 <__ssputs_r+0x58>
 8007da8:	462a      	mov	r2, r5
 8007daa:	f000 facb 	bl	8008344 <_realloc_r>
 8007dae:	4606      	mov	r6, r0
 8007db0:	2800      	cmp	r0, #0
 8007db2:	d1e1      	bne.n	8007d78 <__ssputs_r+0x70>
 8007db4:	6921      	ldr	r1, [r4, #16]
 8007db6:	4650      	mov	r0, sl
 8007db8:	f7ff ff5a 	bl	8007c70 <_free_r>
 8007dbc:	e7c7      	b.n	8007d4e <__ssputs_r+0x46>
	...

08007dc0 <_svfiprintf_r>:
 8007dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	4698      	mov	r8, r3
 8007dc6:	898b      	ldrh	r3, [r1, #12]
 8007dc8:	061b      	lsls	r3, r3, #24
 8007dca:	b09d      	sub	sp, #116	; 0x74
 8007dcc:	4607      	mov	r7, r0
 8007dce:	460d      	mov	r5, r1
 8007dd0:	4614      	mov	r4, r2
 8007dd2:	d50e      	bpl.n	8007df2 <_svfiprintf_r+0x32>
 8007dd4:	690b      	ldr	r3, [r1, #16]
 8007dd6:	b963      	cbnz	r3, 8007df2 <_svfiprintf_r+0x32>
 8007dd8:	2140      	movs	r1, #64	; 0x40
 8007dda:	f7fd fd7d 	bl	80058d8 <_malloc_r>
 8007dde:	6028      	str	r0, [r5, #0]
 8007de0:	6128      	str	r0, [r5, #16]
 8007de2:	b920      	cbnz	r0, 8007dee <_svfiprintf_r+0x2e>
 8007de4:	230c      	movs	r3, #12
 8007de6:	603b      	str	r3, [r7, #0]
 8007de8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dec:	e0d1      	b.n	8007f92 <_svfiprintf_r+0x1d2>
 8007dee:	2340      	movs	r3, #64	; 0x40
 8007df0:	616b      	str	r3, [r5, #20]
 8007df2:	2300      	movs	r3, #0
 8007df4:	9309      	str	r3, [sp, #36]	; 0x24
 8007df6:	2320      	movs	r3, #32
 8007df8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e00:	2330      	movs	r3, #48	; 0x30
 8007e02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007fac <_svfiprintf_r+0x1ec>
 8007e06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e0a:	f04f 0901 	mov.w	r9, #1
 8007e0e:	4623      	mov	r3, r4
 8007e10:	469a      	mov	sl, r3
 8007e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e16:	b10a      	cbz	r2, 8007e1c <_svfiprintf_r+0x5c>
 8007e18:	2a25      	cmp	r2, #37	; 0x25
 8007e1a:	d1f9      	bne.n	8007e10 <_svfiprintf_r+0x50>
 8007e1c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e20:	d00b      	beq.n	8007e3a <_svfiprintf_r+0x7a>
 8007e22:	465b      	mov	r3, fp
 8007e24:	4622      	mov	r2, r4
 8007e26:	4629      	mov	r1, r5
 8007e28:	4638      	mov	r0, r7
 8007e2a:	f7ff ff6d 	bl	8007d08 <__ssputs_r>
 8007e2e:	3001      	adds	r0, #1
 8007e30:	f000 80aa 	beq.w	8007f88 <_svfiprintf_r+0x1c8>
 8007e34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e36:	445a      	add	r2, fp
 8007e38:	9209      	str	r2, [sp, #36]	; 0x24
 8007e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 80a2 	beq.w	8007f88 <_svfiprintf_r+0x1c8>
 8007e44:	2300      	movs	r3, #0
 8007e46:	f04f 32ff 	mov.w	r2, #4294967295
 8007e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e4e:	f10a 0a01 	add.w	sl, sl, #1
 8007e52:	9304      	str	r3, [sp, #16]
 8007e54:	9307      	str	r3, [sp, #28]
 8007e56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e5a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e5c:	4654      	mov	r4, sl
 8007e5e:	2205      	movs	r2, #5
 8007e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e64:	4851      	ldr	r0, [pc, #324]	; (8007fac <_svfiprintf_r+0x1ec>)
 8007e66:	f7f8 f9bb 	bl	80001e0 <memchr>
 8007e6a:	9a04      	ldr	r2, [sp, #16]
 8007e6c:	b9d8      	cbnz	r0, 8007ea6 <_svfiprintf_r+0xe6>
 8007e6e:	06d0      	lsls	r0, r2, #27
 8007e70:	bf44      	itt	mi
 8007e72:	2320      	movmi	r3, #32
 8007e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e78:	0711      	lsls	r1, r2, #28
 8007e7a:	bf44      	itt	mi
 8007e7c:	232b      	movmi	r3, #43	; 0x2b
 8007e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e82:	f89a 3000 	ldrb.w	r3, [sl]
 8007e86:	2b2a      	cmp	r3, #42	; 0x2a
 8007e88:	d015      	beq.n	8007eb6 <_svfiprintf_r+0xf6>
 8007e8a:	9a07      	ldr	r2, [sp, #28]
 8007e8c:	4654      	mov	r4, sl
 8007e8e:	2000      	movs	r0, #0
 8007e90:	f04f 0c0a 	mov.w	ip, #10
 8007e94:	4621      	mov	r1, r4
 8007e96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e9a:	3b30      	subs	r3, #48	; 0x30
 8007e9c:	2b09      	cmp	r3, #9
 8007e9e:	d94e      	bls.n	8007f3e <_svfiprintf_r+0x17e>
 8007ea0:	b1b0      	cbz	r0, 8007ed0 <_svfiprintf_r+0x110>
 8007ea2:	9207      	str	r2, [sp, #28]
 8007ea4:	e014      	b.n	8007ed0 <_svfiprintf_r+0x110>
 8007ea6:	eba0 0308 	sub.w	r3, r0, r8
 8007eaa:	fa09 f303 	lsl.w	r3, r9, r3
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	9304      	str	r3, [sp, #16]
 8007eb2:	46a2      	mov	sl, r4
 8007eb4:	e7d2      	b.n	8007e5c <_svfiprintf_r+0x9c>
 8007eb6:	9b03      	ldr	r3, [sp, #12]
 8007eb8:	1d19      	adds	r1, r3, #4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	9103      	str	r1, [sp, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	bfbb      	ittet	lt
 8007ec2:	425b      	neglt	r3, r3
 8007ec4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ec8:	9307      	strge	r3, [sp, #28]
 8007eca:	9307      	strlt	r3, [sp, #28]
 8007ecc:	bfb8      	it	lt
 8007ece:	9204      	strlt	r2, [sp, #16]
 8007ed0:	7823      	ldrb	r3, [r4, #0]
 8007ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ed4:	d10c      	bne.n	8007ef0 <_svfiprintf_r+0x130>
 8007ed6:	7863      	ldrb	r3, [r4, #1]
 8007ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eda:	d135      	bne.n	8007f48 <_svfiprintf_r+0x188>
 8007edc:	9b03      	ldr	r3, [sp, #12]
 8007ede:	1d1a      	adds	r2, r3, #4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	9203      	str	r2, [sp, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	bfb8      	it	lt
 8007ee8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007eec:	3402      	adds	r4, #2
 8007eee:	9305      	str	r3, [sp, #20]
 8007ef0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007fbc <_svfiprintf_r+0x1fc>
 8007ef4:	7821      	ldrb	r1, [r4, #0]
 8007ef6:	2203      	movs	r2, #3
 8007ef8:	4650      	mov	r0, sl
 8007efa:	f7f8 f971 	bl	80001e0 <memchr>
 8007efe:	b140      	cbz	r0, 8007f12 <_svfiprintf_r+0x152>
 8007f00:	2340      	movs	r3, #64	; 0x40
 8007f02:	eba0 000a 	sub.w	r0, r0, sl
 8007f06:	fa03 f000 	lsl.w	r0, r3, r0
 8007f0a:	9b04      	ldr	r3, [sp, #16]
 8007f0c:	4303      	orrs	r3, r0
 8007f0e:	3401      	adds	r4, #1
 8007f10:	9304      	str	r3, [sp, #16]
 8007f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f16:	4826      	ldr	r0, [pc, #152]	; (8007fb0 <_svfiprintf_r+0x1f0>)
 8007f18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f1c:	2206      	movs	r2, #6
 8007f1e:	f7f8 f95f 	bl	80001e0 <memchr>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d038      	beq.n	8007f98 <_svfiprintf_r+0x1d8>
 8007f26:	4b23      	ldr	r3, [pc, #140]	; (8007fb4 <_svfiprintf_r+0x1f4>)
 8007f28:	bb1b      	cbnz	r3, 8007f72 <_svfiprintf_r+0x1b2>
 8007f2a:	9b03      	ldr	r3, [sp, #12]
 8007f2c:	3307      	adds	r3, #7
 8007f2e:	f023 0307 	bic.w	r3, r3, #7
 8007f32:	3308      	adds	r3, #8
 8007f34:	9303      	str	r3, [sp, #12]
 8007f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f38:	4433      	add	r3, r6
 8007f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f3c:	e767      	b.n	8007e0e <_svfiprintf_r+0x4e>
 8007f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f42:	460c      	mov	r4, r1
 8007f44:	2001      	movs	r0, #1
 8007f46:	e7a5      	b.n	8007e94 <_svfiprintf_r+0xd4>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	3401      	adds	r4, #1
 8007f4c:	9305      	str	r3, [sp, #20]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	f04f 0c0a 	mov.w	ip, #10
 8007f54:	4620      	mov	r0, r4
 8007f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f5a:	3a30      	subs	r2, #48	; 0x30
 8007f5c:	2a09      	cmp	r2, #9
 8007f5e:	d903      	bls.n	8007f68 <_svfiprintf_r+0x1a8>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d0c5      	beq.n	8007ef0 <_svfiprintf_r+0x130>
 8007f64:	9105      	str	r1, [sp, #20]
 8007f66:	e7c3      	b.n	8007ef0 <_svfiprintf_r+0x130>
 8007f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e7f0      	b.n	8007f54 <_svfiprintf_r+0x194>
 8007f72:	ab03      	add	r3, sp, #12
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	462a      	mov	r2, r5
 8007f78:	4b0f      	ldr	r3, [pc, #60]	; (8007fb8 <_svfiprintf_r+0x1f8>)
 8007f7a:	a904      	add	r1, sp, #16
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	f7fd fdbf 	bl	8005b00 <_printf_float>
 8007f82:	1c42      	adds	r2, r0, #1
 8007f84:	4606      	mov	r6, r0
 8007f86:	d1d6      	bne.n	8007f36 <_svfiprintf_r+0x176>
 8007f88:	89ab      	ldrh	r3, [r5, #12]
 8007f8a:	065b      	lsls	r3, r3, #25
 8007f8c:	f53f af2c 	bmi.w	8007de8 <_svfiprintf_r+0x28>
 8007f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f92:	b01d      	add	sp, #116	; 0x74
 8007f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f98:	ab03      	add	r3, sp, #12
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	462a      	mov	r2, r5
 8007f9e:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <_svfiprintf_r+0x1f8>)
 8007fa0:	a904      	add	r1, sp, #16
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	f7fe f850 	bl	8006048 <_printf_i>
 8007fa8:	e7eb      	b.n	8007f82 <_svfiprintf_r+0x1c2>
 8007faa:	bf00      	nop
 8007fac:	080098dc 	.word	0x080098dc
 8007fb0:	080098e6 	.word	0x080098e6
 8007fb4:	08005b01 	.word	0x08005b01
 8007fb8:	08007d09 	.word	0x08007d09
 8007fbc:	080098e2 	.word	0x080098e2

08007fc0 <__sfputc_r>:
 8007fc0:	6893      	ldr	r3, [r2, #8]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	b410      	push	{r4}
 8007fc8:	6093      	str	r3, [r2, #8]
 8007fca:	da08      	bge.n	8007fde <__sfputc_r+0x1e>
 8007fcc:	6994      	ldr	r4, [r2, #24]
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	db01      	blt.n	8007fd6 <__sfputc_r+0x16>
 8007fd2:	290a      	cmp	r1, #10
 8007fd4:	d103      	bne.n	8007fde <__sfputc_r+0x1e>
 8007fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fda:	f7fe b9cf 	b.w	800637c <__swbuf_r>
 8007fde:	6813      	ldr	r3, [r2, #0]
 8007fe0:	1c58      	adds	r0, r3, #1
 8007fe2:	6010      	str	r0, [r2, #0]
 8007fe4:	7019      	strb	r1, [r3, #0]
 8007fe6:	4608      	mov	r0, r1
 8007fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <__sfputs_r>:
 8007fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	460f      	mov	r7, r1
 8007ff4:	4614      	mov	r4, r2
 8007ff6:	18d5      	adds	r5, r2, r3
 8007ff8:	42ac      	cmp	r4, r5
 8007ffa:	d101      	bne.n	8008000 <__sfputs_r+0x12>
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	e007      	b.n	8008010 <__sfputs_r+0x22>
 8008000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008004:	463a      	mov	r2, r7
 8008006:	4630      	mov	r0, r6
 8008008:	f7ff ffda 	bl	8007fc0 <__sfputc_r>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d1f3      	bne.n	8007ff8 <__sfputs_r+0xa>
 8008010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008014 <_vfiprintf_r>:
 8008014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008018:	460d      	mov	r5, r1
 800801a:	b09d      	sub	sp, #116	; 0x74
 800801c:	4614      	mov	r4, r2
 800801e:	4698      	mov	r8, r3
 8008020:	4606      	mov	r6, r0
 8008022:	b118      	cbz	r0, 800802c <_vfiprintf_r+0x18>
 8008024:	6983      	ldr	r3, [r0, #24]
 8008026:	b90b      	cbnz	r3, 800802c <_vfiprintf_r+0x18>
 8008028:	f7fd fb5a 	bl	80056e0 <__sinit>
 800802c:	4b89      	ldr	r3, [pc, #548]	; (8008254 <_vfiprintf_r+0x240>)
 800802e:	429d      	cmp	r5, r3
 8008030:	d11b      	bne.n	800806a <_vfiprintf_r+0x56>
 8008032:	6875      	ldr	r5, [r6, #4]
 8008034:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008036:	07d9      	lsls	r1, r3, #31
 8008038:	d405      	bmi.n	8008046 <_vfiprintf_r+0x32>
 800803a:	89ab      	ldrh	r3, [r5, #12]
 800803c:	059a      	lsls	r2, r3, #22
 800803e:	d402      	bmi.n	8008046 <_vfiprintf_r+0x32>
 8008040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008042:	f7fd fc10 	bl	8005866 <__retarget_lock_acquire_recursive>
 8008046:	89ab      	ldrh	r3, [r5, #12]
 8008048:	071b      	lsls	r3, r3, #28
 800804a:	d501      	bpl.n	8008050 <_vfiprintf_r+0x3c>
 800804c:	692b      	ldr	r3, [r5, #16]
 800804e:	b9eb      	cbnz	r3, 800808c <_vfiprintf_r+0x78>
 8008050:	4629      	mov	r1, r5
 8008052:	4630      	mov	r0, r6
 8008054:	f7fe f9f6 	bl	8006444 <__swsetup_r>
 8008058:	b1c0      	cbz	r0, 800808c <_vfiprintf_r+0x78>
 800805a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800805c:	07dc      	lsls	r4, r3, #31
 800805e:	d50e      	bpl.n	800807e <_vfiprintf_r+0x6a>
 8008060:	f04f 30ff 	mov.w	r0, #4294967295
 8008064:	b01d      	add	sp, #116	; 0x74
 8008066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806a:	4b7b      	ldr	r3, [pc, #492]	; (8008258 <_vfiprintf_r+0x244>)
 800806c:	429d      	cmp	r5, r3
 800806e:	d101      	bne.n	8008074 <_vfiprintf_r+0x60>
 8008070:	68b5      	ldr	r5, [r6, #8]
 8008072:	e7df      	b.n	8008034 <_vfiprintf_r+0x20>
 8008074:	4b79      	ldr	r3, [pc, #484]	; (800825c <_vfiprintf_r+0x248>)
 8008076:	429d      	cmp	r5, r3
 8008078:	bf08      	it	eq
 800807a:	68f5      	ldreq	r5, [r6, #12]
 800807c:	e7da      	b.n	8008034 <_vfiprintf_r+0x20>
 800807e:	89ab      	ldrh	r3, [r5, #12]
 8008080:	0598      	lsls	r0, r3, #22
 8008082:	d4ed      	bmi.n	8008060 <_vfiprintf_r+0x4c>
 8008084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008086:	f7fd fbef 	bl	8005868 <__retarget_lock_release_recursive>
 800808a:	e7e9      	b.n	8008060 <_vfiprintf_r+0x4c>
 800808c:	2300      	movs	r3, #0
 800808e:	9309      	str	r3, [sp, #36]	; 0x24
 8008090:	2320      	movs	r3, #32
 8008092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008096:	f8cd 800c 	str.w	r8, [sp, #12]
 800809a:	2330      	movs	r3, #48	; 0x30
 800809c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008260 <_vfiprintf_r+0x24c>
 80080a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080a4:	f04f 0901 	mov.w	r9, #1
 80080a8:	4623      	mov	r3, r4
 80080aa:	469a      	mov	sl, r3
 80080ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b0:	b10a      	cbz	r2, 80080b6 <_vfiprintf_r+0xa2>
 80080b2:	2a25      	cmp	r2, #37	; 0x25
 80080b4:	d1f9      	bne.n	80080aa <_vfiprintf_r+0x96>
 80080b6:	ebba 0b04 	subs.w	fp, sl, r4
 80080ba:	d00b      	beq.n	80080d4 <_vfiprintf_r+0xc0>
 80080bc:	465b      	mov	r3, fp
 80080be:	4622      	mov	r2, r4
 80080c0:	4629      	mov	r1, r5
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7ff ff93 	bl	8007fee <__sfputs_r>
 80080c8:	3001      	adds	r0, #1
 80080ca:	f000 80aa 	beq.w	8008222 <_vfiprintf_r+0x20e>
 80080ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d0:	445a      	add	r2, fp
 80080d2:	9209      	str	r2, [sp, #36]	; 0x24
 80080d4:	f89a 3000 	ldrb.w	r3, [sl]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 80a2 	beq.w	8008222 <_vfiprintf_r+0x20e>
 80080de:	2300      	movs	r3, #0
 80080e0:	f04f 32ff 	mov.w	r2, #4294967295
 80080e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080e8:	f10a 0a01 	add.w	sl, sl, #1
 80080ec:	9304      	str	r3, [sp, #16]
 80080ee:	9307      	str	r3, [sp, #28]
 80080f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080f4:	931a      	str	r3, [sp, #104]	; 0x68
 80080f6:	4654      	mov	r4, sl
 80080f8:	2205      	movs	r2, #5
 80080fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080fe:	4858      	ldr	r0, [pc, #352]	; (8008260 <_vfiprintf_r+0x24c>)
 8008100:	f7f8 f86e 	bl	80001e0 <memchr>
 8008104:	9a04      	ldr	r2, [sp, #16]
 8008106:	b9d8      	cbnz	r0, 8008140 <_vfiprintf_r+0x12c>
 8008108:	06d1      	lsls	r1, r2, #27
 800810a:	bf44      	itt	mi
 800810c:	2320      	movmi	r3, #32
 800810e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008112:	0713      	lsls	r3, r2, #28
 8008114:	bf44      	itt	mi
 8008116:	232b      	movmi	r3, #43	; 0x2b
 8008118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800811c:	f89a 3000 	ldrb.w	r3, [sl]
 8008120:	2b2a      	cmp	r3, #42	; 0x2a
 8008122:	d015      	beq.n	8008150 <_vfiprintf_r+0x13c>
 8008124:	9a07      	ldr	r2, [sp, #28]
 8008126:	4654      	mov	r4, sl
 8008128:	2000      	movs	r0, #0
 800812a:	f04f 0c0a 	mov.w	ip, #10
 800812e:	4621      	mov	r1, r4
 8008130:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008134:	3b30      	subs	r3, #48	; 0x30
 8008136:	2b09      	cmp	r3, #9
 8008138:	d94e      	bls.n	80081d8 <_vfiprintf_r+0x1c4>
 800813a:	b1b0      	cbz	r0, 800816a <_vfiprintf_r+0x156>
 800813c:	9207      	str	r2, [sp, #28]
 800813e:	e014      	b.n	800816a <_vfiprintf_r+0x156>
 8008140:	eba0 0308 	sub.w	r3, r0, r8
 8008144:	fa09 f303 	lsl.w	r3, r9, r3
 8008148:	4313      	orrs	r3, r2
 800814a:	9304      	str	r3, [sp, #16]
 800814c:	46a2      	mov	sl, r4
 800814e:	e7d2      	b.n	80080f6 <_vfiprintf_r+0xe2>
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	1d19      	adds	r1, r3, #4
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	9103      	str	r1, [sp, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	bfbb      	ittet	lt
 800815c:	425b      	neglt	r3, r3
 800815e:	f042 0202 	orrlt.w	r2, r2, #2
 8008162:	9307      	strge	r3, [sp, #28]
 8008164:	9307      	strlt	r3, [sp, #28]
 8008166:	bfb8      	it	lt
 8008168:	9204      	strlt	r2, [sp, #16]
 800816a:	7823      	ldrb	r3, [r4, #0]
 800816c:	2b2e      	cmp	r3, #46	; 0x2e
 800816e:	d10c      	bne.n	800818a <_vfiprintf_r+0x176>
 8008170:	7863      	ldrb	r3, [r4, #1]
 8008172:	2b2a      	cmp	r3, #42	; 0x2a
 8008174:	d135      	bne.n	80081e2 <_vfiprintf_r+0x1ce>
 8008176:	9b03      	ldr	r3, [sp, #12]
 8008178:	1d1a      	adds	r2, r3, #4
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	9203      	str	r2, [sp, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	bfb8      	it	lt
 8008182:	f04f 33ff 	movlt.w	r3, #4294967295
 8008186:	3402      	adds	r4, #2
 8008188:	9305      	str	r3, [sp, #20]
 800818a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008270 <_vfiprintf_r+0x25c>
 800818e:	7821      	ldrb	r1, [r4, #0]
 8008190:	2203      	movs	r2, #3
 8008192:	4650      	mov	r0, sl
 8008194:	f7f8 f824 	bl	80001e0 <memchr>
 8008198:	b140      	cbz	r0, 80081ac <_vfiprintf_r+0x198>
 800819a:	2340      	movs	r3, #64	; 0x40
 800819c:	eba0 000a 	sub.w	r0, r0, sl
 80081a0:	fa03 f000 	lsl.w	r0, r3, r0
 80081a4:	9b04      	ldr	r3, [sp, #16]
 80081a6:	4303      	orrs	r3, r0
 80081a8:	3401      	adds	r4, #1
 80081aa:	9304      	str	r3, [sp, #16]
 80081ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b0:	482c      	ldr	r0, [pc, #176]	; (8008264 <_vfiprintf_r+0x250>)
 80081b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081b6:	2206      	movs	r2, #6
 80081b8:	f7f8 f812 	bl	80001e0 <memchr>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d03f      	beq.n	8008240 <_vfiprintf_r+0x22c>
 80081c0:	4b29      	ldr	r3, [pc, #164]	; (8008268 <_vfiprintf_r+0x254>)
 80081c2:	bb1b      	cbnz	r3, 800820c <_vfiprintf_r+0x1f8>
 80081c4:	9b03      	ldr	r3, [sp, #12]
 80081c6:	3307      	adds	r3, #7
 80081c8:	f023 0307 	bic.w	r3, r3, #7
 80081cc:	3308      	adds	r3, #8
 80081ce:	9303      	str	r3, [sp, #12]
 80081d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d2:	443b      	add	r3, r7
 80081d4:	9309      	str	r3, [sp, #36]	; 0x24
 80081d6:	e767      	b.n	80080a8 <_vfiprintf_r+0x94>
 80081d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80081dc:	460c      	mov	r4, r1
 80081de:	2001      	movs	r0, #1
 80081e0:	e7a5      	b.n	800812e <_vfiprintf_r+0x11a>
 80081e2:	2300      	movs	r3, #0
 80081e4:	3401      	adds	r4, #1
 80081e6:	9305      	str	r3, [sp, #20]
 80081e8:	4619      	mov	r1, r3
 80081ea:	f04f 0c0a 	mov.w	ip, #10
 80081ee:	4620      	mov	r0, r4
 80081f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081f4:	3a30      	subs	r2, #48	; 0x30
 80081f6:	2a09      	cmp	r2, #9
 80081f8:	d903      	bls.n	8008202 <_vfiprintf_r+0x1ee>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0c5      	beq.n	800818a <_vfiprintf_r+0x176>
 80081fe:	9105      	str	r1, [sp, #20]
 8008200:	e7c3      	b.n	800818a <_vfiprintf_r+0x176>
 8008202:	fb0c 2101 	mla	r1, ip, r1, r2
 8008206:	4604      	mov	r4, r0
 8008208:	2301      	movs	r3, #1
 800820a:	e7f0      	b.n	80081ee <_vfiprintf_r+0x1da>
 800820c:	ab03      	add	r3, sp, #12
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	462a      	mov	r2, r5
 8008212:	4b16      	ldr	r3, [pc, #88]	; (800826c <_vfiprintf_r+0x258>)
 8008214:	a904      	add	r1, sp, #16
 8008216:	4630      	mov	r0, r6
 8008218:	f7fd fc72 	bl	8005b00 <_printf_float>
 800821c:	4607      	mov	r7, r0
 800821e:	1c78      	adds	r0, r7, #1
 8008220:	d1d6      	bne.n	80081d0 <_vfiprintf_r+0x1bc>
 8008222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008224:	07d9      	lsls	r1, r3, #31
 8008226:	d405      	bmi.n	8008234 <_vfiprintf_r+0x220>
 8008228:	89ab      	ldrh	r3, [r5, #12]
 800822a:	059a      	lsls	r2, r3, #22
 800822c:	d402      	bmi.n	8008234 <_vfiprintf_r+0x220>
 800822e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008230:	f7fd fb1a 	bl	8005868 <__retarget_lock_release_recursive>
 8008234:	89ab      	ldrh	r3, [r5, #12]
 8008236:	065b      	lsls	r3, r3, #25
 8008238:	f53f af12 	bmi.w	8008060 <_vfiprintf_r+0x4c>
 800823c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800823e:	e711      	b.n	8008064 <_vfiprintf_r+0x50>
 8008240:	ab03      	add	r3, sp, #12
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	462a      	mov	r2, r5
 8008246:	4b09      	ldr	r3, [pc, #36]	; (800826c <_vfiprintf_r+0x258>)
 8008248:	a904      	add	r1, sp, #16
 800824a:	4630      	mov	r0, r6
 800824c:	f7fd fefc 	bl	8006048 <_printf_i>
 8008250:	e7e4      	b.n	800821c <_vfiprintf_r+0x208>
 8008252:	bf00      	nop
 8008254:	0800963c 	.word	0x0800963c
 8008258:	0800965c 	.word	0x0800965c
 800825c:	0800961c 	.word	0x0800961c
 8008260:	080098dc 	.word	0x080098dc
 8008264:	080098e6 	.word	0x080098e6
 8008268:	08005b01 	.word	0x08005b01
 800826c:	08007fef 	.word	0x08007fef
 8008270:	080098e2 	.word	0x080098e2

08008274 <_read_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4d07      	ldr	r5, [pc, #28]	; (8008294 <_read_r+0x20>)
 8008278:	4604      	mov	r4, r0
 800827a:	4608      	mov	r0, r1
 800827c:	4611      	mov	r1, r2
 800827e:	2200      	movs	r2, #0
 8008280:	602a      	str	r2, [r5, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	f7fd f8bf 	bl	8005406 <_read>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d102      	bne.n	8008292 <_read_r+0x1e>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	b103      	cbz	r3, 8008292 <_read_r+0x1e>
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	200004b8 	.word	0x200004b8

08008298 <abort>:
 8008298:	b508      	push	{r3, lr}
 800829a:	2006      	movs	r0, #6
 800829c:	f000 f8aa 	bl	80083f4 <raise>
 80082a0:	2001      	movs	r0, #1
 80082a2:	f001 f827 	bl	80092f4 <_exit>
	...

080082a8 <_fstat_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d07      	ldr	r5, [pc, #28]	; (80082c8 <_fstat_r+0x20>)
 80082ac:	2300      	movs	r3, #0
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	4611      	mov	r1, r2
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	f7fd f98a 	bl	80055ce <_fstat>
 80082ba:	1c43      	adds	r3, r0, #1
 80082bc:	d102      	bne.n	80082c4 <_fstat_r+0x1c>
 80082be:	682b      	ldr	r3, [r5, #0]
 80082c0:	b103      	cbz	r3, 80082c4 <_fstat_r+0x1c>
 80082c2:	6023      	str	r3, [r4, #0]
 80082c4:	bd38      	pop	{r3, r4, r5, pc}
 80082c6:	bf00      	nop
 80082c8:	200004b8 	.word	0x200004b8

080082cc <_isatty_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d06      	ldr	r5, [pc, #24]	; (80082e8 <_isatty_r+0x1c>)
 80082d0:	2300      	movs	r3, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	f7fd f987 	bl	80055ea <_isatty>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_isatty_r+0x1a>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_isatty_r+0x1a>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	200004b8 	.word	0x200004b8

080082ec <__ascii_mbtowc>:
 80082ec:	b082      	sub	sp, #8
 80082ee:	b901      	cbnz	r1, 80082f2 <__ascii_mbtowc+0x6>
 80082f0:	a901      	add	r1, sp, #4
 80082f2:	b142      	cbz	r2, 8008306 <__ascii_mbtowc+0x1a>
 80082f4:	b14b      	cbz	r3, 800830a <__ascii_mbtowc+0x1e>
 80082f6:	7813      	ldrb	r3, [r2, #0]
 80082f8:	600b      	str	r3, [r1, #0]
 80082fa:	7812      	ldrb	r2, [r2, #0]
 80082fc:	1e10      	subs	r0, r2, #0
 80082fe:	bf18      	it	ne
 8008300:	2001      	movne	r0, #1
 8008302:	b002      	add	sp, #8
 8008304:	4770      	bx	lr
 8008306:	4610      	mov	r0, r2
 8008308:	e7fb      	b.n	8008302 <__ascii_mbtowc+0x16>
 800830a:	f06f 0001 	mvn.w	r0, #1
 800830e:	e7f8      	b.n	8008302 <__ascii_mbtowc+0x16>

08008310 <memmove>:
 8008310:	4288      	cmp	r0, r1
 8008312:	b510      	push	{r4, lr}
 8008314:	eb01 0402 	add.w	r4, r1, r2
 8008318:	d902      	bls.n	8008320 <memmove+0x10>
 800831a:	4284      	cmp	r4, r0
 800831c:	4623      	mov	r3, r4
 800831e:	d807      	bhi.n	8008330 <memmove+0x20>
 8008320:	1e43      	subs	r3, r0, #1
 8008322:	42a1      	cmp	r1, r4
 8008324:	d008      	beq.n	8008338 <memmove+0x28>
 8008326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800832a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800832e:	e7f8      	b.n	8008322 <memmove+0x12>
 8008330:	4402      	add	r2, r0
 8008332:	4601      	mov	r1, r0
 8008334:	428a      	cmp	r2, r1
 8008336:	d100      	bne.n	800833a <memmove+0x2a>
 8008338:	bd10      	pop	{r4, pc}
 800833a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800833e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008342:	e7f7      	b.n	8008334 <memmove+0x24>

08008344 <_realloc_r>:
 8008344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008348:	4680      	mov	r8, r0
 800834a:	4614      	mov	r4, r2
 800834c:	460e      	mov	r6, r1
 800834e:	b921      	cbnz	r1, 800835a <_realloc_r+0x16>
 8008350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008354:	4611      	mov	r1, r2
 8008356:	f7fd babf 	b.w	80058d8 <_malloc_r>
 800835a:	b92a      	cbnz	r2, 8008368 <_realloc_r+0x24>
 800835c:	f7ff fc88 	bl	8007c70 <_free_r>
 8008360:	4625      	mov	r5, r4
 8008362:	4628      	mov	r0, r5
 8008364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008368:	f000 f86d 	bl	8008446 <_malloc_usable_size_r>
 800836c:	4284      	cmp	r4, r0
 800836e:	4607      	mov	r7, r0
 8008370:	d802      	bhi.n	8008378 <_realloc_r+0x34>
 8008372:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008376:	d812      	bhi.n	800839e <_realloc_r+0x5a>
 8008378:	4621      	mov	r1, r4
 800837a:	4640      	mov	r0, r8
 800837c:	f7fd faac 	bl	80058d8 <_malloc_r>
 8008380:	4605      	mov	r5, r0
 8008382:	2800      	cmp	r0, #0
 8008384:	d0ed      	beq.n	8008362 <_realloc_r+0x1e>
 8008386:	42bc      	cmp	r4, r7
 8008388:	4622      	mov	r2, r4
 800838a:	4631      	mov	r1, r6
 800838c:	bf28      	it	cs
 800838e:	463a      	movcs	r2, r7
 8008390:	f7fd fa6b 	bl	800586a <memcpy>
 8008394:	4631      	mov	r1, r6
 8008396:	4640      	mov	r0, r8
 8008398:	f7ff fc6a 	bl	8007c70 <_free_r>
 800839c:	e7e1      	b.n	8008362 <_realloc_r+0x1e>
 800839e:	4635      	mov	r5, r6
 80083a0:	e7df      	b.n	8008362 <_realloc_r+0x1e>

080083a2 <_raise_r>:
 80083a2:	291f      	cmp	r1, #31
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4604      	mov	r4, r0
 80083a8:	460d      	mov	r5, r1
 80083aa:	d904      	bls.n	80083b6 <_raise_r+0x14>
 80083ac:	2316      	movs	r3, #22
 80083ae:	6003      	str	r3, [r0, #0]
 80083b0:	f04f 30ff 	mov.w	r0, #4294967295
 80083b4:	bd38      	pop	{r3, r4, r5, pc}
 80083b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80083b8:	b112      	cbz	r2, 80083c0 <_raise_r+0x1e>
 80083ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083be:	b94b      	cbnz	r3, 80083d4 <_raise_r+0x32>
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 f831 	bl	8008428 <_getpid_r>
 80083c6:	462a      	mov	r2, r5
 80083c8:	4601      	mov	r1, r0
 80083ca:	4620      	mov	r0, r4
 80083cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083d0:	f000 b818 	b.w	8008404 <_kill_r>
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d00a      	beq.n	80083ee <_raise_r+0x4c>
 80083d8:	1c59      	adds	r1, r3, #1
 80083da:	d103      	bne.n	80083e4 <_raise_r+0x42>
 80083dc:	2316      	movs	r3, #22
 80083de:	6003      	str	r3, [r0, #0]
 80083e0:	2001      	movs	r0, #1
 80083e2:	e7e7      	b.n	80083b4 <_raise_r+0x12>
 80083e4:	2400      	movs	r4, #0
 80083e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083ea:	4628      	mov	r0, r5
 80083ec:	4798      	blx	r3
 80083ee:	2000      	movs	r0, #0
 80083f0:	e7e0      	b.n	80083b4 <_raise_r+0x12>
	...

080083f4 <raise>:
 80083f4:	4b02      	ldr	r3, [pc, #8]	; (8008400 <raise+0xc>)
 80083f6:	4601      	mov	r1, r0
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	f7ff bfd2 	b.w	80083a2 <_raise_r>
 80083fe:	bf00      	nop
 8008400:	20000058 	.word	0x20000058

08008404 <_kill_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4d07      	ldr	r5, [pc, #28]	; (8008424 <_kill_r+0x20>)
 8008408:	2300      	movs	r3, #0
 800840a:	4604      	mov	r4, r0
 800840c:	4608      	mov	r0, r1
 800840e:	4611      	mov	r1, r2
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	f000 ff67 	bl	80092e4 <_kill>
 8008416:	1c43      	adds	r3, r0, #1
 8008418:	d102      	bne.n	8008420 <_kill_r+0x1c>
 800841a:	682b      	ldr	r3, [r5, #0]
 800841c:	b103      	cbz	r3, 8008420 <_kill_r+0x1c>
 800841e:	6023      	str	r3, [r4, #0]
 8008420:	bd38      	pop	{r3, r4, r5, pc}
 8008422:	bf00      	nop
 8008424:	200004b8 	.word	0x200004b8

08008428 <_getpid_r>:
 8008428:	f7fd b8ae 	b.w	8005588 <_getpid>

0800842c <__ascii_wctomb>:
 800842c:	b149      	cbz	r1, 8008442 <__ascii_wctomb+0x16>
 800842e:	2aff      	cmp	r2, #255	; 0xff
 8008430:	bf85      	ittet	hi
 8008432:	238a      	movhi	r3, #138	; 0x8a
 8008434:	6003      	strhi	r3, [r0, #0]
 8008436:	700a      	strbls	r2, [r1, #0]
 8008438:	f04f 30ff 	movhi.w	r0, #4294967295
 800843c:	bf98      	it	ls
 800843e:	2001      	movls	r0, #1
 8008440:	4770      	bx	lr
 8008442:	4608      	mov	r0, r1
 8008444:	4770      	bx	lr

08008446 <_malloc_usable_size_r>:
 8008446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844a:	1f18      	subs	r0, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	bfbc      	itt	lt
 8008450:	580b      	ldrlt	r3, [r1, r0]
 8008452:	18c0      	addlt	r0, r0, r3
 8008454:	4770      	bx	lr
	...

08008458 <pow>:
 8008458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845a:	ed2d 8b02 	vpush	{d8}
 800845e:	eeb0 8a40 	vmov.f32	s16, s0
 8008462:	eef0 8a60 	vmov.f32	s17, s1
 8008466:	ec55 4b11 	vmov	r4, r5, d1
 800846a:	f000 f891 	bl	8008590 <__ieee754_pow>
 800846e:	4622      	mov	r2, r4
 8008470:	462b      	mov	r3, r5
 8008472:	4620      	mov	r0, r4
 8008474:	4629      	mov	r1, r5
 8008476:	ec57 6b10 	vmov	r6, r7, d0
 800847a:	f7f8 fb57 	bl	8000b2c <__aeabi_dcmpun>
 800847e:	2800      	cmp	r0, #0
 8008480:	d13b      	bne.n	80084fa <pow+0xa2>
 8008482:	ec51 0b18 	vmov	r0, r1, d8
 8008486:	2200      	movs	r2, #0
 8008488:	2300      	movs	r3, #0
 800848a:	f7f8 fb1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800848e:	b1b8      	cbz	r0, 80084c0 <pow+0x68>
 8008490:	2200      	movs	r2, #0
 8008492:	2300      	movs	r3, #0
 8008494:	4620      	mov	r0, r4
 8008496:	4629      	mov	r1, r5
 8008498:	f7f8 fb16 	bl	8000ac8 <__aeabi_dcmpeq>
 800849c:	2800      	cmp	r0, #0
 800849e:	d146      	bne.n	800852e <pow+0xd6>
 80084a0:	ec45 4b10 	vmov	d0, r4, r5
 80084a4:	f000 fe8d 	bl	80091c2 <finite>
 80084a8:	b338      	cbz	r0, 80084fa <pow+0xa2>
 80084aa:	2200      	movs	r2, #0
 80084ac:	2300      	movs	r3, #0
 80084ae:	4620      	mov	r0, r4
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7f8 fb13 	bl	8000adc <__aeabi_dcmplt>
 80084b6:	b300      	cbz	r0, 80084fa <pow+0xa2>
 80084b8:	f7fd f8b4 	bl	8005624 <__errno>
 80084bc:	2322      	movs	r3, #34	; 0x22
 80084be:	e01b      	b.n	80084f8 <pow+0xa0>
 80084c0:	ec47 6b10 	vmov	d0, r6, r7
 80084c4:	f000 fe7d 	bl	80091c2 <finite>
 80084c8:	b9e0      	cbnz	r0, 8008504 <pow+0xac>
 80084ca:	eeb0 0a48 	vmov.f32	s0, s16
 80084ce:	eef0 0a68 	vmov.f32	s1, s17
 80084d2:	f000 fe76 	bl	80091c2 <finite>
 80084d6:	b1a8      	cbz	r0, 8008504 <pow+0xac>
 80084d8:	ec45 4b10 	vmov	d0, r4, r5
 80084dc:	f000 fe71 	bl	80091c2 <finite>
 80084e0:	b180      	cbz	r0, 8008504 <pow+0xac>
 80084e2:	4632      	mov	r2, r6
 80084e4:	463b      	mov	r3, r7
 80084e6:	4630      	mov	r0, r6
 80084e8:	4639      	mov	r1, r7
 80084ea:	f7f8 fb1f 	bl	8000b2c <__aeabi_dcmpun>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d0e2      	beq.n	80084b8 <pow+0x60>
 80084f2:	f7fd f897 	bl	8005624 <__errno>
 80084f6:	2321      	movs	r3, #33	; 0x21
 80084f8:	6003      	str	r3, [r0, #0]
 80084fa:	ecbd 8b02 	vpop	{d8}
 80084fe:	ec47 6b10 	vmov	d0, r6, r7
 8008502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008504:	2200      	movs	r2, #0
 8008506:	2300      	movs	r3, #0
 8008508:	4630      	mov	r0, r6
 800850a:	4639      	mov	r1, r7
 800850c:	f7f8 fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008510:	2800      	cmp	r0, #0
 8008512:	d0f2      	beq.n	80084fa <pow+0xa2>
 8008514:	eeb0 0a48 	vmov.f32	s0, s16
 8008518:	eef0 0a68 	vmov.f32	s1, s17
 800851c:	f000 fe51 	bl	80091c2 <finite>
 8008520:	2800      	cmp	r0, #0
 8008522:	d0ea      	beq.n	80084fa <pow+0xa2>
 8008524:	ec45 4b10 	vmov	d0, r4, r5
 8008528:	f000 fe4b 	bl	80091c2 <finite>
 800852c:	e7c3      	b.n	80084b6 <pow+0x5e>
 800852e:	4f01      	ldr	r7, [pc, #4]	; (8008534 <pow+0xdc>)
 8008530:	2600      	movs	r6, #0
 8008532:	e7e2      	b.n	80084fa <pow+0xa2>
 8008534:	3ff00000 	.word	0x3ff00000

08008538 <sqrt>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	ed2d 8b02 	vpush	{d8}
 800853e:	ec55 4b10 	vmov	r4, r5, d0
 8008542:	f000 fd53 	bl	8008fec <__ieee754_sqrt>
 8008546:	4622      	mov	r2, r4
 8008548:	462b      	mov	r3, r5
 800854a:	4620      	mov	r0, r4
 800854c:	4629      	mov	r1, r5
 800854e:	eeb0 8a40 	vmov.f32	s16, s0
 8008552:	eef0 8a60 	vmov.f32	s17, s1
 8008556:	f7f8 fae9 	bl	8000b2c <__aeabi_dcmpun>
 800855a:	b990      	cbnz	r0, 8008582 <sqrt+0x4a>
 800855c:	2200      	movs	r2, #0
 800855e:	2300      	movs	r3, #0
 8008560:	4620      	mov	r0, r4
 8008562:	4629      	mov	r1, r5
 8008564:	f7f8 faba 	bl	8000adc <__aeabi_dcmplt>
 8008568:	b158      	cbz	r0, 8008582 <sqrt+0x4a>
 800856a:	f7fd f85b 	bl	8005624 <__errno>
 800856e:	2321      	movs	r3, #33	; 0x21
 8008570:	6003      	str	r3, [r0, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	2300      	movs	r3, #0
 8008576:	4610      	mov	r0, r2
 8008578:	4619      	mov	r1, r3
 800857a:	f7f8 f967 	bl	800084c <__aeabi_ddiv>
 800857e:	ec41 0b18 	vmov	d8, r0, r1
 8008582:	eeb0 0a48 	vmov.f32	s0, s16
 8008586:	eef0 0a68 	vmov.f32	s1, s17
 800858a:	ecbd 8b02 	vpop	{d8}
 800858e:	bd38      	pop	{r3, r4, r5, pc}

08008590 <__ieee754_pow>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	ed2d 8b06 	vpush	{d8-d10}
 8008598:	b089      	sub	sp, #36	; 0x24
 800859a:	ed8d 1b00 	vstr	d1, [sp]
 800859e:	e9dd 2900 	ldrd	r2, r9, [sp]
 80085a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80085a6:	ea58 0102 	orrs.w	r1, r8, r2
 80085aa:	ec57 6b10 	vmov	r6, r7, d0
 80085ae:	d115      	bne.n	80085dc <__ieee754_pow+0x4c>
 80085b0:	19b3      	adds	r3, r6, r6
 80085b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80085b6:	4152      	adcs	r2, r2
 80085b8:	4299      	cmp	r1, r3
 80085ba:	4b89      	ldr	r3, [pc, #548]	; (80087e0 <__ieee754_pow+0x250>)
 80085bc:	4193      	sbcs	r3, r2
 80085be:	f080 84d2 	bcs.w	8008f66 <__ieee754_pow+0x9d6>
 80085c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085c6:	4630      	mov	r0, r6
 80085c8:	4639      	mov	r1, r7
 80085ca:	f7f7 fe5f 	bl	800028c <__adddf3>
 80085ce:	ec41 0b10 	vmov	d0, r0, r1
 80085d2:	b009      	add	sp, #36	; 0x24
 80085d4:	ecbd 8b06 	vpop	{d8-d10}
 80085d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085dc:	4b81      	ldr	r3, [pc, #516]	; (80087e4 <__ieee754_pow+0x254>)
 80085de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80085e2:	429c      	cmp	r4, r3
 80085e4:	ee10 aa10 	vmov	sl, s0
 80085e8:	463d      	mov	r5, r7
 80085ea:	dc06      	bgt.n	80085fa <__ieee754_pow+0x6a>
 80085ec:	d101      	bne.n	80085f2 <__ieee754_pow+0x62>
 80085ee:	2e00      	cmp	r6, #0
 80085f0:	d1e7      	bne.n	80085c2 <__ieee754_pow+0x32>
 80085f2:	4598      	cmp	r8, r3
 80085f4:	dc01      	bgt.n	80085fa <__ieee754_pow+0x6a>
 80085f6:	d10f      	bne.n	8008618 <__ieee754_pow+0x88>
 80085f8:	b172      	cbz	r2, 8008618 <__ieee754_pow+0x88>
 80085fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80085fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008602:	ea55 050a 	orrs.w	r5, r5, sl
 8008606:	d1dc      	bne.n	80085c2 <__ieee754_pow+0x32>
 8008608:	e9dd 3200 	ldrd	r3, r2, [sp]
 800860c:	18db      	adds	r3, r3, r3
 800860e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008612:	4152      	adcs	r2, r2
 8008614:	429d      	cmp	r5, r3
 8008616:	e7d0      	b.n	80085ba <__ieee754_pow+0x2a>
 8008618:	2d00      	cmp	r5, #0
 800861a:	da3b      	bge.n	8008694 <__ieee754_pow+0x104>
 800861c:	4b72      	ldr	r3, [pc, #456]	; (80087e8 <__ieee754_pow+0x258>)
 800861e:	4598      	cmp	r8, r3
 8008620:	dc51      	bgt.n	80086c6 <__ieee754_pow+0x136>
 8008622:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008626:	4598      	cmp	r8, r3
 8008628:	f340 84ac 	ble.w	8008f84 <__ieee754_pow+0x9f4>
 800862c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008630:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008634:	2b14      	cmp	r3, #20
 8008636:	dd0f      	ble.n	8008658 <__ieee754_pow+0xc8>
 8008638:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800863c:	fa22 f103 	lsr.w	r1, r2, r3
 8008640:	fa01 f303 	lsl.w	r3, r1, r3
 8008644:	4293      	cmp	r3, r2
 8008646:	f040 849d 	bne.w	8008f84 <__ieee754_pow+0x9f4>
 800864a:	f001 0101 	and.w	r1, r1, #1
 800864e:	f1c1 0302 	rsb	r3, r1, #2
 8008652:	9304      	str	r3, [sp, #16]
 8008654:	b182      	cbz	r2, 8008678 <__ieee754_pow+0xe8>
 8008656:	e05f      	b.n	8008718 <__ieee754_pow+0x188>
 8008658:	2a00      	cmp	r2, #0
 800865a:	d15b      	bne.n	8008714 <__ieee754_pow+0x184>
 800865c:	f1c3 0314 	rsb	r3, r3, #20
 8008660:	fa48 f103 	asr.w	r1, r8, r3
 8008664:	fa01 f303 	lsl.w	r3, r1, r3
 8008668:	4543      	cmp	r3, r8
 800866a:	f040 8488 	bne.w	8008f7e <__ieee754_pow+0x9ee>
 800866e:	f001 0101 	and.w	r1, r1, #1
 8008672:	f1c1 0302 	rsb	r3, r1, #2
 8008676:	9304      	str	r3, [sp, #16]
 8008678:	4b5c      	ldr	r3, [pc, #368]	; (80087ec <__ieee754_pow+0x25c>)
 800867a:	4598      	cmp	r8, r3
 800867c:	d132      	bne.n	80086e4 <__ieee754_pow+0x154>
 800867e:	f1b9 0f00 	cmp.w	r9, #0
 8008682:	f280 8478 	bge.w	8008f76 <__ieee754_pow+0x9e6>
 8008686:	4959      	ldr	r1, [pc, #356]	; (80087ec <__ieee754_pow+0x25c>)
 8008688:	4632      	mov	r2, r6
 800868a:	463b      	mov	r3, r7
 800868c:	2000      	movs	r0, #0
 800868e:	f7f8 f8dd 	bl	800084c <__aeabi_ddiv>
 8008692:	e79c      	b.n	80085ce <__ieee754_pow+0x3e>
 8008694:	2300      	movs	r3, #0
 8008696:	9304      	str	r3, [sp, #16]
 8008698:	2a00      	cmp	r2, #0
 800869a:	d13d      	bne.n	8008718 <__ieee754_pow+0x188>
 800869c:	4b51      	ldr	r3, [pc, #324]	; (80087e4 <__ieee754_pow+0x254>)
 800869e:	4598      	cmp	r8, r3
 80086a0:	d1ea      	bne.n	8008678 <__ieee754_pow+0xe8>
 80086a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80086a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80086aa:	ea53 030a 	orrs.w	r3, r3, sl
 80086ae:	f000 845a 	beq.w	8008f66 <__ieee754_pow+0x9d6>
 80086b2:	4b4f      	ldr	r3, [pc, #316]	; (80087f0 <__ieee754_pow+0x260>)
 80086b4:	429c      	cmp	r4, r3
 80086b6:	dd08      	ble.n	80086ca <__ieee754_pow+0x13a>
 80086b8:	f1b9 0f00 	cmp.w	r9, #0
 80086bc:	f2c0 8457 	blt.w	8008f6e <__ieee754_pow+0x9de>
 80086c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086c4:	e783      	b.n	80085ce <__ieee754_pow+0x3e>
 80086c6:	2302      	movs	r3, #2
 80086c8:	e7e5      	b.n	8008696 <__ieee754_pow+0x106>
 80086ca:	f1b9 0f00 	cmp.w	r9, #0
 80086ce:	f04f 0000 	mov.w	r0, #0
 80086d2:	f04f 0100 	mov.w	r1, #0
 80086d6:	f6bf af7a 	bge.w	80085ce <__ieee754_pow+0x3e>
 80086da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80086de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80086e2:	e774      	b.n	80085ce <__ieee754_pow+0x3e>
 80086e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80086e8:	d106      	bne.n	80086f8 <__ieee754_pow+0x168>
 80086ea:	4632      	mov	r2, r6
 80086ec:	463b      	mov	r3, r7
 80086ee:	4630      	mov	r0, r6
 80086f0:	4639      	mov	r1, r7
 80086f2:	f7f7 ff81 	bl	80005f8 <__aeabi_dmul>
 80086f6:	e76a      	b.n	80085ce <__ieee754_pow+0x3e>
 80086f8:	4b3e      	ldr	r3, [pc, #248]	; (80087f4 <__ieee754_pow+0x264>)
 80086fa:	4599      	cmp	r9, r3
 80086fc:	d10c      	bne.n	8008718 <__ieee754_pow+0x188>
 80086fe:	2d00      	cmp	r5, #0
 8008700:	db0a      	blt.n	8008718 <__ieee754_pow+0x188>
 8008702:	ec47 6b10 	vmov	d0, r6, r7
 8008706:	b009      	add	sp, #36	; 0x24
 8008708:	ecbd 8b06 	vpop	{d8-d10}
 800870c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008710:	f000 bc6c 	b.w	8008fec <__ieee754_sqrt>
 8008714:	2300      	movs	r3, #0
 8008716:	9304      	str	r3, [sp, #16]
 8008718:	ec47 6b10 	vmov	d0, r6, r7
 800871c:	f000 fd48 	bl	80091b0 <fabs>
 8008720:	ec51 0b10 	vmov	r0, r1, d0
 8008724:	f1ba 0f00 	cmp.w	sl, #0
 8008728:	d129      	bne.n	800877e <__ieee754_pow+0x1ee>
 800872a:	b124      	cbz	r4, 8008736 <__ieee754_pow+0x1a6>
 800872c:	4b2f      	ldr	r3, [pc, #188]	; (80087ec <__ieee754_pow+0x25c>)
 800872e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008732:	429a      	cmp	r2, r3
 8008734:	d123      	bne.n	800877e <__ieee754_pow+0x1ee>
 8008736:	f1b9 0f00 	cmp.w	r9, #0
 800873a:	da05      	bge.n	8008748 <__ieee754_pow+0x1b8>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	2000      	movs	r0, #0
 8008742:	492a      	ldr	r1, [pc, #168]	; (80087ec <__ieee754_pow+0x25c>)
 8008744:	f7f8 f882 	bl	800084c <__aeabi_ddiv>
 8008748:	2d00      	cmp	r5, #0
 800874a:	f6bf af40 	bge.w	80085ce <__ieee754_pow+0x3e>
 800874e:	9b04      	ldr	r3, [sp, #16]
 8008750:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008754:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008758:	4323      	orrs	r3, r4
 800875a:	d108      	bne.n	800876e <__ieee754_pow+0x1de>
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4610      	mov	r0, r2
 8008762:	4619      	mov	r1, r3
 8008764:	f7f7 fd90 	bl	8000288 <__aeabi_dsub>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	e78f      	b.n	800868e <__ieee754_pow+0xfe>
 800876e:	9b04      	ldr	r3, [sp, #16]
 8008770:	2b01      	cmp	r3, #1
 8008772:	f47f af2c 	bne.w	80085ce <__ieee754_pow+0x3e>
 8008776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800877a:	4619      	mov	r1, r3
 800877c:	e727      	b.n	80085ce <__ieee754_pow+0x3e>
 800877e:	0feb      	lsrs	r3, r5, #31
 8008780:	3b01      	subs	r3, #1
 8008782:	9306      	str	r3, [sp, #24]
 8008784:	9a06      	ldr	r2, [sp, #24]
 8008786:	9b04      	ldr	r3, [sp, #16]
 8008788:	4313      	orrs	r3, r2
 800878a:	d102      	bne.n	8008792 <__ieee754_pow+0x202>
 800878c:	4632      	mov	r2, r6
 800878e:	463b      	mov	r3, r7
 8008790:	e7e6      	b.n	8008760 <__ieee754_pow+0x1d0>
 8008792:	4b19      	ldr	r3, [pc, #100]	; (80087f8 <__ieee754_pow+0x268>)
 8008794:	4598      	cmp	r8, r3
 8008796:	f340 80fb 	ble.w	8008990 <__ieee754_pow+0x400>
 800879a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800879e:	4598      	cmp	r8, r3
 80087a0:	4b13      	ldr	r3, [pc, #76]	; (80087f0 <__ieee754_pow+0x260>)
 80087a2:	dd0c      	ble.n	80087be <__ieee754_pow+0x22e>
 80087a4:	429c      	cmp	r4, r3
 80087a6:	dc0f      	bgt.n	80087c8 <__ieee754_pow+0x238>
 80087a8:	f1b9 0f00 	cmp.w	r9, #0
 80087ac:	da0f      	bge.n	80087ce <__ieee754_pow+0x23e>
 80087ae:	2000      	movs	r0, #0
 80087b0:	b009      	add	sp, #36	; 0x24
 80087b2:	ecbd 8b06 	vpop	{d8-d10}
 80087b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ba:	f000 bcf0 	b.w	800919e <__math_oflow>
 80087be:	429c      	cmp	r4, r3
 80087c0:	dbf2      	blt.n	80087a8 <__ieee754_pow+0x218>
 80087c2:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <__ieee754_pow+0x25c>)
 80087c4:	429c      	cmp	r4, r3
 80087c6:	dd19      	ble.n	80087fc <__ieee754_pow+0x26c>
 80087c8:	f1b9 0f00 	cmp.w	r9, #0
 80087cc:	dcef      	bgt.n	80087ae <__ieee754_pow+0x21e>
 80087ce:	2000      	movs	r0, #0
 80087d0:	b009      	add	sp, #36	; 0x24
 80087d2:	ecbd 8b06 	vpop	{d8-d10}
 80087d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087da:	f000 bcd7 	b.w	800918c <__math_uflow>
 80087de:	bf00      	nop
 80087e0:	fff00000 	.word	0xfff00000
 80087e4:	7ff00000 	.word	0x7ff00000
 80087e8:	433fffff 	.word	0x433fffff
 80087ec:	3ff00000 	.word	0x3ff00000
 80087f0:	3fefffff 	.word	0x3fefffff
 80087f4:	3fe00000 	.word	0x3fe00000
 80087f8:	41e00000 	.word	0x41e00000
 80087fc:	4b60      	ldr	r3, [pc, #384]	; (8008980 <__ieee754_pow+0x3f0>)
 80087fe:	2200      	movs	r2, #0
 8008800:	f7f7 fd42 	bl	8000288 <__aeabi_dsub>
 8008804:	a354      	add	r3, pc, #336	; (adr r3, 8008958 <__ieee754_pow+0x3c8>)
 8008806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880a:	4604      	mov	r4, r0
 800880c:	460d      	mov	r5, r1
 800880e:	f7f7 fef3 	bl	80005f8 <__aeabi_dmul>
 8008812:	a353      	add	r3, pc, #332	; (adr r3, 8008960 <__ieee754_pow+0x3d0>)
 8008814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008818:	4606      	mov	r6, r0
 800881a:	460f      	mov	r7, r1
 800881c:	4620      	mov	r0, r4
 800881e:	4629      	mov	r1, r5
 8008820:	f7f7 feea 	bl	80005f8 <__aeabi_dmul>
 8008824:	4b57      	ldr	r3, [pc, #348]	; (8008984 <__ieee754_pow+0x3f4>)
 8008826:	4682      	mov	sl, r0
 8008828:	468b      	mov	fp, r1
 800882a:	2200      	movs	r2, #0
 800882c:	4620      	mov	r0, r4
 800882e:	4629      	mov	r1, r5
 8008830:	f7f7 fee2 	bl	80005f8 <__aeabi_dmul>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	a14b      	add	r1, pc, #300	; (adr r1, 8008968 <__ieee754_pow+0x3d8>)
 800883a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800883e:	f7f7 fd23 	bl	8000288 <__aeabi_dsub>
 8008842:	4622      	mov	r2, r4
 8008844:	462b      	mov	r3, r5
 8008846:	f7f7 fed7 	bl	80005f8 <__aeabi_dmul>
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	2000      	movs	r0, #0
 8008850:	494d      	ldr	r1, [pc, #308]	; (8008988 <__ieee754_pow+0x3f8>)
 8008852:	f7f7 fd19 	bl	8000288 <__aeabi_dsub>
 8008856:	4622      	mov	r2, r4
 8008858:	4680      	mov	r8, r0
 800885a:	4689      	mov	r9, r1
 800885c:	462b      	mov	r3, r5
 800885e:	4620      	mov	r0, r4
 8008860:	4629      	mov	r1, r5
 8008862:	f7f7 fec9 	bl	80005f8 <__aeabi_dmul>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	4640      	mov	r0, r8
 800886c:	4649      	mov	r1, r9
 800886e:	f7f7 fec3 	bl	80005f8 <__aeabi_dmul>
 8008872:	a33f      	add	r3, pc, #252	; (adr r3, 8008970 <__ieee754_pow+0x3e0>)
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	f7f7 febe 	bl	80005f8 <__aeabi_dmul>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4650      	mov	r0, sl
 8008882:	4659      	mov	r1, fp
 8008884:	f7f7 fd00 	bl	8000288 <__aeabi_dsub>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	4680      	mov	r8, r0
 800888e:	4689      	mov	r9, r1
 8008890:	4630      	mov	r0, r6
 8008892:	4639      	mov	r1, r7
 8008894:	f7f7 fcfa 	bl	800028c <__adddf3>
 8008898:	2000      	movs	r0, #0
 800889a:	4632      	mov	r2, r6
 800889c:	463b      	mov	r3, r7
 800889e:	4604      	mov	r4, r0
 80088a0:	460d      	mov	r5, r1
 80088a2:	f7f7 fcf1 	bl	8000288 <__aeabi_dsub>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4640      	mov	r0, r8
 80088ac:	4649      	mov	r1, r9
 80088ae:	f7f7 fceb 	bl	8000288 <__aeabi_dsub>
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	9a06      	ldr	r2, [sp, #24]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	4313      	orrs	r3, r2
 80088ba:	4682      	mov	sl, r0
 80088bc:	468b      	mov	fp, r1
 80088be:	f040 81e7 	bne.w	8008c90 <__ieee754_pow+0x700>
 80088c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008978 <__ieee754_pow+0x3e8>
 80088c6:	eeb0 8a47 	vmov.f32	s16, s14
 80088ca:	eef0 8a67 	vmov.f32	s17, s15
 80088ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80088d2:	2600      	movs	r6, #0
 80088d4:	4632      	mov	r2, r6
 80088d6:	463b      	mov	r3, r7
 80088d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088dc:	f7f7 fcd4 	bl	8000288 <__aeabi_dsub>
 80088e0:	4622      	mov	r2, r4
 80088e2:	462b      	mov	r3, r5
 80088e4:	f7f7 fe88 	bl	80005f8 <__aeabi_dmul>
 80088e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088ec:	4680      	mov	r8, r0
 80088ee:	4689      	mov	r9, r1
 80088f0:	4650      	mov	r0, sl
 80088f2:	4659      	mov	r1, fp
 80088f4:	f7f7 fe80 	bl	80005f8 <__aeabi_dmul>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	4640      	mov	r0, r8
 80088fe:	4649      	mov	r1, r9
 8008900:	f7f7 fcc4 	bl	800028c <__adddf3>
 8008904:	4632      	mov	r2, r6
 8008906:	463b      	mov	r3, r7
 8008908:	4680      	mov	r8, r0
 800890a:	4689      	mov	r9, r1
 800890c:	4620      	mov	r0, r4
 800890e:	4629      	mov	r1, r5
 8008910:	f7f7 fe72 	bl	80005f8 <__aeabi_dmul>
 8008914:	460b      	mov	r3, r1
 8008916:	4604      	mov	r4, r0
 8008918:	460d      	mov	r5, r1
 800891a:	4602      	mov	r2, r0
 800891c:	4649      	mov	r1, r9
 800891e:	4640      	mov	r0, r8
 8008920:	f7f7 fcb4 	bl	800028c <__adddf3>
 8008924:	4b19      	ldr	r3, [pc, #100]	; (800898c <__ieee754_pow+0x3fc>)
 8008926:	4299      	cmp	r1, r3
 8008928:	ec45 4b19 	vmov	d9, r4, r5
 800892c:	4606      	mov	r6, r0
 800892e:	460f      	mov	r7, r1
 8008930:	468b      	mov	fp, r1
 8008932:	f340 82f1 	ble.w	8008f18 <__ieee754_pow+0x988>
 8008936:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800893a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800893e:	4303      	orrs	r3, r0
 8008940:	f000 81e4 	beq.w	8008d0c <__ieee754_pow+0x77c>
 8008944:	ec51 0b18 	vmov	r0, r1, d8
 8008948:	2200      	movs	r2, #0
 800894a:	2300      	movs	r3, #0
 800894c:	f7f8 f8c6 	bl	8000adc <__aeabi_dcmplt>
 8008950:	3800      	subs	r0, #0
 8008952:	bf18      	it	ne
 8008954:	2001      	movne	r0, #1
 8008956:	e72b      	b.n	80087b0 <__ieee754_pow+0x220>
 8008958:	60000000 	.word	0x60000000
 800895c:	3ff71547 	.word	0x3ff71547
 8008960:	f85ddf44 	.word	0xf85ddf44
 8008964:	3e54ae0b 	.word	0x3e54ae0b
 8008968:	55555555 	.word	0x55555555
 800896c:	3fd55555 	.word	0x3fd55555
 8008970:	652b82fe 	.word	0x652b82fe
 8008974:	3ff71547 	.word	0x3ff71547
 8008978:	00000000 	.word	0x00000000
 800897c:	bff00000 	.word	0xbff00000
 8008980:	3ff00000 	.word	0x3ff00000
 8008984:	3fd00000 	.word	0x3fd00000
 8008988:	3fe00000 	.word	0x3fe00000
 800898c:	408fffff 	.word	0x408fffff
 8008990:	4bd5      	ldr	r3, [pc, #852]	; (8008ce8 <__ieee754_pow+0x758>)
 8008992:	402b      	ands	r3, r5
 8008994:	2200      	movs	r2, #0
 8008996:	b92b      	cbnz	r3, 80089a4 <__ieee754_pow+0x414>
 8008998:	4bd4      	ldr	r3, [pc, #848]	; (8008cec <__ieee754_pow+0x75c>)
 800899a:	f7f7 fe2d 	bl	80005f8 <__aeabi_dmul>
 800899e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80089a2:	460c      	mov	r4, r1
 80089a4:	1523      	asrs	r3, r4, #20
 80089a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80089aa:	4413      	add	r3, r2
 80089ac:	9305      	str	r3, [sp, #20]
 80089ae:	4bd0      	ldr	r3, [pc, #832]	; (8008cf0 <__ieee754_pow+0x760>)
 80089b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80089b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80089b8:	429c      	cmp	r4, r3
 80089ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80089be:	dd08      	ble.n	80089d2 <__ieee754_pow+0x442>
 80089c0:	4bcc      	ldr	r3, [pc, #816]	; (8008cf4 <__ieee754_pow+0x764>)
 80089c2:	429c      	cmp	r4, r3
 80089c4:	f340 8162 	ble.w	8008c8c <__ieee754_pow+0x6fc>
 80089c8:	9b05      	ldr	r3, [sp, #20]
 80089ca:	3301      	adds	r3, #1
 80089cc:	9305      	str	r3, [sp, #20]
 80089ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80089d2:	2400      	movs	r4, #0
 80089d4:	00e3      	lsls	r3, r4, #3
 80089d6:	9307      	str	r3, [sp, #28]
 80089d8:	4bc7      	ldr	r3, [pc, #796]	; (8008cf8 <__ieee754_pow+0x768>)
 80089da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089de:	ed93 7b00 	vldr	d7, [r3]
 80089e2:	4629      	mov	r1, r5
 80089e4:	ec53 2b17 	vmov	r2, r3, d7
 80089e8:	eeb0 9a47 	vmov.f32	s18, s14
 80089ec:	eef0 9a67 	vmov.f32	s19, s15
 80089f0:	4682      	mov	sl, r0
 80089f2:	f7f7 fc49 	bl	8000288 <__aeabi_dsub>
 80089f6:	4652      	mov	r2, sl
 80089f8:	4606      	mov	r6, r0
 80089fa:	460f      	mov	r7, r1
 80089fc:	462b      	mov	r3, r5
 80089fe:	ec51 0b19 	vmov	r0, r1, d9
 8008a02:	f7f7 fc43 	bl	800028c <__adddf3>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	49bb      	ldr	r1, [pc, #748]	; (8008cfc <__ieee754_pow+0x76c>)
 8008a0e:	f7f7 ff1d 	bl	800084c <__aeabi_ddiv>
 8008a12:	ec41 0b1a 	vmov	d10, r0, r1
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	4639      	mov	r1, r7
 8008a1e:	f7f7 fdeb 	bl	80005f8 <__aeabi_dmul>
 8008a22:	2300      	movs	r3, #0
 8008a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a28:	9302      	str	r3, [sp, #8]
 8008a2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008a2e:	46ab      	mov	fp, r5
 8008a30:	106d      	asrs	r5, r5, #1
 8008a32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008a36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008a3a:	ec41 0b18 	vmov	d8, r0, r1
 8008a3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008a42:	2200      	movs	r2, #0
 8008a44:	4640      	mov	r0, r8
 8008a46:	4649      	mov	r1, r9
 8008a48:	4614      	mov	r4, r2
 8008a4a:	461d      	mov	r5, r3
 8008a4c:	f7f7 fdd4 	bl	80005f8 <__aeabi_dmul>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	4630      	mov	r0, r6
 8008a56:	4639      	mov	r1, r7
 8008a58:	f7f7 fc16 	bl	8000288 <__aeabi_dsub>
 8008a5c:	ec53 2b19 	vmov	r2, r3, d9
 8008a60:	4606      	mov	r6, r0
 8008a62:	460f      	mov	r7, r1
 8008a64:	4620      	mov	r0, r4
 8008a66:	4629      	mov	r1, r5
 8008a68:	f7f7 fc0e 	bl	8000288 <__aeabi_dsub>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4650      	mov	r0, sl
 8008a72:	4659      	mov	r1, fp
 8008a74:	f7f7 fc08 	bl	8000288 <__aeabi_dsub>
 8008a78:	4642      	mov	r2, r8
 8008a7a:	464b      	mov	r3, r9
 8008a7c:	f7f7 fdbc 	bl	80005f8 <__aeabi_dmul>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4630      	mov	r0, r6
 8008a86:	4639      	mov	r1, r7
 8008a88:	f7f7 fbfe 	bl	8000288 <__aeabi_dsub>
 8008a8c:	ec53 2b1a 	vmov	r2, r3, d10
 8008a90:	f7f7 fdb2 	bl	80005f8 <__aeabi_dmul>
 8008a94:	ec53 2b18 	vmov	r2, r3, d8
 8008a98:	ec41 0b19 	vmov	d9, r0, r1
 8008a9c:	ec51 0b18 	vmov	r0, r1, d8
 8008aa0:	f7f7 fdaa 	bl	80005f8 <__aeabi_dmul>
 8008aa4:	a37c      	add	r3, pc, #496	; (adr r3, 8008c98 <__ieee754_pow+0x708>)
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	4604      	mov	r4, r0
 8008aac:	460d      	mov	r5, r1
 8008aae:	f7f7 fda3 	bl	80005f8 <__aeabi_dmul>
 8008ab2:	a37b      	add	r3, pc, #492	; (adr r3, 8008ca0 <__ieee754_pow+0x710>)
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	f7f7 fbe8 	bl	800028c <__adddf3>
 8008abc:	4622      	mov	r2, r4
 8008abe:	462b      	mov	r3, r5
 8008ac0:	f7f7 fd9a 	bl	80005f8 <__aeabi_dmul>
 8008ac4:	a378      	add	r3, pc, #480	; (adr r3, 8008ca8 <__ieee754_pow+0x718>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f7f7 fbdf 	bl	800028c <__adddf3>
 8008ace:	4622      	mov	r2, r4
 8008ad0:	462b      	mov	r3, r5
 8008ad2:	f7f7 fd91 	bl	80005f8 <__aeabi_dmul>
 8008ad6:	a376      	add	r3, pc, #472	; (adr r3, 8008cb0 <__ieee754_pow+0x720>)
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	f7f7 fbd6 	bl	800028c <__adddf3>
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	462b      	mov	r3, r5
 8008ae4:	f7f7 fd88 	bl	80005f8 <__aeabi_dmul>
 8008ae8:	a373      	add	r3, pc, #460	; (adr r3, 8008cb8 <__ieee754_pow+0x728>)
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	f7f7 fbcd 	bl	800028c <__adddf3>
 8008af2:	4622      	mov	r2, r4
 8008af4:	462b      	mov	r3, r5
 8008af6:	f7f7 fd7f 	bl	80005f8 <__aeabi_dmul>
 8008afa:	a371      	add	r3, pc, #452	; (adr r3, 8008cc0 <__ieee754_pow+0x730>)
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	f7f7 fbc4 	bl	800028c <__adddf3>
 8008b04:	4622      	mov	r2, r4
 8008b06:	4606      	mov	r6, r0
 8008b08:	460f      	mov	r7, r1
 8008b0a:	462b      	mov	r3, r5
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f7f7 fd72 	bl	80005f8 <__aeabi_dmul>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	4630      	mov	r0, r6
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	f7f7 fd6c 	bl	80005f8 <__aeabi_dmul>
 8008b20:	4642      	mov	r2, r8
 8008b22:	4604      	mov	r4, r0
 8008b24:	460d      	mov	r5, r1
 8008b26:	464b      	mov	r3, r9
 8008b28:	ec51 0b18 	vmov	r0, r1, d8
 8008b2c:	f7f7 fbae 	bl	800028c <__adddf3>
 8008b30:	ec53 2b19 	vmov	r2, r3, d9
 8008b34:	f7f7 fd60 	bl	80005f8 <__aeabi_dmul>
 8008b38:	4622      	mov	r2, r4
 8008b3a:	462b      	mov	r3, r5
 8008b3c:	f7f7 fba6 	bl	800028c <__adddf3>
 8008b40:	4642      	mov	r2, r8
 8008b42:	4682      	mov	sl, r0
 8008b44:	468b      	mov	fp, r1
 8008b46:	464b      	mov	r3, r9
 8008b48:	4640      	mov	r0, r8
 8008b4a:	4649      	mov	r1, r9
 8008b4c:	f7f7 fd54 	bl	80005f8 <__aeabi_dmul>
 8008b50:	4b6b      	ldr	r3, [pc, #428]	; (8008d00 <__ieee754_pow+0x770>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	4606      	mov	r6, r0
 8008b56:	460f      	mov	r7, r1
 8008b58:	f7f7 fb98 	bl	800028c <__adddf3>
 8008b5c:	4652      	mov	r2, sl
 8008b5e:	465b      	mov	r3, fp
 8008b60:	f7f7 fb94 	bl	800028c <__adddf3>
 8008b64:	2000      	movs	r0, #0
 8008b66:	4604      	mov	r4, r0
 8008b68:	460d      	mov	r5, r1
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4640      	mov	r0, r8
 8008b70:	4649      	mov	r1, r9
 8008b72:	f7f7 fd41 	bl	80005f8 <__aeabi_dmul>
 8008b76:	4b62      	ldr	r3, [pc, #392]	; (8008d00 <__ieee754_pow+0x770>)
 8008b78:	4680      	mov	r8, r0
 8008b7a:	4689      	mov	r9, r1
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4620      	mov	r0, r4
 8008b80:	4629      	mov	r1, r5
 8008b82:	f7f7 fb81 	bl	8000288 <__aeabi_dsub>
 8008b86:	4632      	mov	r2, r6
 8008b88:	463b      	mov	r3, r7
 8008b8a:	f7f7 fb7d 	bl	8000288 <__aeabi_dsub>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	4650      	mov	r0, sl
 8008b94:	4659      	mov	r1, fp
 8008b96:	f7f7 fb77 	bl	8000288 <__aeabi_dsub>
 8008b9a:	ec53 2b18 	vmov	r2, r3, d8
 8008b9e:	f7f7 fd2b 	bl	80005f8 <__aeabi_dmul>
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	460f      	mov	r7, r1
 8008ba8:	462b      	mov	r3, r5
 8008baa:	ec51 0b19 	vmov	r0, r1, d9
 8008bae:	f7f7 fd23 	bl	80005f8 <__aeabi_dmul>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	4639      	mov	r1, r7
 8008bba:	f7f7 fb67 	bl	800028c <__adddf3>
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	460f      	mov	r7, r1
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	4649      	mov	r1, r9
 8008bca:	f7f7 fb5f 	bl	800028c <__adddf3>
 8008bce:	a33e      	add	r3, pc, #248	; (adr r3, 8008cc8 <__ieee754_pow+0x738>)
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	460d      	mov	r5, r1
 8008bda:	f7f7 fd0d 	bl	80005f8 <__aeabi_dmul>
 8008bde:	4642      	mov	r2, r8
 8008be0:	ec41 0b18 	vmov	d8, r0, r1
 8008be4:	464b      	mov	r3, r9
 8008be6:	4620      	mov	r0, r4
 8008be8:	4629      	mov	r1, r5
 8008bea:	f7f7 fb4d 	bl	8000288 <__aeabi_dsub>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	f7f7 fb47 	bl	8000288 <__aeabi_dsub>
 8008bfa:	a335      	add	r3, pc, #212	; (adr r3, 8008cd0 <__ieee754_pow+0x740>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	f7f7 fcfa 	bl	80005f8 <__aeabi_dmul>
 8008c04:	a334      	add	r3, pc, #208	; (adr r3, 8008cd8 <__ieee754_pow+0x748>)
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	460f      	mov	r7, r1
 8008c0e:	4620      	mov	r0, r4
 8008c10:	4629      	mov	r1, r5
 8008c12:	f7f7 fcf1 	bl	80005f8 <__aeabi_dmul>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	f7f7 fb35 	bl	800028c <__adddf3>
 8008c22:	9a07      	ldr	r2, [sp, #28]
 8008c24:	4b37      	ldr	r3, [pc, #220]	; (8008d04 <__ieee754_pow+0x774>)
 8008c26:	4413      	add	r3, r2
 8008c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2c:	f7f7 fb2e 	bl	800028c <__adddf3>
 8008c30:	4682      	mov	sl, r0
 8008c32:	9805      	ldr	r0, [sp, #20]
 8008c34:	468b      	mov	fp, r1
 8008c36:	f7f7 fc75 	bl	8000524 <__aeabi_i2d>
 8008c3a:	9a07      	ldr	r2, [sp, #28]
 8008c3c:	4b32      	ldr	r3, [pc, #200]	; (8008d08 <__ieee754_pow+0x778>)
 8008c3e:	4413      	add	r3, r2
 8008c40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c44:	4606      	mov	r6, r0
 8008c46:	460f      	mov	r7, r1
 8008c48:	4652      	mov	r2, sl
 8008c4a:	465b      	mov	r3, fp
 8008c4c:	ec51 0b18 	vmov	r0, r1, d8
 8008c50:	f7f7 fb1c 	bl	800028c <__adddf3>
 8008c54:	4642      	mov	r2, r8
 8008c56:	464b      	mov	r3, r9
 8008c58:	f7f7 fb18 	bl	800028c <__adddf3>
 8008c5c:	4632      	mov	r2, r6
 8008c5e:	463b      	mov	r3, r7
 8008c60:	f7f7 fb14 	bl	800028c <__adddf3>
 8008c64:	2000      	movs	r0, #0
 8008c66:	4632      	mov	r2, r6
 8008c68:	463b      	mov	r3, r7
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	f7f7 fb0b 	bl	8000288 <__aeabi_dsub>
 8008c72:	4642      	mov	r2, r8
 8008c74:	464b      	mov	r3, r9
 8008c76:	f7f7 fb07 	bl	8000288 <__aeabi_dsub>
 8008c7a:	ec53 2b18 	vmov	r2, r3, d8
 8008c7e:	f7f7 fb03 	bl	8000288 <__aeabi_dsub>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4650      	mov	r0, sl
 8008c88:	4659      	mov	r1, fp
 8008c8a:	e610      	b.n	80088ae <__ieee754_pow+0x31e>
 8008c8c:	2401      	movs	r4, #1
 8008c8e:	e6a1      	b.n	80089d4 <__ieee754_pow+0x444>
 8008c90:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008ce0 <__ieee754_pow+0x750>
 8008c94:	e617      	b.n	80088c6 <__ieee754_pow+0x336>
 8008c96:	bf00      	nop
 8008c98:	4a454eef 	.word	0x4a454eef
 8008c9c:	3fca7e28 	.word	0x3fca7e28
 8008ca0:	93c9db65 	.word	0x93c9db65
 8008ca4:	3fcd864a 	.word	0x3fcd864a
 8008ca8:	a91d4101 	.word	0xa91d4101
 8008cac:	3fd17460 	.word	0x3fd17460
 8008cb0:	518f264d 	.word	0x518f264d
 8008cb4:	3fd55555 	.word	0x3fd55555
 8008cb8:	db6fabff 	.word	0xdb6fabff
 8008cbc:	3fdb6db6 	.word	0x3fdb6db6
 8008cc0:	33333303 	.word	0x33333303
 8008cc4:	3fe33333 	.word	0x3fe33333
 8008cc8:	e0000000 	.word	0xe0000000
 8008ccc:	3feec709 	.word	0x3feec709
 8008cd0:	dc3a03fd 	.word	0xdc3a03fd
 8008cd4:	3feec709 	.word	0x3feec709
 8008cd8:	145b01f5 	.word	0x145b01f5
 8008cdc:	be3e2fe0 	.word	0xbe3e2fe0
 8008ce0:	00000000 	.word	0x00000000
 8008ce4:	3ff00000 	.word	0x3ff00000
 8008ce8:	7ff00000 	.word	0x7ff00000
 8008cec:	43400000 	.word	0x43400000
 8008cf0:	0003988e 	.word	0x0003988e
 8008cf4:	000bb679 	.word	0x000bb679
 8008cf8:	080099f8 	.word	0x080099f8
 8008cfc:	3ff00000 	.word	0x3ff00000
 8008d00:	40080000 	.word	0x40080000
 8008d04:	08009a18 	.word	0x08009a18
 8008d08:	08009a08 	.word	0x08009a08
 8008d0c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008fe4 <__ieee754_pow+0xa54>)
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	4640      	mov	r0, r8
 8008d14:	4649      	mov	r1, r9
 8008d16:	f7f7 fab9 	bl	800028c <__adddf3>
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	ec41 0b1a 	vmov	d10, r0, r1
 8008d20:	462b      	mov	r3, r5
 8008d22:	4630      	mov	r0, r6
 8008d24:	4639      	mov	r1, r7
 8008d26:	f7f7 faaf 	bl	8000288 <__aeabi_dsub>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	ec51 0b1a 	vmov	r0, r1, d10
 8008d32:	f7f7 fef1 	bl	8000b18 <__aeabi_dcmpgt>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f47f ae04 	bne.w	8008944 <__ieee754_pow+0x3b4>
 8008d3c:	4aa4      	ldr	r2, [pc, #656]	; (8008fd0 <__ieee754_pow+0xa40>)
 8008d3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d42:	4293      	cmp	r3, r2
 8008d44:	f340 8108 	ble.w	8008f58 <__ieee754_pow+0x9c8>
 8008d48:	151b      	asrs	r3, r3, #20
 8008d4a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008d4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008d52:	fa4a f303 	asr.w	r3, sl, r3
 8008d56:	445b      	add	r3, fp
 8008d58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008d5c:	4e9d      	ldr	r6, [pc, #628]	; (8008fd4 <__ieee754_pow+0xa44>)
 8008d5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008d62:	4116      	asrs	r6, r2
 8008d64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008d68:	2000      	movs	r0, #0
 8008d6a:	ea23 0106 	bic.w	r1, r3, r6
 8008d6e:	f1c2 0214 	rsb	r2, r2, #20
 8008d72:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008d76:	fa4a fa02 	asr.w	sl, sl, r2
 8008d7a:	f1bb 0f00 	cmp.w	fp, #0
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4620      	mov	r0, r4
 8008d84:	4629      	mov	r1, r5
 8008d86:	bfb8      	it	lt
 8008d88:	f1ca 0a00 	rsblt	sl, sl, #0
 8008d8c:	f7f7 fa7c 	bl	8000288 <__aeabi_dsub>
 8008d90:	ec41 0b19 	vmov	d9, r0, r1
 8008d94:	4642      	mov	r2, r8
 8008d96:	464b      	mov	r3, r9
 8008d98:	ec51 0b19 	vmov	r0, r1, d9
 8008d9c:	f7f7 fa76 	bl	800028c <__adddf3>
 8008da0:	a37b      	add	r3, pc, #492	; (adr r3, 8008f90 <__ieee754_pow+0xa00>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	2000      	movs	r0, #0
 8008da8:	4604      	mov	r4, r0
 8008daa:	460d      	mov	r5, r1
 8008dac:	f7f7 fc24 	bl	80005f8 <__aeabi_dmul>
 8008db0:	ec53 2b19 	vmov	r2, r3, d9
 8008db4:	4606      	mov	r6, r0
 8008db6:	460f      	mov	r7, r1
 8008db8:	4620      	mov	r0, r4
 8008dba:	4629      	mov	r1, r5
 8008dbc:	f7f7 fa64 	bl	8000288 <__aeabi_dsub>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	f7f7 fa5e 	bl	8000288 <__aeabi_dsub>
 8008dcc:	a372      	add	r3, pc, #456	; (adr r3, 8008f98 <__ieee754_pow+0xa08>)
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	f7f7 fc11 	bl	80005f8 <__aeabi_dmul>
 8008dd6:	a372      	add	r3, pc, #456	; (adr r3, 8008fa0 <__ieee754_pow+0xa10>)
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	4680      	mov	r8, r0
 8008dde:	4689      	mov	r9, r1
 8008de0:	4620      	mov	r0, r4
 8008de2:	4629      	mov	r1, r5
 8008de4:	f7f7 fc08 	bl	80005f8 <__aeabi_dmul>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4640      	mov	r0, r8
 8008dee:	4649      	mov	r1, r9
 8008df0:	f7f7 fa4c 	bl	800028c <__adddf3>
 8008df4:	4604      	mov	r4, r0
 8008df6:	460d      	mov	r5, r1
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	4639      	mov	r1, r7
 8008e00:	f7f7 fa44 	bl	800028c <__adddf3>
 8008e04:	4632      	mov	r2, r6
 8008e06:	463b      	mov	r3, r7
 8008e08:	4680      	mov	r8, r0
 8008e0a:	4689      	mov	r9, r1
 8008e0c:	f7f7 fa3c 	bl	8000288 <__aeabi_dsub>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	4620      	mov	r0, r4
 8008e16:	4629      	mov	r1, r5
 8008e18:	f7f7 fa36 	bl	8000288 <__aeabi_dsub>
 8008e1c:	4642      	mov	r2, r8
 8008e1e:	4606      	mov	r6, r0
 8008e20:	460f      	mov	r7, r1
 8008e22:	464b      	mov	r3, r9
 8008e24:	4640      	mov	r0, r8
 8008e26:	4649      	mov	r1, r9
 8008e28:	f7f7 fbe6 	bl	80005f8 <__aeabi_dmul>
 8008e2c:	a35e      	add	r3, pc, #376	; (adr r3, 8008fa8 <__ieee754_pow+0xa18>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	4604      	mov	r4, r0
 8008e34:	460d      	mov	r5, r1
 8008e36:	f7f7 fbdf 	bl	80005f8 <__aeabi_dmul>
 8008e3a:	a35d      	add	r3, pc, #372	; (adr r3, 8008fb0 <__ieee754_pow+0xa20>)
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	f7f7 fa22 	bl	8000288 <__aeabi_dsub>
 8008e44:	4622      	mov	r2, r4
 8008e46:	462b      	mov	r3, r5
 8008e48:	f7f7 fbd6 	bl	80005f8 <__aeabi_dmul>
 8008e4c:	a35a      	add	r3, pc, #360	; (adr r3, 8008fb8 <__ieee754_pow+0xa28>)
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f7f7 fa1b 	bl	800028c <__adddf3>
 8008e56:	4622      	mov	r2, r4
 8008e58:	462b      	mov	r3, r5
 8008e5a:	f7f7 fbcd 	bl	80005f8 <__aeabi_dmul>
 8008e5e:	a358      	add	r3, pc, #352	; (adr r3, 8008fc0 <__ieee754_pow+0xa30>)
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	f7f7 fa10 	bl	8000288 <__aeabi_dsub>
 8008e68:	4622      	mov	r2, r4
 8008e6a:	462b      	mov	r3, r5
 8008e6c:	f7f7 fbc4 	bl	80005f8 <__aeabi_dmul>
 8008e70:	a355      	add	r3, pc, #340	; (adr r3, 8008fc8 <__ieee754_pow+0xa38>)
 8008e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e76:	f7f7 fa09 	bl	800028c <__adddf3>
 8008e7a:	4622      	mov	r2, r4
 8008e7c:	462b      	mov	r3, r5
 8008e7e:	f7f7 fbbb 	bl	80005f8 <__aeabi_dmul>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4640      	mov	r0, r8
 8008e88:	4649      	mov	r1, r9
 8008e8a:	f7f7 f9fd 	bl	8000288 <__aeabi_dsub>
 8008e8e:	4604      	mov	r4, r0
 8008e90:	460d      	mov	r5, r1
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	4640      	mov	r0, r8
 8008e98:	4649      	mov	r1, r9
 8008e9a:	f7f7 fbad 	bl	80005f8 <__aeabi_dmul>
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	ec41 0b19 	vmov	d9, r0, r1
 8008ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	4629      	mov	r1, r5
 8008eac:	f7f7 f9ec 	bl	8000288 <__aeabi_dsub>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	ec51 0b19 	vmov	r0, r1, d9
 8008eb8:	f7f7 fcc8 	bl	800084c <__aeabi_ddiv>
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	460d      	mov	r5, r1
 8008ec2:	463b      	mov	r3, r7
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	f7f7 fb96 	bl	80005f8 <__aeabi_dmul>
 8008ecc:	4632      	mov	r2, r6
 8008ece:	463b      	mov	r3, r7
 8008ed0:	f7f7 f9dc 	bl	800028c <__adddf3>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4620      	mov	r0, r4
 8008eda:	4629      	mov	r1, r5
 8008edc:	f7f7 f9d4 	bl	8000288 <__aeabi_dsub>
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	464b      	mov	r3, r9
 8008ee4:	f7f7 f9d0 	bl	8000288 <__aeabi_dsub>
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4602      	mov	r2, r0
 8008eec:	493a      	ldr	r1, [pc, #232]	; (8008fd8 <__ieee754_pow+0xa48>)
 8008eee:	2000      	movs	r0, #0
 8008ef0:	f7f7 f9ca 	bl	8000288 <__aeabi_dsub>
 8008ef4:	ec41 0b10 	vmov	d0, r0, r1
 8008ef8:	ee10 3a90 	vmov	r3, s1
 8008efc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f04:	da2b      	bge.n	8008f5e <__ieee754_pow+0x9ce>
 8008f06:	4650      	mov	r0, sl
 8008f08:	f000 f966 	bl	80091d8 <scalbn>
 8008f0c:	ec51 0b10 	vmov	r0, r1, d0
 8008f10:	ec53 2b18 	vmov	r2, r3, d8
 8008f14:	f7ff bbed 	b.w	80086f2 <__ieee754_pow+0x162>
 8008f18:	4b30      	ldr	r3, [pc, #192]	; (8008fdc <__ieee754_pow+0xa4c>)
 8008f1a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008f1e:	429e      	cmp	r6, r3
 8008f20:	f77f af0c 	ble.w	8008d3c <__ieee754_pow+0x7ac>
 8008f24:	4b2e      	ldr	r3, [pc, #184]	; (8008fe0 <__ieee754_pow+0xa50>)
 8008f26:	440b      	add	r3, r1
 8008f28:	4303      	orrs	r3, r0
 8008f2a:	d009      	beq.n	8008f40 <__ieee754_pow+0x9b0>
 8008f2c:	ec51 0b18 	vmov	r0, r1, d8
 8008f30:	2200      	movs	r2, #0
 8008f32:	2300      	movs	r3, #0
 8008f34:	f7f7 fdd2 	bl	8000adc <__aeabi_dcmplt>
 8008f38:	3800      	subs	r0, #0
 8008f3a:	bf18      	it	ne
 8008f3c:	2001      	movne	r0, #1
 8008f3e:	e447      	b.n	80087d0 <__ieee754_pow+0x240>
 8008f40:	4622      	mov	r2, r4
 8008f42:	462b      	mov	r3, r5
 8008f44:	f7f7 f9a0 	bl	8000288 <__aeabi_dsub>
 8008f48:	4642      	mov	r2, r8
 8008f4a:	464b      	mov	r3, r9
 8008f4c:	f7f7 fdda 	bl	8000b04 <__aeabi_dcmpge>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	f43f aef3 	beq.w	8008d3c <__ieee754_pow+0x7ac>
 8008f56:	e7e9      	b.n	8008f2c <__ieee754_pow+0x99c>
 8008f58:	f04f 0a00 	mov.w	sl, #0
 8008f5c:	e71a      	b.n	8008d94 <__ieee754_pow+0x804>
 8008f5e:	ec51 0b10 	vmov	r0, r1, d0
 8008f62:	4619      	mov	r1, r3
 8008f64:	e7d4      	b.n	8008f10 <__ieee754_pow+0x980>
 8008f66:	491c      	ldr	r1, [pc, #112]	; (8008fd8 <__ieee754_pow+0xa48>)
 8008f68:	2000      	movs	r0, #0
 8008f6a:	f7ff bb30 	b.w	80085ce <__ieee754_pow+0x3e>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	2100      	movs	r1, #0
 8008f72:	f7ff bb2c 	b.w	80085ce <__ieee754_pow+0x3e>
 8008f76:	4630      	mov	r0, r6
 8008f78:	4639      	mov	r1, r7
 8008f7a:	f7ff bb28 	b.w	80085ce <__ieee754_pow+0x3e>
 8008f7e:	9204      	str	r2, [sp, #16]
 8008f80:	f7ff bb7a 	b.w	8008678 <__ieee754_pow+0xe8>
 8008f84:	2300      	movs	r3, #0
 8008f86:	f7ff bb64 	b.w	8008652 <__ieee754_pow+0xc2>
 8008f8a:	bf00      	nop
 8008f8c:	f3af 8000 	nop.w
 8008f90:	00000000 	.word	0x00000000
 8008f94:	3fe62e43 	.word	0x3fe62e43
 8008f98:	fefa39ef 	.word	0xfefa39ef
 8008f9c:	3fe62e42 	.word	0x3fe62e42
 8008fa0:	0ca86c39 	.word	0x0ca86c39
 8008fa4:	be205c61 	.word	0xbe205c61
 8008fa8:	72bea4d0 	.word	0x72bea4d0
 8008fac:	3e663769 	.word	0x3e663769
 8008fb0:	c5d26bf1 	.word	0xc5d26bf1
 8008fb4:	3ebbbd41 	.word	0x3ebbbd41
 8008fb8:	af25de2c 	.word	0xaf25de2c
 8008fbc:	3f11566a 	.word	0x3f11566a
 8008fc0:	16bebd93 	.word	0x16bebd93
 8008fc4:	3f66c16c 	.word	0x3f66c16c
 8008fc8:	5555553e 	.word	0x5555553e
 8008fcc:	3fc55555 	.word	0x3fc55555
 8008fd0:	3fe00000 	.word	0x3fe00000
 8008fd4:	000fffff 	.word	0x000fffff
 8008fd8:	3ff00000 	.word	0x3ff00000
 8008fdc:	4090cbff 	.word	0x4090cbff
 8008fe0:	3f6f3400 	.word	0x3f6f3400
 8008fe4:	652b82fe 	.word	0x652b82fe
 8008fe8:	3c971547 	.word	0x3c971547

08008fec <__ieee754_sqrt>:
 8008fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff0:	ec55 4b10 	vmov	r4, r5, d0
 8008ff4:	4e55      	ldr	r6, [pc, #340]	; (800914c <__ieee754_sqrt+0x160>)
 8008ff6:	43ae      	bics	r6, r5
 8008ff8:	ee10 0a10 	vmov	r0, s0
 8008ffc:	ee10 3a10 	vmov	r3, s0
 8009000:	462a      	mov	r2, r5
 8009002:	4629      	mov	r1, r5
 8009004:	d110      	bne.n	8009028 <__ieee754_sqrt+0x3c>
 8009006:	ee10 2a10 	vmov	r2, s0
 800900a:	462b      	mov	r3, r5
 800900c:	f7f7 faf4 	bl	80005f8 <__aeabi_dmul>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4620      	mov	r0, r4
 8009016:	4629      	mov	r1, r5
 8009018:	f7f7 f938 	bl	800028c <__adddf3>
 800901c:	4604      	mov	r4, r0
 800901e:	460d      	mov	r5, r1
 8009020:	ec45 4b10 	vmov	d0, r4, r5
 8009024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009028:	2d00      	cmp	r5, #0
 800902a:	dc10      	bgt.n	800904e <__ieee754_sqrt+0x62>
 800902c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009030:	4330      	orrs	r0, r6
 8009032:	d0f5      	beq.n	8009020 <__ieee754_sqrt+0x34>
 8009034:	b15d      	cbz	r5, 800904e <__ieee754_sqrt+0x62>
 8009036:	ee10 2a10 	vmov	r2, s0
 800903a:	462b      	mov	r3, r5
 800903c:	ee10 0a10 	vmov	r0, s0
 8009040:	f7f7 f922 	bl	8000288 <__aeabi_dsub>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	f7f7 fc00 	bl	800084c <__aeabi_ddiv>
 800904c:	e7e6      	b.n	800901c <__ieee754_sqrt+0x30>
 800904e:	1512      	asrs	r2, r2, #20
 8009050:	d074      	beq.n	800913c <__ieee754_sqrt+0x150>
 8009052:	07d4      	lsls	r4, r2, #31
 8009054:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009058:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800905c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009060:	bf5e      	ittt	pl
 8009062:	0fda      	lsrpl	r2, r3, #31
 8009064:	005b      	lslpl	r3, r3, #1
 8009066:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800906a:	2400      	movs	r4, #0
 800906c:	0fda      	lsrs	r2, r3, #31
 800906e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009072:	107f      	asrs	r7, r7, #1
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	2516      	movs	r5, #22
 8009078:	4620      	mov	r0, r4
 800907a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800907e:	1886      	adds	r6, r0, r2
 8009080:	428e      	cmp	r6, r1
 8009082:	bfde      	ittt	le
 8009084:	1b89      	suble	r1, r1, r6
 8009086:	18b0      	addle	r0, r6, r2
 8009088:	18a4      	addle	r4, r4, r2
 800908a:	0049      	lsls	r1, r1, #1
 800908c:	3d01      	subs	r5, #1
 800908e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009092:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009096:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800909a:	d1f0      	bne.n	800907e <__ieee754_sqrt+0x92>
 800909c:	462a      	mov	r2, r5
 800909e:	f04f 0e20 	mov.w	lr, #32
 80090a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80090a6:	4281      	cmp	r1, r0
 80090a8:	eb06 0c05 	add.w	ip, r6, r5
 80090ac:	dc02      	bgt.n	80090b4 <__ieee754_sqrt+0xc8>
 80090ae:	d113      	bne.n	80090d8 <__ieee754_sqrt+0xec>
 80090b0:	459c      	cmp	ip, r3
 80090b2:	d811      	bhi.n	80090d8 <__ieee754_sqrt+0xec>
 80090b4:	f1bc 0f00 	cmp.w	ip, #0
 80090b8:	eb0c 0506 	add.w	r5, ip, r6
 80090bc:	da43      	bge.n	8009146 <__ieee754_sqrt+0x15a>
 80090be:	2d00      	cmp	r5, #0
 80090c0:	db41      	blt.n	8009146 <__ieee754_sqrt+0x15a>
 80090c2:	f100 0801 	add.w	r8, r0, #1
 80090c6:	1a09      	subs	r1, r1, r0
 80090c8:	459c      	cmp	ip, r3
 80090ca:	bf88      	it	hi
 80090cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80090d0:	eba3 030c 	sub.w	r3, r3, ip
 80090d4:	4432      	add	r2, r6
 80090d6:	4640      	mov	r0, r8
 80090d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80090dc:	f1be 0e01 	subs.w	lr, lr, #1
 80090e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80090e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80090e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80090ec:	d1db      	bne.n	80090a6 <__ieee754_sqrt+0xba>
 80090ee:	430b      	orrs	r3, r1
 80090f0:	d006      	beq.n	8009100 <__ieee754_sqrt+0x114>
 80090f2:	1c50      	adds	r0, r2, #1
 80090f4:	bf13      	iteet	ne
 80090f6:	3201      	addne	r2, #1
 80090f8:	3401      	addeq	r4, #1
 80090fa:	4672      	moveq	r2, lr
 80090fc:	f022 0201 	bicne.w	r2, r2, #1
 8009100:	1063      	asrs	r3, r4, #1
 8009102:	0852      	lsrs	r2, r2, #1
 8009104:	07e1      	lsls	r1, r4, #31
 8009106:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800910a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800910e:	bf48      	it	mi
 8009110:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009114:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009118:	4614      	mov	r4, r2
 800911a:	e781      	b.n	8009020 <__ieee754_sqrt+0x34>
 800911c:	0ad9      	lsrs	r1, r3, #11
 800911e:	3815      	subs	r0, #21
 8009120:	055b      	lsls	r3, r3, #21
 8009122:	2900      	cmp	r1, #0
 8009124:	d0fa      	beq.n	800911c <__ieee754_sqrt+0x130>
 8009126:	02cd      	lsls	r5, r1, #11
 8009128:	d50a      	bpl.n	8009140 <__ieee754_sqrt+0x154>
 800912a:	f1c2 0420 	rsb	r4, r2, #32
 800912e:	fa23 f404 	lsr.w	r4, r3, r4
 8009132:	1e55      	subs	r5, r2, #1
 8009134:	4093      	lsls	r3, r2
 8009136:	4321      	orrs	r1, r4
 8009138:	1b42      	subs	r2, r0, r5
 800913a:	e78a      	b.n	8009052 <__ieee754_sqrt+0x66>
 800913c:	4610      	mov	r0, r2
 800913e:	e7f0      	b.n	8009122 <__ieee754_sqrt+0x136>
 8009140:	0049      	lsls	r1, r1, #1
 8009142:	3201      	adds	r2, #1
 8009144:	e7ef      	b.n	8009126 <__ieee754_sqrt+0x13a>
 8009146:	4680      	mov	r8, r0
 8009148:	e7bd      	b.n	80090c6 <__ieee754_sqrt+0xda>
 800914a:	bf00      	nop
 800914c:	7ff00000 	.word	0x7ff00000

08009150 <with_errno>:
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	4604      	mov	r4, r0
 8009154:	460d      	mov	r5, r1
 8009156:	4616      	mov	r6, r2
 8009158:	f7fc fa64 	bl	8005624 <__errno>
 800915c:	4629      	mov	r1, r5
 800915e:	6006      	str	r6, [r0, #0]
 8009160:	4620      	mov	r0, r4
 8009162:	bd70      	pop	{r4, r5, r6, pc}

08009164 <xflow>:
 8009164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009166:	4614      	mov	r4, r2
 8009168:	461d      	mov	r5, r3
 800916a:	b108      	cbz	r0, 8009170 <xflow+0xc>
 800916c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009170:	e9cd 2300 	strd	r2, r3, [sp]
 8009174:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009178:	4620      	mov	r0, r4
 800917a:	4629      	mov	r1, r5
 800917c:	f7f7 fa3c 	bl	80005f8 <__aeabi_dmul>
 8009180:	2222      	movs	r2, #34	; 0x22
 8009182:	b003      	add	sp, #12
 8009184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009188:	f7ff bfe2 	b.w	8009150 <with_errno>

0800918c <__math_uflow>:
 800918c:	b508      	push	{r3, lr}
 800918e:	2200      	movs	r2, #0
 8009190:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009194:	f7ff ffe6 	bl	8009164 <xflow>
 8009198:	ec41 0b10 	vmov	d0, r0, r1
 800919c:	bd08      	pop	{r3, pc}

0800919e <__math_oflow>:
 800919e:	b508      	push	{r3, lr}
 80091a0:	2200      	movs	r2, #0
 80091a2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80091a6:	f7ff ffdd 	bl	8009164 <xflow>
 80091aa:	ec41 0b10 	vmov	d0, r0, r1
 80091ae:	bd08      	pop	{r3, pc}

080091b0 <fabs>:
 80091b0:	ec51 0b10 	vmov	r0, r1, d0
 80091b4:	ee10 2a10 	vmov	r2, s0
 80091b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80091bc:	ec43 2b10 	vmov	d0, r2, r3
 80091c0:	4770      	bx	lr

080091c2 <finite>:
 80091c2:	b082      	sub	sp, #8
 80091c4:	ed8d 0b00 	vstr	d0, [sp]
 80091c8:	9801      	ldr	r0, [sp, #4]
 80091ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80091ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80091d2:	0fc0      	lsrs	r0, r0, #31
 80091d4:	b002      	add	sp, #8
 80091d6:	4770      	bx	lr

080091d8 <scalbn>:
 80091d8:	b570      	push	{r4, r5, r6, lr}
 80091da:	ec55 4b10 	vmov	r4, r5, d0
 80091de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80091e2:	4606      	mov	r6, r0
 80091e4:	462b      	mov	r3, r5
 80091e6:	b99a      	cbnz	r2, 8009210 <scalbn+0x38>
 80091e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80091ec:	4323      	orrs	r3, r4
 80091ee:	d036      	beq.n	800925e <scalbn+0x86>
 80091f0:	4b39      	ldr	r3, [pc, #228]	; (80092d8 <scalbn+0x100>)
 80091f2:	4629      	mov	r1, r5
 80091f4:	ee10 0a10 	vmov	r0, s0
 80091f8:	2200      	movs	r2, #0
 80091fa:	f7f7 f9fd 	bl	80005f8 <__aeabi_dmul>
 80091fe:	4b37      	ldr	r3, [pc, #220]	; (80092dc <scalbn+0x104>)
 8009200:	429e      	cmp	r6, r3
 8009202:	4604      	mov	r4, r0
 8009204:	460d      	mov	r5, r1
 8009206:	da10      	bge.n	800922a <scalbn+0x52>
 8009208:	a32b      	add	r3, pc, #172	; (adr r3, 80092b8 <scalbn+0xe0>)
 800920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920e:	e03a      	b.n	8009286 <scalbn+0xae>
 8009210:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009214:	428a      	cmp	r2, r1
 8009216:	d10c      	bne.n	8009232 <scalbn+0x5a>
 8009218:	ee10 2a10 	vmov	r2, s0
 800921c:	4620      	mov	r0, r4
 800921e:	4629      	mov	r1, r5
 8009220:	f7f7 f834 	bl	800028c <__adddf3>
 8009224:	4604      	mov	r4, r0
 8009226:	460d      	mov	r5, r1
 8009228:	e019      	b.n	800925e <scalbn+0x86>
 800922a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800922e:	460b      	mov	r3, r1
 8009230:	3a36      	subs	r2, #54	; 0x36
 8009232:	4432      	add	r2, r6
 8009234:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009238:	428a      	cmp	r2, r1
 800923a:	dd08      	ble.n	800924e <scalbn+0x76>
 800923c:	2d00      	cmp	r5, #0
 800923e:	a120      	add	r1, pc, #128	; (adr r1, 80092c0 <scalbn+0xe8>)
 8009240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009244:	da1c      	bge.n	8009280 <scalbn+0xa8>
 8009246:	a120      	add	r1, pc, #128	; (adr r1, 80092c8 <scalbn+0xf0>)
 8009248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800924c:	e018      	b.n	8009280 <scalbn+0xa8>
 800924e:	2a00      	cmp	r2, #0
 8009250:	dd08      	ble.n	8009264 <scalbn+0x8c>
 8009252:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009256:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800925a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800925e:	ec45 4b10 	vmov	d0, r4, r5
 8009262:	bd70      	pop	{r4, r5, r6, pc}
 8009264:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009268:	da19      	bge.n	800929e <scalbn+0xc6>
 800926a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800926e:	429e      	cmp	r6, r3
 8009270:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009274:	dd0a      	ble.n	800928c <scalbn+0xb4>
 8009276:	a112      	add	r1, pc, #72	; (adr r1, 80092c0 <scalbn+0xe8>)
 8009278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e2      	bne.n	8009246 <scalbn+0x6e>
 8009280:	a30f      	add	r3, pc, #60	; (adr r3, 80092c0 <scalbn+0xe8>)
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	f7f7 f9b7 	bl	80005f8 <__aeabi_dmul>
 800928a:	e7cb      	b.n	8009224 <scalbn+0x4c>
 800928c:	a10a      	add	r1, pc, #40	; (adr r1, 80092b8 <scalbn+0xe0>)
 800928e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0b8      	beq.n	8009208 <scalbn+0x30>
 8009296:	a10e      	add	r1, pc, #56	; (adr r1, 80092d0 <scalbn+0xf8>)
 8009298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800929c:	e7b4      	b.n	8009208 <scalbn+0x30>
 800929e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80092a2:	3236      	adds	r2, #54	; 0x36
 80092a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80092a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80092ac:	4620      	mov	r0, r4
 80092ae:	4b0c      	ldr	r3, [pc, #48]	; (80092e0 <scalbn+0x108>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	e7e8      	b.n	8009286 <scalbn+0xae>
 80092b4:	f3af 8000 	nop.w
 80092b8:	c2f8f359 	.word	0xc2f8f359
 80092bc:	01a56e1f 	.word	0x01a56e1f
 80092c0:	8800759c 	.word	0x8800759c
 80092c4:	7e37e43c 	.word	0x7e37e43c
 80092c8:	8800759c 	.word	0x8800759c
 80092cc:	fe37e43c 	.word	0xfe37e43c
 80092d0:	c2f8f359 	.word	0xc2f8f359
 80092d4:	81a56e1f 	.word	0x81a56e1f
 80092d8:	43500000 	.word	0x43500000
 80092dc:	ffff3cb0 	.word	0xffff3cb0
 80092e0:	3c900000 	.word	0x3c900000

080092e4 <_kill>:
 80092e4:	4b02      	ldr	r3, [pc, #8]	; (80092f0 <_kill+0xc>)
 80092e6:	2258      	movs	r2, #88	; 0x58
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	f04f 30ff 	mov.w	r0, #4294967295
 80092ee:	4770      	bx	lr
 80092f0:	200004b8 	.word	0x200004b8

080092f4 <_exit>:
 80092f4:	e7fe      	b.n	80092f4 <_exit>
	...

080092f8 <_init>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	bf00      	nop
 80092fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fe:	bc08      	pop	{r3}
 8009300:	469e      	mov	lr, r3
 8009302:	4770      	bx	lr

08009304 <_fini>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	bf00      	nop
 8009308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930a:	bc08      	pop	{r3}
 800930c:	469e      	mov	lr, r3
 800930e:	4770      	bx	lr
